# SYMBIONT Production Infrastructure
version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: symbiont_postgres
    environment:
      POSTGRES_DB: symbiont
      POSTGRES_USER: symbiont_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - symbiont_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U symbiont_user -d symbiont"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: symbiont_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - symbiont_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: symbiont_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://symbiont_user:${POSTGRES_PASSWORD}@postgres:5432/symbiont
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: https://symbiont.app
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - symbiont_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: symbiont_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - symbiont_network
    restart: unless-stopped

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: symbiont_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - symbiont_network
    restart: unless-stopped

  # Visualisation avec Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: symbiont_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - symbiont_network
    restart: unless-stopped

  # Backup automatique
  backup:
    image: kartoza/pg-backup:latest
    container_name: symbiont_backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: symbiont
      POSTGRES_USER: symbiont_user
      POSTGRES_PASS: ${POSTGRES_PASSWORD}
      BACKUP_FREQUENCY: "daily"
      BACKUP_RETENTION: 7
    volumes:
      - backup_data:/backup
    depends_on:
      - postgres
    networks:
      - symbiont_network
    restart: unless-stopped

  # Worker pour tâches asynchrones
  worker:
    build:
      context: ../backend
      dockerfile: Dockerfile.worker
    container_name: symbiont_worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://symbiont_user:${POSTGRES_PASSWORD}@postgres:5432/symbiont
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - symbiont_network
    restart: unless-stopped
    deploy:
      replicas: 2

networks:
  symbiont_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local 