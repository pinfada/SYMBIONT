4c231b5be0a67db639ca292c106242cc
"use strict";

/* istanbul ignore next */
function cov_8kizk2ni2() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/neural/NeuralMesh.ts";
  var hash = "777e83aa3ffa4d804c05ceeb263d4eced2b130b8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/neural/NeuralMesh.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 65
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "6": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "9": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "11": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 32
        }
      },
      "15": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 41
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "18": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "19": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 31
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "21": {
        start: {
          line: 45,
          column: 60
        },
        end: {
          line: 45,
          column: 76
        }
      },
      "22": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 46,
          column: 58
        }
      },
      "23": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 48,
          column: 61
        }
      },
      "24": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 61
        }
      },
      "25": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 60
        }
      },
      "26": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "27": {
        start: {
          line: 54,
          column: 25
        },
        end: {
          line: 54,
          column: 43
        }
      },
      "28": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 56,
          column: 38
        }
      },
      "29": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 38
        }
      },
      "30": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "31": {
        start: {
          line: 65,
          column: 25
        },
        end: {
          line: 65,
          column: 50
        }
      },
      "32": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 46
        }
      },
      "33": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "34": {
        start: {
          line: 68,
          column: 30
        },
        end: {
          line: 68,
          column: 76
        }
      },
      "35": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "36": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "37": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "38": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 82
        }
      },
      "39": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "40": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "41": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 80
        }
      },
      "42": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "43": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 32
        }
      },
      "44": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 100,
          column: 39
        }
      },
      "45": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 102,
          column: 46
        }
      },
      "46": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 46
        }
      },
      "47": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 31
        }
      },
      "48": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 38
        }
      },
      "49": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 10
        }
      },
      "50": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "51": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 21
        }
      },
      "52": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 77
        }
      },
      "53": {
        start: {
          line: 132,
          column: 59
        },
        end: {
          line: 132,
          column: 75
        }
      },
      "54": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 135,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 59
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 38
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 45,
            column: 55
          },
          end: {
            line: 45,
            column: 56
          }
        },
        loc: {
          start: {
            line: 45,
            column: 60
          },
          end: {
            line: 45,
            column: 76
          }
        },
        line: 45
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 62
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 76
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 91
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 22
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 15
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 108
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 13
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 114
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 26
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 123
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 132,
            column: 51
          },
          end: {
            line: 132,
            column: 52
          }
        },
        loc: {
          start: {
            line: 132,
            column: 59
          },
          end: {
            line: 132,
            column: 75
          }
        },
        line: 132
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 30
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 21,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 38
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 21,
            column: 40
          },
          end: {
            line: 21,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 53
          },
          end: {
            line: 21,
            column: 57
          }
        }],
        line: 21
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 33
          }
        }, {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 22,
            column: 56
          }
        }],
        line: 22
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 32,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 32,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 42
          }
        }],
        line: 31
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 43,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 43,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "9": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 48,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 48,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 56,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 56,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 62,
            column: 10
          },
          end: {
            line: 62,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 25
          },
          end: {
            line: 62,
            column: 29
          }
        }],
        line: 62
      },
      "12": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "13": {
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 20
          }
        }, {
          start: {
            line: 67,
            column: 24
          },
          end: {
            line: 67,
            column: 26
          }
        }],
        line: 67
      },
      "14": {
        loc: {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 76,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 18
          },
          end: {
            line: 76,
            column: 22
          }
        }],
        line: 76
      },
      "15": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "16": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "17": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 102,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 102,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/neural/NeuralMesh.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/neural/NeuralMesh.ts"],
      sourcesContent: ["import { SecureRandom } from '../../shared/utils/secureRandom';\n/**\r\n * NeuralMesh - Graphe neuronal orient\xE9 pour organisme artificiel\r\n * - N\u0153uds (neurones) avec activation\r\n * - Connexions pond\xE9r\xE9es (synapses)\r\n * - Propagation, stimulation, plasticit\xE9, mutation\r\n */\r\n\r\nexport type NodeId = string;\r\n\r\ninterface Node {\r\n  id: NodeId;\r\n  activation: number;\r\n  bias: number;\r\n  type: 'input' | 'hidden' | 'output';\r\n}\r\n\r\ninterface Connection {\r\n  from: NodeId;\r\n  to: NodeId;\r\n  weight: number;\r\n  plasticity: number; // taux d'adaptation\r\n}\r\n\r\nexport class NeuralMesh {\r\n  private nodes: Map<NodeId, Node> = new Map();\r\n  private connections: Connection[] = [];\r\n\r\n  /**\r\n   * Ajoute un n\u0153ud au r\xE9seau\r\n   */\r\n  public addNode(id: NodeId, type: 'input' | 'hidden' | 'output', bias = 0): void {\r\n    if (this.nodes.has(id)) throw new Error(`Node ${id} already exists`);\r\n    this.nodes.set(id, { id, activation: 0, bias, type });\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion pond\xE9r\xE9e\r\n   */\r\n  public addConnection(from: NodeId, to: NodeId, weight = 1, plasticity = 0.01): void {\r\n    if (!this.nodes.has(from) || !this.nodes.has(to)) throw new Error('Invalid node id');\r\n    this.connections.push({ from, to, weight, plasticity });\r\n  }\r\n\r\n  /**\r\n   * Stimule un n\u0153ud d'entr\xE9e\r\n   */\r\n  public stimulate(id: NodeId, value: number): void {\r\n    const node = this.nodes.get(id);\r\n    if (!node || node.type !== 'input') throw new Error('Can only stimulate input nodes');\r\n    node.activation = value;\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation dans le r\xE9seau (1 tick)\r\n   */\r\n  public propagate(): void {\r\n    // Calcul des activations pour chaque n\u0153ud (hors input)\r\n    const nextActivations: Map<NodeId, number> = new Map();\r\n    for (const node of this.nodes.values()) {\r\n      if (node.type === 'input') continue;\r\n      let sum = node.bias;\r\n      for (const conn of this.connections.filter(c => c.to === node.id)) {\r\n        const fromNode = this.nodes.get(conn.from);\r\n        if (fromNode) sum += fromNode.activation * conn.weight;\r\n      }\r\n      nextActivations.set(node.id, this.sigmoid(sum));\r\n    }\r\n    // Mise \xE0 jour des activations\r\n    for (const [id, act] of nextActivations.entries()) {\r\n      const node = this.nodes.get(id);\r\n      if (node) node.activation = act;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applique la plasticit\xE9 (ajustement des poids)\r\n   */\r\n  public adapt(learningRate = 0.01): void {\r\n    for (const conn of this.connections) {\r\n      // R\xE8gle de Hebb simplifi\xE9e : \u0394w = \u03B7 * pre * post\r\n      const from = this.nodes.get(conn.from);\r\n      const to = this.nodes.get(conn.to);\r\n      if (from && to) {\r\n        const delta = learningRate * from.activation * to.activation;\r\n        conn.weight += delta * conn.plasticity;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation al\xE9atoire (structurelle ou pond\xE9rale)\r\n   */\r\n  public mutate(rate = 0.05): void {\r\n    for (const conn of this.connections) {\r\n      if (SecureRandom.random() < rate) {\r\n        conn.weight += (SecureRandom.random() - 0.5) * 0.2;\r\n      }\r\n    }\r\n    for (const node of this.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * R\xE9initialise toutes les activations\r\n   */\r\n  public reset(): void {\r\n    for (const node of this.nodes.values()) {\r\n      node.activation = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re l'activation d'un n\u0153ud\r\n   */\r\n  public getActivation(id: NodeId): number {\r\n    const node = this.nodes.get(id);\r\n    if (!node) throw new Error('Node not found');\r\n    return node.activation;\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation (sigmo\xEFde)\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: this.connections\r\n    };\r\n  }\r\n\r\n  /**\r\n   * It\xE8re sur chaque connexion du r\xE9seau\r\n   */\r\n  public forEachConnection(fn: (conn: Connection) => void): void {\r\n    for (const conn of this.connections) {\r\n      fn(conn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime les connexions qui v\xE9rifient un pr\xE9dicat\r\n   */\r\n  public removeConnections(predicate: (conn: Connection) => boolean): void {\r\n    this.connections = this.connections.filter(conn => !predicate(conn));\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "777e83aa3ffa4d804c05ceeb263d4eced2b130b8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8kizk2ni2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8kizk2ni2();
cov_8kizk2ni2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_8kizk2ni2().s[1]++;
exports.NeuralMesh = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_8kizk2ni2().s[2]++, require("../../shared/utils/secureRandom"));
class NeuralMesh {
  constructor() {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[0]++;
    cov_8kizk2ni2().s[3]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_8kizk2ni2().s[4]++;
    this.connections = [];
  }
  /**
   * Ajoute un nœud au réseau
   */
  addNode(id, type, bias =
  /* istanbul ignore next */
  (cov_8kizk2ni2().b[0][0]++, 0)) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[1]++;
    cov_8kizk2ni2().s[5]++;
    if (this.nodes.has(id)) {
      /* istanbul ignore next */
      cov_8kizk2ni2().b[1][0]++;
      cov_8kizk2ni2().s[6]++;
      throw new Error(`Node ${id} already exists`);
    } else
    /* istanbul ignore next */
    {
      cov_8kizk2ni2().b[1][1]++;
    }
    cov_8kizk2ni2().s[7]++;
    this.nodes.set(id, {
      id,
      activation: 0,
      bias,
      type
    });
  }
  /**
   * Ajoute une connexion pondérée
   */
  addConnection(from, to, weight =
  /* istanbul ignore next */
  (cov_8kizk2ni2().b[2][0]++, 1), plasticity =
  /* istanbul ignore next */
  (cov_8kizk2ni2().b[3][0]++, 0.01)) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[2]++;
    cov_8kizk2ni2().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_8kizk2ni2().b[5][0]++, !this.nodes.has(from)) ||
    /* istanbul ignore next */
    (cov_8kizk2ni2().b[5][1]++, !this.nodes.has(to))) {
      /* istanbul ignore next */
      cov_8kizk2ni2().b[4][0]++;
      cov_8kizk2ni2().s[9]++;
      throw new Error('Invalid node id');
    } else
    /* istanbul ignore next */
    {
      cov_8kizk2ni2().b[4][1]++;
    }
    cov_8kizk2ni2().s[10]++;
    this.connections.push({
      from,
      to,
      weight,
      plasticity
    });
  }
  /**
   * Stimule un nœud d'entrée
   */
  stimulate(id, value) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[3]++;
    const node =
    /* istanbul ignore next */
    (cov_8kizk2ni2().s[11]++, this.nodes.get(id));
    /* istanbul ignore next */
    cov_8kizk2ni2().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_8kizk2ni2().b[7][0]++, !node) ||
    /* istanbul ignore next */
    (cov_8kizk2ni2().b[7][1]++, node.type !== 'input')) {
      /* istanbul ignore next */
      cov_8kizk2ni2().b[6][0]++;
      cov_8kizk2ni2().s[13]++;
      throw new Error('Can only stimulate input nodes');
    } else
    /* istanbul ignore next */
    {
      cov_8kizk2ni2().b[6][1]++;
    }
    cov_8kizk2ni2().s[14]++;
    node.activation = value;
  }
  /**
   * Propage l'activation dans le réseau (1 tick)
   */
  propagate() {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[4]++;
    // Calcul des activations pour chaque nœud (hors input)
    const nextActivations =
    /* istanbul ignore next */
    (cov_8kizk2ni2().s[15]++, new Map());
    /* istanbul ignore next */
    cov_8kizk2ni2().s[16]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_8kizk2ni2().s[17]++;
      if (node.type === 'input') {
        /* istanbul ignore next */
        cov_8kizk2ni2().b[8][0]++;
        cov_8kizk2ni2().s[18]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_8kizk2ni2().b[8][1]++;
      }
      let sum =
      /* istanbul ignore next */
      (cov_8kizk2ni2().s[19]++, node.bias);
      /* istanbul ignore next */
      cov_8kizk2ni2().s[20]++;
      for (const conn of this.connections.filter(c => {
        /* istanbul ignore next */
        cov_8kizk2ni2().f[5]++;
        cov_8kizk2ni2().s[21]++;
        return c.to === node.id;
      })) {
        const fromNode =
        /* istanbul ignore next */
        (cov_8kizk2ni2().s[22]++, this.nodes.get(conn.from));
        /* istanbul ignore next */
        cov_8kizk2ni2().s[23]++;
        if (fromNode) {
          /* istanbul ignore next */
          cov_8kizk2ni2().b[9][0]++;
          cov_8kizk2ni2().s[24]++;
          sum += fromNode.activation * conn.weight;
        } else
        /* istanbul ignore next */
        {
          cov_8kizk2ni2().b[9][1]++;
        }
      }
      /* istanbul ignore next */
      cov_8kizk2ni2().s[25]++;
      nextActivations.set(node.id, this.sigmoid(sum));
    }
    // Mise à jour des activations
    /* istanbul ignore next */
    cov_8kizk2ni2().s[26]++;
    for (const [id, act] of nextActivations.entries()) {
      const node =
      /* istanbul ignore next */
      (cov_8kizk2ni2().s[27]++, this.nodes.get(id));
      /* istanbul ignore next */
      cov_8kizk2ni2().s[28]++;
      if (node) {
        /* istanbul ignore next */
        cov_8kizk2ni2().b[10][0]++;
        cov_8kizk2ni2().s[29]++;
        node.activation = act;
      } else
      /* istanbul ignore next */
      {
        cov_8kizk2ni2().b[10][1]++;
      }
    }
  }
  /**
   * Applique la plasticité (ajustement des poids)
   */
  adapt(learningRate =
  /* istanbul ignore next */
  (cov_8kizk2ni2().b[11][0]++, 0.01)) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[6]++;
    cov_8kizk2ni2().s[30]++;
    for (const conn of this.connections) {
      // Règle de Hebb simplifiée : Δw = η * pre * post
      const from =
      /* istanbul ignore next */
      (cov_8kizk2ni2().s[31]++, this.nodes.get(conn.from));
      const to =
      /* istanbul ignore next */
      (cov_8kizk2ni2().s[32]++, this.nodes.get(conn.to));
      /* istanbul ignore next */
      cov_8kizk2ni2().s[33]++;
      if (
      /* istanbul ignore next */
      (cov_8kizk2ni2().b[13][0]++, from) &&
      /* istanbul ignore next */
      (cov_8kizk2ni2().b[13][1]++, to)) {
        /* istanbul ignore next */
        cov_8kizk2ni2().b[12][0]++;
        const delta =
        /* istanbul ignore next */
        (cov_8kizk2ni2().s[34]++, learningRate * from.activation * to.activation);
        /* istanbul ignore next */
        cov_8kizk2ni2().s[35]++;
        conn.weight += delta * conn.plasticity;
      } else
      /* istanbul ignore next */
      {
        cov_8kizk2ni2().b[12][1]++;
      }
    }
  }
  /**
   * Applique une mutation aléatoire (structurelle ou pondérale)
   */
  mutate(rate =
  /* istanbul ignore next */
  (cov_8kizk2ni2().b[14][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[7]++;
    cov_8kizk2ni2().s[36]++;
    for (const conn of this.connections) {
      /* istanbul ignore next */
      cov_8kizk2ni2().s[37]++;
      if (secureRandom_1.SecureRandom.random() < rate) {
        /* istanbul ignore next */
        cov_8kizk2ni2().b[15][0]++;
        cov_8kizk2ni2().s[38]++;
        conn.weight += (secureRandom_1.SecureRandom.random() - 0.5) * 0.2;
      } else
      /* istanbul ignore next */
      {
        cov_8kizk2ni2().b[15][1]++;
      }
    }
    /* istanbul ignore next */
    cov_8kizk2ni2().s[39]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_8kizk2ni2().s[40]++;
      if (secureRandom_1.SecureRandom.random() < rate) {
        /* istanbul ignore next */
        cov_8kizk2ni2().b[16][0]++;
        cov_8kizk2ni2().s[41]++;
        node.bias += (secureRandom_1.SecureRandom.random() - 0.5) * 0.1;
      } else
      /* istanbul ignore next */
      {
        cov_8kizk2ni2().b[16][1]++;
      }
    }
  }
  /**
   * Réinitialise toutes les activations
   */
  reset() {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[8]++;
    cov_8kizk2ni2().s[42]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_8kizk2ni2().s[43]++;
      node.activation = 0;
    }
  }
  /**
   * Récupère l'activation d'un nœud
   */
  getActivation(id) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[9]++;
    const node =
    /* istanbul ignore next */
    (cov_8kizk2ni2().s[44]++, this.nodes.get(id));
    /* istanbul ignore next */
    cov_8kizk2ni2().s[45]++;
    if (!node) {
      /* istanbul ignore next */
      cov_8kizk2ni2().b[17][0]++;
      cov_8kizk2ni2().s[46]++;
      throw new Error('Node not found');
    } else
    /* istanbul ignore next */
    {
      cov_8kizk2ni2().b[17][1]++;
    }
    cov_8kizk2ni2().s[47]++;
    return node.activation;
  }
  /**
   * Fonction d'activation (sigmoïde)
   */
  sigmoid(x) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[10]++;
    cov_8kizk2ni2().s[48]++;
    return 1 / (1 + Math.exp(-x));
  }
  /**
   * Export JSON pour debug/visualisation
   */
  toJSON() {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[11]++;
    cov_8kizk2ni2().s[49]++;
    return {
      nodes: Array.from(this.nodes.values()),
      connections: this.connections
    };
  }
  /**
   * Itère sur chaque connexion du réseau
   */
  forEachConnection(fn) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[12]++;
    cov_8kizk2ni2().s[50]++;
    for (const conn of this.connections) {
      /* istanbul ignore next */
      cov_8kizk2ni2().s[51]++;
      fn(conn);
    }
  }
  /**
   * Supprime les connexions qui vérifient un prédicat
   */
  removeConnections(predicate) {
    /* istanbul ignore next */
    cov_8kizk2ni2().f[13]++;
    cov_8kizk2ni2().s[52]++;
    this.connections = this.connections.filter(conn => {
      /* istanbul ignore next */
      cov_8kizk2ni2().f[14]++;
      cov_8kizk2ni2().s[53]++;
      return !predicate(conn);
    });
  }
}
/* istanbul ignore next */
cov_8kizk2ni2().s[54]++;
exports.NeuralMesh = NeuralMesh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,