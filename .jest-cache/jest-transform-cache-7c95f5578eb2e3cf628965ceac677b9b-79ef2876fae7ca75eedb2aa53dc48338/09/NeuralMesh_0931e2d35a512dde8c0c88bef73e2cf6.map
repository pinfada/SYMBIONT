{"version":3,"names":["cov_8kizk2ni2","actualCoverage","s","secureRandom_1","require","NeuralMesh","constructor","f","nodes","Map","connections","addNode","id","type","bias","b","has","Error","set","activation","addConnection","from","to","weight","plasticity","push","stimulate","value","node","get","propagate","nextActivations","values","sum","conn","filter","c","fromNode","sigmoid","act","entries","adapt","learningRate","delta","mutate","rate","SecureRandom","random","reset","getActivation","x","Math","exp","toJSON","Array","forEachConnection","fn","removeConnections","predicate","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/neural/NeuralMesh.ts"],"sourcesContent":["import { SecureRandom } from '../../shared/utils/secureRandom';\n/**\r\n * NeuralMesh - Graphe neuronal orienté pour organisme artificiel\r\n * - Nœuds (neurones) avec activation\r\n * - Connexions pondérées (synapses)\r\n * - Propagation, stimulation, plasticité, mutation\r\n */\r\n\r\nexport type NodeId = string;\r\n\r\ninterface Node {\r\n  id: NodeId;\r\n  activation: number;\r\n  bias: number;\r\n  type: 'input' | 'hidden' | 'output';\r\n}\r\n\r\ninterface Connection {\r\n  from: NodeId;\r\n  to: NodeId;\r\n  weight: number;\r\n  plasticity: number; // taux d'adaptation\r\n}\r\n\r\nexport class NeuralMesh {\r\n  private nodes: Map<NodeId, Node> = new Map();\r\n  private connections: Connection[] = [];\r\n\r\n  /**\r\n   * Ajoute un nœud au réseau\r\n   */\r\n  public addNode(id: NodeId, type: 'input' | 'hidden' | 'output', bias = 0): void {\r\n    if (this.nodes.has(id)) throw new Error(`Node ${id} already exists`);\r\n    this.nodes.set(id, { id, activation: 0, bias, type });\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion pondérée\r\n   */\r\n  public addConnection(from: NodeId, to: NodeId, weight = 1, plasticity = 0.01): void {\r\n    if (!this.nodes.has(from) || !this.nodes.has(to)) throw new Error('Invalid node id');\r\n    this.connections.push({ from, to, weight, plasticity });\r\n  }\r\n\r\n  /**\r\n   * Stimule un nœud d'entrée\r\n   */\r\n  public stimulate(id: NodeId, value: number): void {\r\n    const node = this.nodes.get(id);\r\n    if (!node || node.type !== 'input') throw new Error('Can only stimulate input nodes');\r\n    node.activation = value;\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation dans le réseau (1 tick)\r\n   */\r\n  public propagate(): void {\r\n    // Calcul des activations pour chaque nœud (hors input)\r\n    const nextActivations: Map<NodeId, number> = new Map();\r\n    for (const node of this.nodes.values()) {\r\n      if (node.type === 'input') continue;\r\n      let sum = node.bias;\r\n      for (const conn of this.connections.filter(c => c.to === node.id)) {\r\n        const fromNode = this.nodes.get(conn.from);\r\n        if (fromNode) sum += fromNode.activation * conn.weight;\r\n      }\r\n      nextActivations.set(node.id, this.sigmoid(sum));\r\n    }\r\n    // Mise à jour des activations\r\n    for (const [id, act] of nextActivations.entries()) {\r\n      const node = this.nodes.get(id);\r\n      if (node) node.activation = act;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applique la plasticité (ajustement des poids)\r\n   */\r\n  public adapt(learningRate = 0.01): void {\r\n    for (const conn of this.connections) {\r\n      // Règle de Hebb simplifiée : Δw = η * pre * post\r\n      const from = this.nodes.get(conn.from);\r\n      const to = this.nodes.get(conn.to);\r\n      if (from && to) {\r\n        const delta = learningRate * from.activation * to.activation;\r\n        conn.weight += delta * conn.plasticity;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation aléatoire (structurelle ou pondérale)\r\n   */\r\n  public mutate(rate = 0.05): void {\r\n    for (const conn of this.connections) {\r\n      if (SecureRandom.random() < rate) {\r\n        conn.weight += (SecureRandom.random() - 0.5) * 0.2;\r\n      }\r\n    }\r\n    for (const node of this.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Réinitialise toutes les activations\r\n   */\r\n  public reset(): void {\r\n    for (const node of this.nodes.values()) {\r\n      node.activation = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère l'activation d'un nœud\r\n   */\r\n  public getActivation(id: NodeId): number {\r\n    const node = this.nodes.get(id);\r\n    if (!node) throw new Error('Node not found');\r\n    return node.activation;\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation (sigmoïde)\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: this.connections\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Itère sur chaque connexion du réseau\r\n   */\r\n  public forEachConnection(fn: (conn: Connection) => void): void {\r\n    for (const conn of this.connections) {\r\n      fn(conn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime les connexions qui vérifient un prédicat\r\n   */\r\n  public removeConnections(predicate: (conn: Connection) => boolean): void {\r\n    this.connections = this.connections.filter(conn => !predicate(conn));\r\n  }\r\n}"],"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","ignoreList":[]}