{"version":3,"names":["cov_1kgk1e008k","actualCoverage","s","ErrorHandler_1","require","MutationBatcher_1","OrganismCore","constructor","dna","traits","createMesh","f","interpreter","id","Math","random","toString","substr","isBooted","validation","validateInput","isValid","b","Error","errors","join","mesh","neuralMesh","NeuralMesh","curiosity","focus","rhythm","empathy","creativity","energy","harmony","wisdom","health","lastMutation","Date","now","metabolismRate","mutationBatcher","MutationBatcher","processBatchedMutation","bind","debounceMs","maxBatchSize","maxWaitTimeMs","combinationStrategy","initializeNeuralNetwork","catch","error","errorHandler","logSimpleError","dnaValidation","validateType","required","min","pattern","test","warnings","context","component","method","timestamp","severity","details","fieldName","invalidCharacters","replace","key","value","Object","entries","traitValidation","max","withRetry","initialize","stimulate","maxRetries","backoffMs","shouldRetry","attempt","update","deltaTime","safeExecute","propagate","updateEnergy","updateHealth","evolveTraits","undefined","neuralActivity","getNeuralActivity","energyCost","activity","connectionStrength","getConnectionStrength","evolutionRate","keys","forEach","typedKey","inputId","inputValidation","valueValidation","batch","safeExecuteAsync","mutate","combinedRate","traitMutationRate","mutation","toFixed","requestCount","rate","priority","mutationId","addMutation","flushMutations","flushBatch","feed","amount","getTraits","setTraits","isNaN","getState","generation","visualDNA","mutations","createdAt","birthTime","socialConnections","memoryFragments","getPerformanceMetrics","baseMetrics","measurePerformance","calculateNeuralActivity","calculateConnectionStrength","mutationStats","getStatistics","err","logger","organismId","cpu","memory","toJSON","getShaderParameters","time","boot","debug","addNode","addConnection","info","message","hibernate","dispose","suspend","console","log","cpuUsage","getCPUUsage","memoryUsage","getMemoryUsage","handleBootError","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts"],"sourcesContent":["import { OrganismState, OrganismTraits } from '../shared/types/organism';\r\nimport { INeuralMesh, PerformanceMetrics } from './interfaces/INeuralMesh';\r\nimport { IOrganismCore, OrganismJSON, ShaderParameters } from './interfaces/IOrganismCore';\r\nimport { DNAInterpreter, ValidationResult } from '../types/core';\r\nimport { errorHandler } from './utils/ErrorHandler';\r\nimport { MutationBatcher, BatchedMutation } from './utils/MutationBatcher';\r\n\r\nexport class OrganismCore implements IOrganismCore {\r\n  private mesh: INeuralMesh;\r\n  private dna: string;\r\n  // @ts-expect-error Interpréteur réservé pour usage futur\r\n  private interpreter: DNAInterpreter | null = null;\r\n  private traits: OrganismTraits;\r\n  private energy: number;\r\n  private health: number;\r\n  private lastMutation: number;\r\n  private metabolismRate: number;\r\n  private mutationBatcher: MutationBatcher;\r\n  private logger?: { debug: Function; info: Function; error: Function }; // Logger optionnel\r\n  private id: string = Math.random().toString(36).substr(2, 9); // ID unique\r\n  private neuralMesh?: INeuralMesh; // Référence pour boot\r\n  // @ts-expect-error État réservé pour usage futur\r\n  private isBooted: boolean = false; // État boot\r\n\r\n  constructor(dna: string, traits?: Partial<OrganismTraits>, createMesh?: () => INeuralMesh) {\r\n    // Validation d'entrée stricte avec ErrorHandler\r\n    const validation = this.validateInput(dna, traits);\r\n    if (!validation.isValid) {\r\n      throw new Error(`OrganismCore creation failed: ${validation.errors.join(', ')}`);\r\n    }\r\n\r\n    this.dna = dna;\r\n    \r\n    // Utilisation de l'injection de dépendances\r\n    if (createMesh) {\r\n      this.mesh = createMesh();\r\n      this.neuralMesh = this.mesh; // Initialise la référence pour boot()\r\n    } else {\r\n      // Fallback pour compatibilité - import dynamique\r\n      const { NeuralMesh } = require('./NeuralMesh');\r\n      this.mesh = new NeuralMesh();\r\n      this.neuralMesh = this.mesh; // Initialise la référence pour boot()\r\n    }\r\n    \r\n    this.traits = {\r\n      curiosity: 0.5,\r\n      focus: 0.5,\r\n      rhythm: 0.5,\r\n      empathy: 0.5,\r\n      creativity: 0.5,\r\n      energy: 0.5,\r\n      harmony: 0.5,\r\n      wisdom: 0.1,\r\n      ...traits\r\n    };\r\n    this.energy = 1.0;\r\n    this.health = 1.0;\r\n    this.lastMutation = Date.now();\r\n    this.metabolismRate = 0.01;\r\n    \r\n    // Initialise le système de batching des mutations\r\n    this.mutationBatcher = new MutationBatcher(\r\n      this.processBatchedMutation.bind(this),\r\n      {\r\n        debounceMs: 100, // 100ms debounce pour les mutations\r\n        maxBatchSize: 5,\r\n        maxWaitTimeMs: 500,\r\n        combinationStrategy: 'weighted'\r\n      }\r\n    );\r\n    \r\n    this.initializeNeuralNetwork().catch(error => {\r\n      errorHandler.logSimpleError('OrganismCore', 'constructor', error, 'error');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Valide les paramètres d'entrée avec ErrorHandler\r\n   */\r\n  private validateInput(dna: string, traits?: Partial<OrganismTraits>): ValidationResult {\r\n    // Validation DNA - vérification de base\r\n    const dnaValidation = errorHandler.validateType(\r\n      dna, 'string', { required: true, min: 10, pattern: /^[ATCG]+$/i }, \r\n      'dna', 'OrganismCore', 'validateInput'\r\n    );\r\n    \r\n    if (!dnaValidation.isValid) {\r\n      return dnaValidation;\r\n    }\r\n\r\n    // Validation supplémentaire DNA - caractères valides seulement\r\n    if (!/^[ATCG]+$/i.test(dna)) {\r\n      return {\r\n        isValid: false,\r\n        errors: ['DNA must contain only valid nucleotide characters (A, T, C, G)'],\r\n        warnings: [],\r\n        context: {\r\n          component: 'OrganismCore',\r\n          method: 'validateInput',\r\n          timestamp: Date.now(),\r\n          severity: 'error',\r\n          details: { fieldName: 'dna', invalidCharacters: dna.replace(/[ATCG]/gi, '') }\r\n        }\r\n      };\r\n    }\r\n\r\n    // Validation traits\r\n    if (traits) {\r\n      for (const [key, value] of Object.entries(traits)) {\r\n        const traitValidation = errorHandler.validateType(\r\n          value, 'number', { required: true, min: 0, max: 1 },\r\n          `trait.${key}`, 'OrganismCore', 'validateInput'\r\n        );\r\n        \r\n        if (!traitValidation.isValid) {\r\n          return traitValidation;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { isValid: true, errors: [], warnings: [] };\r\n  }\r\n\r\n  /**\r\n   * Initialise le réseau neuronal avec gestion d'erreurs robuste\r\n   */\r\n  private async initializeNeuralNetwork(): Promise<void> {\r\n    return errorHandler.withRetry(\r\n      async () => {\r\n        await this.mesh.initialize();\r\n        \r\n        // Configure network based on traits\r\n        this.mesh.stimulate('sensory_input', this.traits.curiosity);\r\n        this.mesh.stimulate('memory_input', this.traits.focus);\r\n      },\r\n      {\r\n        maxRetries: 3,\r\n        backoffMs: 100,\r\n        // @ts-expect-error Paramètre réservé pour usage futur\r\n        shouldRetry: (error, attempt) => attempt < 3\r\n      },\r\n      { component: 'OrganismCore', method: 'initializeNeuralNetwork' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met à jour l'état de l'organisme (appelé périodiquement)\r\n   */\r\n  public update(deltaTime: number = 1): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation des paramètres\r\n        const validation = errorHandler.validateType(\r\n          deltaTime, 'number', { required: true, min: 0.001, max: 1000 },\r\n          'deltaTime', 'OrganismCore', 'update'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid deltaTime: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // Neural processing\r\n        this.mesh.propagate();\r\n        \r\n        // Energy management\r\n        this.updateEnergy(deltaTime);\r\n        \r\n        // Health management\r\n        this.updateHealth();\r\n        \r\n        // Trait evolution based on neural activity\r\n        this.evolveTraits();\r\n      },\r\n      undefined, // No fallback for update\r\n      { component: 'OrganismCore', method: 'update' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met à jour l'énergie basée sur l'activité neurale\r\n   */\r\n  private updateEnergy(deltaTime: number): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const neuralActivity = this.mesh.getNeuralActivity();\r\n        const energyCost = neuralActivity * this.metabolismRate * deltaTime;\r\n        \r\n        this.energy = Math.max(0, Math.min(1, this.energy - energyCost));\r\n        \r\n        // Low energy affects health\r\n        if (this.energy < 0.2) {\r\n          this.health *= 0.999;\r\n        }\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'updateEnergy' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met à jour la santé basée sur les conditions actuelles\r\n   */\r\n  private updateHealth(): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Health recovery when energy is high\r\n        if (this.energy > 0.8) {\r\n          this.health = Math.min(1, this.health + 0.001);\r\n        }\r\n        \r\n        // Ensure health doesn't drop below 0\r\n        this.health = Math.max(0, this.health);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'updateHealth' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fait évoluer les traits basés sur l'activité neurale\r\n   */\r\n  private evolveTraits(): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const activity = this.mesh.getNeuralActivity();\r\n        const connectionStrength = this.mesh.getConnectionStrength();\r\n        \r\n        // Subtle trait evolution\r\n        const evolutionRate = 0.001;\r\n        \r\n        this.traits.focus += (activity - 0.5) * evolutionRate;\r\n        this.traits.creativity += (connectionStrength - 0.5) * evolutionRate;\r\n        \r\n        // Clamp traits to valid range\r\n        Object.keys(this.traits).forEach(key => {\r\n          const typedKey = key as keyof OrganismTraits;\r\n          this.traits[typedKey] = Math.max(0, Math.min(1, this.traits[typedKey]));\r\n        });\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'evolveTraits' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stimule le réseau (ex : perception sensorielle)\r\n   */\r\n  public stimulate(inputId: string, value: number): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation des paramètres avec ErrorHandler\r\n        const inputValidation = errorHandler.validateType(\r\n          inputId, 'string', { required: true },\r\n          'inputId', 'OrganismCore', 'stimulate'\r\n        );\r\n        \r\n        const valueValidation = errorHandler.validateType(\r\n          value, 'number', { required: true },\r\n          'value', 'OrganismCore', 'stimulate'\r\n        );\r\n\r\n        if (!inputValidation.isValid || !valueValidation.isValid) {\r\n          throw new Error('Invalid stimulate parameters');\r\n        }\r\n\r\n        this.mesh.stimulate(inputId, value);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'stimulate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Traite une mutation batchée\r\n   */\r\n  private async processBatchedMutation(batch: BatchedMutation): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        // Applique la mutation au réseau neuronal\r\n        await this.mesh.mutate(batch.combinedRate);\r\n        \r\n        // Applique des mutations aux traits basées sur le batch\r\n        const traitMutationRate = batch.combinedRate * 0.5; // Moins agressif pour les traits\r\n        \r\n        Object.keys(this.traits).forEach(key => {\r\n          if (Math.random() < traitMutationRate) {\r\n            const mutation = (Math.random() - 0.5) * 0.1 * batch.combinedRate;\r\n            const typedKey = key as keyof OrganismTraits;\r\n            this.traits[typedKey] = Math.max(0, Math.min(1, \r\n              this.traits[typedKey] + mutation));\r\n          }\r\n        });\r\n        \r\n        this.lastMutation = Date.now();\r\n        \r\n        errorHandler.logSimpleError('OrganismCore', 'processBatchedMutation', \r\n          `Processed batched mutation: rate=${batch.combinedRate.toFixed(3)}, requests=${batch.requestCount}`, 'info');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'processBatchedMutation' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation (neural et potentiellement ADN) - Version optimisée avec batching\r\n   */\r\n  public mutate(rate: number = 0.05): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation du taux de mutation\r\n        const validation = errorHandler.validateType(\r\n          rate, 'number', { required: true, min: 0, max: 1 },\r\n          'rate', 'OrganismCore', 'mutate'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid mutation rate: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // Détermine la priorité basée sur le taux de mutation\r\n        let priority: 'low' | 'normal' | 'high' = 'normal';\r\n        if (rate > 0.3) priority = 'high';\r\n        else if (rate < 0.01) priority = 'low';\r\n\r\n        // Ajoute la mutation au batch au lieu de l'exécuter immédiatement\r\n        const mutationId = this.mutationBatcher.addMutation(rate, priority);\r\n        \r\n        errorHandler.logSimpleError('OrganismCore', 'mutate', \r\n          `Queued mutation: id=${mutationId}, rate=${rate}, priority=${priority}`, 'debug');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'mutate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Force l'application immédiate de toutes les mutations en attente\r\n   */\r\n  public async flushMutations(): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        await this.mutationBatcher.flushBatch();\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'flushMutations' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nourrit l'organisme pour restaurer l'énergie\r\n   */\r\n  public feed(amount: number = 0.3): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const validation = errorHandler.validateType(\r\n          amount, 'number', { required: true, min: 0, max: 1 },\r\n          'amount', 'OrganismCore', 'feed'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid feed amount: ${validation.errors.join(', ')}`);\r\n        }\r\n        \r\n        this.energy = Math.min(1, this.energy + amount);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'feed' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Récupère les traits courants\r\n   */\r\n  public getTraits(): OrganismTraits {\r\n    return { ...this.traits };\r\n  }\r\n\r\n  /**\r\n   * Définit de nouveaux traits\r\n   */\r\n  public setTraits(traits: Partial<OrganismTraits>): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const validation = this.validateInput(this.dna, traits);\r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid traits: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // On fusionne en s'assurant que chaque champ est bien un nombre\r\n        Object.keys(traits).forEach(key => {\r\n          const value = traits[key as keyof OrganismTraits];\r\n          if (typeof value === 'number' && !isNaN(value)) {\r\n            this.traits[key as keyof OrganismTraits] = value;\r\n          }\r\n        });\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'setTraits' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Récupère l'état global de l'organisme\r\n   */\r\n  public getState(): OrganismState {\r\n    return {\r\n      id: 'core',\r\n      generation: 1,\r\n      health: this.health,\r\n      energy: this.energy,\r\n      traits: this.getTraits(),\r\n      visualDNA: this.dna,\r\n      lastMutation: this.lastMutation,\r\n      mutations: [],\r\n      createdAt: Date.now(),\r\n      dna: this.dna,\r\n      birthTime: Date.now(),\r\n      socialConnections: [],\r\n      memoryFragments: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Récupère les métriques de performance - Version étendue avec mutations\r\n   */\r\n  public async getPerformanceMetrics(): Promise<PerformanceMetrics & { \r\n    neuralActivity: number;\r\n    connectionStrength: number;\r\n    mutationStats: any;\r\n  }> {\r\n    try {\r\n      const baseMetrics = await this.measurePerformance();\r\n      \r\n      return {\r\n        ...baseMetrics,\r\n        neuralActivity: this.calculateNeuralActivity(),\r\n        connectionStrength: this.calculateConnectionStrength(),\r\n        mutationStats: this.mutationBatcher.getStatistics()\r\n      };\r\n    } catch (err) {\r\n      this.logger?.error('Failed to get performance metrics', { organismId: this.id, err });\r\n      \r\n      return {\r\n        cpu: 0,\r\n        memory: 0,\r\n        neuralActivity: 0,\r\n        connectionStrength: 0,\r\n        mutationStats: this.mutationBatcher.getStatistics()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export JSON typé pour debug/visualisation\r\n   */\r\n  public toJSON(): OrganismJSON {\r\n    return {\r\n      mesh: this.mesh.toJSON(),\r\n      traits: this.traits,\r\n      energy: this.energy,\r\n      health: this.health,\r\n      dna: this.dna,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Récupère les paramètres shaders courants (pour WebGL)\r\n   */\r\n  public getShaderParameters(): ShaderParameters {\r\n    // Return shader parameters based on current organism state\r\n    return {\r\n      energy: this.energy,\r\n      health: this.health,\r\n      neuralActivity: this.mesh.getNeuralActivity(),\r\n      creativity: this.traits.creativity,\r\n      focus: this.traits.focus,\r\n      time: Date.now() / 1000\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise l'organisme\r\n   */\r\n  public async boot(): Promise<void> {\r\n    try {\r\n      this.logger?.debug('Starting organism boot sequence', this.id);\r\n      \r\n      // Initialize neural mesh\r\n      if (!this.neuralMesh) {\r\n        throw new Error('Neural mesh not provided');\r\n      }\r\n      \r\n      // Add basic neural network structure\r\n      this.neuralMesh.addNode('sensory_input', 'input');\r\n      this.neuralMesh.addNode('memory_input', 'input');\r\n      this.neuralMesh.addNode('decision_output', 'output');\r\n      this.neuralMesh.addNode('emotion_output', 'output');\r\n      \r\n      // Connect inputs to outputs\r\n      this.neuralMesh.addConnection('sensory_input', 'decision_output', 0.5);\r\n      this.neuralMesh.addConnection('memory_input', 'emotion_output', 0.3);\r\n      \r\n      this.isBooted = true;\r\n      this.logger?.info('Organism boot completed successfully', this.id);\r\n    } catch (error) {\r\n      this.logger?.error('Failed to boot organism', { organismId: this.id, error });\r\n      errorHandler.logSimpleError('OrganismCore', 'boot', error instanceof Error ? error.message : 'Boot failed', 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met l'organisme en hibernation - Version étendue avec nettoyage du batcher\r\n   */\r\n  public async hibernate(): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        // Traite les mutations en attente avant hibernation\r\n        await this.mutationBatcher.flushBatch();\r\n        \r\n        // Nettoie le batcher\r\n        this.mutationBatcher.dispose();\r\n        \r\n        await this.mesh.suspend();\r\n        \r\n        console.log('Organism core hibernating...');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'hibernate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Mesure les performances de base\r\n   */\r\n  private async measurePerformance(): Promise<PerformanceMetrics> {\r\n    try {\r\n      const cpuUsage = await this.mesh.getCPUUsage();\r\n      const memoryUsage = await this.mesh.getMemoryUsage();\r\n      \r\n      return {\r\n        cpu: cpuUsage,\r\n        memory: memoryUsage,\r\n        neuralActivity: this.calculateNeuralActivity(),\r\n        connectionStrength: this.calculateConnectionStrength()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        cpu: 0,\r\n        memory: 0,\r\n        neuralActivity: 0,\r\n        connectionStrength: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule l'activité neurale\r\n   */\r\n  private calculateNeuralActivity(): number {\r\n    try {\r\n      return this.mesh.getNeuralActivity();\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule la force de connexion\r\n   */\r\n  private calculateConnectionStrength(): number {\r\n    try {\r\n      return this.mesh.getConnectionStrength();\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Méthode réservée pour usage futur\r\n  private handleBootError(): void {\r\n    // Implementation of handleBootError method\r\n  }\r\n}"],"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","ignoreList":[]}