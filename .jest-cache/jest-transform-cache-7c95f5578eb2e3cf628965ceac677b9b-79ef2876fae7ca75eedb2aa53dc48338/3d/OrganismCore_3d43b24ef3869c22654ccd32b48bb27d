d13dc0f75e39e30b7f594f799b5eafde
"use strict";

/* istanbul ignore next */
function cov_1kgk1e008k() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts";
  var hash = "6ef7af55a84e78070e065bf4e55d9e9058bca292";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 58
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 30
        }
      },
      "7": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 58
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 93
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 37
        }
      },
      "13": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "14": {
        start: {
          line: 26,
          column: 35
        },
        end: {
          line: 26,
          column: 58
        }
      },
      "15": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "16": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 26
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 39
        }
      },
      "21": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 35
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "23": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 102
        }
      },
      "25": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 177
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 33
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "30": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "31": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "32": {
        start: {
          line: 83,
          column: 40
        },
        end: {
          line: 83,
          column: 182
        }
      },
      "33": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "34": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "35": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 59
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 105,
          column: 77
        }
      },
      "37": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 41
        }
      },
      "38": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 72
        }
      },
      "39": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 67
        }
      },
      "40": {
        start: {
          line: 104,
          column: 45
        },
        end: {
          line: 104,
          column: 56
        }
      },
      "41": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 126,
          column: 57
        }
      },
      "42": {
        start: {
          line: 113,
          column: 31
        },
        end: {
          line: 113,
          column: 174
        }
      },
      "43": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "44": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 86
        }
      },
      "45": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 34
        }
      },
      "46": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 41
        }
      },
      "47": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 32
        }
      },
      "48": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 32
        }
      },
      "49": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 140,
          column: 77
        }
      },
      "50": {
        start: {
          line: 133,
          column: 35
        },
        end: {
          line: 133,
          column: 64
        }
      },
      "51": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 134,
          column: 79
        }
      },
      "52": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 77
        }
      },
      "53": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "54": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 37
        }
      },
      "55": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 153,
          column: 77
        }
      },
      "56": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "57": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 63
        }
      },
      "58": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 51
        }
      },
      "59": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "60": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 160,
          column: 58
        }
      },
      "61": {
        start: {
          line: 161,
          column: 39
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "62": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 163,
          column: 39
        }
      },
      "63": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 66
        }
      },
      "64": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 81
        }
      },
      "65": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "66": {
        start: {
          line: 168,
          column: 33
        },
        end: {
          line: 168,
          column: 36
        }
      },
      "67": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 88
        }
      },
      "68": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 185,
          column: 74
        }
      },
      "69": {
        start: {
          line: 179,
          column: 36
        },
        end: {
          line: 179,
          column: 155
        }
      },
      "70": {
        start: {
          line: 180,
          column: 36
        },
        end: {
          line: 180,
          column: 151
        }
      },
      "71": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "72": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 64
        }
      },
      "73": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 48
        }
      },
      "74": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 205,
          column: 87
        }
      },
      "75": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 55
        }
      },
      "76": {
        start: {
          line: 195,
          column: 38
        },
        end: {
          line: 195,
          column: 62
        }
      },
      "77": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "78": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 201,
          column: 17
        }
      },
      "79": {
        start: {
          line: 198,
          column: 37
        },
        end: {
          line: 198,
          column: 85
        }
      },
      "80": {
        start: {
          line: 199,
          column: 37
        },
        end: {
          line: 199,
          column: 40
        }
      },
      "81": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 103
        }
      },
      "82": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 43
        }
      },
      "83": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 206
        }
      },
      "84": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 226,
          column: 71
        }
      },
      "85": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 213,
          column: 157
        }
      },
      "86": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "87": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 90
        }
      },
      "88": {
        start: {
          line: 218,
          column: 27
        },
        end: {
          line: 218,
          column: 35
        }
      },
      "89": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 222,
          column: 33
        }
      },
      "90": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 34
        }
      },
      "91": {
        start: {
          line: 221,
          column: 17
        },
        end: {
          line: 222,
          column: 33
        }
      },
      "92": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 33
        }
      },
      "93": {
        start: {
          line: 224,
          column: 31
        },
        end: {
          line: 224,
          column: 79
        }
      },
      "94": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 163
        }
      },
      "95": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 79
        }
      },
      "96": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 52
        }
      },
      "97": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 246,
          column: 69
        }
      },
      "98": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 241,
          column: 159
        }
      },
      "99": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "100": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 88
        }
      },
      "101": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 60
        }
      },
      "102": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 34
        }
      },
      "103": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 270,
          column: 74
        }
      },
      "104": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 259,
          column: 67
        }
      },
      "105": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "106": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 83
        }
      },
      "107": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 269,
          column: 15
        }
      },
      "108": {
        start: {
          line: 265,
          column: 30
        },
        end: {
          line: 265,
          column: 41
        }
      },
      "109": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "110": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 45
        }
      },
      "111": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 290,
          column: 10
        }
      },
      "112": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "113": {
        start: {
          line: 297,
          column: 32
        },
        end: {
          line: 297,
          column: 63
        }
      },
      "114": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 303,
          column: 14
        }
      },
      "115": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 98
        }
      },
      "116": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 313,
          column: 14
        }
      },
      "117": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 327,
          column: 10
        }
      },
      "118": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 341,
          column: 10
        }
      },
      "119": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "120": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 75
        }
      },
      "121": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "122": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 351,
          column: 60
        }
      },
      "123": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 62
        }
      },
      "124": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 61
        }
      },
      "125": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 65
        }
      },
      "126": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 64
        }
      },
      "127": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 83
        }
      },
      "128": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 81
        }
      },
      "129": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 33
        }
      },
      "130": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 79
        }
      },
      "131": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 90
        }
      },
      "132": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 144
        }
      },
      "133": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 24
        }
      },
      "134": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 381,
          column: 74
        }
      },
      "135": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 52
        }
      },
      "136": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 43
        }
      },
      "137": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 38
        }
      },
      "138": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 56
        }
      },
      "139": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "140": {
        start: {
          line: 388,
          column: 29
        },
        end: {
          line: 388,
          column: 58
        }
      },
      "141": {
        start: {
          line: 389,
          column: 32
        },
        end: {
          line: 389,
          column: 64
        }
      },
      "142": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 395,
          column: 14
        }
      },
      "143": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 403,
          column: 14
        }
      },
      "144": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "145": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 49
        }
      },
      "146": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 21
        }
      },
      "147": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "148": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 53
        }
      },
      "149": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 21
        }
      },
      "150": {
        start: {
          line: 433,
          column: 0
        },
        end: {
          line: 433,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 41
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 45
          },
          end: {
            line: 52,
            column: 46
          }
        },
        loc: {
          start: {
            line: 52,
            column: 54
          },
          end: {
            line: 54,
            column: 9
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 31
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 36
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 95,
            column: 53
          },
          end: {
            line: 95,
            column: 54
          }
        },
        loc: {
          start: {
            line: 95,
            column: 65
          },
          end: {
            line: 100,
            column: 9
          }
        },
        line: 95
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 26
          }
        },
        loc: {
          start: {
            line: 104,
            column: 45
          },
          end: {
            line: 104,
            column: 56
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 26
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 110
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 111,
            column: 48
          },
          end: {
            line: 111,
            column: 49
          }
        },
        loc: {
          start: {
            line: 111,
            column: 54
          },
          end: {
            line: 125,
            column: 9
          }
        },
        line: 111
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 28
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 131
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 132,
            column: 48
          },
          end: {
            line: 132,
            column: 49
          }
        },
        loc: {
          start: {
            line: 132,
            column: 54
          },
          end: {
            line: 140,
            column: 9
          }
        },
        line: 132
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 19
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 145
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 48
          },
          end: {
            line: 146,
            column: 49
          }
        },
        loc: {
          start: {
            line: 146,
            column: 54
          },
          end: {
            line: 153,
            column: 9
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 19
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 158
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 159,
            column: 48
          },
          end: {
            line: 159,
            column: 49
          }
        },
        loc: {
          start: {
            line: 159,
            column: 54
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 159
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 167,
            column: 45
          },
          end: {
            line: 167,
            column: 46
          }
        },
        loc: {
          start: {
            line: 167,
            column: 52
          },
          end: {
            line: 170,
            column: 13
          }
        },
        line: 167
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 176
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 177,
            column: 48
          },
          end: {
            line: 177,
            column: 49
          }
        },
        loc: {
          start: {
            line: 177,
            column: 54
          },
          end: {
            line: 185,
            column: 9
          }
        },
        line: 177
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 40
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 190
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 191,
            column: 60
          },
          end: {
            line: 191,
            column: 61
          }
        },
        loc: {
          start: {
            line: 191,
            column: 72
          },
          end: {
            line: 205,
            column: 9
          }
        },
        line: 191
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 46
          }
        },
        loc: {
          start: {
            line: 196,
            column: 52
          },
          end: {
            line: 202,
            column: 13
          }
        },
        line: 196
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 210
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 211,
            column: 48
          },
          end: {
            line: 211,
            column: 49
          }
        },
        loc: {
          start: {
            line: 211,
            column: 54
          },
          end: {
            line: 226,
            column: 9
          }
        },
        line: 211
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 27
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 231
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 232,
            column: 60
          },
          end: {
            line: 232,
            column: 61
          }
        },
        loc: {
          start: {
            line: 232,
            column: 72
          },
          end: {
            line: 234,
            column: 9
          }
        },
        line: 232
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 23
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 239
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 240,
            column: 48
          },
          end: {
            line: 240,
            column: 49
          }
        },
        loc: {
          start: {
            line: 240,
            column: 54
          },
          end: {
            line: 246,
            column: 9
          }
        },
        line: 240
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 251
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 22
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 257
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 258,
            column: 48
          },
          end: {
            line: 258,
            column: 49
          }
        },
        loc: {
          start: {
            line: 258,
            column: 54
          },
          end: {
            line: 270,
            column: 9
          }
        },
        line: 258
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 264,
            column: 40
          },
          end: {
            line: 264,
            column: 41
          }
        },
        loc: {
          start: {
            line: 264,
            column: 47
          },
          end: {
            line: 269,
            column: 13
          }
        },
        line: 264
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 15
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 275
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 34
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 295
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 13
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 319
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 26
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 332
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 17
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 346
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 22
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 373
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 374,
            column: 60
          },
          end: {
            line: 374,
            column: 61
          }
        },
        loc: {
          start: {
            line: 374,
            column: 72
          },
          end: {
            line: 381,
            column: 9
          }
        },
        line: 374
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 31
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 386
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 30
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 409
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 34
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 420
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 22
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 429
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: 24,
            column: 13
          },
          end: {
            line: 29,
            column: 9
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 11
          },
          end: {
            line: 110,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 110,
            column: 23
          },
          end: {
            line: 110,
            column: 24
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "9": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "10": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "11": {
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 181,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 181,
            column: 40
          }
        }, {
          start: {
            line: 181,
            column: 44
          },
          end: {
            line: 181,
            column: 68
          }
        }],
        line: 181
      },
      "12": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "13": {
        loc: {
          start: {
            line: 210,
            column: 11
          },
          end: {
            line: 210,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 210,
            column: 18
          },
          end: {
            line: 210,
            column: 22
          }
        }],
        line: 210
      },
      "14": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "15": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 222,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 222,
            column: 33
          }
        }, {
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 222,
            column: 33
          }
        }],
        line: 219
      },
      "16": {
        loc: {
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 222,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 222,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "17": {
        loc: {
          start: {
            line: 239,
            column: 9
          },
          end: {
            line: 239,
            column: 21
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 239,
            column: 18
          },
          end: {
            line: 239,
            column: 21
          }
        }],
        line: 239
      },
      "18": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "21": {
        loc: {
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 266,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 266,
            column: 45
          }
        }, {
          start: {
            line: 266,
            column: 49
          },
          end: {
            line: 266,
            column: 62
          }
        }],
        line: 266
      },
      "22": {
        loc: {
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "23": {
        loc: {
          start: {
            line: 366,
            column: 79
          },
          end: {
            line: 366,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 366,
            column: 104
          },
          end: {
            line: 366,
            column: 117
          }
        }, {
          start: {
            line: 366,
            column: 120
          },
          end: {
            line: 366,
            column: 133
          }
        }],
        line: 366
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts",
      mappings: ";;;AAIA,uDAAoD;AACpD,6DAA2E;AAE3E,MAAa,YAAY;IAiBvB,YAAY,GAAW,EAAE,MAAgC,EAAE,UAA8B;QAdzF,yDAAyD;QACjD,gBAAW,GAA0B,IAAI,CAAC;QAQ1C,OAAE,GAAW,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY;QAE1E,iDAAiD;QACzC,aAAQ,GAAY,KAAK,CAAC,CAAC,YAAY;QAG7C,gDAAgD;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,iCAAiC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,4CAA4C;QAC5C,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,UAAU,EAAE,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,sCAAsC;QACrE,CAAC;aAAM,CAAC;YACN,iDAAiD;YACjD,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,sCAAsC;QACrE,CAAC;QAED,IAAI,CAAC,MAAM,GAAG;YACZ,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,UAAU,EAAE,GAAG;YACf,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,GAAG,MAAM;SACV,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,kDAAkD;QAClD,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,CACxC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EACtC;YACE,UAAU,EAAE,GAAG,EAAE,oCAAoC;YACrD,YAAY,EAAE,CAAC;YACf,aAAa,EAAE,GAAG;YAClB,mBAAmB,EAAE,UAAU;SAChC,CACF,CAAC;QAEF,IAAI,CAAC,uBAAuB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC3C,2BAAY,CAAC,cAAc,CAAC,cAAc,EAAE,aAAa,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,GAAW,EAAE,MAAgC;QACjE,wCAAwC;QACxC,MAAM,aAAa,GAAG,2BAAY,CAAC,YAAY,CAC7C,GAAG,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,EACjE,KAAK,EAAE,cAAc,EAAE,eAAe,CACvC,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YAC3B,OAAO,aAAa,CAAC;QACvB,CAAC;QAED,+DAA+D;QAC/D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5B,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,MAAM,EAAE,CAAC,gEAAgE,CAAC;gBAC1E,QAAQ,EAAE,EAAE;gBACZ,OAAO,EAAE;oBACP,SAAS,EAAE,cAAc;oBACzB,MAAM,EAAE,eAAe;oBACvB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,QAAQ,EAAE,OAAO;oBACjB,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;iBAC9E;aACF,CAAC;QACJ,CAAC;QAED,oBAAoB;QACpB,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClD,MAAM,eAAe,GAAG,2BAAY,CAAC,YAAY,CAC/C,KAAK,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EACnD,SAAS,GAAG,EAAE,EAAE,cAAc,EAAE,eAAe,CAChD,CAAC;gBAEF,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;oBAC7B,OAAO,eAAe,CAAC;gBACzB,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IACrD,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB;QACnC,OAAO,2BAAY,CAAC,SAAS,CAC3B,KAAK,IAAI,EAAE;YACT,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAE7B,oCAAoC;YACpC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC,EACD;YACE,UAAU,EAAE,CAAC;YACb,SAAS,EAAE,GAAG;YACd,sDAAsD;YACtD,WAAW,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,OAAO,GAAG,CAAC;SAC7C,EACD,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,yBAAyB,EAAE,CACjE,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,YAAoB,CAAC;QACjC,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,4BAA4B;YAC5B,MAAM,UAAU,GAAG,2BAAY,CAAC,YAAY,CAC1C,SAAS,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAC9D,WAAW,EAAE,cAAc,EAAE,QAAQ,CACtC,CAAC;YAEF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,sBAAsB,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxE,CAAC;YAED,oBAAoB;YACpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAEtB,oBAAoB;YACpB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAE7B,oBAAoB;YACpB,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,2CAA2C;YAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC,EACD,SAAS,EAAE,yBAAyB;QACpC,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,CAChD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,SAAiB;QACpC,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACrD,MAAM,UAAU,GAAG,cAAc,GAAG,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;YAEpE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;YAEjE,4BAA4B;YAC5B,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;YACvB,CAAC;QACH,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,CACtD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,sCAAsC;YACtC,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YACjD,CAAC;YAED,qCAAqC;YACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,CACtD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/C,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAE7D,yBAAyB;YACzB,MAAM,aAAa,GAAG,KAAK,CAAC;YAE5B,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC;YAErE,8BAA8B;YAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACrC,MAAM,QAAQ,GAAG,GAA2B,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,CACtD,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,OAAe,EAAE,KAAa;QAC7C,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,8CAA8C;YAC9C,MAAM,eAAe,GAAG,2BAAY,CAAC,YAAY,CAC/C,OAAO,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EACrC,SAAS,EAAE,cAAc,EAAE,WAAW,CACvC,CAAC;YAEF,MAAM,eAAe,GAAG,2BAAY,CAAC,YAAY,CAC/C,KAAK,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EACnC,OAAO,EAAE,cAAc,EAAE,WAAW,CACrC,CAAC;YAEF,IAAI,CAAC,eAAe,CAAC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBACzD,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,CACnD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAAC,KAAsB;QACzD,OAAO,2BAAY,CAAC,gBAAgB,CAClC,KAAK,IAAI,EAAE;YACT,0CAA0C;YAC1C,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE3C,wDAAwD;YACxD,MAAM,iBAAiB,GAAG,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC,iCAAiC;YAErF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACrC,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,iBAAiB,EAAE,CAAC;oBACtC,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC;oBAClE,MAAM,QAAQ,GAAG,GAA2B,CAAC;oBAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAC5C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE/B,2BAAY,CAAC,cAAc,CAAC,cAAc,EAAE,wBAAwB,EAClE,oCAAoC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,KAAK,CAAC,YAAY,EAAE,EAAE,MAAM,CAAC,CAAC;QACjH,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,wBAAwB,EAAE,CAChE,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,OAAe,IAAI;QAC/B,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,iCAAiC;YACjC,MAAM,UAAU,GAAG,2BAAY,CAAC,YAAY,CAC1C,IAAI,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAClD,MAAM,EAAE,cAAc,EAAE,QAAQ,CACjC,CAAC;YAEF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,0BAA0B,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5E,CAAC;YAED,sDAAsD;YACtD,IAAI,QAAQ,GAA8B,QAAQ,CAAC;YACnD,IAAI,IAAI,GAAG,GAAG;gBAAE,QAAQ,GAAG,MAAM,CAAC;iBAC7B,IAAI,IAAI,GAAG,IAAI;gBAAE,QAAQ,GAAG,KAAK,CAAC;YAEvC,kEAAkE;YAClE,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAEpE,2BAAY,CAAC,cAAc,CAAC,cAAc,EAAE,QAAQ,EAClD,uBAAuB,UAAU,UAAU,IAAI,cAAc,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;QACtF,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,CAChD,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc;QACzB,OAAO,2BAAY,CAAC,gBAAgB,CAClC,KAAK,IAAI,EAAE;YACT,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;QAC1C,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,gBAAgB,EAAE,CACxD,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,SAAiB,GAAG;QAC9B,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,MAAM,UAAU,GAAG,2BAAY,CAAC,YAAY,CAC1C,MAAM,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EACpD,QAAQ,EAAE,cAAc,EAAE,MAAM,CACjC,CAAC;YAEF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1E,CAAC;YAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QAClD,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,CAC9C,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,SAAS;QACd,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,MAA+B;QAC9C,2BAAY,CAAC,WAAW,CACtB,GAAG,EAAE;YACH,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACxD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,mBAAmB,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACrE,CAAC;YAED,gEAAgE;YAChE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAChC,MAAM,KAAK,GAAG,MAAM,CAAC,GAA2B,CAAC,CAAC;gBAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC/C,IAAI,CAAC,MAAM,CAAC,GAA2B,CAAC,GAAG,KAAK,CAAC;gBACnD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,CACnD,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO;YACL,EAAE,EAAE,MAAM;YACV,UAAU,EAAE,CAAC;YACb,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;YACxB,SAAS,EAAE,IAAI,CAAC,GAAG;YACnB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,iBAAiB,EAAE,EAAE;YACrB,eAAe,EAAE,EAAE;SACpB,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,qBAAqB;QAKhC,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAEpD,OAAO;gBACL,GAAG,WAAW;gBACd,cAAc,EAAE,IAAI,CAAC,uBAAuB,EAAE;gBAC9C,kBAAkB,EAAE,IAAI,CAAC,2BAA2B,EAAE;gBACtD,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;aACpD,CAAC;QACJ,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,mCAAmC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YAEtF,OAAO;gBACL,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,cAAc,EAAE,CAAC;gBACjB,kBAAkB,EAAE,CAAC;gBACrB,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;aACpD,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACxB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,mBAAmB;QACxB,2DAA2D;QAC3D,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC7C,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;YAClC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;YACxB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI;SACxB,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAI;QACf,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,iCAAiC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAE/D,yBAAyB;YACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YAED,qCAAqC;YACrC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;YACrD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAEpD,4BAA4B;YAC5B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,eAAe,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC;YACvE,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,EAAE,gBAAgB,EAAE,GAAG,CAAC,CAAC;YAErE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,sCAAsC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACrE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,yBAAyB,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9E,2BAAY,CAAC,cAAc,CAAC,cAAc,EAAE,MAAM,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YACrH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,SAAS;QACpB,OAAO,2BAAY,CAAC,gBAAgB,CAClC,KAAK,IAAI,EAAE;YACT,oDAAoD;YACpD,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;YAExC,qBAAqB;YACrB,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAE/B,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAE1B,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC9C,CAAC,EACD,SAAS,EACT,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,CACnD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB;QAC9B,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAErD,OAAO;gBACL,GAAG,EAAE,QAAQ;gBACb,MAAM,EAAE,WAAW;gBACnB,cAAc,EAAE,IAAI,CAAC,uBAAuB,EAAE;gBAC9C,kBAAkB,EAAE,IAAI,CAAC,2BAA2B,EAAE;aACvD,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,cAAc,EAAE,CAAC;gBACjB,kBAAkB,EAAE,CAAC;aACtB,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB;QAC7B,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED;;OAEG;IACK,2BAA2B;QACjC,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED,qDAAqD;IAC7C,eAAe;QACrB,2CAA2C;IAC7C,CAAC;CACF;AAhkBD,oCAgkBC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts"],
      sourcesContent: ["import { OrganismState, OrganismTraits } from '../shared/types/organism';\r\nimport { INeuralMesh, PerformanceMetrics } from './interfaces/INeuralMesh';\r\nimport { IOrganismCore, OrganismJSON, ShaderParameters } from './interfaces/IOrganismCore';\r\nimport { DNAInterpreter, ValidationResult } from '../types/core';\r\nimport { errorHandler } from './utils/ErrorHandler';\r\nimport { MutationBatcher, BatchedMutation } from './utils/MutationBatcher';\r\n\r\nexport class OrganismCore implements IOrganismCore {\r\n  private mesh: INeuralMesh;\r\n  private dna: string;\r\n  // @ts-expect-error Interpr\xE9teur r\xE9serv\xE9 pour usage futur\r\n  private interpreter: DNAInterpreter | null = null;\r\n  private traits: OrganismTraits;\r\n  private energy: number;\r\n  private health: number;\r\n  private lastMutation: number;\r\n  private metabolismRate: number;\r\n  private mutationBatcher: MutationBatcher;\r\n  private logger?: { debug: Function; info: Function; error: Function }; // Logger optionnel\r\n  private id: string = Math.random().toString(36).substr(2, 9); // ID unique\r\n  private neuralMesh?: INeuralMesh; // R\xE9f\xE9rence pour boot\r\n  // @ts-expect-error \xC9tat r\xE9serv\xE9 pour usage futur\r\n  private isBooted: boolean = false; // \xC9tat boot\r\n\r\n  constructor(dna: string, traits?: Partial<OrganismTraits>, createMesh?: () => INeuralMesh) {\r\n    // Validation d'entr\xE9e stricte avec ErrorHandler\r\n    const validation = this.validateInput(dna, traits);\r\n    if (!validation.isValid) {\r\n      throw new Error(`OrganismCore creation failed: ${validation.errors.join(', ')}`);\r\n    }\r\n\r\n    this.dna = dna;\r\n    \r\n    // Utilisation de l'injection de d\xE9pendances\r\n    if (createMesh) {\r\n      this.mesh = createMesh();\r\n      this.neuralMesh = this.mesh; // Initialise la r\xE9f\xE9rence pour boot()\r\n    } else {\r\n      // Fallback pour compatibilit\xE9 - import dynamique\r\n      const { NeuralMesh } = require('./NeuralMesh');\r\n      this.mesh = new NeuralMesh();\r\n      this.neuralMesh = this.mesh; // Initialise la r\xE9f\xE9rence pour boot()\r\n    }\r\n    \r\n    this.traits = {\r\n      curiosity: 0.5,\r\n      focus: 0.5,\r\n      rhythm: 0.5,\r\n      empathy: 0.5,\r\n      creativity: 0.5,\r\n      energy: 0.5,\r\n      harmony: 0.5,\r\n      wisdom: 0.1,\r\n      ...traits\r\n    };\r\n    this.energy = 1.0;\r\n    this.health = 1.0;\r\n    this.lastMutation = Date.now();\r\n    this.metabolismRate = 0.01;\r\n    \r\n    // Initialise le syst\xE8me de batching des mutations\r\n    this.mutationBatcher = new MutationBatcher(\r\n      this.processBatchedMutation.bind(this),\r\n      {\r\n        debounceMs: 100, // 100ms debounce pour les mutations\r\n        maxBatchSize: 5,\r\n        maxWaitTimeMs: 500,\r\n        combinationStrategy: 'weighted'\r\n      }\r\n    );\r\n    \r\n    this.initializeNeuralNetwork().catch(error => {\r\n      errorHandler.logSimpleError('OrganismCore', 'constructor', error, 'error');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Valide les param\xE8tres d'entr\xE9e avec ErrorHandler\r\n   */\r\n  private validateInput(dna: string, traits?: Partial<OrganismTraits>): ValidationResult {\r\n    // Validation DNA - v\xE9rification de base\r\n    const dnaValidation = errorHandler.validateType(\r\n      dna, 'string', { required: true, min: 10, pattern: /^[ATCG]+$/i }, \r\n      'dna', 'OrganismCore', 'validateInput'\r\n    );\r\n    \r\n    if (!dnaValidation.isValid) {\r\n      return dnaValidation;\r\n    }\r\n\r\n    // Validation suppl\xE9mentaire DNA - caract\xE8res valides seulement\r\n    if (!/^[ATCG]+$/i.test(dna)) {\r\n      return {\r\n        isValid: false,\r\n        errors: ['DNA must contain only valid nucleotide characters (A, T, C, G)'],\r\n        warnings: [],\r\n        context: {\r\n          component: 'OrganismCore',\r\n          method: 'validateInput',\r\n          timestamp: Date.now(),\r\n          severity: 'error',\r\n          details: { fieldName: 'dna', invalidCharacters: dna.replace(/[ATCG]/gi, '') }\r\n        }\r\n      };\r\n    }\r\n\r\n    // Validation traits\r\n    if (traits) {\r\n      for (const [key, value] of Object.entries(traits)) {\r\n        const traitValidation = errorHandler.validateType(\r\n          value, 'number', { required: true, min: 0, max: 1 },\r\n          `trait.${key}`, 'OrganismCore', 'validateInput'\r\n        );\r\n        \r\n        if (!traitValidation.isValid) {\r\n          return traitValidation;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { isValid: true, errors: [], warnings: [] };\r\n  }\r\n\r\n  /**\r\n   * Initialise le r\xE9seau neuronal avec gestion d'erreurs robuste\r\n   */\r\n  private async initializeNeuralNetwork(): Promise<void> {\r\n    return errorHandler.withRetry(\r\n      async () => {\r\n        await this.mesh.initialize();\r\n        \r\n        // Configure network based on traits\r\n        this.mesh.stimulate('sensory_input', this.traits.curiosity);\r\n        this.mesh.stimulate('memory_input', this.traits.focus);\r\n      },\r\n      {\r\n        maxRetries: 3,\r\n        backoffMs: 100,\r\n        // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n        shouldRetry: (error, attempt) => attempt < 3\r\n      },\r\n      { component: 'OrganismCore', method: 'initializeNeuralNetwork' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met \xE0 jour l'\xE9tat de l'organisme (appel\xE9 p\xE9riodiquement)\r\n   */\r\n  public update(deltaTime: number = 1): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation des param\xE8tres\r\n        const validation = errorHandler.validateType(\r\n          deltaTime, 'number', { required: true, min: 0.001, max: 1000 },\r\n          'deltaTime', 'OrganismCore', 'update'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid deltaTime: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // Neural processing\r\n        this.mesh.propagate();\r\n        \r\n        // Energy management\r\n        this.updateEnergy(deltaTime);\r\n        \r\n        // Health management\r\n        this.updateHealth();\r\n        \r\n        // Trait evolution based on neural activity\r\n        this.evolveTraits();\r\n      },\r\n      undefined, // No fallback for update\r\n      { component: 'OrganismCore', method: 'update' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met \xE0 jour l'\xE9nergie bas\xE9e sur l'activit\xE9 neurale\r\n   */\r\n  private updateEnergy(deltaTime: number): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const neuralActivity = this.mesh.getNeuralActivity();\r\n        const energyCost = neuralActivity * this.metabolismRate * deltaTime;\r\n        \r\n        this.energy = Math.max(0, Math.min(1, this.energy - energyCost));\r\n        \r\n        // Low energy affects health\r\n        if (this.energy < 0.2) {\r\n          this.health *= 0.999;\r\n        }\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'updateEnergy' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Met \xE0 jour la sant\xE9 bas\xE9e sur les conditions actuelles\r\n   */\r\n  private updateHealth(): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Health recovery when energy is high\r\n        if (this.energy > 0.8) {\r\n          this.health = Math.min(1, this.health + 0.001);\r\n        }\r\n        \r\n        // Ensure health doesn't drop below 0\r\n        this.health = Math.max(0, this.health);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'updateHealth' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fait \xE9voluer les traits bas\xE9s sur l'activit\xE9 neurale\r\n   */\r\n  private evolveTraits(): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const activity = this.mesh.getNeuralActivity();\r\n        const connectionStrength = this.mesh.getConnectionStrength();\r\n        \r\n        // Subtle trait evolution\r\n        const evolutionRate = 0.001;\r\n        \r\n        this.traits.focus += (activity - 0.5) * evolutionRate;\r\n        this.traits.creativity += (connectionStrength - 0.5) * evolutionRate;\r\n        \r\n        // Clamp traits to valid range\r\n        Object.keys(this.traits).forEach(key => {\r\n          const typedKey = key as keyof OrganismTraits;\r\n          this.traits[typedKey] = Math.max(0, Math.min(1, this.traits[typedKey]));\r\n        });\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'evolveTraits' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stimule le r\xE9seau (ex : perception sensorielle)\r\n   */\r\n  public stimulate(inputId: string, value: number): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation des param\xE8tres avec ErrorHandler\r\n        const inputValidation = errorHandler.validateType(\r\n          inputId, 'string', { required: true },\r\n          'inputId', 'OrganismCore', 'stimulate'\r\n        );\r\n        \r\n        const valueValidation = errorHandler.validateType(\r\n          value, 'number', { required: true },\r\n          'value', 'OrganismCore', 'stimulate'\r\n        );\r\n\r\n        if (!inputValidation.isValid || !valueValidation.isValid) {\r\n          throw new Error('Invalid stimulate parameters');\r\n        }\r\n\r\n        this.mesh.stimulate(inputId, value);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'stimulate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Traite une mutation batch\xE9e\r\n   */\r\n  private async processBatchedMutation(batch: BatchedMutation): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        // Applique la mutation au r\xE9seau neuronal\r\n        await this.mesh.mutate(batch.combinedRate);\r\n        \r\n        // Applique des mutations aux traits bas\xE9es sur le batch\r\n        const traitMutationRate = batch.combinedRate * 0.5; // Moins agressif pour les traits\r\n        \r\n        Object.keys(this.traits).forEach(key => {\r\n          if (Math.random() < traitMutationRate) {\r\n            const mutation = (Math.random() - 0.5) * 0.1 * batch.combinedRate;\r\n            const typedKey = key as keyof OrganismTraits;\r\n            this.traits[typedKey] = Math.max(0, Math.min(1, \r\n              this.traits[typedKey] + mutation));\r\n          }\r\n        });\r\n        \r\n        this.lastMutation = Date.now();\r\n        \r\n        errorHandler.logSimpleError('OrganismCore', 'processBatchedMutation', \r\n          `Processed batched mutation: rate=${batch.combinedRate.toFixed(3)}, requests=${batch.requestCount}`, 'info');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'processBatchedMutation' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation (neural et potentiellement ADN) - Version optimis\xE9e avec batching\r\n   */\r\n  public mutate(rate: number = 0.05): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Validation du taux de mutation\r\n        const validation = errorHandler.validateType(\r\n          rate, 'number', { required: true, min: 0, max: 1 },\r\n          'rate', 'OrganismCore', 'mutate'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid mutation rate: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // D\xE9termine la priorit\xE9 bas\xE9e sur le taux de mutation\r\n        let priority: 'low' | 'normal' | 'high' = 'normal';\r\n        if (rate > 0.3) priority = 'high';\r\n        else if (rate < 0.01) priority = 'low';\r\n\r\n        // Ajoute la mutation au batch au lieu de l'ex\xE9cuter imm\xE9diatement\r\n        const mutationId = this.mutationBatcher.addMutation(rate, priority);\r\n        \r\n        errorHandler.logSimpleError('OrganismCore', 'mutate', \r\n          `Queued mutation: id=${mutationId}, rate=${rate}, priority=${priority}`, 'debug');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'mutate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Force l'application imm\xE9diate de toutes les mutations en attente\r\n   */\r\n  public async flushMutations(): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        await this.mutationBatcher.flushBatch();\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'flushMutations' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nourrit l'organisme pour restaurer l'\xE9nergie\r\n   */\r\n  public feed(amount: number = 0.3): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const validation = errorHandler.validateType(\r\n          amount, 'number', { required: true, min: 0, max: 1 },\r\n          'amount', 'OrganismCore', 'feed'\r\n        );\r\n        \r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid feed amount: ${validation.errors.join(', ')}`);\r\n        }\r\n        \r\n        this.energy = Math.min(1, this.energy + amount);\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'feed' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re les traits courants\r\n   */\r\n  public getTraits(): OrganismTraits {\r\n    return { ...this.traits };\r\n  }\r\n\r\n  /**\r\n   * D\xE9finit de nouveaux traits\r\n   */\r\n  public setTraits(traits: Partial<OrganismTraits>): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const validation = this.validateInput(this.dna, traits);\r\n        if (!validation.isValid) {\r\n          throw new Error(`Invalid traits: ${validation.errors.join(', ')}`);\r\n        }\r\n\r\n        // On fusionne en s'assurant que chaque champ est bien un nombre\r\n        Object.keys(traits).forEach(key => {\r\n          const value = traits[key as keyof OrganismTraits];\r\n          if (typeof value === 'number' && !isNaN(value)) {\r\n            this.traits[key as keyof OrganismTraits] = value;\r\n          }\r\n        });\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'setTraits' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re l'\xE9tat global de l'organisme\r\n   */\r\n  public getState(): OrganismState {\r\n    return {\r\n      id: 'core',\r\n      generation: 1,\r\n      health: this.health,\r\n      energy: this.energy,\r\n      traits: this.getTraits(),\r\n      visualDNA: this.dna,\r\n      lastMutation: this.lastMutation,\r\n      mutations: [],\r\n      createdAt: Date.now(),\r\n      dna: this.dna,\r\n      birthTime: Date.now(),\r\n      socialConnections: [],\r\n      memoryFragments: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re les m\xE9triques de performance - Version \xE9tendue avec mutations\r\n   */\r\n  public async getPerformanceMetrics(): Promise<PerformanceMetrics & { \r\n    neuralActivity: number;\r\n    connectionStrength: number;\r\n    mutationStats: any;\r\n  }> {\r\n    try {\r\n      const baseMetrics = await this.measurePerformance();\r\n      \r\n      return {\r\n        ...baseMetrics,\r\n        neuralActivity: this.calculateNeuralActivity(),\r\n        connectionStrength: this.calculateConnectionStrength(),\r\n        mutationStats: this.mutationBatcher.getStatistics()\r\n      };\r\n    } catch (err) {\r\n      this.logger?.error('Failed to get performance metrics', { organismId: this.id, err });\r\n      \r\n      return {\r\n        cpu: 0,\r\n        memory: 0,\r\n        neuralActivity: 0,\r\n        connectionStrength: 0,\r\n        mutationStats: this.mutationBatcher.getStatistics()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export JSON typ\xE9 pour debug/visualisation\r\n   */\r\n  public toJSON(): OrganismJSON {\r\n    return {\r\n      mesh: this.mesh.toJSON(),\r\n      traits: this.traits,\r\n      energy: this.energy,\r\n      health: this.health,\r\n      dna: this.dna,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re les param\xE8tres shaders courants (pour WebGL)\r\n   */\r\n  public getShaderParameters(): ShaderParameters {\r\n    // Return shader parameters based on current organism state\r\n    return {\r\n      energy: this.energy,\r\n      health: this.health,\r\n      neuralActivity: this.mesh.getNeuralActivity(),\r\n      creativity: this.traits.creativity,\r\n      focus: this.traits.focus,\r\n      time: Date.now() / 1000\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise l'organisme\r\n   */\r\n  public async boot(): Promise<void> {\r\n    try {\r\n      this.logger?.debug('Starting organism boot sequence', this.id);\r\n      \r\n      // Initialize neural mesh\r\n      if (!this.neuralMesh) {\r\n        throw new Error('Neural mesh not provided');\r\n      }\r\n      \r\n      // Add basic neural network structure\r\n      this.neuralMesh.addNode('sensory_input', 'input');\r\n      this.neuralMesh.addNode('memory_input', 'input');\r\n      this.neuralMesh.addNode('decision_output', 'output');\r\n      this.neuralMesh.addNode('emotion_output', 'output');\r\n      \r\n      // Connect inputs to outputs\r\n      this.neuralMesh.addConnection('sensory_input', 'decision_output', 0.5);\r\n      this.neuralMesh.addConnection('memory_input', 'emotion_output', 0.3);\r\n      \r\n      this.isBooted = true;\r\n      this.logger?.info('Organism boot completed successfully', this.id);\r\n    } catch (error) {\r\n      this.logger?.error('Failed to boot organism', { organismId: this.id, error });\r\n      errorHandler.logSimpleError('OrganismCore', 'boot', error instanceof Error ? error.message : 'Boot failed', 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met l'organisme en hibernation - Version \xE9tendue avec nettoyage du batcher\r\n   */\r\n  public async hibernate(): Promise<void> {\r\n    return errorHandler.safeExecuteAsync(\r\n      async () => {\r\n        // Traite les mutations en attente avant hibernation\r\n        await this.mutationBatcher.flushBatch();\r\n        \r\n        // Nettoie le batcher\r\n        this.mutationBatcher.dispose();\r\n        \r\n        await this.mesh.suspend();\r\n        \r\n        console.log('Organism core hibernating...');\r\n      },\r\n      undefined,\r\n      { component: 'OrganismCore', method: 'hibernate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Mesure les performances de base\r\n   */\r\n  private async measurePerformance(): Promise<PerformanceMetrics> {\r\n    try {\r\n      const cpuUsage = await this.mesh.getCPUUsage();\r\n      const memoryUsage = await this.mesh.getMemoryUsage();\r\n      \r\n      return {\r\n        cpu: cpuUsage,\r\n        memory: memoryUsage,\r\n        neuralActivity: this.calculateNeuralActivity(),\r\n        connectionStrength: this.calculateConnectionStrength()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        cpu: 0,\r\n        memory: 0,\r\n        neuralActivity: 0,\r\n        connectionStrength: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule l'activit\xE9 neurale\r\n   */\r\n  private calculateNeuralActivity(): number {\r\n    try {\r\n      return this.mesh.getNeuralActivity();\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule la force de connexion\r\n   */\r\n  private calculateConnectionStrength(): number {\r\n    try {\r\n      return this.mesh.getConnectionStrength();\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error M\xE9thode r\xE9serv\xE9e pour usage futur\r\n  private handleBootError(): void {\r\n    // Implementation of handleBootError method\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6ef7af55a84e78070e065bf4e55d9e9058bca292"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kgk1e008k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kgk1e008k();
cov_1kgk1e008k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1kgk1e008k().s[1]++;
exports.OrganismCore = void 0;
const ErrorHandler_1 =
/* istanbul ignore next */
(cov_1kgk1e008k().s[2]++, require("./utils/ErrorHandler"));
const MutationBatcher_1 =
/* istanbul ignore next */
(cov_1kgk1e008k().s[3]++, require("./utils/MutationBatcher"));
class OrganismCore {
  constructor(dna, traits, createMesh) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[0]++;
    cov_1kgk1e008k().s[4]++;
    // @ts-expect-error Interpréteur réservé pour usage futur
    this.interpreter = null;
    /* istanbul ignore next */
    cov_1kgk1e008k().s[5]++;
    this.id = Math.random().toString(36).substr(2, 9); // ID unique
    // @ts-expect-error État réservé pour usage futur
    /* istanbul ignore next */
    cov_1kgk1e008k().s[6]++;
    this.isBooted = false; // État boot
    // Validation d'entrée stricte avec ErrorHandler
    const validation =
    /* istanbul ignore next */
    (cov_1kgk1e008k().s[7]++, this.validateInput(dna, traits));
    /* istanbul ignore next */
    cov_1kgk1e008k().s[8]++;
    if (!validation.isValid) {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[0][0]++;
      cov_1kgk1e008k().s[9]++;
      throw new Error(`OrganismCore creation failed: ${validation.errors.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1kgk1e008k().b[0][1]++;
    }
    cov_1kgk1e008k().s[10]++;
    this.dna = dna;
    // Utilisation de l'injection de dépendances
    /* istanbul ignore next */
    cov_1kgk1e008k().s[11]++;
    if (createMesh) {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[1][0]++;
      cov_1kgk1e008k().s[12]++;
      this.mesh = createMesh();
      /* istanbul ignore next */
      cov_1kgk1e008k().s[13]++;
      this.neuralMesh = this.mesh; // Initialise la référence pour boot()
    } else {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[1][1]++;
      // Fallback pour compatibilité - import dynamique
      const {
        NeuralMesh
      } =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[14]++, require('./NeuralMesh'));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[15]++;
      this.mesh = new NeuralMesh();
      /* istanbul ignore next */
      cov_1kgk1e008k().s[16]++;
      this.neuralMesh = this.mesh; // Initialise la référence pour boot()
    }
    /* istanbul ignore next */
    cov_1kgk1e008k().s[17]++;
    this.traits = {
      curiosity: 0.5,
      focus: 0.5,
      rhythm: 0.5,
      empathy: 0.5,
      creativity: 0.5,
      energy: 0.5,
      harmony: 0.5,
      wisdom: 0.1,
      ...traits
    };
    /* istanbul ignore next */
    cov_1kgk1e008k().s[18]++;
    this.energy = 1.0;
    /* istanbul ignore next */
    cov_1kgk1e008k().s[19]++;
    this.health = 1.0;
    /* istanbul ignore next */
    cov_1kgk1e008k().s[20]++;
    this.lastMutation = Date.now();
    /* istanbul ignore next */
    cov_1kgk1e008k().s[21]++;
    this.metabolismRate = 0.01;
    // Initialise le système de batching des mutations
    /* istanbul ignore next */
    cov_1kgk1e008k().s[22]++;
    this.mutationBatcher = new MutationBatcher_1.MutationBatcher(this.processBatchedMutation.bind(this), {
      debounceMs: 100,
      // 100ms debounce pour les mutations
      maxBatchSize: 5,
      maxWaitTimeMs: 500,
      combinationStrategy: 'weighted'
    });
    /* istanbul ignore next */
    cov_1kgk1e008k().s[23]++;
    this.initializeNeuralNetwork().catch(error => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[1]++;
      cov_1kgk1e008k().s[24]++;
      ErrorHandler_1.errorHandler.logSimpleError('OrganismCore', 'constructor', error, 'error');
    });
  }
  /**
   * Valide les paramètres d'entrée avec ErrorHandler
   */
  validateInput(dna, traits) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[2]++;
    // Validation DNA - vérification de base
    const dnaValidation =
    /* istanbul ignore next */
    (cov_1kgk1e008k().s[25]++, ErrorHandler_1.errorHandler.validateType(dna, 'string', {
      required: true,
      min: 10,
      pattern: /^[ATCG]+$/i
    }, 'dna', 'OrganismCore', 'validateInput'));
    /* istanbul ignore next */
    cov_1kgk1e008k().s[26]++;
    if (!dnaValidation.isValid) {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[2][0]++;
      cov_1kgk1e008k().s[27]++;
      return dnaValidation;
    } else
    /* istanbul ignore next */
    {
      cov_1kgk1e008k().b[2][1]++;
    }
    // Validation supplémentaire DNA - caractères valides seulement
    cov_1kgk1e008k().s[28]++;
    if (!/^[ATCG]+$/i.test(dna)) {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[3][0]++;
      cov_1kgk1e008k().s[29]++;
      return {
        isValid: false,
        errors: ['DNA must contain only valid nucleotide characters (A, T, C, G)'],
        warnings: [],
        context: {
          component: 'OrganismCore',
          method: 'validateInput',
          timestamp: Date.now(),
          severity: 'error',
          details: {
            fieldName: 'dna',
            invalidCharacters: dna.replace(/[ATCG]/gi, '')
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_1kgk1e008k().b[3][1]++;
    }
    // Validation traits
    cov_1kgk1e008k().s[30]++;
    if (traits) {
      /* istanbul ignore next */
      cov_1kgk1e008k().b[4][0]++;
      cov_1kgk1e008k().s[31]++;
      for (const [key, value] of Object.entries(traits)) {
        const traitValidation =
        /* istanbul ignore next */
        (cov_1kgk1e008k().s[32]++, ErrorHandler_1.errorHandler.validateType(value, 'number', {
          required: true,
          min: 0,
          max: 1
        }, `trait.${key}`, 'OrganismCore', 'validateInput'));
        /* istanbul ignore next */
        cov_1kgk1e008k().s[33]++;
        if (!traitValidation.isValid) {
          /* istanbul ignore next */
          cov_1kgk1e008k().b[5][0]++;
          cov_1kgk1e008k().s[34]++;
          return traitValidation;
        } else
        /* istanbul ignore next */
        {
          cov_1kgk1e008k().b[5][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1kgk1e008k().b[4][1]++;
    }
    cov_1kgk1e008k().s[35]++;
    return {
      isValid: true,
      errors: [],
      warnings: []
    };
  }
  /**
   * Initialise le réseau neuronal avec gestion d'erreurs robuste
   */
  async initializeNeuralNetwork() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[3]++;
    cov_1kgk1e008k().s[36]++;
    return ErrorHandler_1.errorHandler.withRetry(async () => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[4]++;
      cov_1kgk1e008k().s[37]++;
      await this.mesh.initialize();
      // Configure network based on traits
      /* istanbul ignore next */
      cov_1kgk1e008k().s[38]++;
      this.mesh.stimulate('sensory_input', this.traits.curiosity);
      /* istanbul ignore next */
      cov_1kgk1e008k().s[39]++;
      this.mesh.stimulate('memory_input', this.traits.focus);
    }, {
      maxRetries: 3,
      backoffMs: 100,
      // @ts-expect-error Paramètre réservé pour usage futur
      shouldRetry: (error, attempt) => {
        /* istanbul ignore next */
        cov_1kgk1e008k().f[5]++;
        cov_1kgk1e008k().s[40]++;
        return attempt < 3;
      }
    }, {
      component: 'OrganismCore',
      method: 'initializeNeuralNetwork'
    });
  }
  /**
   * Met à jour l'état de l'organisme (appelé périodiquement)
   */
  update(deltaTime =
  /* istanbul ignore next */
  (cov_1kgk1e008k().b[6][0]++, 1)) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[6]++;
    cov_1kgk1e008k().s[41]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[7]++;
      // Validation des paramètres
      const validation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[42]++, ErrorHandler_1.errorHandler.validateType(deltaTime, 'number', {
        required: true,
        min: 0.001,
        max: 1000
      }, 'deltaTime', 'OrganismCore', 'update'));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[43]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[7][0]++;
        cov_1kgk1e008k().s[44]++;
        throw new Error(`Invalid deltaTime: ${validation.errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[7][1]++;
      }
      // Neural processing
      cov_1kgk1e008k().s[45]++;
      this.mesh.propagate();
      // Energy management
      /* istanbul ignore next */
      cov_1kgk1e008k().s[46]++;
      this.updateEnergy(deltaTime);
      // Health management
      /* istanbul ignore next */
      cov_1kgk1e008k().s[47]++;
      this.updateHealth();
      // Trait evolution based on neural activity
      /* istanbul ignore next */
      cov_1kgk1e008k().s[48]++;
      this.evolveTraits();
    }, undefined,
    // No fallback for update
    {
      component: 'OrganismCore',
      method: 'update'
    });
  }
  /**
   * Met à jour l'énergie basée sur l'activité neurale
   */
  updateEnergy(deltaTime) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[8]++;
    cov_1kgk1e008k().s[49]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[9]++;
      const neuralActivity =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[50]++, this.mesh.getNeuralActivity());
      const energyCost =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[51]++, neuralActivity * this.metabolismRate * deltaTime);
      /* istanbul ignore next */
      cov_1kgk1e008k().s[52]++;
      this.energy = Math.max(0, Math.min(1, this.energy - energyCost));
      // Low energy affects health
      /* istanbul ignore next */
      cov_1kgk1e008k().s[53]++;
      if (this.energy < 0.2) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[8][0]++;
        cov_1kgk1e008k().s[54]++;
        this.health *= 0.999;
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[8][1]++;
      }
    }, undefined, {
      component: 'OrganismCore',
      method: 'updateEnergy'
    });
  }
  /**
   * Met à jour la santé basée sur les conditions actuelles
   */
  updateHealth() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[10]++;
    cov_1kgk1e008k().s[55]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[11]++;
      cov_1kgk1e008k().s[56]++;
      // Health recovery when energy is high
      if (this.energy > 0.8) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[9][0]++;
        cov_1kgk1e008k().s[57]++;
        this.health = Math.min(1, this.health + 0.001);
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[9][1]++;
      }
      // Ensure health doesn't drop below 0
      cov_1kgk1e008k().s[58]++;
      this.health = Math.max(0, this.health);
    }, undefined, {
      component: 'OrganismCore',
      method: 'updateHealth'
    });
  }
  /**
   * Fait évoluer les traits basés sur l'activité neurale
   */
  evolveTraits() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[12]++;
    cov_1kgk1e008k().s[59]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[13]++;
      const activity =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[60]++, this.mesh.getNeuralActivity());
      const connectionStrength =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[61]++, this.mesh.getConnectionStrength());
      // Subtle trait evolution
      const evolutionRate =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[62]++, 0.001);
      /* istanbul ignore next */
      cov_1kgk1e008k().s[63]++;
      this.traits.focus += (activity - 0.5) * evolutionRate;
      /* istanbul ignore next */
      cov_1kgk1e008k().s[64]++;
      this.traits.creativity += (connectionStrength - 0.5) * evolutionRate;
      // Clamp traits to valid range
      /* istanbul ignore next */
      cov_1kgk1e008k().s[65]++;
      Object.keys(this.traits).forEach(key => {
        /* istanbul ignore next */
        cov_1kgk1e008k().f[14]++;
        const typedKey =
        /* istanbul ignore next */
        (cov_1kgk1e008k().s[66]++, key);
        /* istanbul ignore next */
        cov_1kgk1e008k().s[67]++;
        this.traits[typedKey] = Math.max(0, Math.min(1, this.traits[typedKey]));
      });
    }, undefined, {
      component: 'OrganismCore',
      method: 'evolveTraits'
    });
  }
  /**
   * Stimule le réseau (ex : perception sensorielle)
   */
  stimulate(inputId, value) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[15]++;
    cov_1kgk1e008k().s[68]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[16]++;
      // Validation des paramètres avec ErrorHandler
      const inputValidation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[69]++, ErrorHandler_1.errorHandler.validateType(inputId, 'string', {
        required: true
      }, 'inputId', 'OrganismCore', 'stimulate'));
      const valueValidation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[70]++, ErrorHandler_1.errorHandler.validateType(value, 'number', {
        required: true
      }, 'value', 'OrganismCore', 'stimulate'));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_1kgk1e008k().b[11][0]++, !inputValidation.isValid) ||
      /* istanbul ignore next */
      (cov_1kgk1e008k().b[11][1]++, !valueValidation.isValid)) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[10][0]++;
        cov_1kgk1e008k().s[72]++;
        throw new Error('Invalid stimulate parameters');
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[10][1]++;
      }
      cov_1kgk1e008k().s[73]++;
      this.mesh.stimulate(inputId, value);
    }, undefined, {
      component: 'OrganismCore',
      method: 'stimulate'
    });
  }
  /**
   * Traite une mutation batchée
   */
  async processBatchedMutation(batch) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[17]++;
    cov_1kgk1e008k().s[74]++;
    return ErrorHandler_1.errorHandler.safeExecuteAsync(async () => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[18]++;
      cov_1kgk1e008k().s[75]++;
      // Applique la mutation au réseau neuronal
      await this.mesh.mutate(batch.combinedRate);
      // Applique des mutations aux traits basées sur le batch
      const traitMutationRate =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[76]++, batch.combinedRate * 0.5); // Moins agressif pour les traits
      /* istanbul ignore next */
      cov_1kgk1e008k().s[77]++;
      Object.keys(this.traits).forEach(key => {
        /* istanbul ignore next */
        cov_1kgk1e008k().f[19]++;
        cov_1kgk1e008k().s[78]++;
        if (Math.random() < traitMutationRate) {
          /* istanbul ignore next */
          cov_1kgk1e008k().b[12][0]++;
          const mutation =
          /* istanbul ignore next */
          (cov_1kgk1e008k().s[79]++, (Math.random() - 0.5) * 0.1 * batch.combinedRate);
          const typedKey =
          /* istanbul ignore next */
          (cov_1kgk1e008k().s[80]++, key);
          /* istanbul ignore next */
          cov_1kgk1e008k().s[81]++;
          this.traits[typedKey] = Math.max(0, Math.min(1, this.traits[typedKey] + mutation));
        } else
        /* istanbul ignore next */
        {
          cov_1kgk1e008k().b[12][1]++;
        }
      });
      /* istanbul ignore next */
      cov_1kgk1e008k().s[82]++;
      this.lastMutation = Date.now();
      /* istanbul ignore next */
      cov_1kgk1e008k().s[83]++;
      ErrorHandler_1.errorHandler.logSimpleError('OrganismCore', 'processBatchedMutation', `Processed batched mutation: rate=${batch.combinedRate.toFixed(3)}, requests=${batch.requestCount}`, 'info');
    }, undefined, {
      component: 'OrganismCore',
      method: 'processBatchedMutation'
    });
  }
  /**
   * Applique une mutation (neural et potentiellement ADN) - Version optimisée avec batching
   */
  mutate(rate =
  /* istanbul ignore next */
  (cov_1kgk1e008k().b[13][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[20]++;
    cov_1kgk1e008k().s[84]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[21]++;
      // Validation du taux de mutation
      const validation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[85]++, ErrorHandler_1.errorHandler.validateType(rate, 'number', {
        required: true,
        min: 0,
        max: 1
      }, 'rate', 'OrganismCore', 'mutate'));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[86]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[14][0]++;
        cov_1kgk1e008k().s[87]++;
        throw new Error(`Invalid mutation rate: ${validation.errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[14][1]++;
      }
      // Détermine la priorité basée sur le taux de mutation
      let priority =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[88]++, 'normal');
      /* istanbul ignore next */
      cov_1kgk1e008k().s[89]++;
      if (rate > 0.3) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[15][0]++;
        cov_1kgk1e008k().s[90]++;
        priority = 'high';
      } else {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[15][1]++;
        cov_1kgk1e008k().s[91]++;
        if (rate < 0.01) {
          /* istanbul ignore next */
          cov_1kgk1e008k().b[16][0]++;
          cov_1kgk1e008k().s[92]++;
          priority = 'low';
        } else
        /* istanbul ignore next */
        {
          cov_1kgk1e008k().b[16][1]++;
        }
      }
      // Ajoute la mutation au batch au lieu de l'exécuter immédiatement
      const mutationId =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[93]++, this.mutationBatcher.addMutation(rate, priority));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[94]++;
      ErrorHandler_1.errorHandler.logSimpleError('OrganismCore', 'mutate', `Queued mutation: id=${mutationId}, rate=${rate}, priority=${priority}`, 'debug');
    }, undefined, {
      component: 'OrganismCore',
      method: 'mutate'
    });
  }
  /**
   * Force l'application immédiate de toutes les mutations en attente
   */
  async flushMutations() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[22]++;
    cov_1kgk1e008k().s[95]++;
    return ErrorHandler_1.errorHandler.safeExecuteAsync(async () => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[23]++;
      cov_1kgk1e008k().s[96]++;
      await this.mutationBatcher.flushBatch();
    }, undefined, {
      component: 'OrganismCore',
      method: 'flushMutations'
    });
  }
  /**
   * Nourrit l'organisme pour restaurer l'énergie
   */
  feed(amount =
  /* istanbul ignore next */
  (cov_1kgk1e008k().b[17][0]++, 0.3)) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[24]++;
    cov_1kgk1e008k().s[97]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[25]++;
      const validation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[98]++, ErrorHandler_1.errorHandler.validateType(amount, 'number', {
        required: true,
        min: 0,
        max: 1
      }, 'amount', 'OrganismCore', 'feed'));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[99]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[18][0]++;
        cov_1kgk1e008k().s[100]++;
        throw new Error(`Invalid feed amount: ${validation.errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[18][1]++;
      }
      cov_1kgk1e008k().s[101]++;
      this.energy = Math.min(1, this.energy + amount);
    }, undefined, {
      component: 'OrganismCore',
      method: 'feed'
    });
  }
  /**
   * Récupère les traits courants
   */
  getTraits() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[26]++;
    cov_1kgk1e008k().s[102]++;
    return {
      ...this.traits
    };
  }
  /**
   * Définit de nouveaux traits
   */
  setTraits(traits) {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[27]++;
    cov_1kgk1e008k().s[103]++;
    ErrorHandler_1.errorHandler.safeExecute(() => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[28]++;
      const validation =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[104]++, this.validateInput(this.dna, traits));
      /* istanbul ignore next */
      cov_1kgk1e008k().s[105]++;
      if (!validation.isValid) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[19][0]++;
        cov_1kgk1e008k().s[106]++;
        throw new Error(`Invalid traits: ${validation.errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[19][1]++;
      }
      // On fusionne en s'assurant que chaque champ est bien un nombre
      cov_1kgk1e008k().s[107]++;
      Object.keys(traits).forEach(key => {
        /* istanbul ignore next */
        cov_1kgk1e008k().f[29]++;
        const value =
        /* istanbul ignore next */
        (cov_1kgk1e008k().s[108]++, traits[key]);
        /* istanbul ignore next */
        cov_1kgk1e008k().s[109]++;
        if (
        /* istanbul ignore next */
        (cov_1kgk1e008k().b[21][0]++, typeof value === 'number') &&
        /* istanbul ignore next */
        (cov_1kgk1e008k().b[21][1]++, !isNaN(value))) {
          /* istanbul ignore next */
          cov_1kgk1e008k().b[20][0]++;
          cov_1kgk1e008k().s[110]++;
          this.traits[key] = value;
        } else
        /* istanbul ignore next */
        {
          cov_1kgk1e008k().b[20][1]++;
        }
      });
    }, undefined, {
      component: 'OrganismCore',
      method: 'setTraits'
    });
  }
  /**
   * Récupère l'état global de l'organisme
   */
  getState() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[30]++;
    cov_1kgk1e008k().s[111]++;
    return {
      id: 'core',
      generation: 1,
      health: this.health,
      energy: this.energy,
      traits: this.getTraits(),
      visualDNA: this.dna,
      lastMutation: this.lastMutation,
      mutations: [],
      createdAt: Date.now(),
      dna: this.dna,
      birthTime: Date.now(),
      socialConnections: [],
      memoryFragments: []
    };
  }
  /**
   * Récupère les métriques de performance - Version étendue avec mutations
   */
  async getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[31]++;
    cov_1kgk1e008k().s[112]++;
    try {
      const baseMetrics =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[113]++, await this.measurePerformance());
      /* istanbul ignore next */
      cov_1kgk1e008k().s[114]++;
      return {
        ...baseMetrics,
        neuralActivity: this.calculateNeuralActivity(),
        connectionStrength: this.calculateConnectionStrength(),
        mutationStats: this.mutationBatcher.getStatistics()
      };
    } catch (err) {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[115]++;
      this.logger?.error('Failed to get performance metrics', {
        organismId: this.id,
        err
      });
      /* istanbul ignore next */
      cov_1kgk1e008k().s[116]++;
      return {
        cpu: 0,
        memory: 0,
        neuralActivity: 0,
        connectionStrength: 0,
        mutationStats: this.mutationBatcher.getStatistics()
      };
    }
  }
  /**
   * Export JSON typé pour debug/visualisation
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[32]++;
    cov_1kgk1e008k().s[117]++;
    return {
      mesh: this.mesh.toJSON(),
      traits: this.traits,
      energy: this.energy,
      health: this.health,
      dna: this.dna,
      timestamp: Date.now()
    };
  }
  /**
   * Récupère les paramètres shaders courants (pour WebGL)
   */
  getShaderParameters() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[33]++;
    cov_1kgk1e008k().s[118]++;
    // Return shader parameters based on current organism state
    return {
      energy: this.energy,
      health: this.health,
      neuralActivity: this.mesh.getNeuralActivity(),
      creativity: this.traits.creativity,
      focus: this.traits.focus,
      time: Date.now() / 1000
    };
  }
  /**
   * Initialise l'organisme
   */
  async boot() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[34]++;
    cov_1kgk1e008k().s[119]++;
    try {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[120]++;
      this.logger?.debug('Starting organism boot sequence', this.id);
      // Initialize neural mesh
      /* istanbul ignore next */
      cov_1kgk1e008k().s[121]++;
      if (!this.neuralMesh) {
        /* istanbul ignore next */
        cov_1kgk1e008k().b[22][0]++;
        cov_1kgk1e008k().s[122]++;
        throw new Error('Neural mesh not provided');
      } else
      /* istanbul ignore next */
      {
        cov_1kgk1e008k().b[22][1]++;
      }
      // Add basic neural network structure
      cov_1kgk1e008k().s[123]++;
      this.neuralMesh.addNode('sensory_input', 'input');
      /* istanbul ignore next */
      cov_1kgk1e008k().s[124]++;
      this.neuralMesh.addNode('memory_input', 'input');
      /* istanbul ignore next */
      cov_1kgk1e008k().s[125]++;
      this.neuralMesh.addNode('decision_output', 'output');
      /* istanbul ignore next */
      cov_1kgk1e008k().s[126]++;
      this.neuralMesh.addNode('emotion_output', 'output');
      // Connect inputs to outputs
      /* istanbul ignore next */
      cov_1kgk1e008k().s[127]++;
      this.neuralMesh.addConnection('sensory_input', 'decision_output', 0.5);
      /* istanbul ignore next */
      cov_1kgk1e008k().s[128]++;
      this.neuralMesh.addConnection('memory_input', 'emotion_output', 0.3);
      /* istanbul ignore next */
      cov_1kgk1e008k().s[129]++;
      this.isBooted = true;
      /* istanbul ignore next */
      cov_1kgk1e008k().s[130]++;
      this.logger?.info('Organism boot completed successfully', this.id);
    } catch (error) {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[131]++;
      this.logger?.error('Failed to boot organism', {
        organismId: this.id,
        error
      });
      /* istanbul ignore next */
      cov_1kgk1e008k().s[132]++;
      ErrorHandler_1.errorHandler.logSimpleError('OrganismCore', 'boot', error instanceof Error ?
      /* istanbul ignore next */
      (cov_1kgk1e008k().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1kgk1e008k().b[23][1]++, 'Boot failed'), 'error');
      /* istanbul ignore next */
      cov_1kgk1e008k().s[133]++;
      throw error;
    }
  }
  /**
   * Met l'organisme en hibernation - Version étendue avec nettoyage du batcher
   */
  async hibernate() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[35]++;
    cov_1kgk1e008k().s[134]++;
    return ErrorHandler_1.errorHandler.safeExecuteAsync(async () => {
      /* istanbul ignore next */
      cov_1kgk1e008k().f[36]++;
      cov_1kgk1e008k().s[135]++;
      // Traite les mutations en attente avant hibernation
      await this.mutationBatcher.flushBatch();
      // Nettoie le batcher
      /* istanbul ignore next */
      cov_1kgk1e008k().s[136]++;
      this.mutationBatcher.dispose();
      /* istanbul ignore next */
      cov_1kgk1e008k().s[137]++;
      await this.mesh.suspend();
      /* istanbul ignore next */
      cov_1kgk1e008k().s[138]++;
      console.log('Organism core hibernating...');
    }, undefined, {
      component: 'OrganismCore',
      method: 'hibernate'
    });
  }
  /**
   * Mesure les performances de base
   */
  async measurePerformance() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[37]++;
    cov_1kgk1e008k().s[139]++;
    try {
      const cpuUsage =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[140]++, await this.mesh.getCPUUsage());
      const memoryUsage =
      /* istanbul ignore next */
      (cov_1kgk1e008k().s[141]++, await this.mesh.getMemoryUsage());
      /* istanbul ignore next */
      cov_1kgk1e008k().s[142]++;
      return {
        cpu: cpuUsage,
        memory: memoryUsage,
        neuralActivity: this.calculateNeuralActivity(),
        connectionStrength: this.calculateConnectionStrength()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[143]++;
      return {
        cpu: 0,
        memory: 0,
        neuralActivity: 0,
        connectionStrength: 0
      };
    }
  }
  /**
   * Calcule l'activité neurale
   */
  calculateNeuralActivity() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[38]++;
    cov_1kgk1e008k().s[144]++;
    try {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[145]++;
      return this.mesh.getNeuralActivity();
    } catch (error) {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[146]++;
      return 0;
    }
  }
  /**
   * Calcule la force de connexion
   */
  calculateConnectionStrength() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[39]++;
    cov_1kgk1e008k().s[147]++;
    try {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[148]++;
      return this.mesh.getConnectionStrength();
    } catch (error) {
      /* istanbul ignore next */
      cov_1kgk1e008k().s[149]++;
      return 0;
    }
  }
  // @ts-expect-error Méthode réservée pour usage futur
  handleBootError() {
    /* istanbul ignore next */
    cov_1kgk1e008k().f[40]++;
  } // Implementation of handleBootError method
}
/* istanbul ignore next */
cov_1kgk1e008k().s[150]++;
exports.OrganismCore = OrganismCore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,