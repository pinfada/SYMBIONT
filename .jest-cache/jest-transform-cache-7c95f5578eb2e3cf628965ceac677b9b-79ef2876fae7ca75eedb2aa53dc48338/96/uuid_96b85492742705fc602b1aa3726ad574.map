{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/uuid.ts","mappings":";;AAGA,oCAgBC;AAKD,sDAGC;AAMD,gDA2BC;AA5DD;;GAEG;AACH,SAAgB,YAAY;IAC1B,kDAAkD;IAClD,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QACvD,IAAI,CAAC;YACH,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED,2EAA2E;IAC3E,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,CAAC;QACvE,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;QAC1C,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB;IACnC,OAAO,OAAO,MAAM,KAAK,WAAW;QAC7B,OAAO,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC;AACjD,CAAC;AAED;;;GAGG;AACH,SAAgB,kBAAkB;IAChC,IAAI,qBAAqB,EAAE,EAAE,CAAC;QAC5B,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAED,mEAAmE;IACnE,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;QAC5D,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QACjC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAE9B,wBAAwB;QACxB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,UAAU;QAC/C,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,UAAU;QAE/C,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnF,OAAO;YACL,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;YACf,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YAChB,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;YACjB,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;YACjB,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;SAClB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACd,CAAC;IAED,kCAAkC;IAClC,OAAO,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;IACvF,OAAO,YAAY,EAAE,CAAC;AACxB,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/uuid.ts"],"sourcesContent":["/**\r\n * Génère un UUID v4 avec fallback pour les environnements sans crypto.randomUUID\r\n */\r\nexport function generateUUID(): string {\r\n  // Essayer d'abord crypto.randomUUID si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n    try {\r\n      return crypto.randomUUID();\r\n    } catch (error) {\r\n      console.warn('crypto.randomUUID failed, using fallback:', error);\r\n    }\r\n  }\r\n\r\n  // Fallback pour les environnements qui ne supportent pas crypto.randomUUID\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n/**\r\n * Vérifie si crypto.randomUUID est disponible dans l'environnement actuel\r\n */\r\nexport function isCryptoUUIDAvailable(): boolean {\r\n  return typeof crypto !== 'undefined' && \r\n         typeof crypto.randomUUID === 'function';\r\n}\r\n\r\n/**\r\n * Génère un UUID v4 cryptographiquement sécurisé si possible\r\n * Sinon utilise Math.random() comme fallback\r\n */\r\nexport function generateSecureUUID(): string {\r\n  if (isCryptoUUIDAvailable()) {\r\n    return crypto.randomUUID();\r\n  }\r\n\r\n  // Fallback sécurisé utilisant crypto.getRandomValues si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n    const array = new Uint8Array(16);\r\n    crypto.getRandomValues(array);\r\n    \r\n    // Version 4 UUID format\r\n    array[6] = (array[6] & 0x0f) | 0x40; // version\r\n    array[8] = (array[8] & 0x3f) | 0x80; // variant\r\n    \r\n    const hex = Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n    return [\r\n      hex.slice(0, 8),\r\n      hex.slice(8, 12),\r\n      hex.slice(12, 16),\r\n      hex.slice(16, 20),\r\n      hex.slice(20, 32)\r\n    ].join('-');\r\n  }\r\n\r\n  // Dernier recours : Math.random()\r\n  console.warn('Using Math.random() for UUID generation - not cryptographically secure');\r\n  return generateUUID();\r\n} "],"version":3}