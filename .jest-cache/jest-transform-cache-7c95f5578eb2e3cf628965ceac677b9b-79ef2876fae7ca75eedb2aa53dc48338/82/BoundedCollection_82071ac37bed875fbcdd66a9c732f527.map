{"version":3,"names":["cov_29cqzzypzs","actualCoverage","s","secureLogger_1","require","BoundedArray","constructor","maxSize","name","b","f","items","Math","max","add","item","push","length","removed","splice","logger","debug","addBatch","getAll","getRecent","count","slice","min","start","end","filter","predicate","reduce","callbackfn","initialValue","Symbol","iterator","clear","cleared","size","isFull","getMemoryUsage","utilizationPercent","exports","BoundedMap","ttlMs","Map","cleanupTimer","startCleanupTimer","set","key","value","now","Date","cleanupExpired","has","firstKey","keys","next","undefined","delete","timestamp","get","cleaned","entries","setInterval","destroy","clearInterval"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/BoundedCollection.ts"],"sourcesContent":["// src/shared/utils/BoundedCollection.ts\r\nimport { logger } from './secureLogger';\r\n\r\n/**\r\n * Collection avec taille limitée pour éviter les fuites mémoire\r\n * Utilise une stratégie LRU (Least Recently Used)\r\n */\r\nexport class BoundedArray<T> {\r\n  private items: T[] = [];\r\n  private readonly maxSize: number;\r\n  private readonly name: string;\r\n\r\n  constructor(maxSize: number, name = 'BoundedArray') {\r\n    this.maxSize = Math.max(1, maxSize);\r\n    this.name = name;\r\n  }\r\n\r\n  add(item: T): void {\r\n    this.items.push(item);\r\n    \r\n    if (this.items.length > this.maxSize) {\r\n      const removed = this.items.splice(0, this.items.length - this.maxSize);\r\n      logger.debug(`${this.name}: Cleaned ${removed.length} old items, keeping ${this.items.length}/${this.maxSize}`);\r\n    }\r\n  }\r\n\r\n  addBatch(items: T[]): void {\r\n    this.items.push(...items);\r\n    \r\n    if (this.items.length > this.maxSize) {\r\n      const removed = this.items.splice(0, this.items.length - this.maxSize);\r\n      logger.debug(`${this.name}: Batch cleaned ${removed.length} old items`);\r\n    }\r\n  }\r\n\r\n  getAll(): readonly T[] {\r\n    return this.items;\r\n  }\r\n\r\n  getRecent(count: number): readonly T[] {\r\n    return this.items.slice(-Math.min(count, this.items.length));\r\n  }\r\n\r\n  // Array-like methods for compatibility\r\n  slice(start?: number, end?: number): T[] {\r\n    return this.items.slice(start, end);\r\n  }\r\n\r\n  filter(predicate: (value: T, index: number, array: T[]) => boolean): T[] {\r\n    return this.items.filter(predicate);\r\n  }\r\n\r\n  reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U {\r\n    return this.items.reduce(callbackfn, initialValue);\r\n  }\r\n\r\n  // Iterator support\r\n  [Symbol.iterator](): Iterator<T> {\r\n    return this.items[Symbol.iterator]();\r\n  }\r\n\r\n  // Length getter for array-like behavior\r\n  get length(): number {\r\n    return this.items.length;\r\n  }\r\n\r\n  clear(): void {\r\n    const cleared = this.items.length;\r\n    this.items = [];\r\n    logger.debug(`${this.name}: Cleared ${cleared} items`);\r\n  }\r\n\r\n  size(): number {\r\n    return this.items.length;\r\n  }\r\n\r\n  isFull(): boolean {\r\n    return this.items.length >= this.maxSize;\r\n  }\r\n\r\n  getMemoryUsage(): { count: number; maxSize: number; utilizationPercent: number } {\r\n    return {\r\n      count: this.items.length,\r\n      maxSize: this.maxSize,\r\n      utilizationPercent: (this.items.length / this.maxSize) * 100\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Map avec taille limitée et TTL (Time To Live)\r\n */\r\nexport class BoundedMap<K, V> {\r\n  private items = new Map<K, { value: V; timestamp: number }>();\r\n  private readonly maxSize: number;\r\n  private readonly ttlMs: number;\r\n  private readonly name: string;\r\n  private cleanupTimer: NodeJS.Timeout | null = null;\r\n\r\n  constructor(maxSize: number, ttlMs = 0, name = 'BoundedMap') {\r\n    this.maxSize = Math.max(1, maxSize);\r\n    this.ttlMs = ttlMs;\r\n    this.name = name;\r\n\r\n    // Nettoyage automatique si TTL configuré\r\n    if (this.ttlMs > 0) {\r\n      this.startCleanupTimer();\r\n    }\r\n  }\r\n\r\n  set(key: K, value: V): void {\r\n    const now = Date.now();\r\n    \r\n    // Nettoie les anciens éléments si nécessaire\r\n    this.cleanupExpired();\r\n    \r\n    // Supprime le plus ancien si taille max atteinte\r\n    if (this.items.size >= this.maxSize && !this.items.has(key)) {\r\n      const firstKey = this.items.keys().next().value;\r\n      if (firstKey !== undefined) {\r\n        this.items.delete(firstKey);\r\n        logger.debug(`${this.name}: Removed oldest item to make space`);\r\n      }\r\n    }\r\n\r\n    this.items.set(key, { value, timestamp: now });\r\n  }\r\n\r\n  get(key: K): V | undefined {\r\n    const item = this.items.get(key);\r\n    if (!item) return undefined;\r\n\r\n    // Vérifie le TTL\r\n    if (this.ttlMs > 0 && Date.now() - item.timestamp > this.ttlMs) {\r\n      this.items.delete(key);\r\n      return undefined;\r\n    }\r\n\r\n    return item.value;\r\n  }\r\n\r\n  has(key: K): boolean {\r\n    return this.get(key) !== undefined;\r\n  }\r\n\r\n  delete(key: K): boolean {\r\n    return this.items.delete(key);\r\n  }\r\n\r\n  clear(): void {\r\n    const cleared = this.items.size;\r\n    this.items.clear();\r\n    logger.debug(`${this.name}: Cleared ${cleared} items`);\r\n  }\r\n\r\n  size(): number {\r\n    this.cleanupExpired();\r\n    return this.items.size;\r\n  }\r\n\r\n  private cleanupExpired(): void {\r\n    if (this.ttlMs <= 0) return;\r\n\r\n    const now = Date.now();\r\n    let cleaned = 0;\r\n\r\n    for (const [key, item] of this.items.entries()) {\r\n      if (now - item.timestamp > this.ttlMs) {\r\n        this.items.delete(key);\r\n        cleaned++;\r\n      }\r\n    }\r\n\r\n    if (cleaned > 0) {\r\n      logger.debug(`${this.name}: Cleaned ${cleaned} expired items`);\r\n    }\r\n  }\r\n\r\n  private startCleanupTimer(): void {\r\n    // Nettoie toutes les minutes\r\n    this.cleanupTimer = setInterval(() => {\r\n      this.cleanupExpired();\r\n    }, 60000);\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.cleanupTimer) {\r\n      clearInterval(this.cleanupTimer);\r\n      this.cleanupTimer = null;\r\n    }\r\n    this.clear();\r\n  }\r\n\r\n  getMemoryUsage(): { count: number; maxSize: number; utilizationPercent: number } {\r\n    this.cleanupExpired();\r\n    return {\r\n      count: this.items.size,\r\n      maxSize: this.maxSize,\r\n      utilizationPercent: (this.items.size / this.maxSize) * 100\r\n    };\r\n  }\r\n}"],"mappingsiBa;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAjBb;AACA,MAAAC,cAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA;;;;AAIA,MAAaC,YAAY;EAKvBC,YAAYC,OAAe,EAAEC,IAAI;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAG,cAAc;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAJ1C,KAAAS,KAAK,GAAQ,EAAE;IAAC;IAAAX,cAAA,GAAAE,CAAA;IAKtB,IAAI,CAACK,OAAO,GAAGK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,OAAO,CAAC;IAAC;IAAAP,cAAA,GAAAE,CAAA;IACpC,IAAI,CAACM,IAAI,GAAGA,IAAI;EAClB;EAEAM,GAAGA,CAACC,IAAO;IAAA;IAAAf,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACT,IAAI,CAACS,KAAK,CAACK,IAAI,CAACD,IAAI,CAAC;IAAC;IAAAf,cAAA,GAAAE,CAAA;IAEtB,IAAI,IAAI,CAACS,KAAK,CAACM,MAAM,GAAG,IAAI,CAACV,OAAO,EAAE;MAAA;MAAAP,cAAA,GAAAS,CAAA;MACpC,MAAMS,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,OAAG,IAAI,CAACS,KAAK,CAACQ,MAAM,CAAC,CAAC,EAAE,IAAI,CAACR,KAAK,CAACM,MAAM,GAAG,IAAI,CAACV,OAAO,CAAC;MAAC;MAAAP,cAAA,GAAAE,CAAA;MACvEC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,aAAaU,OAAO,CAACD,MAAM,uBAAuB,IAAI,CAACN,KAAK,CAACM,MAAM,IAAI,IAAI,CAACV,OAAO,EAAE,CAAC;IACjH,CAAC;IAAA;IAAA;MAAAP,cAAA,GAAAS,CAAA;IAAA;EACH;EAEAa,QAAQA,CAACX,KAAU;IAAA;IAAAX,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACjB,IAAI,CAACS,KAAK,CAACK,IAAI,CAAC,GAAGL,KAAK,CAAC;IAAC;IAAAX,cAAA,GAAAE,CAAA;IAE1B,IAAI,IAAI,CAACS,KAAK,CAACM,MAAM,GAAG,IAAI,CAACV,OAAO,EAAE;MAAA;MAAAP,cAAA,GAAAS,CAAA;MACpC,MAAMS,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACS,KAAK,CAACQ,MAAM,CAAC,CAAC,EAAE,IAAI,CAACR,KAAK,CAACM,MAAM,GAAG,IAAI,CAACV,OAAO,CAAC;MAAC;MAAAP,cAAA,GAAAE,CAAA;MACvEC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,mBAAmBU,OAAO,CAACD,MAAM,YAAY,CAAC;IACzE,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAS,CAAA;IAAA;EACH;EAEAc,MAAMA,CAAA;IAAA;IAAAvB,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACJ,OAAO,IAAI,CAACS,KAAK;EACnB;EAEAa,SAASA,CAACC,KAAa;IAAA;IAAAzB,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACrB,OAAO,IAAI,CAACS,KAAK,CAACe,KAAK,CAAC,CAACd,IAAI,CAACe,GAAG,CAACF,KAAK,EAAE,IAAI,CAACd,KAAK,CAACM,MAAM,CAAC,CAAC;EAC9D;EAEA;EACAS,KAAKA,CAACE,KAAc,EAAEC,GAAY;IAAA;IAAA7B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAChC,OAAO,IAAI,CAACS,KAAK,CAACe,KAAK,CAACE,KAAK,EAAEC,GAAG,CAAC;EACrC;EAEAC,MAAMA,CAACC,SAA2D;IAAA;IAAA/B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAChE,OAAO,IAAI,CAACS,KAAK,CAACmB,MAAM,CAACC,SAAS,CAAC;EACrC;EAEAC,MAAMA,CAAIC,UAAsF,EAAEC,YAAe;IAAA;IAAAlC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAC/G,OAAO,IAAI,CAACS,KAAK,CAACqB,MAAM,CAACC,UAAU,EAAEC,YAAY,CAAC;EACpD;EAEA;EACA,CAACC,MAAM,CAACC,QAAQ,IAAC;IAAA;IAAApC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACf,OAAO,IAAI,CAACS,KAAK,CAACwB,MAAM,CAACC,QAAQ,CAAC,EAAE;EACtC;EAEA;EACA,IAAInB,MAAMA,CAAA;IAAA;IAAAjB,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACR,OAAO,IAAI,CAACS,KAAK,CAACM,MAAM;EAC1B;EAEAoB,KAAKA,CAAA;IAAA;IAAArC,cAAA,GAAAU,CAAA;IACH,MAAM4B,OAAO;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACS,KAAK,CAACM,MAAM;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACS,KAAK,GAAG,EAAE;IAAC;IAAAX,cAAA,GAAAE,CAAA;IAChBC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,aAAa8B,OAAO,QAAQ,CAAC;EACxD;EAEAC,IAAIA,CAAA;IAAA;IAAAvC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACF,OAAO,IAAI,CAACS,KAAK,CAACM,MAAM;EAC1B;EAEAuB,MAAMA,CAAA;IAAA;IAAAxC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACJ,OAAO,IAAI,CAACS,KAAK,CAACM,MAAM,IAAI,IAAI,CAACV,OAAO;EAC1C;EAEAkC,cAAcA,CAAA;IAAA;IAAAzC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACZ,OAAO;MACLuB,KAAK,EAAE,IAAI,CAACd,KAAK,CAACM,MAAM;MACxBV,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBmC,kBAAkB,EAAG,IAAI,CAAC/B,KAAK,CAACM,MAAM,GAAG,IAAI,CAACV,OAAO,GAAI;KAC1D;EACH;;AACD;AAAAP,cAAA,GAAAE,CAAA;AAhFDyC,OAAA,CAAAtC,YAAA,GAAAA,YAAA;AAkFA;;;AAGA,MAAauC,UAAU;EAOrBtC,YAAYC,OAAe,EAAEsC,KAAK;EAAA;EAAA,CAAA7C,cAAA,GAAAS,CAAA,UAAG,CAAC,GAAED,IAAI;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAG,YAAY;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IANnD,KAAAS,KAAK,GAAG,IAAImC,GAAG,EAAsC;IAAC;IAAA9C,cAAA,GAAAE,CAAA;IAItD,KAAA6C,YAAY,GAA0B,IAAI;IAAC;IAAA/C,cAAA,GAAAE,CAAA;IAGjD,IAAI,CAACK,OAAO,GAAGK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,OAAO,CAAC;IAAC;IAAAP,cAAA,GAAAE,CAAA;IACpC,IAAI,CAAC2C,KAAK,GAAGA,KAAK;IAAC;IAAA7C,cAAA,GAAAE,CAAA;IACnB,IAAI,CAACM,IAAI,GAAGA,IAAI;IAEhB;IAAA;IAAAR,cAAA,GAAAE,CAAA;IACA,IAAI,IAAI,CAAC2C,KAAK,GAAG,CAAC,EAAE;MAAA;MAAA7C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAClB,IAAI,CAAC8C,iBAAiB,EAAE;IAC1B,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAS,CAAA;IAAA;EACH;EAEAwC,GAAGA,CAACC,GAAM,EAAEC,KAAQ;IAAA;IAAAnD,cAAA,GAAAU,CAAA;IAClB,MAAM0C,GAAG;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAGmD,IAAI,CAACD,GAAG,EAAE;IAEtB;IAAA;IAAApD,cAAA,GAAAE,CAAA;IACA,IAAI,CAACoD,cAAc,EAAE;IAErB;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,cAAI,CAACE,KAAK,CAAC4B,IAAI,IAAI,IAAI,CAAChC,OAAO;IAAA;IAAA,CAAAP,cAAA,GAAAS,CAAA,UAAI,CAAC,IAAI,CAACE,KAAK,CAAC4C,GAAG,CAACL,GAAG,CAAC,GAAE;MAAA;MAAAlD,cAAA,GAAAS,CAAA;MAC3D,MAAM+C,QAAQ;MAAA;MAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACS,KAAK,CAAC8C,IAAI,EAAE,CAACC,IAAI,EAAE,CAACP,KAAK;MAAC;MAAAnD,cAAA,GAAAE,CAAA;MAChD,IAAIsD,QAAQ,KAAKG,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC1B,IAAI,CAACS,KAAK,CAACiD,MAAM,CAACJ,QAAQ,CAAC;QAAC;QAAAxD,cAAA,GAAAE,CAAA;QAC5BC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,qCAAqC,CAAC;MACjE,CAAC;MAAA;MAAA;QAAAR,cAAA,GAAAS,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI,CAACS,KAAK,CAACsC,GAAG,CAACC,GAAG,EAAE;MAAEC,KAAK;MAAEU,SAAS,EAAET;IAAG,CAAE,CAAC;EAChD;EAEAU,GAAGA,CAACZ,GAAM;IAAA;IAAAlD,cAAA,GAAAU,CAAA;IACR,MAAMK,IAAI;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACS,KAAK,CAACmD,GAAG,CAACZ,GAAG,CAAC;IAAC;IAAAlD,cAAA,GAAAE,CAAA;IACjC,IAAI,CAACa,IAAI,EAAE;MAAA;MAAAf,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,OAAOyD,SAAS;IAAA,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAAS,CAAA;IAAA;IAE5B;IAAAT,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,eAAI,CAACoC,KAAK,GAAG,CAAC;IAAA;IAAA,CAAA7C,cAAA,GAAAS,CAAA,WAAI4C,IAAI,CAACD,GAAG,EAAE,GAAGrC,IAAI,CAAC8C,SAAS,GAAG,IAAI,CAAChB,KAAK,GAAE;MAAA;MAAA7C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAC9D,IAAI,CAACS,KAAK,CAACiD,MAAM,CAACV,GAAG,CAAC;MAAC;MAAAlD,cAAA,GAAAE,CAAA;MACvB,OAAOyD,SAAS;IAClB,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAED,OAAOa,IAAI,CAACoC,KAAK;EACnB;EAEAI,GAAGA,CAACL,GAAM;IAAA;IAAAlD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACR,OAAO,IAAI,CAAC4D,GAAG,CAACZ,GAAG,CAAC,KAAKS,SAAS;EACpC;EAEAC,MAAMA,CAACV,GAAM;IAAA;IAAAlD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACX,OAAO,IAAI,CAACS,KAAK,CAACiD,MAAM,CAACV,GAAG,CAAC;EAC/B;EAEAb,KAAKA,CAAA;IAAA;IAAArC,cAAA,GAAAU,CAAA;IACH,MAAM4B,OAAO;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACS,KAAK,CAAC4B,IAAI;IAAC;IAAAvC,cAAA,GAAAE,CAAA;IAChC,IAAI,CAACS,KAAK,CAAC0B,KAAK,EAAE;IAAC;IAAArC,cAAA,GAAAE,CAAA;IACnBC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,aAAa8B,OAAO,QAAQ,CAAC;EACxD;EAEAC,IAAIA,CAAA;IAAA;IAAAvC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACF,IAAI,CAACoD,cAAc,EAAE;IAAC;IAAAtD,cAAA,GAAAE,CAAA;IACtB,OAAO,IAAI,CAACS,KAAK,CAAC4B,IAAI;EACxB;EAEQe,cAAcA,CAAA;IAAA;IAAAtD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACpB,IAAI,IAAI,CAAC2C,KAAK,IAAI,CAAC,EAAE;MAAA;MAAA7C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAE5B,MAAM2C,GAAG;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAGmD,IAAI,CAACD,GAAG,EAAE;IACtB,IAAIW,OAAO;IAAA;IAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAG,CAAC;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAEhB,KAAK,MAAM,CAACgD,GAAG,EAAEnC,IAAI,CAAC,IAAI,IAAI,CAACJ,KAAK,CAACqD,OAAO,EAAE,EAAE;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MAC9C,IAAIkD,GAAG,GAAGrC,IAAI,CAAC8C,SAAS,GAAG,IAAI,CAAChB,KAAK,EAAE;QAAA;QAAA7C,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QACrC,IAAI,CAACS,KAAK,CAACiD,MAAM,CAACV,GAAG,CAAC;QAAC;QAAAlD,cAAA,GAAAE,CAAA;QACvB6D,OAAO,EAAE;MACX,CAAC;MAAA;MAAA;QAAA/D,cAAA,GAAAS,CAAA;MAAA;IACH;IAAC;IAAAT,cAAA,GAAAE,CAAA;IAED,IAAI6D,OAAO,GAAG,CAAC,EAAE;MAAA;MAAA/D,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACfC,cAAA,CAAAiB,MAAM,CAACC,KAAK,CAAC,GAAG,IAAI,CAACb,IAAI,aAAauD,OAAO,gBAAgB,CAAC;IAChE,CAAC;IAAA;IAAA;MAAA/D,cAAA,GAAAS,CAAA;IAAA;EACH;EAEQuC,iBAAiBA,CAAA;IAAA;IAAAhD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACvB;IACA,IAAI,CAAC6C,YAAY,GAAGkB,WAAW,CAAC,MAAK;MAAA;MAAAjE,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACnC,IAAI,CAACoD,cAAc,EAAE;IACvB,CAAC,EAAE,KAAK,CAAC;EACX;EAEAY,OAAOA,CAAA;IAAA;IAAAlE,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACL,IAAI,IAAI,CAAC6C,YAAY,EAAE;MAAA;MAAA/C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACrBiE,aAAa,CAAC,IAAI,CAACpB,YAAY,CAAC;MAAC;MAAA/C,cAAA,GAAAE,CAAA;MACjC,IAAI,CAAC6C,YAAY,GAAG,IAAI;IAC1B,CAAC;IAAA;IAAA;MAAA/C,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACD,IAAI,CAACmC,KAAK,EAAE;EACd;EAEAI,cAAcA,CAAA;IAAA;IAAAzC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACZ,IAAI,CAACoD,cAAc,EAAE;IAAC;IAAAtD,cAAA,GAAAE,CAAA;IACtB,OAAO;MACLuB,KAAK,EAAE,IAAI,CAACd,KAAK,CAAC4B,IAAI;MACtBhC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBmC,kBAAkB,EAAG,IAAI,CAAC/B,KAAK,CAAC4B,IAAI,GAAG,IAAI,CAAChC,OAAO,GAAI;KACxD;EACH;;AACD;AAAAP,cAAA,GAAAE,CAAA;AA7GDyC,OAAA,CAAAC,UAAA,GAAAA,UAAA","ignoreList":[]}