{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/debug-crypto.test.ts","mappings":";;AAyBA,IAAI,CAAC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3D,WAAW,EAAE;QACX,MAAM,EAAE,gBAAgB;QACxB,eAAe,EAAE,yBAAyB;KAC3C;CACF,CAAC,CAAC,CAAC;AA9BJ,+CAA+C;AAC/C,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QACvC,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE;QAC3C,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;KAClB,CAAC;IACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACnE,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACrF,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;QAC1C,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;CACH,CAAC;AAEF,MAAM,yBAAyB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;IACrE,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACrE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACpC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IACnB,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;IAC/C,OAAO,GAAG,CAAC;AACb,CAAC,CAAC,CAAC;AASH,uEAAoE;AAEpE,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,QAAQ,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,CAAC;QAC1C,QAAgB,CAAC,aAAa,GAAG;YAChC,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE;YAC3C,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;SAClB,CAAC;QAEf,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAE3C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACxF,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/debug-crypto.test.ts"],"sourcesContent":["// Simple test pour débugger le problème crypto\nconst mockCryptoSubtle = {\n  generateKey: jest.fn().mockResolvedValue({ \n    type: 'secret', \n    extractable: true, \n    algorithm: { name: 'AES-GCM', length: 256 }, \n    usages: ['encrypt', 'decrypt'] \n  } as CryptoKey),\n  encrypt: jest.fn().mockImplementation(async (algorithm, key, data) => {\n    console.log('encrypt called with:', { algorithm, key, dataLength: data.byteLength });\n    const result = new ArrayBuffer(32);\n    console.log('encrypt returning:', result);\n    return result;\n  }),\n};\n\nconst mockCryptoGetRandomValues = jest.fn().mockImplementation((arr) => {\n  console.log('getRandomValues called with array length:', arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = i % 256;\n  }\n  console.log('getRandomValues returning:', arr);\n  return arr;\n});\n\njest.mock('../src/background/service-worker-adapter', () => ({\n  swCryptoAPI: {\n    subtle: mockCryptoSubtle,\n    getRandomValues: mockCryptoGetRandomValues\n  }\n}));\n\nimport { SecurityManager } from '../src/background/SecurityManager';\n\ndescribe('Debug Crypto', () => {\n  it('should debug encryption process', async () => {\n    const security = new SecurityManager(true);\n    (security as any).encryptionKey = { \n      type: 'secret', \n      extractable: true, \n      algorithm: { name: 'AES-GCM', length: 256 }, \n      usages: ['encrypt', 'decrypt'] \n    } as CryptoKey;\n\n    console.log('Starting encryption test...');\n    \n    try {\n      const result = await security.encryptSensitiveData({ test: 'data' });\n      console.log('Success! Result:', result);\n    } catch (error) {\n      console.log('Error caught:', error);\n    }\n    \n    console.log('getRandomValues call count:', mockCryptoGetRandomValues.mock.calls.length);\n    console.log('encrypt call count:', mockCryptoSubtle.encrypt.mock.calls.length);\n  });\n});"],"version":3}