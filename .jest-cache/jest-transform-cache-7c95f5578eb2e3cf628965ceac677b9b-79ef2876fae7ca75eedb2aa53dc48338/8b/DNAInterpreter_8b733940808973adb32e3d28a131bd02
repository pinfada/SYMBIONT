dbd2f3958de2462fcd8a0456d0188f26
"use strict";

/* istanbul ignore next */
function cov_10azp4zd3t() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/DNAInterpreter.ts";
  var hash = "28d428d20fb502172df7fca21bf76880576fc788";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/DNAInterpreter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 23
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "7": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "8": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "9": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "10": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "11": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "13": {
        start: {
          line: 47,
          column: 19
        },
        end: {
          line: 47,
          column: 36
        }
      },
      "14": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "15": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "16": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "17": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 29
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 49
        }
      },
      "21": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 48
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 69
        }
      },
      "23": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 78
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 23
        }
      },
      "25": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "26": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "27": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 29
        }
      },
      "28": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 41
        }
      },
      "29": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "30": {
        start: {
          line: 84,
          column: 30
        },
        end: {
          line: 84,
          column: 93
        }
      },
      "31": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 44
        }
      },
      "33": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 34
        }
      },
      "34": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 33
        }
      },
      "35": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 92,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 23
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 45
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 27
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 22
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 81
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 14
          },
          end: {
            line: 15,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 28
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/DNAInterpreter.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/DNAInterpreter.ts"],
      sourcesContent: ["// src/generative/DNAInterpreter.ts\r\n// Interpr\xE9teur DNA \u2192 param\xE8tres visuels harmonis\xE9\r\nimport { ShaderParameters } from '../types';\r\nimport { SecureRandom } from '@shared/utils/secureRandom';\n\r\nexport class DNAInterpreter {\r\n  private dna: string;\r\n  private cachedParams: ShaderParameters | null = null;\r\n  private mutationAccumulator: number = 0;\r\n  \r\n  constructor(dna: string) {\r\n    this.dna = dna;\r\n    this.interpret();\r\n  }\r\n  \r\n  /**\r\n   * Interpr\xE8te le DNA en param\xE8tres shaders d\xE9terministes\r\n   */\r\n  public interpret(dna: string = this.dna): ShaderParameters {\r\n    // DNA string => hash values\r\n    const hash1 = this.hashDNA(dna, 0);\r\n    const hash2 = this.hashDNA(dna, 1);\r\n    const hash3 = this.hashDNA(dna, 2);\r\n    \r\n    // Conversion en param\xE8tres visuels\r\n    const params: ShaderParameters = {\r\n      primaryColor: new Float32Array([\r\n        (hash1 % 256) / 255,\r\n        ((hash1 >> 8) % 256) / 255,\r\n        ((hash1 >> 16) % 256) / 255\r\n      ]),\r\n      secondaryColor: new Float32Array([\r\n        (hash2 % 256) / 255,\r\n        ((hash2 >> 8) % 256) / 255,\r\n        ((hash2 >> 16) % 256) / 255\r\n      ]),\r\n      complexity: (hash1 % 100) / 100,\r\n      symmetry: (hash2 % 100) / 100,\r\n      fluidity: (hash3 % 100) / 100,\r\n      colorVariance: ((hash1 ^ hash2) % 100) / 100,\r\n      patternDensity: ((hash2 ^ hash3) % 100) / 100,\r\n      evolutionRate: ((hash1 ^ hash3) % 100) / 100\r\n    };\r\n    \r\n    this.cachedParams = params;\r\n    return params;\r\n  }\r\n  \r\n  /**\r\n   * Hash FNV-1a pour distribution uniforme\r\n   */\r\n  private hashDNA(dna: string, seed: number): number {\r\n    // FNV-1a hash pour distribution uniforme\r\n    let hash = 2166136261 ^ seed;\r\n    for (let i = 0; i < dna.length; i++) {\r\n      hash ^= dna.charCodeAt(i);\r\n      hash *= 16777619;\r\n    }\r\n    return hash >>> 0;\r\n  }\r\n  \r\n  /**\r\n   * Retourne les param\xE8tres courants, avec mutations accumul\xE9es\r\n   */\r\n  public getCurrentParameters(): ShaderParameters {\r\n    if (!this.cachedParams) {\r\n      this.cachedParams = this.interpret();\r\n    }\r\n    \r\n    // Application des mutations accumul\xE9es\r\n    const mutated = { ...this.cachedParams };\r\n    mutated.fluidity += Math.sin(this.mutationAccumulator) * 0.1;\r\n    mutated.complexity += Math.cos(this.mutationAccumulator * 0.7) * 0.05;\r\n    \r\n    return mutated;\r\n  }\r\n  \r\n  /**\r\n   * Fait \xE9voluer le DNA (mutation progressive)\r\n   */\r\n  public evolveDNA(factor: number): void {\r\n    this.mutationAccumulator += factor;\r\n    // Mutation progressive du DNA\r\n    if (Math.abs(this.mutationAccumulator) > Math.PI * 2) {\r\n      this.mutateDNA();\r\n      this.mutationAccumulator = 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Mutation al\xE9atoire mais contr\xF4l\xE9e du DNA\r\n   */\r\n  private mutateDNA(): void {\r\n    // Mutation al\xE9atoire mais contr\xF4l\xE9e\r\n    const chars = this.dna.split('');\r\n    const mutationIndex = Math.floor(SecureRandom.random() * chars.length);\r\n    const mutationChar = String.fromCharCode(\r\n      33 + Math.floor(SecureRandom.random() * 94) // ASCII printable\r\n    );\r\n    chars[mutationIndex] = mutationChar;\r\n    this.dna = chars.join('');\r\n    this.cachedParams = null; // Force recalcul\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "28d428d20fb502172df7fca21bf76880576fc788"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10azp4zd3t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10azp4zd3t();
cov_10azp4zd3t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10azp4zd3t().s[1]++;
exports.DNAInterpreter = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_10azp4zd3t().s[2]++, require("@shared/utils/secureRandom"));
class DNAInterpreter {
  constructor(dna) {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[0]++;
    cov_10azp4zd3t().s[3]++;
    this.cachedParams = null;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[4]++;
    this.mutationAccumulator = 0;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[5]++;
    this.dna = dna;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[6]++;
    this.interpret();
  }
  /**
   * Interprète le DNA en paramètres shaders déterministes
   */
  interpret(dna =
  /* istanbul ignore next */
  (cov_10azp4zd3t().b[0][0]++, this.dna)) {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[1]++;
    // DNA string => hash values
    const hash1 =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[7]++, this.hashDNA(dna, 0));
    const hash2 =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[8]++, this.hashDNA(dna, 1));
    const hash3 =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[9]++, this.hashDNA(dna, 2));
    // Conversion en paramètres visuels
    const params =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[10]++, {
      primaryColor: new Float32Array([hash1 % 256 / 255, (hash1 >> 8) % 256 / 255, (hash1 >> 16) % 256 / 255]),
      secondaryColor: new Float32Array([hash2 % 256 / 255, (hash2 >> 8) % 256 / 255, (hash2 >> 16) % 256 / 255]),
      complexity: hash1 % 100 / 100,
      symmetry: hash2 % 100 / 100,
      fluidity: hash3 % 100 / 100,
      colorVariance: (hash1 ^ hash2) % 100 / 100,
      patternDensity: (hash2 ^ hash3) % 100 / 100,
      evolutionRate: (hash1 ^ hash3) % 100 / 100
    });
    /* istanbul ignore next */
    cov_10azp4zd3t().s[11]++;
    this.cachedParams = params;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[12]++;
    return params;
  }
  /**
   * Hash FNV-1a pour distribution uniforme
   */
  hashDNA(dna, seed) {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[2]++;
    // FNV-1a hash pour distribution uniforme
    let hash =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[13]++, 2166136261 ^ seed);
    /* istanbul ignore next */
    cov_10azp4zd3t().s[14]++;
    for (let i =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[15]++, 0); i < dna.length; i++) {
      /* istanbul ignore next */
      cov_10azp4zd3t().s[16]++;
      hash ^= dna.charCodeAt(i);
      /* istanbul ignore next */
      cov_10azp4zd3t().s[17]++;
      hash *= 16777619;
    }
    /* istanbul ignore next */
    cov_10azp4zd3t().s[18]++;
    return hash >>> 0;
  }
  /**
   * Retourne les paramètres courants, avec mutations accumulées
   */
  getCurrentParameters() {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[3]++;
    cov_10azp4zd3t().s[19]++;
    if (!this.cachedParams) {
      /* istanbul ignore next */
      cov_10azp4zd3t().b[1][0]++;
      cov_10azp4zd3t().s[20]++;
      this.cachedParams = this.interpret();
    } else
    /* istanbul ignore next */
    {
      cov_10azp4zd3t().b[1][1]++;
    }
    // Application des mutations accumulées
    const mutated =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[21]++, {
      ...this.cachedParams
    });
    /* istanbul ignore next */
    cov_10azp4zd3t().s[22]++;
    mutated.fluidity += Math.sin(this.mutationAccumulator) * 0.1;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[23]++;
    mutated.complexity += Math.cos(this.mutationAccumulator * 0.7) * 0.05;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[24]++;
    return mutated;
  }
  /**
   * Fait évoluer le DNA (mutation progressive)
   */
  evolveDNA(factor) {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[4]++;
    cov_10azp4zd3t().s[25]++;
    this.mutationAccumulator += factor;
    // Mutation progressive du DNA
    /* istanbul ignore next */
    cov_10azp4zd3t().s[26]++;
    if (Math.abs(this.mutationAccumulator) > Math.PI * 2) {
      /* istanbul ignore next */
      cov_10azp4zd3t().b[2][0]++;
      cov_10azp4zd3t().s[27]++;
      this.mutateDNA();
      /* istanbul ignore next */
      cov_10azp4zd3t().s[28]++;
      this.mutationAccumulator = 0;
    } else
    /* istanbul ignore next */
    {
      cov_10azp4zd3t().b[2][1]++;
    }
  }
  /**
   * Mutation aléatoire mais contrôlée du DNA
   */
  mutateDNA() {
    /* istanbul ignore next */
    cov_10azp4zd3t().f[5]++;
    // Mutation aléatoire mais contrôlée
    const chars =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[29]++, this.dna.split(''));
    const mutationIndex =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[30]++, Math.floor(secureRandom_1.SecureRandom.random() * chars.length));
    const mutationChar =
    /* istanbul ignore next */
    (cov_10azp4zd3t().s[31]++, String.fromCharCode(33 + Math.floor(secureRandom_1.SecureRandom.random() * 94) // ASCII printable
    ));
    /* istanbul ignore next */
    cov_10azp4zd3t().s[32]++;
    chars[mutationIndex] = mutationChar;
    /* istanbul ignore next */
    cov_10azp4zd3t().s[33]++;
    this.dna = chars.join('');
    /* istanbul ignore next */
    cov_10azp4zd3t().s[34]++;
    this.cachedParams = null; // Force recalcul
  }
}
/* istanbul ignore next */
cov_10azp4zd3t().s[35]++;
exports.DNAInterpreter = DNAInterpreter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,