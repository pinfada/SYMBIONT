{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismCore.mutation.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismCore.mutation.test.ts"],"sourcesContent":["import { OrganismCore } from '../src/core/OrganismCore';\r\nimport { OrganismFactory } from '../src/core/factories/OrganismFactory';\r\nimport { NeuralMesh } from '../src/core/NeuralMesh';\r\n\r\ndescribe('OrganismCore Mutation Integration', () => {\r\n  let organism: OrganismCore;\r\n  \r\n  beforeEach(async () => {\r\n    // Setup factory dependencies\r\n    OrganismFactory.setDependencies({\r\n      createNeuralMesh: () => new NeuralMesh()\r\n    });\r\n    \r\n    organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG', {\r\n      creativity: 0.5,\r\n      focus: 0.5\r\n    }) as OrganismCore;\r\n    \r\n    await organism.boot();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    if (organism) {\r\n      await organism.hibernate();\r\n    }\r\n  });\r\n\r\n  it('should batch multiple quick mutations', async () => {\r\n    const initialMetrics = await organism.getPerformanceMetrics();\r\n    const initialMutationStats = initialMetrics.mutationStats;\r\n    \r\n    // Apply multiple mutations quickly (should be batched)\r\n    organism.mutate(0.1);\r\n    organism.mutate(0.05);\r\n    organism.mutate(0.15);\r\n    organism.mutate(0.08);\r\n    \r\n    // Wait for batching to process\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const finalMetrics = await organism.getPerformanceMetrics();\r\n    const finalMutationStats = finalMetrics.mutationStats;\r\n    \r\n    // Should have processed mutations in batches\r\n    expect(finalMutationStats.totalRequests).toBeGreaterThan(initialMutationStats.totalRequests);\r\n    expect(finalMutationStats.totalBatches).toBeGreaterThan(0);\r\n    \r\n    // Compression ratio should show batching efficiency\r\n    expect(finalMutationStats.compressionRatio).toBeGreaterThan(1);\r\n  });\r\n\r\n  it('should prioritize high-rate mutations', async () => {\r\n    // Add low rate mutations\r\n    organism.mutate(0.01);\r\n    organism.mutate(0.02);\r\n    \r\n    // Add high rate mutation (should trigger immediate processing)\r\n    organism.mutate(0.5);\r\n    \r\n    // Small delay for processing\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    \r\n    const metrics = await organism.getPerformanceMetrics();\r\n    expect(metrics.mutationStats.totalBatches).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should handle flushMutations correctly', async () => {\r\n    // Queue some mutations\r\n    organism.mutate(0.1);\r\n    organism.mutate(0.2);\r\n    \r\n    const preFlushMetrics = await organism.getPerformanceMetrics();\r\n    const pendingBeforeFlush = preFlushMetrics.mutationStats.pendingMutations;\r\n    \r\n    // Force flush\r\n    await organism.flushMutations();\r\n    \r\n    const postFlushMetrics = await organism.getPerformanceMetrics();\r\n    const pendingAfterFlush = postFlushMetrics.mutationStats.pendingMutations;\r\n    \r\n    // Should have processed pending mutations\r\n    expect(pendingAfterFlush).toBeLessThan(pendingBeforeFlush);\r\n    expect(postFlushMetrics.mutationStats.totalBatches).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should preserve organism functionality with batched mutations', async () => {\r\n    const initialTraits = organism.getTraits();\r\n    \r\n    // Apply several mutations with higher rates to ensure detectable change\r\n    organism.mutate(0.3);\r\n    organism.mutate(0.25);\r\n    organism.mutate(0.4);\r\n    organism.mutate(0.35);\r\n    organism.mutate(0.3);\r\n    \r\n    // Wait for processing\r\n    await organism.flushMutations();\r\n    \r\n    const finalTraits = organism.getTraits();\r\n    \r\n    // Traits should have evolved (at least some difference)\r\n    // Using smaller tolerance to detect any change\r\n    const traitsChanged = Object.keys(initialTraits).some(key => {\r\n      const typedKey = key as keyof typeof initialTraits;\r\n      return Math.abs(initialTraits[typedKey] - finalTraits[typedKey]) > 0.00001; // Reduced tolerance\r\n    });\r\n    \r\n    expect(traitsChanged).toBe(true);\r\n  });\r\n\r\n  it('should update performance metrics correctly', async () => {\r\n    // Initial state\r\n    const initialMetrics = await organism.getPerformanceMetrics();\r\n    \r\n    // Apply mutations and stimulations\r\n    organism.mutate(0.1);\r\n    organism.stimulate('sensory_input', 0.8);\r\n    organism.update(1.0);\r\n    \r\n    await organism.flushMutations();\r\n    \r\n    const finalMetrics = await organism.getPerformanceMetrics();\r\n    \r\n    // Should have mutation statistics\r\n    expect(finalMetrics.mutationStats).toBeDefined();\r\n    expect(finalMetrics.mutationStats.totalRequests).toBeGreaterThan(0);\r\n    \r\n    // Basic neural metrics should still work\r\n    expect(finalMetrics.neuralActivity).toBeGreaterThanOrEqual(0);\r\n    expect(finalMetrics.connectionStrength).toBeGreaterThanOrEqual(0);\r\n  });\r\n\r\n  it('should handle mutation rate validation in batched system', () => {\r\n    // These should not throw errors, but be handled gracefully\r\n    expect(() => organism.mutate(-0.1)).not.toThrow(); // Negative rate\r\n    expect(() => organism.mutate(1.5)).not.toThrow();  // Rate > 1\r\n    expect(() => organism.mutate(0.5)).not.toThrow();  // Valid rate\r\n  });\r\n\r\n  it('should clean up mutations during hibernation', async () => {\r\n    // Queue mutations\r\n    organism.mutate(0.1);\r\n    organism.mutate(0.2);\r\n    \r\n    const metricsBeforeHibernation = await organism.getPerformanceMetrics();\r\n    expect(metricsBeforeHibernation.mutationStats.pendingMutations).toBeGreaterThanOrEqual(0);\r\n    \r\n    // Hibernate (should flush and clean up)\r\n    await organism.hibernate();\r\n    \r\n    // Create new organism to check state\r\n    const newOrganism = OrganismFactory.createOrganism('ATCGATCGATCGATCG') as OrganismCore;\r\n    await newOrganism.boot();\r\n    \r\n    const newMetrics = await newOrganism.getPerformanceMetrics();\r\n    expect(newMetrics.mutationStats.pendingMutations).toBe(0);\r\n    \r\n    await newOrganism.hibernate();\r\n  });\r\n\r\n  it('should maintain energy and health with optimized mutations', async () => {\r\n    const initialState = organism.getState();\r\n    \r\n    // Apply multiple mutations\r\n    for (let i = 0; i < 5; i++) {\r\n      organism.mutate(0.1);\r\n      organism.update(1.0);\r\n    }\r\n    \r\n    await organism.flushMutations();\r\n    \r\n    const finalState = organism.getState();\r\n    \r\n    // Energy and health should remain within valid bounds\r\n    expect(finalState.energy).toBeGreaterThanOrEqual(0);\r\n    expect(finalState.energy).toBeLessThanOrEqual(1);\r\n    expect(finalState.health).toBeGreaterThanOrEqual(0);\r\n    expect(finalState.health).toBeLessThanOrEqual(1);\r\n    \r\n    // LastMutation should be updated\r\n    expect(finalState.lastMutation).toBeGreaterThan(initialState.lastMutation || 0);\r\n  });\r\n}); "],"version":3}