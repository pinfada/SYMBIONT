ee7053a6f8e29dc42f8800b11f768726
"use strict";

/* istanbul ignore next */
function cov_1btokg7lxf() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/StorageOptimizer.ts";
  var hash = "52cd2a0cd4e237774d938e5af606fce4041d5a48";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/StorageOptimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "3": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "4": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 30
        }
      },
      "5": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "6": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "7": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 37,
          column: 25
        }
      },
      "8": {
        start: {
          line: 32,
          column: 33
        },
        end: {
          line: 32,
          column: 78
        }
      },
      "9": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 35,
          column: 21
        }
      },
      "10": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "11": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 21
        }
      },
      "12": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "13": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 51
        }
      },
      "14": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 49,
          column: 51
        }
      },
      "15": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 51
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 21
        }
      },
      "17": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 54,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 11,
            column: 21
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 85
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 44
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 27
          },
          end: {
            line: 27,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 36
          },
          end: {
            line: 27,
            column: 47
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 49
          },
          end: {
            line: 27,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 60
          },
          end: {
            line: 27,
            column: 83
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 44
          },
          end: {
            line: 32,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 44
          },
          end: {
            line: 32,
            column: 69
          }
        }, {
          start: {
            line: 32,
            column: 73
          },
          end: {
            line: 32,
            column: 77
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 35,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 35,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 38
          }
        }, {
          start: {
            line: 33,
            column: 42
          },
          end: {
            line: 33,
            column: 73
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 49,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 49,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/StorageOptimizer.ts",
      mappings: ";;;AAAA;;;;;GAKG;AACH,MAAa,gBAAgB;IAC3B,gBAAe,CAAC;IAEhB;;OAEG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACjD,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,IAAY;QACrB,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,sBAAsB,CAAC,MAAM,GAAG,WAAW,EAAE,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QAC7E,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACtB,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;YAC/B,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC;oBACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAA;oBAC1D,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,QAAQ,EAAE,CAAC;wBACtD,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;oBAC9B,CAAC;gBACH,CAAC;gBAAC,MAAM,CAAC,CAAA,CAAC;YACZ,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YACvC,IAAI,KAAK;gBAAE,KAAK,IAAI,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA;QAC/C,CAAC;QACD,OAAO,KAAK,CAAA;IACd,CAAC;CACF;AA7CD,4CA6CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/StorageOptimizer.ts"],
      sourcesContent: ["/**\r\n * StorageOptimizer - Optimisation du stockage local\r\n * - Compression des donn\xE9es\r\n * - Nettoyage des entr\xE9es obsol\xE8tes\r\n * - Monitoring de l'espace utilis\xE9\r\n */\r\nexport class StorageOptimizer {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Compresse une cha\xEEne de caract\xE8res (exemple basique)\r\n   */\r\n  compress(data: string): string {\r\n    return btoa(unescape(encodeURIComponent(data)))\r\n  }\r\n\r\n  /**\r\n   * D\xE9compresse une cha\xEEne compress\xE9e\r\n   */\r\n  decompress(data: string): string {\r\n    return decodeURIComponent(escape(atob(data)))\r\n  }\r\n\r\n  /**\r\n   * Nettoie les entr\xE9es obsol\xE8tes du localStorage\r\n   */\r\n  cleanupObsoleteEntries(prefix = 'organism_', maxAgeMs = 7 * 24 * 60 * 60 * 1000) {\r\n    const now = Date.now()\r\n    for (const key in localStorage) {\r\n      if (key.startsWith(prefix)) {\r\n        try {\r\n          const item = JSON.parse(localStorage.getItem(key) || '{}')\r\n          if (item.createdAt && now - item.createdAt > maxAgeMs) {\r\n            localStorage.removeItem(key)\r\n          }\r\n        } catch {}\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retourne l'espace utilis\xE9 par le localStorage (approximation)\r\n   */\r\n  getUsedSpace(): number {\r\n    let total = 0\r\n    for (const key in localStorage) {\r\n      const value = localStorage.getItem(key)\r\n      if (value) total += key.length + value.length\r\n    }\r\n    return total\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "52cd2a0cd4e237774d938e5af606fce4041d5a48"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1btokg7lxf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1btokg7lxf();
cov_1btokg7lxf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1btokg7lxf().s[1]++;
exports.StorageOptimizer = void 0;
/**
 * StorageOptimizer - Optimisation du stockage local
 * - Compression des données
 * - Nettoyage des entrées obsolètes
 * - Monitoring de l'espace utilisé
 */
class StorageOptimizer {
  constructor() {
    /* istanbul ignore next */
    cov_1btokg7lxf().f[0]++;
  }
  /**
   * Compresse une chaîne de caractères (exemple basique)
   */
  compress(data) {
    /* istanbul ignore next */
    cov_1btokg7lxf().f[1]++;
    cov_1btokg7lxf().s[2]++;
    return btoa(unescape(encodeURIComponent(data)));
  }
  /**
   * Décompresse une chaîne compressée
   */
  decompress(data) {
    /* istanbul ignore next */
    cov_1btokg7lxf().f[2]++;
    cov_1btokg7lxf().s[3]++;
    return decodeURIComponent(escape(atob(data)));
  }
  /**
   * Nettoie les entrées obsolètes du localStorage
   */
  cleanupObsoleteEntries(prefix =
  /* istanbul ignore next */
  (cov_1btokg7lxf().b[0][0]++, 'organism_'), maxAgeMs =
  /* istanbul ignore next */
  (cov_1btokg7lxf().b[1][0]++, 7 * 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_1btokg7lxf().f[3]++;
    const now =
    /* istanbul ignore next */
    (cov_1btokg7lxf().s[4]++, Date.now());
    /* istanbul ignore next */
    cov_1btokg7lxf().s[5]++;
    for (const key in localStorage) {
      /* istanbul ignore next */
      cov_1btokg7lxf().s[6]++;
      if (key.startsWith(prefix)) {
        /* istanbul ignore next */
        cov_1btokg7lxf().b[2][0]++;
        cov_1btokg7lxf().s[7]++;
        try {
          const item =
          /* istanbul ignore next */
          (cov_1btokg7lxf().s[8]++, JSON.parse(
          /* istanbul ignore next */
          (cov_1btokg7lxf().b[3][0]++, localStorage.getItem(key)) ||
          /* istanbul ignore next */
          (cov_1btokg7lxf().b[3][1]++, '{}')));
          /* istanbul ignore next */
          cov_1btokg7lxf().s[9]++;
          if (
          /* istanbul ignore next */
          (cov_1btokg7lxf().b[5][0]++, item.createdAt) &&
          /* istanbul ignore next */
          (cov_1btokg7lxf().b[5][1]++, now - item.createdAt > maxAgeMs)) {
            /* istanbul ignore next */
            cov_1btokg7lxf().b[4][0]++;
            cov_1btokg7lxf().s[10]++;
            localStorage.removeItem(key);
          } else
          /* istanbul ignore next */
          {
            cov_1btokg7lxf().b[4][1]++;
          }
        } catch {}
      } else
      /* istanbul ignore next */
      {
        cov_1btokg7lxf().b[2][1]++;
      }
    }
  }
  /**
   * Retourne l'espace utilisé par le localStorage (approximation)
   */
  getUsedSpace() {
    /* istanbul ignore next */
    cov_1btokg7lxf().f[4]++;
    let total =
    /* istanbul ignore next */
    (cov_1btokg7lxf().s[11]++, 0);
    /* istanbul ignore next */
    cov_1btokg7lxf().s[12]++;
    for (const key in localStorage) {
      const value =
      /* istanbul ignore next */
      (cov_1btokg7lxf().s[13]++, localStorage.getItem(key));
      /* istanbul ignore next */
      cov_1btokg7lxf().s[14]++;
      if (value) {
        /* istanbul ignore next */
        cov_1btokg7lxf().b[6][0]++;
        cov_1btokg7lxf().s[15]++;
        total += key.length + value.length;
      } else
      /* istanbul ignore next */
      {
        cov_1btokg7lxf().b[6][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1btokg7lxf().s[16]++;
    return total;
  }
}
/* istanbul ignore next */
cov_1btokg7lxf().s[17]++;
exports.StorageOptimizer = StorageOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWJ0b2tnN2x4ZiIsImFjdHVhbENvdmVyYWdlIiwicyIsIlN0b3JhZ2VPcHRpbWl6ZXIiLCJjb25zdHJ1Y3RvciIsImYiLCJjb21wcmVzcyIsImRhdGEiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvbXByZXNzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiYXRvYiIsImNsZWFudXBPYnNvbGV0ZUVudHJpZXMiLCJwcmVmaXgiLCJiIiwibWF4QWdlTXMiLCJub3ciLCJEYXRlIiwia2V5IiwibG9jYWxTdG9yYWdlIiwic3RhcnRzV2l0aCIsIml0ZW0iLCJKU09OIiwicGFyc2UiLCJnZXRJdGVtIiwiY3JlYXRlZEF0IiwicmVtb3ZlSXRlbSIsImdldFVzZWRTcGFjZSIsInRvdGFsIiwidmFsdWUiLCJsZW5ndGgiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL29wdGltaXplcnMvU3RvcmFnZU9wdGltaXplci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU3RvcmFnZU9wdGltaXplciAtIE9wdGltaXNhdGlvbiBkdSBzdG9ja2FnZSBsb2NhbFxyXG4gKiAtIENvbXByZXNzaW9uIGRlcyBkb25uw6llc1xyXG4gKiAtIE5ldHRveWFnZSBkZXMgZW50csOpZXMgb2Jzb2zDqHRlc1xyXG4gKiAtIE1vbml0b3JpbmcgZGUgbCdlc3BhY2UgdXRpbGlzw6lcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlT3B0aW1pemVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXByZXNzZSB1bmUgY2hhw65uZSBkZSBjYXJhY3TDqHJlcyAoZXhlbXBsZSBiYXNpcXVlKVxyXG4gICAqL1xyXG4gIGNvbXByZXNzKGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZGF0YSkpKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRMOpY29tcHJlc3NlIHVuZSBjaGHDrm5lIGNvbXByZXNzw6llXHJcbiAgICovXHJcbiAgZGVjb21wcmVzcyhkYXRhOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoYXRvYihkYXRhKSkpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBOZXR0b2llIGxlcyBlbnRyw6llcyBvYnNvbMOodGVzIGR1IGxvY2FsU3RvcmFnZVxyXG4gICAqL1xyXG4gIGNsZWFudXBPYnNvbGV0ZUVudHJpZXMocHJlZml4ID0gJ29yZ2FuaXNtXycsIG1heEFnZU1zID0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGxvY2FsU3RvcmFnZSkge1xyXG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgocHJlZml4KSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8ICd7fScpXHJcbiAgICAgICAgICBpZiAoaXRlbS5jcmVhdGVkQXQgJiYgbm93IC0gaXRlbS5jcmVhdGVkQXQgPiBtYXhBZ2VNcykge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCB7fVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXRvdXJuZSBsJ2VzcGFjZSB1dGlsaXPDqSBwYXIgbGUgbG9jYWxTdG9yYWdlIChhcHByb3hpbWF0aW9uKVxyXG4gICAqL1xyXG4gIGdldFVzZWRTcGFjZSgpOiBudW1iZXIge1xyXG4gICAgbGV0IHRvdGFsID0gMFxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gbG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KVxyXG4gICAgICBpZiAodmFsdWUpIHRvdGFsICs9IGtleS5sZW5ndGggKyB2YWx1ZS5sZW5ndGhcclxuICAgIH1cclxuICAgIHJldHVybiB0b3RhbFxyXG4gIH1cclxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWFJO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7O0FBYko7Ozs7OztBQU1BLE1BQWFDLGdCQUFnQjtFQUMzQkMsWUFBQTtJQUFBO0lBQUFKLGNBQUEsR0FBQUssQ0FBQTtFQUFlO0VBRWY7OztFQUdBQyxRQUFRQSxDQUFDQyxJQUFZO0lBQUE7SUFBQVAsY0FBQSxHQUFBSyxDQUFBO0lBQUFMLGNBQUEsR0FBQUUsQ0FBQTtJQUNuQixPQUFPTSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNILElBQUksQ0FBQyxDQUFDLENBQUM7RUFDakQ7RUFFQTs7O0VBR0FJLFVBQVVBLENBQUNKLElBQVk7SUFBQTtJQUFBUCxjQUFBLEdBQUFLLENBQUE7SUFBQUwsY0FBQSxHQUFBRSxDQUFBO0lBQ3JCLE9BQU9VLGtCQUFrQixDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUMvQztFQUVBOzs7RUFHQVEsc0JBQXNCQSxDQUFDQyxNQUFNO0VBQUE7RUFBQSxDQUFBaEIsY0FBQSxHQUFBaUIsQ0FBQSxVQUFHLFdBQVcsR0FBRUMsUUFBUTtFQUFBO0VBQUEsQ0FBQWxCLGNBQUEsR0FBQWlCLENBQUEsVUFBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSTtJQUFBO0lBQUFqQixjQUFBLEdBQUFLLENBQUE7SUFDN0UsTUFBTWMsR0FBRztJQUFBO0lBQUEsQ0FBQW5CLGNBQUEsR0FBQUUsQ0FBQSxPQUFHa0IsSUFBSSxDQUFDRCxHQUFHLEVBQUU7SUFBQTtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBQ3RCLEtBQUssTUFBTW1CLEdBQUcsSUFBSUMsWUFBWSxFQUFFO01BQUE7TUFBQXRCLGNBQUEsR0FBQUUsQ0FBQTtNQUM5QixJQUFJbUIsR0FBRyxDQUFDRSxVQUFVLENBQUNQLE1BQU0sQ0FBQyxFQUFFO1FBQUE7UUFBQWhCLGNBQUEsR0FBQWlCLENBQUE7UUFBQWpCLGNBQUEsR0FBQUUsQ0FBQTtRQUMxQixJQUFJO1VBQ0YsTUFBTXNCLElBQUk7VUFBQTtVQUFBLENBQUF4QixjQUFBLEdBQUFFLENBQUEsT0FBR3VCLElBQUksQ0FBQ0MsS0FBSztVQUFDO1VBQUEsQ0FBQTFCLGNBQUEsR0FBQWlCLENBQUEsVUFBQUssWUFBWSxDQUFDSyxPQUFPLENBQUNOLEdBQUcsQ0FBQztVQUFBO1VBQUEsQ0FBQXJCLGNBQUEsR0FBQWlCLENBQUEsVUFBSSxJQUFJLEVBQUM7VUFBQTtVQUFBakIsY0FBQSxHQUFBRSxDQUFBO1VBQzFEO1VBQUk7VUFBQSxDQUFBRixjQUFBLEdBQUFpQixDQUFBLFVBQUFPLElBQUksQ0FBQ0ksU0FBUztVQUFBO1VBQUEsQ0FBQTVCLGNBQUEsR0FBQWlCLENBQUEsVUFBSUUsR0FBRyxHQUFHSyxJQUFJLENBQUNJLFNBQVMsR0FBR1YsUUFBUSxHQUFFO1lBQUE7WUFBQWxCLGNBQUEsR0FBQWlCLENBQUE7WUFBQWpCLGNBQUEsR0FBQUUsQ0FBQTtZQUNyRG9CLFlBQVksQ0FBQ08sVUFBVSxDQUFDUixHQUFHLENBQUM7VUFDOUIsQ0FBQztVQUFBO1VBQUE7WUFBQXJCLGNBQUEsR0FBQWlCLENBQUE7VUFBQTtRQUNILENBQUMsQ0FBQyxNQUFNLENBQUM7TUFDWCxDQUFDO01BQUE7TUFBQTtRQUFBakIsY0FBQSxHQUFBaUIsQ0FBQTtNQUFBO0lBQ0g7RUFDRjtFQUVBOzs7RUFHQWEsWUFBWUEsQ0FBQTtJQUFBO0lBQUE5QixjQUFBLEdBQUFLLENBQUE7SUFDVixJQUFJMEIsS0FBSztJQUFBO0lBQUEsQ0FBQS9CLGNBQUEsR0FBQUUsQ0FBQSxRQUFHLENBQUM7SUFBQTtJQUFBRixjQUFBLEdBQUFFLENBQUE7SUFDYixLQUFLLE1BQU1tQixHQUFHLElBQUlDLFlBQVksRUFBRTtNQUM5QixNQUFNVSxLQUFLO01BQUE7TUFBQSxDQUFBaEMsY0FBQSxHQUFBRSxDQUFBLFFBQUdvQixZQUFZLENBQUNLLE9BQU8sQ0FBQ04sR0FBRyxDQUFDO01BQUE7TUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtNQUN2QyxJQUFJOEIsS0FBSyxFQUFFO1FBQUE7UUFBQWhDLGNBQUEsR0FBQWlCLENBQUE7UUFBQWpCLGNBQUEsR0FBQUUsQ0FBQTtRQUFBNkIsS0FBSyxJQUFJVixHQUFHLENBQUNZLE1BQU0sR0FBR0QsS0FBSyxDQUFDQyxNQUFNO01BQUE7TUFBQTtNQUFBO1FBQUFqQyxjQUFBLEdBQUFpQixDQUFBO01BQUE7SUFDL0M7SUFBQztJQUFBakIsY0FBQSxHQUFBRSxDQUFBO0lBQ0QsT0FBTzZCLEtBQUs7RUFDZDs7QUFDRDtBQUFBL0IsY0FBQSxHQUFBRSxDQUFBO0FBN0NEZ0MsT0FBQSxDQUFBL0IsZ0JBQUEsR0FBQUEsZ0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=