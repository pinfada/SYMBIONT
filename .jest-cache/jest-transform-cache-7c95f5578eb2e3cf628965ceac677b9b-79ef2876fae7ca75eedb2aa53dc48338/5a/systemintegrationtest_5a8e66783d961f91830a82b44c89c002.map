{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/system.integration.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/system.integration.test.ts"],"sourcesContent":["import { OrganismCore } from '../src/core/OrganismCore';\r\nimport { OrganismFactory } from '../src/core/factories/OrganismFactory';\r\nimport { NeuralMesh } from '../src/core/NeuralMesh';\r\nimport { WebGLBatcher } from '../src/core/utils/WebGLBatcher';\r\nimport { errorHandler } from '../src/core/utils/ErrorHandler';\r\nimport { SecureRandom } from '../src/shared/utils/secureRandom';\r\n\r\n// Helper function to create mock DNA\r\nconst createMockDNA = (length: number = 16): string => {\r\n  const bases = ['A', 'T', 'C', 'G'];\r\n  return Array.from({ length }, () => bases[Math.floor(SecureRandom.random() * bases.length)]).join('');\r\n};\r\n\r\ndescribe('SYMBIONT System Integration Tests', () => {\r\n  let organisms: OrganismCore[] = [];\r\n  let webglBatcher: WebGLBatcher;\r\n  let mockCanvas: HTMLCanvasElement;\r\n  let mockGL: WebGLRenderingContext;\r\n\r\n  beforeAll(() => {\r\n    // Setup factory dependencies\r\n    OrganismFactory.setDependencies({\r\n      createNeuralMesh: () => new NeuralMesh()\r\n    });\r\n\r\n    // Setup WebGL context\r\n    mockCanvas = document.createElement('canvas');\r\n    mockGL = mockCanvas.getContext('webgl')!;\r\n    webglBatcher = new WebGLBatcher(mockGL, {\r\n      maxBatchSize: 10,\r\n      maxVertices: 1000,\r\n      frameTimeoutMs: 16.67\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    organisms = [];\r\n    errorHandler.reset();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    // Cleanup organisms\r\n    for (const organism of organisms) {\r\n      await organism.hibernate();\r\n    }\r\n    organisms = [];\r\n\r\n    // Cleanup WebGL\r\n    if (webglBatcher) {\r\n      webglBatcher.flush();\r\n    }\r\n  });\r\n\r\n  afterAll(() => {\r\n    if (webglBatcher) {\r\n      webglBatcher.dispose();\r\n    }\r\n  });\r\n\r\n  describe('End-to-End Organism Lifecycle', () => {\r\n    it('should handle complete organism lifecycle with all optimizations', async () => {\r\n      // Create organism with full system integration\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCGATCGATCGATCGATCG', {\r\n        creativity: 0.7,\r\n        focus: 0.8,\r\n        energy: 0.9\r\n      }) as OrganismCore;\r\n      \r\n      organisms.push(organism);\r\n\r\n      // Boot organism (initializes neural network)\r\n      await organism.boot();\r\n      \r\n      // Simulate complex interaction cycle\r\n      for (let cycle = 0; cycle < 5; cycle++) {\r\n        // Sensory stimulation\r\n        organism.stimulate('sensory_input', SecureRandom.random());\r\n        organism.stimulate('memory_input', SecureRandom.random());\r\n        \r\n        // Update organism state\r\n        organism.update(1.0);\r\n        \r\n        // Apply mutations (uses batching)\r\n        organism.mutate(0.05 + SecureRandom.random() * 0.1);\r\n        \r\n        // Get shader parameters for rendering\r\n        const shaderParams = organism.getShaderParameters();\r\n        \r\n        // Add WebGL draw calls (uses WebGL batching)\r\n        webglBatcher.addDrawCall({\r\n          type: 'triangle',\r\n          vertices: new Float32Array([\r\n            0, 0, 0, 0, 0, 1, 0, 0,  // vertex 1\r\n            1, 0, 0, 0, 1, 0, 1, 0,  // vertex 2\r\n            0, 1, 0, 1, 0, 0, 0, 1   // vertex 3\r\n          ]),\r\n          uniforms: {\r\n            u_energy: shaderParams.energy,\r\n            u_health: shaderParams.health,\r\n            u_creativity: shaderParams.creativity,\r\n            u_time: shaderParams.time\r\n          },\r\n          priority: cycle < 2 ? 'high' : 'normal'\r\n        });\r\n        \r\n        // Feed organism occasionally\r\n        if (cycle % 2 === 0) {\r\n          organism.feed(0.2);\r\n        }\r\n      }\r\n\r\n      // Force all optimizations to complete\r\n      await organism.flushMutations();\r\n      webglBatcher.flush();\r\n\r\n      // Validate final state\r\n      const finalState = organism.getState();\r\n      expect(finalState.health).toBeGreaterThan(0);\r\n      expect(finalState.energy).toBeGreaterThan(0);\r\n      expect(finalState.lastMutation).toBeGreaterThan(0);\r\n\r\n      // Validate performance metrics\r\n      const metrics = await organism.getPerformanceMetrics();\r\n      expect(metrics.mutationStats.totalRequests).toBeGreaterThan(0);\r\n      expect(metrics.mutationStats.compressionRatio).toBeGreaterThan(1);\r\n\r\n      // Validate WebGL stats\r\n      const webglStats = webglBatcher.getStats();\r\n      expect(webglStats.totalDrawCalls).toBe(5);\r\n      expect(webglStats.totalBatches).toBeGreaterThan(0);\r\n      expect(webglStats.compressionRatio).toBeGreaterThan(1);\r\n    });\r\n\r\n    it('should handle multiple organisms interacting simultaneously', async () => {\r\n      const organismCount = 3;\r\n      const cycles = 5;\r\n\r\n      // Create multiple organisms\r\n      for (let i = 0; i < organismCount; i++) {\r\n        const organism = OrganismFactory.createOrganism(\r\n          createMockDNA(32),\r\n          {\r\n            creativity: 0.3 + (i * 0.2),\r\n            focus: 0.5 + (i * 0.1),\r\n            energy: 0.8\r\n          }\r\n        ) as OrganismCore;\r\n        \r\n        organisms.push(organism);\r\n        await organism.boot();\r\n      }\r\n\r\n      // Simulate parallel evolution\r\n      for (let cycle = 0; cycle < cycles; cycle++) {\r\n        const promises = organisms.map(async (organism, index) => {\r\n          // Unique stimulation patterns per organism\r\n          organism.stimulate('sensory_input', (index + 1) * 0.2);\r\n          organism.update(1 + index * 0.1);\r\n          organism.mutate(0.03 + index * 0.01);\r\n          \r\n          // Different feeding schedules\r\n          if ((cycle + index) % 2 === 0) {\r\n            organism.feed(0.15);\r\n          }\r\n\r\n          return organism.getPerformanceMetrics();\r\n        });\r\n\r\n        const allMetrics = await Promise.all(promises);\r\n        \r\n        // Validate each organism maintains good state\r\n        allMetrics.forEach(metrics => {\r\n          expect(metrics.neuralActivity).toBeGreaterThanOrEqual(0);\r\n          expect(metrics.connectionStrength).toBeGreaterThanOrEqual(0);\r\n        });\r\n      }\r\n\r\n      // Force all mutations to complete\r\n      await Promise.all(organisms.map(o => o.flushMutations()));\r\n\r\n      // Validate organisms evolved differently\r\n      const finalStates = organisms.map(o => o.getState());\r\n      const traits = finalStates.map(s => s.traits);\r\n      \r\n      // At least some traits should differ between organisms\r\n      let hasVariation = false;\r\n      for (let i = 1; i < traits.length; i++) {\r\n        if (Math.abs(traits[0].creativity - traits[i].creativity) > 0.01) {\r\n          hasVariation = true;\r\n          break;\r\n        }\r\n      }\r\n      expect(hasVariation).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Performance Under Load', () => {\r\n    it('should maintain performance with high mutation rate', async () => {\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCGATCGATCGATCGATCG') as OrganismCore;\r\n      organisms.push(organism);\r\n      await organism.boot();\r\n\r\n      const startTime = performance.now();\r\n      \r\n      // High frequency mutations\r\n      for (let i = 0; i < 50; i++) {\r\n        organism.mutate(0.1);\r\n        organism.update(0.5);\r\n        \r\n        if (i % 10 === 0) {\r\n          organism.stimulate('sensory_input', SecureRandom.random());\r\n        }\r\n      }\r\n\r\n      await organism.flushMutations();\r\n      const endTime = performance.now();\r\n      \r\n      const totalTime = endTime - startTime;\r\n      expect(totalTime).toBeLessThan(500); // Should complete within 500ms\r\n      \r\n      // Validate batching effectiveness\r\n      const metrics = await organism.getPerformanceMetrics();\r\n      expect(metrics.mutationStats.compressionRatio).toBeGreaterThan(2); // Good batching\r\n    });\r\n\r\n    it('should handle WebGL rendering load efficiently', async () => {\r\n      const startTime = performance.now();\r\n      \r\n      // Add many draw calls rapidly\r\n      for (let i = 0; i < 100; i++) {\r\n        webglBatcher.addDrawCall({\r\n          type: i % 3 === 0 ? 'triangle' : i % 3 === 1 ? 'line' : 'point',\r\n          vertices: new Float32Array(Array.from({ length: 24 }, () => SecureRandom.random())),\r\n          uniforms: {\r\n            u_time: i,\r\n            u_intensity: SecureRandom.random()\r\n          },\r\n          priority: i % 10 === 0 ? 'high' : 'normal'\r\n        });\r\n      }\r\n\r\n      webglBatcher.flush();\r\n      const endTime = performance.now();\r\n      \r\n      const renderTime = endTime - startTime;\r\n      expect(renderTime).toBeLessThan(100); // Should render quickly\r\n\r\n      const stats = webglBatcher.getStats();\r\n      expect(stats.totalDrawCalls).toBeGreaterThanOrEqual(100); // Allow for some accumulation from previous tests\r\n      expect(stats.compressionRatio).toBeGreaterThan(3); // Good batching\r\n    });\r\n  });\r\n\r\n  describe('Error Recovery Integration', () => {\r\n    it('should recover gracefully from cascading system failures', async () => {\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG') as OrganismCore;\r\n      organisms.push(organism);\r\n      await organism.boot();\r\n\r\n      // Introduce various system stresses\r\n      try {\r\n        // Invalid stimulations\r\n        organism.stimulate('non_existent_input', NaN);\r\n        organism.stimulate('another_invalid', Infinity);\r\n        \r\n        // Invalid mutations\r\n        organism.mutate(-1);\r\n        organism.mutate(10);\r\n        \r\n        // Invalid traits\r\n        organism.setTraits({ creativity: -5, focus: 100 } as any);\r\n        \r\n        // Invalid updates\r\n        organism.update(-1000);\r\n        organism.update(NaN);\r\n        \r\n        // System should still function\r\n        const state = organism.getState();\r\n        expect(state.health).toBeGreaterThanOrEqual(0);\r\n        expect(state.energy).toBeGreaterThanOrEqual(0);\r\n        \r\n        // Mutations should still work\r\n        organism.mutate(0.05);\r\n        await organism.flushMutations();\r\n        \r\n      } catch (error) {\r\n        // Some errors might throw, but system should recover\r\n      }\r\n\r\n      // Validate error tracking\r\n      const errorMetrics = errorHandler.getMetrics();\r\n      expect(errorMetrics.errorCount).toBeGreaterThan(0);\r\n      expect(errorMetrics.recoveryAttempts).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should maintain WebGL functionality during errors', async () => {\r\n      // Add some valid draw calls\r\n      webglBatcher.addDrawCall({\r\n        type: 'triangle',\r\n        vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n        uniforms: { u_color: 1.0 },\r\n        priority: 'normal'\r\n      });\r\n\r\n      // Add invalid draw calls\r\n      try {\r\n        webglBatcher.addDrawCall({\r\n          type: 'triangle' as any,\r\n          vertices: null as any, // Invalid\r\n          uniforms: {},\r\n          priority: 'normal'\r\n        });\r\n      } catch (error) {\r\n        // Expected to fail\r\n      }\r\n\r\n      // Add more valid calls\r\n      webglBatcher.addDrawCall({\r\n        type: 'line',\r\n        vertices: new Float32Array([1, 0, 0, 0, 0, 1, 0, 0]),\r\n        uniforms: { u_color: 0.5 },\r\n        priority: 'normal'\r\n      });\r\n\r\n      // Should still be able to flush and render valid calls\r\n      expect(() => webglBatcher.flush()).not.toThrow();\r\n      \r\n      const stats = webglBatcher.getStats();\r\n      expect(stats.totalDrawCalls).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Memory Management', () => {\r\n    it('should not leak memory during extended operation', async () => {\r\n      // Reset error metrics to avoid accumulation from previous tests\r\n      errorHandler.reset();\r\n      const initialMetrics = errorHandler.getMetrics();\r\n      \r\n      for (let batch = 0; batch < 5; batch++) {\r\n        // Create organisms for this batch\r\n        const batchOrganisms: OrganismCore[] = [];\r\n        \r\n        for (let i = 0; i < 3; i++) {\r\n          const organism = OrganismFactory.createOrganism(\r\n            createMockDNA(16 + batch * 4)\r\n          ) as OrganismCore;\r\n          \r\n          batchOrganisms.push(organism);\r\n          await organism.boot();\r\n          \r\n          // Quick lifecycle\r\n          organism.stimulate('sensory_input', SecureRandom.random());\r\n          organism.update(1.0);\r\n          organism.mutate(0.05);\r\n        }\r\n        \r\n        // Process all mutations\r\n        await Promise.all(batchOrganisms.map(o => o.flushMutations()));\r\n        \r\n        // Cleanup batch\r\n        await Promise.all(batchOrganisms.map(o => o.hibernate()));\r\n      }\r\n\r\n      // System should remain stable - allow for reasonable error accumulation\r\n      const finalMetrics = errorHandler.getMetrics();\r\n      expect(finalMetrics.errorCount).toBeLessThan(initialMetrics.errorCount + 50); // More realistic for 15 organisms\r\n    });\r\n  });\r\n\r\n  describe('Real-time Performance', () => {\r\n    it('should maintain 60fps rendering target under load', async () => {\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG') as OrganismCore;\r\n      organisms.push(organism);\r\n      await organism.boot();\r\n\r\n      const frameCount = 10;\r\n      const frameTimes: number[] = [];\r\n\r\n      for (let frame = 0; frame < frameCount; frame++) {\r\n        const frameStart = performance.now();\r\n        \r\n        // Simulate one frame of work\r\n        organism.stimulate('sensory_input', Math.sin(frame * 0.1));\r\n        organism.update(1.0);\r\n        organism.mutate(0.02);\r\n        \r\n        const shaderParams = organism.getShaderParameters();\r\n        webglBatcher.addDrawCall({\r\n          type: 'triangle',\r\n          vertices: new Float32Array([\r\n            Math.cos(frame), Math.sin(frame), 0, 0, 0, 1, 0, 0,\r\n            Math.cos(frame + 1), Math.sin(frame + 1), 0, 0, 1, 0, 1, 0,\r\n            0, 0, 1, 1, 0, 0, 0, 1\r\n          ]),\r\n          uniforms: {\r\n            u_energy: shaderParams.energy,\r\n            u_time: shaderParams.time\r\n          },\r\n          priority: 'high'\r\n        });\r\n        \r\n        // Force immediate rendering (simulates frame-based rendering)\r\n        webglBatcher.flush();\r\n        \r\n        const frameEnd = performance.now();\r\n        frameTimes.push(frameEnd - frameStart);\r\n      }\r\n\r\n      // Flush any remaining mutations\r\n      await organism.flushMutations();\r\n\r\n      // Validate frame timing (16.67ms = 60fps)\r\n      const averageFrameTime = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;\r\n      expect(averageFrameTime).toBeLessThan(16.67);\r\n      \r\n      // No frame should exceed 33ms (30fps minimum)\r\n      const maxFrameTime = Math.max(...frameTimes);\r\n      expect(maxFrameTime).toBeLessThan(33);\r\n    });\r\n  });\r\n}); "],"version":3}