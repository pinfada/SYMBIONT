{"version":3,"names":["cov_10ofcmjxpg","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SensoryNetwork","constructor","sensors","Map","addSensor","id","min","max","noise","has","Error","set","value","sense","rawValue","sensor","get","v","gaussianNoise","Math","getInputs","inputs","entries","adapt","newMin","newMax","newNoise","mu","sigma","u","random","sqrt","log","cos","PI","toJSON","Array","from","values","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts"],"sourcesContent":["/**\r\n * SensoryNetwork - Réseau sensoriel pour organisme artificiel\r\n * - Gère les capteurs, la normalisation, le bruit, l'adaptation\r\n * - Prêt à être branché sur OrganismCore/NeuralMesh\r\n */\r\n\r\nexport interface Sensor {\r\n  id: string;\r\n  type: 'vision' | 'audition' | 'touch' | 'taste' | 'smell' | 'custom';\r\n  min: number;\r\n  max: number;\r\n  noise: number; // écart-type du bruit gaussien\r\n  value: number;\r\n}\r\n\r\nexport class SensoryNetwork {\r\n  private sensors: Map<string, Sensor> = new Map();\r\n\r\n  /**\r\n   * Ajoute un capteur sensoriel\r\n   */\r\n  public addSensor(id: string, type: Sensor['type'], min = 0, max = 1, noise = 0.01): void {\r\n    if (this.sensors.has(id)) throw new Error(`Sensor ${id} already exists`);\r\n    this.sensors.set(id, { id, type, min, max, noise, value: 0 });\r\n  }\r\n\r\n  /**\r\n   * Simule une perception (avec bruit et normalisation)\r\n   */\r\n  public sense(id: string, rawValue: number): number {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    // Normalisation\r\n    let v = (rawValue - sensor.min) / (sensor.max - sensor.min);\r\n    // Ajout de bruit gaussien\r\n    v += this.gaussianNoise(0, sensor.noise);\r\n    v = Math.max(0, Math.min(1, v));\r\n    sensor.value = v;\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * Récupère les valeurs normalisées de tous les capteurs\r\n   */\r\n  public getInputs(): Record<string, number> {\r\n    const inputs: Record<string, number> = {};\r\n    for (const [id, sensor] of this.sensors.entries()) {\r\n      inputs[id] = sensor.value;\r\n    }\r\n    return inputs;\r\n  }\r\n\r\n  /**\r\n   * Adapte dynamiquement la sensibilité d'un capteur\r\n   */\r\n  public adapt(id: string, newMin: number, newMax: number, newNoise?: number): void {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    sensor.min = newMin;\r\n    sensor.max = newMax;\r\n    if (newNoise !== undefined) sensor.noise = newNoise;\r\n  }\r\n\r\n  /**\r\n   * Génère un bruit gaussien (Box-Muller)\r\n   */\r\n  private gaussianNoise(mu: number, sigma: number): number {\r\n    let u = 0, v = 0;\r\n    while (u === 0) u = Math.random();\r\n    while (v === 0) v = Math.random();\r\n    return mu + sigma * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return Array.from(this.sensors.values());\r\n  }\r\n} "],"mappings":";;AAAA;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAA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","ignoreList":[]}