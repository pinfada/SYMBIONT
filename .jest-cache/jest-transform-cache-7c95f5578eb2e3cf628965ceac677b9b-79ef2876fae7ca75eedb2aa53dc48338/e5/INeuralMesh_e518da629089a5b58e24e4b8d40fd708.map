{"version":3,"names":["cov_2lw71i8ajh","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/interfaces/INeuralMesh.ts"],"sourcesContent":["// Interface d'abstraction pour résoudre la dépendance circulaire OrganismCore ↔ NeuralMesh\r\n\r\nexport interface NeuralNode {\r\n  id: string;\r\n  type: 'input' | 'hidden' | 'output';\r\n  activation: number;\r\n  bias: number;\r\n}\r\n\r\nexport interface NeuralConnection {\r\n  from: string;\r\n  to: string;\r\n  weight: number;\r\n  active: boolean;\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  cpu: number;\r\n  memory: number;\r\n  neuralActivity: number;\r\n  connectionStrength: number;\r\n}\r\n\r\nexport interface INeuralMesh {\r\n  // Configuration\r\n  initialize(): Promise<void>;\r\n  \r\n  // Structure du réseau\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias?: number): void;\r\n  addConnection(fromId: string, toId: string, weight: number): void;\r\n  \r\n  // Activation et propagation\r\n  stimulate(nodeId: string, value: number): void;\r\n  propagate(): void;\r\n  getActivation(nodeId: string): number;\r\n  \r\n  // Évolution\r\n  mutate(rate?: number): void;\r\n  \r\n  // Métriques\r\n  getNeuralActivity(): number;\r\n  getConnectionStrength(): number;\r\n  getCPUUsage(): Promise<number>;\r\n  getMemoryUsage(): Promise<number>;\r\n  \r\n  // Sérialisation\r\n  toJSON(): any;\r\n  suspend(): Promise<void>;\r\n  \r\n  // Pattern processing for service compatibility\r\n  processPattern?: (pattern: any) => Promise<any>;\r\n  learn?: (data: any) => Promise<void>;\r\n  getPerformanceMetrics?: () => any;\r\n\r\n  // Missing methods for service compatibility\r\n  saveState(): any;\r\n  loadState(state: any): void;\r\n  reset(): void;\r\n  healthCheck(): { healthy: boolean; issues: string[] };\r\n  cleanup(): void;\r\n} "],"mappings":";;AAAA;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}