7c3c2cedecaba8e06b4585ba8e54d6c6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Jest setup file for SYMBIONT tests
require("@testing-library/jest-dom");
// Mock global objects that might not be available in test environment
global.performance = global.performance || {};
global.performance.now = jest.fn(() => Date.now());
global.performance.mark = jest.fn();
global.performance.measure = jest.fn();
global.performance.clearMarks = jest.fn();
global.performance.clearMeasures = jest.fn();
global.performance.getEntries = jest.fn(() => []);
global.performance.getEntriesByName = jest.fn(() => []);
global.performance.getEntriesByType = jest.fn(() => []);
// Mock PerformanceObserver
global.PerformanceObserver = jest.fn().mockImplementation((callback) => ({
    observe: jest.fn(),
    disconnect: jest.fn(),
    takeRecords: jest.fn(() => [])
}));
// Mock crypto for WebCrypto
global.crypto = global.crypto || {};
global.crypto.subtle = global.crypto.subtle || {
    generateKey: jest.fn().mockResolvedValue({}),
    importKey: jest.fn().mockResolvedValue({}),
    exportKey: jest.fn().mockResolvedValue(new ArrayBuffer(32)),
    encrypt: jest.fn().mockResolvedValue(new ArrayBuffer(64)),
    decrypt: jest.fn().mockResolvedValue(new ArrayBuffer(32)),
    digest: jest.fn().mockResolvedValue(new ArrayBuffer(32))
};
global.crypto.getRandomValues = jest.fn((arr) => {
    for (let i = 0; i < arr.length; i++) {
        arr[i] = Math.floor(Math.random() * 256);
    }
    return arr;
});
// Mock requestAnimationFrame and cancelAnimationFrame
global.requestAnimationFrame = jest.fn((callback) => {
    return setTimeout(callback, 16); // ~60fps
});
global.cancelAnimationFrame = jest.fn((id) => {
    clearTimeout(id);
});
// Mock URL.createObjectURL for Web Workers
global.URL = global.URL || {};
global.URL.createObjectURL = jest.fn(() => 'blob:mock-url');
global.URL.revokeObjectURL = jest.fn();
// Mock Worker constructor
global.Worker = jest.fn().mockImplementation(() => ({
    postMessage: jest.fn(),
    terminate: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    onmessage: null,
    onerror: null
}));
// Mock WebGL context
const createMockWebGLContext = () => ({
    // WebGL constants
    TRIANGLES: 4,
    LINES: 1,
    POINTS: 0,
    ARRAY_BUFFER: 34962,
    ELEMENT_ARRAY_BUFFER: 34963,
    DYNAMIC_DRAW: 35048,
    STATIC_DRAW: 35044,
    FLOAT: 5126,
    UNSIGNED_SHORT: 5123,
    // Buffer methods
    createBuffer: jest.fn(() => ({ id: Math.random() })),
    deleteBuffer: jest.fn(),
    bindBuffer: jest.fn(),
    bufferData: jest.fn(),
    // Vertex attributes
    vertexAttribPointer: jest.fn(),
    enableVertexAttribArray: jest.fn(),
    disableVertexAttribArray: jest.fn(),
    // Drawing
    drawArrays: jest.fn(),
    drawElements: jest.fn(),
    // Shaders (for future tests)
    createShader: jest.fn(() => ({ id: Math.random() })),
    createProgram: jest.fn(() => ({ id: Math.random() })),
    compileShader: jest.fn(),
    linkProgram: jest.fn(),
    useProgram: jest.fn(),
    // State
    viewport: jest.fn(),
    clear: jest.fn(),
    clearColor: jest.fn(),
    enable: jest.fn(),
    disable: jest.fn(),
    // Error checking
    getError: jest.fn(() => 0), // GL_NO_ERROR
    // Extensions
    getExtension: jest.fn(),
    getSupportedExtensions: jest.fn(() => [])
});
// Mock canvas and WebGL
HTMLCanvasElement.prototype.getContext = jest.fn((contextType) => {
    if (contextType === 'webgl' || contextType === 'experimental-webgl') {
        return createMockWebGLContext();
    }
    if (contextType === 'webgl2') {
        return {
            ...createMockWebGLContext(),
            createVertexArray: jest.fn(() => ({ id: Math.random() })),
            deleteVertexArray: jest.fn(),
            bindVertexArray: jest.fn()
        };
    }
    return null;
});
// Mock Chrome APIs for extension testing
global.chrome = {
    runtime: {
        onMessage: {
            addListener: jest.fn(),
            removeListener: jest.fn()
        },
        sendMessage: jest.fn(),
        getURL: jest.fn((path) => `chrome-extension://mock-id/${path}`)
    },
    tabs: {
        query: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
    },
    storage: {
        local: {
            get: jest.fn(),
            set: jest.fn(),
            remove: jest.fn(),
            clear: jest.fn()
        },
        sync: {
            get: jest.fn(),
            set: jest.fn(),
            remove: jest.fn(),
            clear: jest.fn()
        }
    }
};
// Console override for test cleanup
const originalConsole = global.console;
global.console = {
    ...originalConsole,
    // Suppress console.log in tests unless explicitly needed
    log: process.env.JEST_VERBOSE === 'true' ? originalConsole.log : jest.fn(),
    info: process.env.JEST_VERBOSE === 'true' ? originalConsole.info : jest.fn(),
    warn: originalConsole.warn,
    error: originalConsole.error,
    debug: process.env.JEST_VERBOSE === 'true' ? originalConsole.debug : jest.fn()
};
// Increase timeout for integration tests
jest.setTimeout(10000);
// Global test utilities
global.testUtils = {
    // Helper to wait for async operations
    waitFor: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
    // Helper to create mock DNA sequences
    createMockDNA: (length = 16) => {
        const bases = ['A', 'T', 'C', 'G'];
        return Array.from({ length }, () => bases[Math.floor(Math.random() * bases.length)]).join('');
    },
    // Helper to create valid organism traits
    createMockTraits: () => ({
        curiosity: Math.random(),
        focus: Math.random(),
        rhythm: Math.random(),
        empathy: Math.random(),
        creativity: Math.random(),
        energy: Math.random(),
        harmony: Math.random(),
        wisdom: Math.random() * 0.2 // Wisdom is typically lower
    }),
    // Helper to suppress console output during tests
    suppressConsole: () => {
        const spy = {
            log: jest.spyOn(console, 'log').mockImplementation(() => { }),
            info: jest.spyOn(console, 'info').mockImplementation(() => { }),
            warn: jest.spyOn(console, 'warn').mockImplementation(() => { }),
            error: jest.spyOn(console, 'error').mockImplementation(() => { }),
            debug: jest.spyOn(console, 'debug').mockImplementation(() => { })
        };
        return () => {
            Object.values(spy).forEach(s => s.mockRestore());
        };
    }
};
// Clean up after each test
afterEach(() => {
    jest.clearAllMocks();
    jest.clearAllTimers();
    // Reset performance mock if it exists and is a Jest mock
    if (global.performance.now && typeof global.performance.now.mockClear === 'function') {
        global.performance.now.mockClear();
    }
    // Reset RAF mocks if they exist and are Jest mocks
    if (global.requestAnimationFrame && typeof global.requestAnimationFrame.mockClear === 'function') {
        global.requestAnimationFrame.mockClear();
    }
    if (global.cancelAnimationFrame && typeof global.cancelAnimationFrame.mockClear === 'function') {
        global.cancelAnimationFrame.mockClear();
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,