2a59085a3ad4aee89bdf93a7ecdfb665
"use strict";

/* istanbul ignore next */
function cov_zqn8obsov() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts";
  var hash = "b934694af45925eb2d6c009856e3fcb7bc38cbd5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 60
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 67
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 24,
          column: 32
        }
      },
      "11": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 32
        }
      },
      "12": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "16": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "17": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 44
        }
      },
      "18": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 33,
          column: 33
        }
      },
      "19": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 33
        }
      },
      "20": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 35,
          column: 37
        }
      },
      "21": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 37
        }
      },
      "22": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "23": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 74
        }
      },
      "24": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 29
        }
      },
      "25": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "27": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 73,
          column: 18
        }
      },
      "28": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 87,
          column: 18
        }
      },
      "29": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 101,
          column: 18
        }
      },
      "30": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 33
        }
      },
      "31": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "32": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 112,
          column: 60
        }
      },
      "33": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "34": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 59
        }
      },
      "35": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "36": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "37": {
        start: {
          line: 120,
          column: 35
        },
        end: {
          line: 120,
          column: 75
        }
      },
      "38": {
        start: {
          line: 121,
          column: 37
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "39": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 124,
          column: 17
        }
      },
      "40": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "41": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "42": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 40
        }
      },
      "43": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 32
        }
      },
      "44": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "45": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 110
        }
      },
      "46": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 19
        }
      },
      "47": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 37
        }
      },
      "48": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "49": {
        start: {
          line: 150,
          column: 31
        },
        end: {
          line: 150,
          column: 71
        }
      },
      "50": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 63
        }
      },
      "51": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 82
        }
      },
      "52": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "53": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 86
        }
      },
      "54": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "55": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 28
        }
      },
      "56": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "57": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "58": {
        start: {
          line: 167,
          column: 35
        },
        end: {
          line: 167,
          column: 75
        }
      },
      "59": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 52
        }
      },
      "60": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 93
        }
      },
      "61": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 32
        }
      },
      "62": {
        start: {
          line: 183,
          column: 30
        },
        end: {
          line: 183,
          column: 32
        }
      },
      "63": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "64": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 55
        }
      },
      "65": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 10
        }
      },
      "66": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 50
        }
      },
      "67": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 46
        }
      },
      "68": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 49
        }
      },
      "69": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 70
        }
      },
      "70": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 27
        }
      },
      "71": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "72": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 82
        }
      },
      "73": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "74": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 31
        }
      },
      "75": {
        start: {
          line: 232,
          column: 22
        },
        end: {
          line: 232,
          column: 39
        }
      },
      "76": {
        start: {
          line: 233,
          column: 23
        },
        end: {
          line: 233,
          column: 34
        }
      },
      "77": {
        start: {
          line: 234,
          column: 25
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "78": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 94
        }
      },
      "79": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 22
        }
      },
      "80": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 62
        }
      },
      "81": {
        start: {
          line: 248,
          column: 22
        },
        end: {
          line: 248,
          column: 38
        }
      },
      "82": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 250,
          column: 32
        }
      },
      "83": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 32
        }
      },
      "84": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 46
        }
      },
      "85": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "86": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "87": {
        start: {
          line: 259,
          column: 28
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "88": {
        start: {
          line: 263,
          column: 27
        },
        end: {
          line: 263,
          column: 75
        }
      },
      "89": {
        start: {
          line: 263,
          column: 54
        },
        end: {
          line: 263,
          column: 74
        }
      },
      "90": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "91": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 108
        }
      },
      "92": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 269,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 25
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 20
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 40
          },
          end: {
            line: 111,
            column: 41
          }
        },
        loc: {
          start: {
            line: 111,
            column: 48
          },
          end: {
            line: 116,
            column: 9
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 119,
            column: 44
          },
          end: {
            line: 119,
            column: 45
          }
        },
        loc: {
          start: {
            line: 119,
            column: 52
          },
          end: {
            line: 125,
            column: 13
          }
        },
        line: 119
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 25
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 21
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 166,
            column: 44
          },
          end: {
            line: 166,
            column: 45
          }
        },
        loc: {
          start: {
            line: 166,
            column: 52
          },
          end: {
            line: 169,
            column: 13
          }
        },
        line: 166
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 18
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 182
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 184,
            column: 40
          },
          end: {
            line: 184,
            column: 41
          }
        },
        loc: {
          start: {
            line: 184,
            column: 48
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 184
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 20
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 195
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 201
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 207
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 31
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 213
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 31
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 220
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 38
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 228
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 33
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 241
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 247
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 31
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 256
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 263,
            column: 46
          },
          end: {
            line: 263,
            column: 47
          }
        },
        loc: {
          start: {
            line: 263,
            column: 54
          },
          end: {
            line: 263,
            column: 74
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 24,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 24,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 26,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 26,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 28,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 33,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 33,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 41
          }
        }, {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 34,
            column: 70
          }
        }],
        line: 34
      },
      "8": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "9": {
        loc: {
          start: {
            line: 38,
            column: 23
          },
          end: {
            line: 38,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 45
          },
          end: {
            line: 38,
            column: 58
          }
        }, {
          start: {
            line: 38,
            column: 61
          },
          end: {
            line: 38,
            column: 73
          }
        }],
        line: 38
      },
      "10": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 73,
            column: 18
          }
        }, {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 87,
            column: 18
          }
        }, {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 101,
            column: 18
          }
        }, {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 33
          }
        }],
        line: 60
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 46
          }
        }, {
          start: {
            line: 118,
            column: 50
          },
          end: {
            line: 118,
            column: 85
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "16": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "17": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "18": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "19": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "20": {
        loc: {
          start: {
            line: 214,
            column: 24
          },
          end: {
            line: 214,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 24
          },
          end: {
            line: 214,
            column: 50
          }
        }, {
          start: {
            line: 214,
            column: 54
          },
          end: {
            line: 214,
            column: 70
          }
        }],
        line: 214
      },
      "21": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "22": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "23": {
        loc: {
          start: {
            line: 242,
            column: 15
          },
          end: {
            line: 242,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 38
          },
          end: {
            line: 242,
            column: 49
          }
        }, {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 61
          }
        }],
        line: 242
      },
      "24": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 250,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 250,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "25": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 258,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 258,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "26": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts"],
      sourcesContent: ["import { logger } from '@shared/utils/secureLogger';\n/**\n * FeatureFlagService - Gestion centralis\xE9e des feature flags\n * S\xE9pare proprement le comportement dev/staging/production\n */\n\nexport interface FeatureFlags {\n  USE_REAL_METRICS: boolean;\n  USE_REAL_DNA: boolean;\n  USE_REAL_BEHAVIOR: boolean;\n  USE_BACKEND_API: boolean;\n  ENABLE_DEBUG_LOGGING: boolean;\n  ENABLE_PERFORMANCE_PROFILING: boolean;\n  ENABLE_MOCK_DATA: boolean;\n  ENABLE_SECURITY_AUDIT: boolean;\n  ENABLE_ADVANCED_ANALYTICS: boolean;\n  ENABLE_A_B_TESTING: boolean;\n}\n\nexport type Environment = 'development' | 'staging' | 'production';\n\nclass FeatureFlagService {\n  private static instance: FeatureFlagService;\n  private environment: Environment;\n  private flags: FeatureFlags;\n  private overrides: Partial<FeatureFlags> = {};\n\n  private constructor() {\n    this.environment = this.detectEnvironment();\n    this.flags = this.initializeFlags();\n    this.loadOverrides();\n  }\n\n  static getInstance(): FeatureFlagService {\n    if (!FeatureFlagService.instance) {\n      FeatureFlagService.instance = new FeatureFlagService();\n    }\n    return FeatureFlagService.instance;\n  }\n\n  /**\n   * D\xE9tecte l'environnement actuel\n   */\n  private detectEnvironment(): Environment {\n    // 1. Variable d'environnement explicite\n    const nodeEnv = process.env.NODE_ENV;\n    if (nodeEnv === 'production') return 'production';\n    if (nodeEnv === 'staging') return 'staging';\n    if (nodeEnv === 'development') return 'development';\n\n    // 2. D\xE9tection par URL (pour extensions)\n    if (typeof window !== 'undefined') {\n      const url = window.location.href;\n      if (url.includes('staging')) return 'staging';\n      if (url.includes('localhost') || url.includes('127.0.0.1')) return 'development';\n      if (url.startsWith('chrome-extension://')) {\n        // Extension en prod si pas de marqueur dev\n        return url.includes('dev') ? 'development' : 'production';\n      }\n    }\n\n    // 3. Fallback d\xE9veloppement\n    return 'development';\n  }\n\n  /**\n   * Initialise les flags selon l'environnement\n   */\n  private initializeFlags(): FeatureFlags {\n    const baseFlags: FeatureFlags = {\n      USE_REAL_METRICS: false,\n      USE_REAL_DNA: false,\n      USE_REAL_BEHAVIOR: false,\n      USE_BACKEND_API: false,\n      ENABLE_DEBUG_LOGGING: false,\n      ENABLE_PERFORMANCE_PROFILING: false,\n      ENABLE_MOCK_DATA: true,\n      ENABLE_SECURITY_AUDIT: false,\n      ENABLE_ADVANCED_ANALYTICS: false,\n      ENABLE_A_B_TESTING: false\n    };\n\n    switch (this.environment) {\n      case 'development':\n        return {\n          ...baseFlags,\n          ENABLE_DEBUG_LOGGING: true,\n          ENABLE_PERFORMANCE_PROFILING: true,\n          ENABLE_MOCK_DATA: true,\n          ENABLE_SECURITY_AUDIT: true,\n          // Possibilit\xE9 d'activer vraies donn\xE9es en dev pour tests\n          USE_REAL_METRICS: this.getEnvBoolean('USE_REAL_METRICS', false),\n          USE_REAL_DNA: this.getEnvBoolean('USE_REAL_DNA', false),\n          USE_REAL_BEHAVIOR: this.getEnvBoolean('USE_REAL_BEHAVIOR', false),\n          USE_BACKEND_API: this.getEnvBoolean('USE_BACKEND_API', false)\n        };\n\n      case 'staging':\n        return {\n          ...baseFlags,\n          USE_REAL_METRICS: true,\n          USE_REAL_DNA: true,\n          USE_REAL_BEHAVIOR: true,\n          USE_BACKEND_API: true,\n          ENABLE_DEBUG_LOGGING: false,\n          ENABLE_PERFORMANCE_PROFILING: true,\n          ENABLE_MOCK_DATA: false,\n          ENABLE_SECURITY_AUDIT: true,\n          ENABLE_ADVANCED_ANALYTICS: true,\n          ENABLE_A_B_TESTING: true\n        };\n\n      case 'production':\n        return {\n          ...baseFlags,\n          USE_REAL_METRICS: true,\n          USE_REAL_DNA: true,\n          USE_REAL_BEHAVIOR: true,\n          USE_BACKEND_API: true,\n          ENABLE_DEBUG_LOGGING: false,\n          ENABLE_PERFORMANCE_PROFILING: false,\n          ENABLE_MOCK_DATA: false,\n          ENABLE_SECURITY_AUDIT: false,\n          ENABLE_ADVANCED_ANALYTICS: true,\n          ENABLE_A_B_TESTING: false // D\xE9sactiv\xE9 par d\xE9faut en prod\n        };\n\n      default:\n        return baseFlags;\n    }\n  }\n\n  /**\n   * Charge les overrides depuis localStorage et variables d'env\n   */\n  private loadOverrides(): void {\n    // 1. Variables d'environnement\n    Object.keys(this.flags).forEach(flag => {\n      const envValue = process.env[`SYMBIONT_${flag}`];\n      if (envValue !== undefined) {\n        this.overrides[flag as keyof FeatureFlags] = envValue === 'true';\n      }\n    });\n\n    // 2. localStorage (pour tests manuels en dev)\n    if (this.environment === 'development' && typeof localStorage !== 'undefined') {\n      Object.keys(this.flags).forEach(flag => {\n        const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n        const storageValue = localStorage.getItem(storageKey);\n        if (storageValue !== null) {\n          this.overrides[flag as keyof FeatureFlags] = storageValue === 'true';\n        }\n      });\n    }\n  }\n\n  /**\n   * Obtient la valeur d'un feature flag\n   */\n  isEnabled(flag: keyof FeatureFlags): boolean {\n    // 1. Override explicite\n    if (this.overrides[flag] !== undefined) {\n      return this.overrides[flag]!;\n    }\n\n    // 2. Valeur par d\xE9faut selon environnement\n    return this.flags[flag];\n  }\n\n  /**\n   * Override temporaire d'un flag (dev uniquement)\n   */\n  setFlag(flag: keyof FeatureFlags, value: boolean): void {\n    if (this.environment !== 'development') {\n      logger.warn(`\u26A0\uFE0F Override de feature flag '${flag}' ignor\xE9 en ${this.environment}`);\n      return;\n    }\n\n    this.overrides[flag] = value;\n    \n    // Sauvegarder en localStorage pour persistence\n    if (typeof localStorage !== 'undefined') {\n      const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n      localStorage.setItem(storageKey, value.toString());\n    }\n\n    logger.info(`\uD83D\uDD27 Feature flag '${flag}' d\xE9fini \xE0 ${value}`);\n  }\n\n  /**\n   * Remet \xE0 z\xE9ro tous les overrides\n   */\n  resetOverrides(): void {\n    if (this.environment !== 'development') {\n      logger.warn('\u26A0\uFE0F Reset des overrides ignor\xE9 en production');\n      return;\n    }\n\n    this.overrides = {};\n    \n    // Nettoyer localStorage\n    if (typeof localStorage !== 'undefined') {\n      Object.keys(this.flags).forEach(flag => {\n        const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n        localStorage.removeItem(storageKey);\n      });\n    }\n\n    logger.info('\uD83D\uDD04 Tous les feature flags remis aux valeurs par d\xE9faut');\n  }\n\n  /**\n   * Obtient l'environnement actuel\n   */\n  getEnvironment(): Environment {\n    return this.environment;\n  }\n\n  /**\n   * Obtient tous les flags actuels (pour debug)\n   */\n  getAllFlags(): FeatureFlags & { environment: Environment } {\n    const resolvedFlags: FeatureFlags = {} as FeatureFlags;\n    \n    Object.keys(this.flags).forEach(flag => {\n      resolvedFlags[flag as keyof FeatureFlags] = this.isEnabled(flag as keyof FeatureFlags);\n    });\n\n    return {\n      ...resolvedFlags,\n      environment: this.environment\n    };\n  }\n\n  /**\n   * V\xE9rifie si on est en mode d\xE9veloppement\n   */\n  isDevelopment(): boolean {\n    return this.environment === 'development';\n  }\n\n  /**\n   * V\xE9rifie si on est en mode staging\n   */\n  isStaging(): boolean {\n    return this.environment === 'staging';\n  }\n\n  /**\n   * V\xE9rifie si on est en mode production\n   */\n  isProduction(): boolean {\n    return this.environment === 'production';\n  }\n\n  /**\n   * Ex\xE9cute du code conditionnel selon l'environnement\n   */\n  runInEnvironment<T>(\n    handlers: {\n      development?: () => T;\n      staging?: () => T;\n      production?: () => T;\n      default?: () => T;\n    }\n  ): T | undefined {\n    const handler = handlers[this.environment] || handlers.default;\n    return handler?.();\n  }\n\n  /**\n   * Log conditionnel selon les feature flags\n   */\n  debugLog(message: string, ...args: unknown[]): void {\n    if (this.isEnabled('ENABLE_DEBUG_LOGGING')) {\n      logger.info(`\uD83D\uDC1B [SYMBIONT Debug] ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Performance profiling conditionnel\n   */\n  profileOperation<T>(name: string, operation: () => T): T {\n    if (!this.isEnabled('ENABLE_PERFORMANCE_PROFILING')) {\n      return operation();\n    }\n\n    const start = performance.now();\n    const result = operation();\n    const duration = performance.now() - start;\n    \n    logger.info(`\u23F1\uFE0F [SYMBIONT Profile] ${name}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  }\n\n  /**\n   * Ex\xE9cution conditionnelle selon feature flag\n   */\n  whenEnabled<T>(flag: keyof FeatureFlags, operation: () => T): T | undefined {\n    return this.isEnabled(flag) ? operation() : undefined;\n  }\n\n  /**\n   * Utilitaire pour lire variables d'environnement boolean\n   */\n  private getEnvBoolean(key: string, defaultValue: boolean): boolean {\n    const value = process.env[key];\n    if (value === undefined) return defaultValue;\n    return value.toLowerCase() === 'true';\n  }\n\n  /**\n   * Validation de s\xE9curit\xE9 - v\xE9rifie qu'on n'utilise pas de donn\xE9es mock en prod\n   */\n  validateProductionSafety(): void {\n    if (!this.isProduction()) return;\n\n    const unsafeFlags = [\n      'ENABLE_MOCK_DATA',\n      'ENABLE_DEBUG_LOGGING'\n    ];\n\n    const violations = unsafeFlags.filter(flag => \n      this.isEnabled(flag as keyof FeatureFlags)\n    );\n\n    if (violations.length > 0) {\n      throw new Error(\n        `\uD83D\uDEA8 S\xC9CURIT\xC9: Flags dangereux activ\xE9s en production: ${violations.join(', ')}`\n      );\n    }\n  }\n}\n\nexport default FeatureFlagService;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b934694af45925eb2d6c009856e3fcb7bc38cbd5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zqn8obsov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zqn8obsov();
cov_zqn8obsov().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const secureLogger_1 =
/* istanbul ignore next */
(cov_zqn8obsov().s[1]++, require("@shared/utils/secureLogger"));
class FeatureFlagService {
  constructor() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[0]++;
    cov_zqn8obsov().s[2]++;
    this.overrides = {};
    /* istanbul ignore next */
    cov_zqn8obsov().s[3]++;
    this.environment = this.detectEnvironment();
    /* istanbul ignore next */
    cov_zqn8obsov().s[4]++;
    this.flags = this.initializeFlags();
    /* istanbul ignore next */
    cov_zqn8obsov().s[5]++;
    this.loadOverrides();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[1]++;
    cov_zqn8obsov().s[6]++;
    if (!FeatureFlagService.instance) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[0][0]++;
      cov_zqn8obsov().s[7]++;
      FeatureFlagService.instance = new FeatureFlagService();
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[0][1]++;
    }
    cov_zqn8obsov().s[8]++;
    return FeatureFlagService.instance;
  }
  /**
   * Détecte l'environnement actuel
   */
  detectEnvironment() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[2]++;
    // 1. Variable d'environnement explicite
    const nodeEnv =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[9]++, process.env.NODE_ENV);
    /* istanbul ignore next */
    cov_zqn8obsov().s[10]++;
    if (nodeEnv === 'production') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[1][0]++;
      cov_zqn8obsov().s[11]++;
      return 'production';
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[1][1]++;
    }
    cov_zqn8obsov().s[12]++;
    if (nodeEnv === 'staging') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[2][0]++;
      cov_zqn8obsov().s[13]++;
      return 'staging';
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[2][1]++;
    }
    cov_zqn8obsov().s[14]++;
    if (nodeEnv === 'development') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[3][0]++;
      cov_zqn8obsov().s[15]++;
      return 'development';
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[3][1]++;
    }
    // 2. Détection par URL (pour extensions)
    cov_zqn8obsov().s[16]++;
    if (typeof window !== 'undefined') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[4][0]++;
      const url =
      /* istanbul ignore next */
      (cov_zqn8obsov().s[17]++, window.location.href);
      /* istanbul ignore next */
      cov_zqn8obsov().s[18]++;
      if (url.includes('staging')) {
        /* istanbul ignore next */
        cov_zqn8obsov().b[5][0]++;
        cov_zqn8obsov().s[19]++;
        return 'staging';
      } else
      /* istanbul ignore next */
      {
        cov_zqn8obsov().b[5][1]++;
      }
      cov_zqn8obsov().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_zqn8obsov().b[7][0]++, url.includes('localhost')) ||
      /* istanbul ignore next */
      (cov_zqn8obsov().b[7][1]++, url.includes('127.0.0.1'))) {
        /* istanbul ignore next */
        cov_zqn8obsov().b[6][0]++;
        cov_zqn8obsov().s[21]++;
        return 'development';
      } else
      /* istanbul ignore next */
      {
        cov_zqn8obsov().b[6][1]++;
      }
      cov_zqn8obsov().s[22]++;
      if (url.startsWith('chrome-extension://')) {
        /* istanbul ignore next */
        cov_zqn8obsov().b[8][0]++;
        cov_zqn8obsov().s[23]++;
        // Extension en prod si pas de marqueur dev
        return url.includes('dev') ?
        /* istanbul ignore next */
        (cov_zqn8obsov().b[9][0]++, 'development') :
        /* istanbul ignore next */
        (cov_zqn8obsov().b[9][1]++, 'production');
      } else
      /* istanbul ignore next */
      {
        cov_zqn8obsov().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[4][1]++;
    }
    // 3. Fallback développement
    cov_zqn8obsov().s[24]++;
    return 'development';
  }
  /**
   * Initialise les flags selon l'environnement
   */
  initializeFlags() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[3]++;
    const baseFlags =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[25]++, {
      USE_REAL_METRICS: false,
      USE_REAL_DNA: false,
      USE_REAL_BEHAVIOR: false,
      USE_BACKEND_API: false,
      ENABLE_DEBUG_LOGGING: false,
      ENABLE_PERFORMANCE_PROFILING: false,
      ENABLE_MOCK_DATA: true,
      ENABLE_SECURITY_AUDIT: false,
      ENABLE_ADVANCED_ANALYTICS: false,
      ENABLE_A_B_TESTING: false
    });
    /* istanbul ignore next */
    cov_zqn8obsov().s[26]++;
    switch (this.environment) {
      case 'development':
        /* istanbul ignore next */
        cov_zqn8obsov().b[10][0]++;
        cov_zqn8obsov().s[27]++;
        return {
          ...baseFlags,
          ENABLE_DEBUG_LOGGING: true,
          ENABLE_PERFORMANCE_PROFILING: true,
          ENABLE_MOCK_DATA: true,
          ENABLE_SECURITY_AUDIT: true,
          // Possibilité d'activer vraies données en dev pour tests
          USE_REAL_METRICS: this.getEnvBoolean('USE_REAL_METRICS', false),
          USE_REAL_DNA: this.getEnvBoolean('USE_REAL_DNA', false),
          USE_REAL_BEHAVIOR: this.getEnvBoolean('USE_REAL_BEHAVIOR', false),
          USE_BACKEND_API: this.getEnvBoolean('USE_BACKEND_API', false)
        };
      case 'staging':
        /* istanbul ignore next */
        cov_zqn8obsov().b[10][1]++;
        cov_zqn8obsov().s[28]++;
        return {
          ...baseFlags,
          USE_REAL_METRICS: true,
          USE_REAL_DNA: true,
          USE_REAL_BEHAVIOR: true,
          USE_BACKEND_API: true,
          ENABLE_DEBUG_LOGGING: false,
          ENABLE_PERFORMANCE_PROFILING: true,
          ENABLE_MOCK_DATA: false,
          ENABLE_SECURITY_AUDIT: true,
          ENABLE_ADVANCED_ANALYTICS: true,
          ENABLE_A_B_TESTING: true
        };
      case 'production':
        /* istanbul ignore next */
        cov_zqn8obsov().b[10][2]++;
        cov_zqn8obsov().s[29]++;
        return {
          ...baseFlags,
          USE_REAL_METRICS: true,
          USE_REAL_DNA: true,
          USE_REAL_BEHAVIOR: true,
          USE_BACKEND_API: true,
          ENABLE_DEBUG_LOGGING: false,
          ENABLE_PERFORMANCE_PROFILING: false,
          ENABLE_MOCK_DATA: false,
          ENABLE_SECURITY_AUDIT: false,
          ENABLE_ADVANCED_ANALYTICS: true,
          ENABLE_A_B_TESTING: false // Désactivé par défaut en prod
        };
      default:
        /* istanbul ignore next */
        cov_zqn8obsov().b[10][3]++;
        cov_zqn8obsov().s[30]++;
        return baseFlags;
    }
  }
  /**
   * Charge les overrides depuis localStorage et variables d'env
   */
  loadOverrides() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[4]++;
    cov_zqn8obsov().s[31]++;
    // 1. Variables d'environnement
    Object.keys(this.flags).forEach(flag => {
      /* istanbul ignore next */
      cov_zqn8obsov().f[5]++;
      const envValue =
      /* istanbul ignore next */
      (cov_zqn8obsov().s[32]++, process.env[`SYMBIONT_${flag}`]);
      /* istanbul ignore next */
      cov_zqn8obsov().s[33]++;
      if (envValue !== undefined) {
        /* istanbul ignore next */
        cov_zqn8obsov().b[11][0]++;
        cov_zqn8obsov().s[34]++;
        this.overrides[flag] = envValue === 'true';
      } else
      /* istanbul ignore next */
      {
        cov_zqn8obsov().b[11][1]++;
      }
    });
    // 2. localStorage (pour tests manuels en dev)
    /* istanbul ignore next */
    cov_zqn8obsov().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_zqn8obsov().b[13][0]++, this.environment === 'development') &&
    /* istanbul ignore next */
    (cov_zqn8obsov().b[13][1]++, typeof localStorage !== 'undefined')) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[12][0]++;
      cov_zqn8obsov().s[36]++;
      Object.keys(this.flags).forEach(flag => {
        /* istanbul ignore next */
        cov_zqn8obsov().f[6]++;
        const storageKey =
        /* istanbul ignore next */
        (cov_zqn8obsov().s[37]++, `symbiont_feature_${flag.toLowerCase()}`);
        const storageValue =
        /* istanbul ignore next */
        (cov_zqn8obsov().s[38]++, localStorage.getItem(storageKey));
        /* istanbul ignore next */
        cov_zqn8obsov().s[39]++;
        if (storageValue !== null) {
          /* istanbul ignore next */
          cov_zqn8obsov().b[14][0]++;
          cov_zqn8obsov().s[40]++;
          this.overrides[flag] = storageValue === 'true';
        } else
        /* istanbul ignore next */
        {
          cov_zqn8obsov().b[14][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[12][1]++;
    }
  }
  /**
   * Obtient la valeur d'un feature flag
   */
  isEnabled(flag) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[7]++;
    cov_zqn8obsov().s[41]++;
    // 1. Override explicite
    if (this.overrides[flag] !== undefined) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[15][0]++;
      cov_zqn8obsov().s[42]++;
      return this.overrides[flag];
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[15][1]++;
    }
    // 2. Valeur par défaut selon environnement
    cov_zqn8obsov().s[43]++;
    return this.flags[flag];
  }
  /**
   * Override temporaire d'un flag (dev uniquement)
   */
  setFlag(flag, value) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[8]++;
    cov_zqn8obsov().s[44]++;
    if (this.environment !== 'development') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[16][0]++;
      cov_zqn8obsov().s[45]++;
      secureLogger_1.logger.warn(`⚠️ Override de feature flag '${flag}' ignoré en ${this.environment}`);
      /* istanbul ignore next */
      cov_zqn8obsov().s[46]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[16][1]++;
    }
    cov_zqn8obsov().s[47]++;
    this.overrides[flag] = value;
    // Sauvegarder en localStorage pour persistence
    /* istanbul ignore next */
    cov_zqn8obsov().s[48]++;
    if (typeof localStorage !== 'undefined') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[17][0]++;
      const storageKey =
      /* istanbul ignore next */
      (cov_zqn8obsov().s[49]++, `symbiont_feature_${flag.toLowerCase()}`);
      /* istanbul ignore next */
      cov_zqn8obsov().s[50]++;
      localStorage.setItem(storageKey, value.toString());
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[17][1]++;
    }
    cov_zqn8obsov().s[51]++;
    secureLogger_1.logger.info(`🔧 Feature flag '${flag}' défini à ${value}`);
  }
  /**
   * Remet à zéro tous les overrides
   */
  resetOverrides() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[9]++;
    cov_zqn8obsov().s[52]++;
    if (this.environment !== 'development') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[18][0]++;
      cov_zqn8obsov().s[53]++;
      secureLogger_1.logger.warn('⚠️ Reset des overrides ignoré en production');
      /* istanbul ignore next */
      cov_zqn8obsov().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[18][1]++;
    }
    cov_zqn8obsov().s[55]++;
    this.overrides = {};
    // Nettoyer localStorage
    /* istanbul ignore next */
    cov_zqn8obsov().s[56]++;
    if (typeof localStorage !== 'undefined') {
      /* istanbul ignore next */
      cov_zqn8obsov().b[19][0]++;
      cov_zqn8obsov().s[57]++;
      Object.keys(this.flags).forEach(flag => {
        /* istanbul ignore next */
        cov_zqn8obsov().f[10]++;
        const storageKey =
        /* istanbul ignore next */
        (cov_zqn8obsov().s[58]++, `symbiont_feature_${flag.toLowerCase()}`);
        /* istanbul ignore next */
        cov_zqn8obsov().s[59]++;
        localStorage.removeItem(storageKey);
      });
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[19][1]++;
    }
    cov_zqn8obsov().s[60]++;
    secureLogger_1.logger.info('🔄 Tous les feature flags remis aux valeurs par défaut');
  }
  /**
   * Obtient l'environnement actuel
   */
  getEnvironment() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[11]++;
    cov_zqn8obsov().s[61]++;
    return this.environment;
  }
  /**
   * Obtient tous les flags actuels (pour debug)
   */
  getAllFlags() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[12]++;
    const resolvedFlags =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[62]++, {});
    /* istanbul ignore next */
    cov_zqn8obsov().s[63]++;
    Object.keys(this.flags).forEach(flag => {
      /* istanbul ignore next */
      cov_zqn8obsov().f[13]++;
      cov_zqn8obsov().s[64]++;
      resolvedFlags[flag] = this.isEnabled(flag);
    });
    /* istanbul ignore next */
    cov_zqn8obsov().s[65]++;
    return {
      ...resolvedFlags,
      environment: this.environment
    };
  }
  /**
   * Vérifie si on est en mode développement
   */
  isDevelopment() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[14]++;
    cov_zqn8obsov().s[66]++;
    return this.environment === 'development';
  }
  /**
   * Vérifie si on est en mode staging
   */
  isStaging() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[15]++;
    cov_zqn8obsov().s[67]++;
    return this.environment === 'staging';
  }
  /**
   * Vérifie si on est en mode production
   */
  isProduction() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[16]++;
    cov_zqn8obsov().s[68]++;
    return this.environment === 'production';
  }
  /**
   * Exécute du code conditionnel selon l'environnement
   */
  runInEnvironment(handlers) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[17]++;
    const handler =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[69]++,
    /* istanbul ignore next */
    (cov_zqn8obsov().b[20][0]++, handlers[this.environment]) ||
    /* istanbul ignore next */
    (cov_zqn8obsov().b[20][1]++, handlers.default));
    /* istanbul ignore next */
    cov_zqn8obsov().s[70]++;
    return handler?.();
  }
  /**
   * Log conditionnel selon les feature flags
   */
  debugLog(message, ...args) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[18]++;
    cov_zqn8obsov().s[71]++;
    if (this.isEnabled('ENABLE_DEBUG_LOGGING')) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[21][0]++;
      cov_zqn8obsov().s[72]++;
      secureLogger_1.logger.info(`🐛 [SYMBIONT Debug] ${message}`, ...args);
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[21][1]++;
    }
  }
  /**
   * Performance profiling conditionnel
   */
  profileOperation(name, operation) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[19]++;
    cov_zqn8obsov().s[73]++;
    if (!this.isEnabled('ENABLE_PERFORMANCE_PROFILING')) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[22][0]++;
      cov_zqn8obsov().s[74]++;
      return operation();
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[22][1]++;
    }
    const start =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[75]++, performance.now());
    const result =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[76]++, operation());
    const duration =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[77]++, performance.now() - start);
    /* istanbul ignore next */
    cov_zqn8obsov().s[78]++;
    secureLogger_1.logger.info(`⏱️ [SYMBIONT Profile] ${name}: ${duration.toFixed(2)}ms`);
    /* istanbul ignore next */
    cov_zqn8obsov().s[79]++;
    return result;
  }
  /**
   * Exécution conditionnelle selon feature flag
   */
  whenEnabled(flag, operation) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[20]++;
    cov_zqn8obsov().s[80]++;
    return this.isEnabled(flag) ?
    /* istanbul ignore next */
    (cov_zqn8obsov().b[23][0]++, operation()) :
    /* istanbul ignore next */
    (cov_zqn8obsov().b[23][1]++, undefined);
  }
  /**
   * Utilitaire pour lire variables d'environnement boolean
   */
  getEnvBoolean(key, defaultValue) {
    /* istanbul ignore next */
    cov_zqn8obsov().f[21]++;
    const value =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[81]++, process.env[key]);
    /* istanbul ignore next */
    cov_zqn8obsov().s[82]++;
    if (value === undefined) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[24][0]++;
      cov_zqn8obsov().s[83]++;
      return defaultValue;
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[24][1]++;
    }
    cov_zqn8obsov().s[84]++;
    return value.toLowerCase() === 'true';
  }
  /**
   * Validation de sécurité - vérifie qu'on n'utilise pas de données mock en prod
   */
  validateProductionSafety() {
    /* istanbul ignore next */
    cov_zqn8obsov().f[22]++;
    cov_zqn8obsov().s[85]++;
    if (!this.isProduction()) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[25][0]++;
      cov_zqn8obsov().s[86]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[25][1]++;
    }
    const unsafeFlags =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[87]++, ['ENABLE_MOCK_DATA', 'ENABLE_DEBUG_LOGGING']);
    const violations =
    /* istanbul ignore next */
    (cov_zqn8obsov().s[88]++, unsafeFlags.filter(flag => {
      /* istanbul ignore next */
      cov_zqn8obsov().f[23]++;
      cov_zqn8obsov().s[89]++;
      return this.isEnabled(flag);
    }));
    /* istanbul ignore next */
    cov_zqn8obsov().s[90]++;
    if (violations.length > 0) {
      /* istanbul ignore next */
      cov_zqn8obsov().b[26][0]++;
      cov_zqn8obsov().s[91]++;
      throw new Error(`🚨 SÉCURITÉ: Flags dangereux activés en production: ${violations.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_zqn8obsov().b[26][1]++;
    }
  }
}
/* istanbul ignore next */
cov_zqn8obsov().s[92]++;
exports.default = FeatureFlagService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfenFuOG9ic292IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwic2VjdXJlTG9nZ2VyXzEiLCJyZXF1aXJlIiwiRmVhdHVyZUZsYWdTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJmIiwib3ZlcnJpZGVzIiwiZW52aXJvbm1lbnQiLCJkZXRlY3RFbnZpcm9ubWVudCIsImZsYWdzIiwiaW5pdGlhbGl6ZUZsYWdzIiwibG9hZE92ZXJyaWRlcyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJiIiwibm9kZUVudiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIndpbmRvdyIsInVybCIsImxvY2F0aW9uIiwiaHJlZiIsImluY2x1ZGVzIiwic3RhcnRzV2l0aCIsImJhc2VGbGFncyIsIlVTRV9SRUFMX01FVFJJQ1MiLCJVU0VfUkVBTF9ETkEiLCJVU0VfUkVBTF9CRUhBVklPUiIsIlVTRV9CQUNLRU5EX0FQSSIsIkVOQUJMRV9ERUJVR19MT0dHSU5HIiwiRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORyIsIkVOQUJMRV9NT0NLX0RBVEEiLCJFTkFCTEVfU0VDVVJJVFlfQVVESVQiLCJFTkFCTEVfQURWQU5DRURfQU5BTFlUSUNTIiwiRU5BQkxFX0FfQl9URVNUSU5HIiwiZ2V0RW52Qm9vbGVhbiIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZmxhZyIsImVudlZhbHVlIiwidW5kZWZpbmVkIiwibG9jYWxTdG9yYWdlIiwic3RvcmFnZUtleSIsInRvTG93ZXJDYXNlIiwic3RvcmFnZVZhbHVlIiwiZ2V0SXRlbSIsImlzRW5hYmxlZCIsInNldEZsYWciLCJ2YWx1ZSIsImxvZ2dlciIsIndhcm4iLCJzZXRJdGVtIiwidG9TdHJpbmciLCJpbmZvIiwicmVzZXRPdmVycmlkZXMiLCJyZW1vdmVJdGVtIiwiZ2V0RW52aXJvbm1lbnQiLCJnZXRBbGxGbGFncyIsInJlc29sdmVkRmxhZ3MiLCJpc0RldmVsb3BtZW50IiwiaXNTdGFnaW5nIiwiaXNQcm9kdWN0aW9uIiwicnVuSW5FbnZpcm9ubWVudCIsImhhbmRsZXJzIiwiaGFuZGxlciIsImRlZmF1bHQiLCJkZWJ1Z0xvZyIsIm1lc3NhZ2UiLCJhcmdzIiwicHJvZmlsZU9wZXJhdGlvbiIsIm5hbWUiLCJvcGVyYXRpb24iLCJzdGFydCIsInBlcmZvcm1hbmNlIiwibm93IiwicmVzdWx0IiwiZHVyYXRpb24iLCJ0b0ZpeGVkIiwid2hlbkVuYWJsZWQiLCJrZXkiLCJkZWZhdWx0VmFsdWUiLCJ2YWxpZGF0ZVByb2R1Y3Rpb25TYWZldHkiLCJ1bnNhZmVGbGFncyIsInZpb2xhdGlvbnMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJFcnJvciIsImpvaW4iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL2NvcmUvc2VydmljZXMvRmVhdHVyZUZsYWdTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzaGFyZWQvdXRpbHMvc2VjdXJlTG9nZ2VyJztcbi8qKlxuICogRmVhdHVyZUZsYWdTZXJ2aWNlIC0gR2VzdGlvbiBjZW50cmFsaXPDqWUgZGVzIGZlYXR1cmUgZmxhZ3NcbiAqIFPDqXBhcmUgcHJvcHJlbWVudCBsZSBjb21wb3J0ZW1lbnQgZGV2L3N0YWdpbmcvcHJvZHVjdGlvblxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZUZsYWdzIHtcbiAgVVNFX1JFQUxfTUVUUklDUzogYm9vbGVhbjtcbiAgVVNFX1JFQUxfRE5BOiBib29sZWFuO1xuICBVU0VfUkVBTF9CRUhBVklPUjogYm9vbGVhbjtcbiAgVVNFX0JBQ0tFTkRfQVBJOiBib29sZWFuO1xuICBFTkFCTEVfREVCVUdfTE9HR0lORzogYm9vbGVhbjtcbiAgRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORzogYm9vbGVhbjtcbiAgRU5BQkxFX01PQ0tfREFUQTogYm9vbGVhbjtcbiAgRU5BQkxFX1NFQ1VSSVRZX0FVRElUOiBib29sZWFuO1xuICBFTkFCTEVfQURWQU5DRURfQU5BTFlUSUNTOiBib29sZWFuO1xuICBFTkFCTEVfQV9CX1RFU1RJTkc6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEVudmlyb25tZW50ID0gJ2RldmVsb3BtZW50JyB8ICdzdGFnaW5nJyB8ICdwcm9kdWN0aW9uJztcblxuY2xhc3MgRmVhdHVyZUZsYWdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEZlYXR1cmVGbGFnU2VydmljZTtcbiAgcHJpdmF0ZSBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQ7XG4gIHByaXZhdGUgZmxhZ3M6IEZlYXR1cmVGbGFncztcbiAgcHJpdmF0ZSBvdmVycmlkZXM6IFBhcnRpYWw8RmVhdHVyZUZsYWdzPiA9IHt9O1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IHRoaXMuZGV0ZWN0RW52aXJvbm1lbnQoKTtcbiAgICB0aGlzLmZsYWdzID0gdGhpcy5pbml0aWFsaXplRmxhZ3MoKTtcbiAgICB0aGlzLmxvYWRPdmVycmlkZXMoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBGZWF0dXJlRmxhZ1NlcnZpY2Uge1xuICAgIGlmICghRmVhdHVyZUZsYWdTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICBGZWF0dXJlRmxhZ1NlcnZpY2UuaW5zdGFuY2UgPSBuZXcgRmVhdHVyZUZsYWdTZXJ2aWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBGZWF0dXJlRmxhZ1NlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogRMOpdGVjdGUgbCdlbnZpcm9ubmVtZW50IGFjdHVlbFxuICAgKi9cbiAgcHJpdmF0ZSBkZXRlY3RFbnZpcm9ubWVudCgpOiBFbnZpcm9ubWVudCB7XG4gICAgLy8gMS4gVmFyaWFibGUgZCdlbnZpcm9ubmVtZW50IGV4cGxpY2l0ZVxuICAgIGNvbnN0IG5vZGVFbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcbiAgICBpZiAobm9kZUVudiA9PT0gJ3Byb2R1Y3Rpb24nKSByZXR1cm4gJ3Byb2R1Y3Rpb24nO1xuICAgIGlmIChub2RlRW52ID09PSAnc3RhZ2luZycpIHJldHVybiAnc3RhZ2luZyc7XG4gICAgaWYgKG5vZGVFbnYgPT09ICdkZXZlbG9wbWVudCcpIHJldHVybiAnZGV2ZWxvcG1lbnQnO1xuXG4gICAgLy8gMi4gRMOpdGVjdGlvbiBwYXIgVVJMIChwb3VyIGV4dGVuc2lvbnMpXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ3N0YWdpbmcnKSkgcmV0dXJuICdzdGFnaW5nJztcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpIHx8IHVybC5pbmNsdWRlcygnMTI3LjAuMC4xJykpIHJldHVybiAnZGV2ZWxvcG1lbnQnO1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJykpIHtcbiAgICAgICAgLy8gRXh0ZW5zaW9uIGVuIHByb2Qgc2kgcGFzIGRlIG1hcnF1ZXVyIGRldlxuICAgICAgICByZXR1cm4gdXJsLmluY2x1ZGVzKCdkZXYnKSA/ICdkZXZlbG9wbWVudCcgOiAncHJvZHVjdGlvbic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gMy4gRmFsbGJhY2sgZMOpdmVsb3BwZW1lbnRcbiAgICByZXR1cm4gJ2RldmVsb3BtZW50JztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIGxlcyBmbGFncyBzZWxvbiBsJ2Vudmlyb25uZW1lbnRcbiAgICovXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUZsYWdzKCk6IEZlYXR1cmVGbGFncyB7XG4gICAgY29uc3QgYmFzZUZsYWdzOiBGZWF0dXJlRmxhZ3MgPSB7XG4gICAgICBVU0VfUkVBTF9NRVRSSUNTOiBmYWxzZSxcbiAgICAgIFVTRV9SRUFMX0ROQTogZmFsc2UsXG4gICAgICBVU0VfUkVBTF9CRUhBVklPUjogZmFsc2UsXG4gICAgICBVU0VfQkFDS0VORF9BUEk6IGZhbHNlLFxuICAgICAgRU5BQkxFX0RFQlVHX0xPR0dJTkc6IGZhbHNlLFxuICAgICAgRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORzogZmFsc2UsXG4gICAgICBFTkFCTEVfTU9DS19EQVRBOiB0cnVlLFxuICAgICAgRU5BQkxFX1NFQ1VSSVRZX0FVRElUOiBmYWxzZSxcbiAgICAgIEVOQUJMRV9BRFZBTkNFRF9BTkFMWVRJQ1M6IGZhbHNlLFxuICAgICAgRU5BQkxFX0FfQl9URVNUSU5HOiBmYWxzZVxuICAgIH07XG5cbiAgICBzd2l0Y2ggKHRoaXMuZW52aXJvbm1lbnQpIHtcbiAgICAgIGNhc2UgJ2RldmVsb3BtZW50JzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5iYXNlRmxhZ3MsXG4gICAgICAgICAgRU5BQkxFX0RFQlVHX0xPR0dJTkc6IHRydWUsXG4gICAgICAgICAgRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORzogdHJ1ZSxcbiAgICAgICAgICBFTkFCTEVfTU9DS19EQVRBOiB0cnVlLFxuICAgICAgICAgIEVOQUJMRV9TRUNVUklUWV9BVURJVDogdHJ1ZSxcbiAgICAgICAgICAvLyBQb3NzaWJpbGl0w6kgZCdhY3RpdmVyIHZyYWllcyBkb25uw6llcyBlbiBkZXYgcG91ciB0ZXN0c1xuICAgICAgICAgIFVTRV9SRUFMX01FVFJJQ1M6IHRoaXMuZ2V0RW52Qm9vbGVhbignVVNFX1JFQUxfTUVUUklDUycsIGZhbHNlKSxcbiAgICAgICAgICBVU0VfUkVBTF9ETkE6IHRoaXMuZ2V0RW52Qm9vbGVhbignVVNFX1JFQUxfRE5BJywgZmFsc2UpLFxuICAgICAgICAgIFVTRV9SRUFMX0JFSEFWSU9SOiB0aGlzLmdldEVudkJvb2xlYW4oJ1VTRV9SRUFMX0JFSEFWSU9SJywgZmFsc2UpLFxuICAgICAgICAgIFVTRV9CQUNLRU5EX0FQSTogdGhpcy5nZXRFbnZCb29sZWFuKCdVU0VfQkFDS0VORF9BUEknLCBmYWxzZSlcbiAgICAgICAgfTtcblxuICAgICAgY2FzZSAnc3RhZ2luZyc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uYmFzZUZsYWdzLFxuICAgICAgICAgIFVTRV9SRUFMX01FVFJJQ1M6IHRydWUsXG4gICAgICAgICAgVVNFX1JFQUxfRE5BOiB0cnVlLFxuICAgICAgICAgIFVTRV9SRUFMX0JFSEFWSU9SOiB0cnVlLFxuICAgICAgICAgIFVTRV9CQUNLRU5EX0FQSTogdHJ1ZSxcbiAgICAgICAgICBFTkFCTEVfREVCVUdfTE9HR0lORzogZmFsc2UsXG4gICAgICAgICAgRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORzogdHJ1ZSxcbiAgICAgICAgICBFTkFCTEVfTU9DS19EQVRBOiBmYWxzZSxcbiAgICAgICAgICBFTkFCTEVfU0VDVVJJVFlfQVVESVQ6IHRydWUsXG4gICAgICAgICAgRU5BQkxFX0FEVkFOQ0VEX0FOQUxZVElDUzogdHJ1ZSxcbiAgICAgICAgICBFTkFCTEVfQV9CX1RFU1RJTkc6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgY2FzZSAncHJvZHVjdGlvbic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uYmFzZUZsYWdzLFxuICAgICAgICAgIFVTRV9SRUFMX01FVFJJQ1M6IHRydWUsXG4gICAgICAgICAgVVNFX1JFQUxfRE5BOiB0cnVlLFxuICAgICAgICAgIFVTRV9SRUFMX0JFSEFWSU9SOiB0cnVlLFxuICAgICAgICAgIFVTRV9CQUNLRU5EX0FQSTogdHJ1ZSxcbiAgICAgICAgICBFTkFCTEVfREVCVUdfTE9HR0lORzogZmFsc2UsXG4gICAgICAgICAgRU5BQkxFX1BFUkZPUk1BTkNFX1BST0ZJTElORzogZmFsc2UsXG4gICAgICAgICAgRU5BQkxFX01PQ0tfREFUQTogZmFsc2UsXG4gICAgICAgICAgRU5BQkxFX1NFQ1VSSVRZX0FVRElUOiBmYWxzZSxcbiAgICAgICAgICBFTkFCTEVfQURWQU5DRURfQU5BTFlUSUNTOiB0cnVlLFxuICAgICAgICAgIEVOQUJMRV9BX0JfVEVTVElORzogZmFsc2UgLy8gRMOpc2FjdGl2w6kgcGFyIGTDqWZhdXQgZW4gcHJvZFxuICAgICAgICB9O1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYmFzZUZsYWdzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFyZ2UgbGVzIG92ZXJyaWRlcyBkZXB1aXMgbG9jYWxTdG9yYWdlIGV0IHZhcmlhYmxlcyBkJ2VudlxuICAgKi9cbiAgcHJpdmF0ZSBsb2FkT3ZlcnJpZGVzKCk6IHZvaWQge1xuICAgIC8vIDEuIFZhcmlhYmxlcyBkJ2Vudmlyb25uZW1lbnRcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZsYWdzKS5mb3JFYWNoKGZsYWcgPT4ge1xuICAgICAgY29uc3QgZW52VmFsdWUgPSBwcm9jZXNzLmVudltgU1lNQklPTlRfJHtmbGFnfWBdO1xuICAgICAgaWYgKGVudlZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5vdmVycmlkZXNbZmxhZyBhcyBrZXlvZiBGZWF0dXJlRmxhZ3NdID0gZW52VmFsdWUgPT09ICd0cnVlJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIDIuIGxvY2FsU3RvcmFnZSAocG91ciB0ZXN0cyBtYW51ZWxzIGVuIGRldilcbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JyAmJiB0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5mbGFncykuZm9yRWFjaChmbGFnID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleSA9IGBzeW1iaW9udF9mZWF0dXJlXyR7ZmxhZy50b0xvd2VyQ2FzZSgpfWA7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkpO1xuICAgICAgICBpZiAoc3RvcmFnZVZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5vdmVycmlkZXNbZmxhZyBhcyBrZXlvZiBGZWF0dXJlRmxhZ3NdID0gc3RvcmFnZVZhbHVlID09PSAndHJ1ZSc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW50IGxhIHZhbGV1ciBkJ3VuIGZlYXR1cmUgZmxhZ1xuICAgKi9cbiAgaXNFbmFibGVkKGZsYWc6IGtleW9mIEZlYXR1cmVGbGFncyk6IGJvb2xlYW4ge1xuICAgIC8vIDEuIE92ZXJyaWRlIGV4cGxpY2l0ZVxuICAgIGlmICh0aGlzLm92ZXJyaWRlc1tmbGFnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5vdmVycmlkZXNbZmxhZ10hO1xuICAgIH1cblxuICAgIC8vIDIuIFZhbGV1ciBwYXIgZMOpZmF1dCBzZWxvbiBlbnZpcm9ubmVtZW50XG4gICAgcmV0dXJuIHRoaXMuZmxhZ3NbZmxhZ107XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGVtcG9yYWlyZSBkJ3VuIGZsYWcgKGRldiB1bmlxdWVtZW50KVxuICAgKi9cbiAgc2V0RmxhZyhmbGFnOiBrZXlvZiBGZWF0dXJlRmxhZ3MsIHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnQgIT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGxvZ2dlci53YXJuKGDimqDvuI8gT3ZlcnJpZGUgZGUgZmVhdHVyZSBmbGFnICcke2ZsYWd9JyBpZ25vcsOpIGVuICR7dGhpcy5lbnZpcm9ubWVudH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm92ZXJyaWRlc1tmbGFnXSA9IHZhbHVlO1xuICAgIFxuICAgIC8vIFNhdXZlZ2FyZGVyIGVuIGxvY2FsU3RvcmFnZSBwb3VyIHBlcnNpc3RlbmNlXG4gICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBzdG9yYWdlS2V5ID0gYHN5bWJpb250X2ZlYXR1cmVfJHtmbGFnLnRvTG93ZXJDYXNlKCl9YDtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGxvZ2dlci5pbmZvKGDwn5SnIEZlYXR1cmUgZmxhZyAnJHtmbGFnfScgZMOpZmluaSDDoCAke3ZhbHVlfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbWV0IMOgIHrDqXJvIHRvdXMgbGVzIG92ZXJyaWRlc1xuICAgKi9cbiAgcmVzZXRPdmVycmlkZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnQgIT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGxvZ2dlci53YXJuKCfimqDvuI8gUmVzZXQgZGVzIG92ZXJyaWRlcyBpZ25vcsOpIGVuIHByb2R1Y3Rpb24nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm92ZXJyaWRlcyA9IHt9O1xuICAgIFxuICAgIC8vIE5ldHRveWVyIGxvY2FsU3RvcmFnZVxuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5mbGFncykuZm9yRWFjaChmbGFnID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleSA9IGBzeW1iaW9udF9mZWF0dXJlXyR7ZmxhZy50b0xvd2VyQ2FzZSgpfWA7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHN0b3JhZ2VLZXkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9nZ2VyLmluZm8oJ/CflIQgVG91cyBsZXMgZmVhdHVyZSBmbGFncyByZW1pcyBhdXggdmFsZXVycyBwYXIgZMOpZmF1dCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbnQgbCdlbnZpcm9ubmVtZW50IGFjdHVlbFxuICAgKi9cbiAgZ2V0RW52aXJvbm1lbnQoKTogRW52aXJvbm1lbnQge1xuICAgIHJldHVybiB0aGlzLmVudmlyb25tZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbnQgdG91cyBsZXMgZmxhZ3MgYWN0dWVscyAocG91ciBkZWJ1ZylcbiAgICovXG4gIGdldEFsbEZsYWdzKCk6IEZlYXR1cmVGbGFncyAmIHsgZW52aXJvbm1lbnQ6IEVudmlyb25tZW50IH0ge1xuICAgIGNvbnN0IHJlc29sdmVkRmxhZ3M6IEZlYXR1cmVGbGFncyA9IHt9IGFzIEZlYXR1cmVGbGFncztcbiAgICBcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZsYWdzKS5mb3JFYWNoKGZsYWcgPT4ge1xuICAgICAgcmVzb2x2ZWRGbGFnc1tmbGFnIGFzIGtleW9mIEZlYXR1cmVGbGFnc10gPSB0aGlzLmlzRW5hYmxlZChmbGFnIGFzIGtleW9mIEZlYXR1cmVGbGFncyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzb2x2ZWRGbGFncyxcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWw6lyaWZpZSBzaSBvbiBlc3QgZW4gbW9kZSBkw6l2ZWxvcHBlbWVudFxuICAgKi9cbiAgaXNEZXZlbG9wbWVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JztcbiAgfVxuXG4gIC8qKlxuICAgKiBWw6lyaWZpZSBzaSBvbiBlc3QgZW4gbW9kZSBzdGFnaW5nXG4gICAqL1xuICBpc1N0YWdpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQgPT09ICdzdGFnaW5nJztcbiAgfVxuXG4gIC8qKlxuICAgKiBWw6lyaWZpZSBzaSBvbiBlc3QgZW4gbW9kZSBwcm9kdWN0aW9uXG4gICAqL1xuICBpc1Byb2R1Y3Rpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQgPT09ICdwcm9kdWN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBFeMOpY3V0ZSBkdSBjb2RlIGNvbmRpdGlvbm5lbCBzZWxvbiBsJ2Vudmlyb25uZW1lbnRcbiAgICovXG4gIHJ1bkluRW52aXJvbm1lbnQ8VD4oXG4gICAgaGFuZGxlcnM6IHtcbiAgICAgIGRldmVsb3BtZW50PzogKCkgPT4gVDtcbiAgICAgIHN0YWdpbmc/OiAoKSA9PiBUO1xuICAgICAgcHJvZHVjdGlvbj86ICgpID0+IFQ7XG4gICAgICBkZWZhdWx0PzogKCkgPT4gVDtcbiAgICB9XG4gICk6IFQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0aGlzLmVudmlyb25tZW50XSB8fCBoYW5kbGVycy5kZWZhdWx0O1xuICAgIHJldHVybiBoYW5kbGVyPy4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgY29uZGl0aW9ubmVsIHNlbG9uIGxlcyBmZWF0dXJlIGZsYWdzXG4gICAqL1xuICBkZWJ1Z0xvZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRW5hYmxlZCgnRU5BQkxFX0RFQlVHX0xPR0dJTkcnKSkge1xuICAgICAgbG9nZ2VyLmluZm8oYPCfkJsgW1NZTUJJT05UIERlYnVnXSAke21lc3NhZ2V9YCwgLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1hbmNlIHByb2ZpbGluZyBjb25kaXRpb25uZWxcbiAgICovXG4gIHByb2ZpbGVPcGVyYXRpb248VD4obmFtZTogc3RyaW5nLCBvcGVyYXRpb246ICgpID0+IFQpOiBUIHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCdFTkFCTEVfUEVSRk9STUFOQ0VfUFJPRklMSU5HJykpIHtcbiAgICAgIHJldHVybiBvcGVyYXRpb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG9wZXJhdGlvbigpO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydDtcbiAgICBcbiAgICBsb2dnZXIuaW5mbyhg4o+x77iPIFtTWU1CSU9OVCBQcm9maWxlXSAke25hbWV9OiAke2R1cmF0aW9uLnRvRml4ZWQoMil9bXNgKTtcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4w6ljdXRpb24gY29uZGl0aW9ubmVsbGUgc2Vsb24gZmVhdHVyZSBmbGFnXG4gICAqL1xuICB3aGVuRW5hYmxlZDxUPihmbGFnOiBrZXlvZiBGZWF0dXJlRmxhZ3MsIG9wZXJhdGlvbjogKCkgPT4gVCk6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmlzRW5hYmxlZChmbGFnKSA/IG9wZXJhdGlvbigpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFV0aWxpdGFpcmUgcG91ciBsaXJlIHZhcmlhYmxlcyBkJ2Vudmlyb25uZW1lbnQgYm9vbGVhblxuICAgKi9cbiAgcHJpdmF0ZSBnZXRFbnZCb29sZWFuKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb2Nlc3MuZW52W2tleV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0aW9uIGRlIHPDqWN1cml0w6kgLSB2w6lyaWZpZSBxdSdvbiBuJ3V0aWxpc2UgcGFzIGRlIGRvbm7DqWVzIG1vY2sgZW4gcHJvZFxuICAgKi9cbiAgdmFsaWRhdGVQcm9kdWN0aW9uU2FmZXR5KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc1Byb2R1Y3Rpb24oKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgdW5zYWZlRmxhZ3MgPSBbXG4gICAgICAnRU5BQkxFX01PQ0tfREFUQScsXG4gICAgICAnRU5BQkxFX0RFQlVHX0xPR0dJTkcnXG4gICAgXTtcblxuICAgIGNvbnN0IHZpb2xhdGlvbnMgPSB1bnNhZmVGbGFncy5maWx0ZXIoZmxhZyA9PiBcbiAgICAgIHRoaXMuaXNFbmFibGVkKGZsYWcgYXMga2V5b2YgRmVhdHVyZUZsYWdzKVxuICAgICk7XG5cbiAgICBpZiAodmlvbGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGDwn5qoIFPDiUNVUklUw4k6IEZsYWdzIGRhbmdlcmV1eCBhY3RpdsOpcyBlbiBwcm9kdWN0aW9uOiAke3Zpb2xhdGlvbnMuam9pbignLCAnKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZWF0dXJlRmxhZ1NlcnZpY2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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