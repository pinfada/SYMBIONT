{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/ResilientMessageBus.test.ts","mappings":";;AAAA,sFAAgF;AAEhF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,yBAAyB;QACzB,MAAM,KAAK,GAAwB,EAAE,CAAA;QACrC,MAAM,CAAC,cAAc,GAAG;YACtB,OAAO,EAAE,KAAK,EAAE,CAAS,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;YAC9C,OAAO,EAAE,KAAK,EAAE,CAAS,EAAE,CAAS,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC;SAC1D,CAAA;QACD,6CAA6C;QAC7C,MAAM,CAAC,MAAM,GAAG;YACd,OAAO,EAAE;gBACP,KAAK,EAAE;oBACL,GAAG,EAAE,CAAC,GAAQ,EAAE,EAAe,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE,KAAK,UAAU;wBAAE,EAAE,EAAE,CAAA,CAAC,CAAC;oBACrG,GAAG,EAAE,CAAC,IAAS,EAAE,EAA0B,EAAE,EAAE;wBAC7C,MAAM,MAAM,GAAQ,EAAE,CAAA;wBACtB,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;wBAC7D,GAAG,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;4BAAE,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA;wBAClE,IAAI,OAAO,EAAE,KAAK,UAAU;4BAAE,EAAE,CAAC,MAAM,CAAC,CAAA;;4BACnC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;oBACrC,CAAC;iBACF;aACF;YACD,OAAO,EAAE,EAAE,SAAS,EAAE,SAAS,EAAS;SAClC,CAAA;QACR,MAAM,GAAG,GAAG,IAAI,2CAAmB,EAAE,CAAA;QACrC,MAAM,GAAG,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAA;QAC/D,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,CAAA;QAC9C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAC1B,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,CAAA;QAC/C,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;QACzB,IAAI,GAAG;YAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACxC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/ResilientMessageBus.test.ts"],"sourcesContent":["import { ResilientMessageBus } from '../src/communication/resilient-message-bus'\r\n\r\ndescribe('ResilientMessageBus', () => {\r\n  it('gÃ¨re la queue et envoie un message', async () => {\r\n    // Mock du swLocalStorage\r\n    const store: Record<string, any> = {}\r\n    global.swLocalStorage = {\r\n      getItem: async (k: string) => store[k] || null,\r\n      setItem: async (k: string, v: string) => { store[k] = v }\r\n    }\r\n    // Mock chrome pour le service-worker-adapter\r\n    global.chrome = {\r\n      storage: {\r\n        local: {\r\n          set: (obj: any, cb?: () => void) => { Object.assign(store, obj); if (typeof cb === 'function') cb() },\r\n          get: (keys: any, cb?: (result: any) => void) => {\r\n            const result: any = {}\r\n            const arr = Array.isArray(keys) ? keys : (keys ? [keys] : [])\r\n            arr.forEach((k: string) => { if (store[k]) result[k] = store[k] })\r\n            if (typeof cb === 'function') cb(result)\r\n            else return Promise.resolve(result)\r\n          }\r\n        }\r\n      },\r\n      runtime: { lastError: undefined } as any\r\n    } as any\r\n    const bus = new ResilientMessageBus()\r\n    await bus['messageQueue'].enqueue({ type: 'TEST', payload: 1 })\r\n    const all = await bus['messageQueue'].getAll()\r\n    expect(all.length).toBe(1)\r\n    const msg = await bus['messageQueue'].dequeue()\r\n    expect(msg).toBeDefined()\r\n    if (msg) expect(msg.type).toBe('TEST')\r\n  })\r\n}) "],"version":3}