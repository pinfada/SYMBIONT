b9626908e7a7eacdde863014f2592b86
"use strict";

/* istanbul ignore next */
function cov_1p0tt5b731() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts";
  var hash = "c6e337c1e5c027b8ad688fb084ce138d0f5eb55a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "3": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 37
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 37
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 33
        }
      },
      "8": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "11": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 87
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "14": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 52
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "16": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 43
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 91
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 19
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "21": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "22": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "23": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 56
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "25": {
        start: {
          line: 62,
          column: 35
        },
        end: {
          line: 62,
          column: 68
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "27": {
        start: {
          line: 64,
          column: 42
        },
        end: {
          line: 64,
          column: 73
        }
      },
      "28": {
        start: {
          line: 65,
          column: 38
        },
        end: {
          line: 65,
          column: 83
        }
      },
      "29": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 72
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "31": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 49
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "33": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "34": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 92,
          column: 17
        }
      },
      "35": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 103
        }
      },
      "36": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 97
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "38": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "39": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 80
        }
      },
      "40": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 65
        }
      },
      "41": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 29
        }
      },
      "42": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 25
        }
      },
      "43": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "44": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 50
        }
      },
      "45": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 24
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 61
        }
      },
      "47": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 119,
          column: 27
        }
      },
      "48": {
        start: {
          line: 120,
          column: 30
        },
        end: {
          line: 120,
          column: 31
        }
      },
      "49": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "50": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "51": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 48
        }
      },
      "52": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 34
        }
      },
      "53": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 71
        }
      },
      "54": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "55": {
        start: {
          line: 135,
          column: 82
        },
        end: {
          line: 135,
          column: 115
        }
      },
      "56": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "57": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 39
        }
      },
      "58": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 25
        }
      },
      "59": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 47
        }
      },
      "60": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 46
        }
      },
      "61": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 52
        }
      },
      "62": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 53
        }
      },
      "63": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 47
        }
      },
      "64": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 49
        }
      },
      "65": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 65
        }
      },
      "66": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 64
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 64
        }
      },
      "68": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 66
        }
      },
      "69": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 64
        }
      },
      "70": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 33
        }
      },
      "71": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 66
        }
      },
      "72": {
        start: {
          line: 183,
          column: 27
        },
        end: {
          line: 183,
          column: 66
        }
      },
      "73": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 46
        }
      },
      "74": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 73
        }
      },
      "75": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 55
        }
      },
      "76": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "77": {
        start: {
          line: 200,
          column: 103
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "78": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "79": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 31
        }
      },
      "80": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "81": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 41
        }
      },
      "82": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "83": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 37
        }
      },
      "84": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "85": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 83
        }
      },
      "86": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "87": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 37
        }
      },
      "88": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "89": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 53
        }
      },
      "90": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 27
        }
      },
      "91": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 33
        }
      },
      "92": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 33
        }
      },
      "93": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 35
        }
      },
      "94": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 25
        }
      },
      "95": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "96": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 51
        }
      },
      "97": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "98": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 57
        }
      },
      "99": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 40
        }
      },
      "100": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "101": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 39
        }
      },
      "102": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "103": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 41
        }
      },
      "104": {
        start: {
          line: 258,
          column: 30
        },
        end: {
          line: 258,
          column: 105
        }
      },
      "105": {
        start: {
          line: 258,
          column: 77
        },
        end: {
          line: 258,
          column: 104
        }
      },
      "106": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "107": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 71
        }
      },
      "108": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 10
        }
      },
      "109": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 27
        }
      },
      "110": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 33
        }
      },
      "111": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 33
        }
      },
      "112": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "113": {
        start: {
          line: 281,
          column: 31
        },
        end: {
          line: 283,
          column: 34
        }
      },
      "114": {
        start: {
          line: 282,
          column: 38
        },
        end: {
          line: 282,
          column: 59
        }
      },
      "115": {
        start: {
          line: 283,
          column: 31
        },
        end: {
          line: 283,
          column: 33
        }
      },
      "116": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 289,
          column: 15
        }
      },
      "117": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 288,
          column: 17
        }
      },
      "118": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 61
        }
      },
      "119": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 29
        }
      },
      "120": {
        start: {
          line: 292,
          column: 32
        },
        end: {
          line: 293,
          column: 61
        }
      },
      "121": {
        start: {
          line: 293,
          column: 38
        },
        end: {
          line: 293,
          column: 60
        }
      },
      "122": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 95
        }
      },
      "123": {
        start: {
          line: 294,
          column: 64
        },
        end: {
          line: 294,
          column: 92
        }
      },
      "124": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 18
        }
      },
      "125": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "126": {
        start: {
          line: 305,
          column: 33
        },
        end: {
          line: 305,
          column: 63
        }
      },
      "127": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 38
        }
      },
      "128": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 318,
          column: 10
        }
      },
      "129": {
        start: {
          line: 315,
          column: 96
        },
        end: {
          line: 315,
          column: 118
        }
      },
      "130": {
        start: {
          line: 321,
          column: 0
        },
        end: {
          line: 321,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 40
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 29
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 53
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 26
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 106
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 28
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 118
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 13
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 132
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 135,
            column: 67
          },
          end: {
            line: 135,
            column: 68
          }
        },
        loc: {
          start: {
            line: 135,
            column: 82
          },
          end: {
            line: 135,
            column: 115
          }
        },
        line: 135
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 23
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 142
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 26
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 153
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 173
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 24
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 181
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 189
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 197
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 200,
            column: 87
          },
          end: {
            line: 200,
            column: 88
          }
        },
        loc: {
          start: {
            line: 200,
            column: 103
          },
          end: {
            line: 203,
            column: 13
          }
        },
        line: 200
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 21
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 210
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 233
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 18
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 242
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 258,
            column: 67
          },
          end: {
            line: 258,
            column: 68
          }
        },
        loc: {
          start: {
            line: 258,
            column: 77
          },
          end: {
            line: 258,
            column: 104
          }
        },
        line: 258
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 14
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 270
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 34
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 278
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 282,
            column: 24
          },
          end: {
            line: 282,
            column: 25
          }
        },
        loc: {
          start: {
            line: 282,
            column: 38
          },
          end: {
            line: 282,
            column: 59
          }
        },
        line: 282
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 283,
            column: 21
          },
          end: {
            line: 283,
            column: 22
          }
        },
        loc: {
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 283,
            column: 33
          }
        },
        line: 283
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 285,
            column: 44
          },
          end: {
            line: 285,
            column: 45
          }
        },
        loc: {
          start: {
            line: 285,
            column: 66
          },
          end: {
            line: 289,
            column: 13
          }
        },
        line: 285
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 293,
            column: 24
          },
          end: {
            line: 293,
            column: 25
          }
        },
        loc: {
          start: {
            line: 293,
            column: 38
          },
          end: {
            line: 293,
            column: 60
          }
        },
        line: 293
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 294,
            column: 54
          },
          end: {
            line: 294,
            column: 55
          }
        },
        loc: {
          start: {
            line: 294,
            column: 64
          },
          end: {
            line: 294,
            column: 92
          }
        },
        line: 294
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 22
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 301
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 28
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 312
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 315,
            column: 74
          },
          end: {
            line: 315,
            column: 75
          }
        },
        loc: {
          start: {
            line: 315,
            column: 96
          },
          end: {
            line: 315,
            column: 118
          }
        },
        line: 315
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 18,
            column: 30
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 35
          }
        }, {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 31,
            column: 60
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 17
          }
        }, {
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 44,
            column: 42
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 63
          }
        }, {
          start: {
            line: 62,
            column: 67
          },
          end: {
            line: 62,
            column: 68
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 42
          },
          end: {
            line: 64,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 42
          },
          end: {
            line: 64,
            column: 68
          }
        }, {
          start: {
            line: 64,
            column: 72
          },
          end: {
            line: 64,
            column: 73
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 80,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 80,
            column: 43
          }
        }, {
          start: {
            line: 80,
            column: 47
          },
          end: {
            line: 80,
            column: 48
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 11
          },
          end: {
            line: 85,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 85,
            column: 18
          },
          end: {
            line: 85,
            column: 22
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 67
          },
          end: {
            line: 91,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 67
          },
          end: {
            line: 91,
            column: 88
          }
        }, {
          start: {
            line: 91,
            column: 92
          },
          end: {
            line: 91,
            column: 93
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "14": {
        loc: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 31
          },
          end: {
            line: 113,
            column: 56
          }
        }, {
          start: {
            line: 113,
            column: 59
          },
          end: {
            line: 113,
            column: 60
          }
        }],
        line: 113
      },
      "15": {
        loc: {
          start: {
            line: 127,
            column: 15
          },
          end: {
            line: 127,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 37
          },
          end: {
            line: 127,
            column: 66
          }
        }, {
          start: {
            line: 127,
            column: 69
          },
          end: {
            line: 127,
            column: 70
          }
        }],
        line: 127
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "18": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "19": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "20": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "21": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "22": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "23": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "24": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 19
          }
        }, {
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 50
          }
        }],
        line: 280
      },
      "25": {
        loc: {
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 288,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 288,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "26": {
        loc: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 286,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 286,
            column: 45
          }
        }, {
          start: {
            line: 286,
            column: 49
          },
          end: {
            line: 286,
            column: 74
          }
        }],
        line: 286
      },
      "27": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "28": {
        loc: {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 303,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 303,
            column: 16
          }
        }, {
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 303,
            column: 44
          }
        }, {
          start: {
            line: 303,
            column: 48
          },
          end: {
            line: 303,
            column: 61
          }
        }],
        line: 303
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts"],
      sourcesContent: ["import { INeuralMesh } from './interfaces/INeuralMesh';\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\r\nimport { SecureLogger } from '@shared/utils/secureLogger';\n\r\nexport class NeuralMesh implements INeuralMesh {\r\n  private nodes: Map<string, { type: string; activation: number; bias: number }> = new Map();\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux r\xE9serv\xE9 pour usage futur\r\n  private learningRate: number = 0.01;\r\n\r\n  constructor() {\r\n    // Initialize empty network\r\n  }\r\n\r\n  /**\r\n   * Ajoute un n\u0153ud au r\xE9seau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: { type: string; activation: number; bias: number } = {\r\n      type,\r\n      activation: 0,\r\n      bias\r\n    };\r\n\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux n\u0153uds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, new Map());\r\n    }\r\n    this.connections.get(fromId)!.set(toId, weight);\r\n  }\r\n\r\n  /**\r\n   * Stimule un n\u0153ud d'entr\xE9e\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      SecureLogger.warn(`Cannot stimulate non-input node: ${nodeId}`);\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation \xE0 travers le r\xE9seau\r\n   */\r\n  propagate(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const [toId, weight] of connections) {\r\n        const currentActivation = this.activations.get(toId) || 0;\r\n        const newActivation = currentActivation + (fromActivation * weight);\r\n        this.activations.set(toId, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmo\xEFde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re l'activation d'un n\u0153ud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation al\xE9atoire au r\xE9seau\r\n   */\r\n  mutate(rate: number = 0.05): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const [toId, weight] of connections) {\r\n        if (SecureRandom.random() < rate) {\r\n          connections.set(toId, weight + (SecureRandom.random() - 0.5) * 0.2);\r\n          connections.set(toId, Math.max(-2, Math.min(2, connections.get(toId) || 0)));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activit\xE9 neurale globale\r\n   */\r\n  getNeuralActivity(): number {\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const weight of connections.values()) {\r\n        totalWeight += Math.abs(weight);\r\n        connectionCount++;\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).map(connections => Array.from(connections.entries())),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le r\xE9seau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un r\xE9seau par d\xE9faut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    SecureLogger.info('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual computation time\r\n    const complexity = this.nodes.size * this.connections.size;\r\n    return Math.min(1, complexity / 1000);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual memory footprint\r\n    const memorySize = (this.nodes.size + this.connections.size) * 64; // bytes approximation\r\n    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n\r\n  /**\r\n   * Save current state for persistence\r\n   */\r\n  saveState(): any {\r\n    return {\r\n      nodes: Object.fromEntries(this.nodes),\r\n      connections: Object.fromEntries(\r\n        Array.from(this.connections.entries()).map(([key, map]) => [\r\n          key,\r\n          Object.fromEntries(map)\r\n        ])\r\n      ),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load state from saved data\r\n   */\r\n  loadState(state: any): void {\r\n    if (state.nodes) {\r\n      this.nodes.clear();\r\n      for (const [id, node] of Object.entries(state.nodes)) {\r\n        this.nodes.set(id, node as any);\r\n      }\r\n    }\r\n    \r\n    if (state.connections) {\r\n      this.connections.clear();\r\n      for (const [fromId, connections] of Object.entries(state.connections)) {\r\n        this.connections.set(fromId, new Map(Object.entries(connections as any)));\r\n      }\r\n    }\r\n    \r\n    if (state.activations) {\r\n      this.activations.clear();\r\n      for (const [id, activation] of Object.entries(state.activations)) {\r\n        this.activations.set(id, activation as number);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset neural mesh to initial state\r\n   */\r\n  reset(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.setupDefaultNetwork();\r\n  }\r\n\r\n  /**\r\n   * Health check for neural mesh\r\n   */\r\n  healthCheck(): { healthy: boolean; issues: string[] } {\r\n    const issues: string[] = [];\r\n    \r\n    if (this.nodes.size === 0) {\r\n      issues.push('No nodes in neural mesh');\r\n    }\r\n    \r\n    if (this.connections.size === 0) {\r\n      issues.push('No connections in neural mesh');\r\n    }\r\n    \r\n    // Check for orphaned nodes\r\n    const connectedNodes = new Set<string>();\r\n    for (const [fromId, connections] of this.connections) {\r\n      connectedNodes.add(fromId);\r\n      for (const toId of connections.keys()) {\r\n        connectedNodes.add(toId);\r\n      }\r\n    }\r\n    \r\n    const orphanedNodes = Array.from(this.nodes.keys()).filter(\r\n      nodeId => !connectedNodes.has(nodeId)\r\n    );\r\n    \r\n    if (orphanedNodes.length > 0) {\r\n      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);\r\n    }\r\n    \r\n    return {\r\n      healthy: issues.length === 0,\r\n      issues\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  cleanup(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n  }\r\n\r\n  /**\r\n   * Process a pattern through the neural mesh (optional)\r\n   */\r\n  async processPattern(pattern: any): Promise<any> {\r\n    // Simple pattern processing - stimulate input nodes with pattern data\r\n    if (pattern && typeof pattern === 'object') {\r\n      const inputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'input')\r\n        .map(([id]) => id);\r\n\r\n      // Stimulate input nodes with pattern values\r\n      Object.entries(pattern).forEach(([, value], index) => {\r\n        if (index < inputNodes.length && typeof value === 'number') {\r\n          this.stimulate(inputNodes[index], value);\r\n        }\r\n      });\r\n\r\n      // Propagate and return output activations\r\n      this.propagate();\r\n      \r\n      const outputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'output');\r\n      \r\n      return Object.fromEntries(\r\n        outputNodes.map(([id]) => [id, this.getActivation(id)])\r\n      );\r\n    }\r\n    \r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Learn from data (optional)\r\n   */\r\n  async learn(data: any): Promise<void> {\r\n    // Simple learning implementation - adjust based on data\r\n    if (data && typeof data === 'object' && data.feedback) {\r\n      // Apply small mutations based on feedback\r\n      const learningRate = Math.abs(data.feedback) * 0.01;\r\n      this.mutate(learningRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics (optional)\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return {\r\n      nodeCount: this.nodes.size,\r\n      connectionCount: Array.from(this.connections.values()).reduce(\r\n        (sum, connections) => sum + connections.size, 0\r\n      ),\r\n      neuralActivity: this.getNeuralActivity(),\r\n      connectionStrength: this.getConnectionStrength()\r\n    };\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c6e337c1e5c027b8ad688fb084ce138d0f5eb55a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1p0tt5b731 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1p0tt5b731();
cov_1p0tt5b731().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1p0tt5b731().s[1]++;
exports.NeuralMesh = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_1p0tt5b731().s[2]++, require("../shared/utils/secureRandom"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_1p0tt5b731().s[3]++, require("@shared/utils/secureLogger"));
class NeuralMesh {
  constructor() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[0]++;
    cov_1p0tt5b731().s[4]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[5]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[6]++;
    this.activations = new Map();
    // @ts-expect-error Taux réservé pour usage futur
    /* istanbul ignore next */
    cov_1p0tt5b731().s[7]++;
    this.learningRate = 0.01;
    // Initialize empty network
  }
  /**
   * Ajoute un nœud au réseau
   */
  addNode(id, type, bias =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[0][0]++, 0)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[1]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[8]++, {
      type,
      activation: 0,
      bias
    });
    /* istanbul ignore next */
    cov_1p0tt5b731().s[9]++;
    this.nodes.set(id, node);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[10]++;
    this.activations.set(id, 0);
  }
  /**
   * Ajoute une connexion entre deux nœuds
   */
  addConnection(fromId, toId, weight) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[2]++;
    cov_1p0tt5b731().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][0]++, !this.nodes.has(fromId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][1]++, !this.nodes.has(toId))) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[1][0]++;
      cov_1p0tt5b731().s[12]++;
      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[1][1]++;
    }
    cov_1p0tt5b731().s[13]++;
    if (!this.connections.has(fromId)) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[3][0]++;
      cov_1p0tt5b731().s[14]++;
      this.connections.set(fromId, new Map());
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[3][1]++;
    }
    cov_1p0tt5b731().s[15]++;
    this.connections.get(fromId).set(toId, weight);
  }
  /**
   * Stimule un nœud d'entrée
   */
  stimulate(nodeId, value) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[3]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[16]++, this.nodes.get(nodeId));
    /* istanbul ignore next */
    cov_1p0tt5b731().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][0]++, !node) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][1]++, node.type !== 'input')) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[4][0]++;
      cov_1p0tt5b731().s[18]++;
      secureLogger_1.SecureLogger.warn(`Cannot stimulate non-input node: ${nodeId}`);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[19]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[4][1]++;
    }
    cov_1p0tt5b731().s[20]++;
    this.activations.set(nodeId, value);
  }
  /**
   * Propage l'activation à travers le réseau
   */
  propagate() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[4]++;
    cov_1p0tt5b731().s[21]++;
    // Reset non-input activations
    for (const [nodeId, node] of this.nodes) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[22]++;
      if (node.type !== 'input') {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[6][0]++;
        cov_1p0tt5b731().s[23]++;
        this.activations.set(nodeId, node.bias);
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[6][1]++;
      }
    }
    // Propagate through connections
    /* istanbul ignore next */
    cov_1p0tt5b731().s[24]++;
    for (const [fromId, connections] of this.connections) {
      const fromActivation =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[25]++,
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][0]++, this.activations.get(fromId)) ||
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][1]++, 0));
      /* istanbul ignore next */
      cov_1p0tt5b731().s[26]++;
      for (const [toId, weight] of connections) {
        const currentActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[27]++,
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][0]++, this.activations.get(toId)) ||
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][1]++, 0));
        const newActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[28]++, currentActivation + fromActivation * weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[29]++;
        this.activations.set(toId, this.sigmoid(newActivation));
      }
    }
  }
  /**
   * Fonction d'activation sigmoïde
   */
  sigmoid(x) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[5]++;
    cov_1p0tt5b731().s[30]++;
    return 1 / (1 + Math.exp(-x));
  }
  /**
   * Récupère l'activation d'un nœud
   */
  getActivation(nodeId) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[6]++;
    cov_1p0tt5b731().s[31]++;
    return /* istanbul ignore next */(cov_1p0tt5b731().b[9][0]++, this.activations.get(nodeId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[9][1]++, 0);
  }
  /**
   * Applique une mutation aléatoire au réseau
   */
  mutate(rate =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[10][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[7]++;
    cov_1p0tt5b731().s[32]++;
    // Mutate connection weights
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[33]++;
      for (const [toId, weight] of connections) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[34]++;
        if (secureRandom_1.SecureRandom.random() < rate) {
          /* istanbul ignore next */
          cov_1p0tt5b731().b[11][0]++;
          cov_1p0tt5b731().s[35]++;
          connections.set(toId, weight + (secureRandom_1.SecureRandom.random() - 0.5) * 0.2);
          /* istanbul ignore next */
          cov_1p0tt5b731().s[36]++;
          connections.set(toId, Math.max(-2, Math.min(2,
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][0]++, connections.get(toId)) ||
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][1]++, 0))));
        } else
        /* istanbul ignore next */
        {
          cov_1p0tt5b731().b[11][1]++;
        }
      }
    }
    // Mutate node biases
    /* istanbul ignore next */
    cov_1p0tt5b731().s[37]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[38]++;
      if (secureRandom_1.SecureRandom.random() < rate) {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[13][0]++;
        cov_1p0tt5b731().s[39]++;
        node.bias += (secureRandom_1.SecureRandom.random() - 0.5) * 0.1;
        /* istanbul ignore next */
        cov_1p0tt5b731().s[40]++;
        node.bias = Math.max(-1, Math.min(1, node.bias));
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[13][1]++;
      }
    }
  }
  /**
   * Mesure l'activité neurale globale
   */
  getNeuralActivity() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[8]++;
    let totalActivity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[41]++, 0);
    let nodeCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[42]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[43]++;
    for (const activation of this.activations.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[44]++;
      totalActivity += Math.abs(activation);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[45]++;
      nodeCount++;
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[46]++;
    return nodeCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][0]++, totalActivity / nodeCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][1]++, 0);
  }
  /**
   * Mesure la force moyenne des connexions
   */
  getConnectionStrength() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[9]++;
    let totalWeight =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[47]++, 0);
    let connectionCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[48]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[49]++;
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[50]++;
      for (const weight of connections.values()) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[51]++;
        totalWeight += Math.abs(weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[52]++;
        connectionCount++;
      }
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[53]++;
    return connectionCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][0]++, totalWeight / connectionCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][1]++, 0);
  }
  /**
   * Export JSON pour debug/sauvegarde
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[10]++;
    cov_1p0tt5b731().s[54]++;
    return {
      nodes: Array.from(this.nodes.values()),
      connections: Array.from(this.connections.values()).map(connections => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[11]++;
        cov_1p0tt5b731().s[55]++;
        return Array.from(connections.entries());
      }),
      activations: Object.fromEntries(this.activations)
    };
  }
  /**
   * Initialise le réseau neuronal
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[12]++;
    cov_1p0tt5b731().s[56]++;
    // Setup default network if empty
    if (this.nodes.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[16][0]++;
      cov_1p0tt5b731().s[57]++;
      this.setupDefaultNetwork();
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[16][1]++;
    }
    // Perform initial propagation
    cov_1p0tt5b731().s[58]++;
    this.propagate();
  }
  /**
   * Configure un réseau par défaut pour les tests
   */
  setupDefaultNetwork() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[13]++;
    cov_1p0tt5b731().s[59]++;
    // Add input nodes
    this.addNode('sensory_input', 'input');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[60]++;
    this.addNode('memory_input', 'input');
    // Add hidden nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[61]++;
    this.addNode('processing_1', 'hidden', 0.1);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[62]++;
    this.addNode('processing_2', 'hidden', -0.1);
    // Add output nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[63]++;
    this.addNode('motor_output', 'output');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[64]++;
    this.addNode('emotion_output', 'output');
    // Connect the network
    /* istanbul ignore next */
    cov_1p0tt5b731().s[65]++;
    this.addConnection('sensory_input', 'processing_1', 0.8);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[66]++;
    this.addConnection('memory_input', 'processing_2', 0.6);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[67]++;
    this.addConnection('processing_1', 'motor_output', 0.9);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[68]++;
    this.addConnection('processing_2', 'emotion_output', 0.7);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[69]++;
    this.addConnection('processing_1', 'processing_2', 0.3);
  }
  /**
   * Suspend neural processing
   */
  async suspend() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[14]++;
    cov_1p0tt5b731().s[70]++;
    // Clear activations but keep structure
    this.activations.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[71]++;
    secureLogger_1.SecureLogger.info('Neural mesh suspended');
  }
  /**
   * Get CPU usage estimation
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[15]++;
    // Mock implementation - in real scenario, measure actual computation time
    const complexity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[72]++, this.nodes.size * this.connections.size);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[73]++;
    return Math.min(1, complexity / 1000);
  }
  /**
   * Get memory usage estimation
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[16]++;
    // Mock implementation - in real scenario, measure actual memory footprint
    const memorySize =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[74]++, (this.nodes.size + this.connections.size) * 64); // bytes approximation
    /* istanbul ignore next */
    cov_1p0tt5b731().s[75]++;
    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio
  }
  /**
   * Save current state for persistence
   */
  saveState() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[17]++;
    cov_1p0tt5b731().s[76]++;
    return {
      nodes: Object.fromEntries(this.nodes),
      connections: Object.fromEntries(Array.from(this.connections.entries()).map(([key, map]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[18]++;
        cov_1p0tt5b731().s[77]++;
        return [key, Object.fromEntries(map)];
      })),
      activations: Object.fromEntries(this.activations)
    };
  }
  /**
   * Load state from saved data
   */
  loadState(state) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[19]++;
    cov_1p0tt5b731().s[78]++;
    if (state.nodes) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[17][0]++;
      cov_1p0tt5b731().s[79]++;
      this.nodes.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[80]++;
      for (const [id, node] of Object.entries(state.nodes)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[81]++;
        this.nodes.set(id, node);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[17][1]++;
    }
    cov_1p0tt5b731().s[82]++;
    if (state.connections) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[18][0]++;
      cov_1p0tt5b731().s[83]++;
      this.connections.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[84]++;
      for (const [fromId, connections] of Object.entries(state.connections)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[85]++;
        this.connections.set(fromId, new Map(Object.entries(connections)));
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[18][1]++;
    }
    cov_1p0tt5b731().s[86]++;
    if (state.activations) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[19][0]++;
      cov_1p0tt5b731().s[87]++;
      this.activations.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[88]++;
      for (const [id, activation] of Object.entries(state.activations)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[89]++;
        this.activations.set(id, activation);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[19][1]++;
    }
  }
  /**
   * Reset neural mesh to initial state
   */
  reset() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[20]++;
    cov_1p0tt5b731().s[90]++;
    this.nodes.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[91]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[92]++;
    this.activations.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[93]++;
    this.setupDefaultNetwork();
  }
  /**
   * Health check for neural mesh
   */
  healthCheck() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[21]++;
    const issues =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[94]++, []);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[95]++;
    if (this.nodes.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[20][0]++;
      cov_1p0tt5b731().s[96]++;
      issues.push('No nodes in neural mesh');
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[20][1]++;
    }
    cov_1p0tt5b731().s[97]++;
    if (this.connections.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[21][0]++;
      cov_1p0tt5b731().s[98]++;
      issues.push('No connections in neural mesh');
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[21][1]++;
    }
    // Check for orphaned nodes
    const connectedNodes =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[99]++, new Set());
    /* istanbul ignore next */
    cov_1p0tt5b731().s[100]++;
    for (const [fromId, connections] of this.connections) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[101]++;
      connectedNodes.add(fromId);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[102]++;
      for (const toId of connections.keys()) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[103]++;
        connectedNodes.add(toId);
      }
    }
    const orphanedNodes =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[104]++, Array.from(this.nodes.keys()).filter(nodeId => {
      /* istanbul ignore next */
      cov_1p0tt5b731().f[22]++;
      cov_1p0tt5b731().s[105]++;
      return !connectedNodes.has(nodeId);
    }));
    /* istanbul ignore next */
    cov_1p0tt5b731().s[106]++;
    if (orphanedNodes.length > 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[22][0]++;
      cov_1p0tt5b731().s[107]++;
      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[22][1]++;
    }
    cov_1p0tt5b731().s[108]++;
    return {
      healthy: issues.length === 0,
      issues
    };
  }
  /**
   * Cleanup resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[23]++;
    cov_1p0tt5b731().s[109]++;
    this.nodes.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[110]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[111]++;
    this.activations.clear();
  }
  /**
   * Process a pattern through the neural mesh (optional)
   */
  async processPattern(pattern) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[24]++;
    cov_1p0tt5b731().s[112]++;
    // Simple pattern processing - stimulate input nodes with pattern data
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[24][0]++, pattern) &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[24][1]++, typeof pattern === 'object')) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[23][0]++;
      const inputNodes =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[113]++, Array.from(this.nodes.entries()).filter(([, node]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[25]++;
        cov_1p0tt5b731().s[114]++;
        return node.type === 'input';
      }).map(([id]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[26]++;
        cov_1p0tt5b731().s[115]++;
        return id;
      }));
      // Stimulate input nodes with pattern values
      /* istanbul ignore next */
      cov_1p0tt5b731().s[116]++;
      Object.entries(pattern).forEach(([, value], index) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[27]++;
        cov_1p0tt5b731().s[117]++;
        if (
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[26][0]++, index < inputNodes.length) &&
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[26][1]++, typeof value === 'number')) {
          /* istanbul ignore next */
          cov_1p0tt5b731().b[25][0]++;
          cov_1p0tt5b731().s[118]++;
          this.stimulate(inputNodes[index], value);
        } else
        /* istanbul ignore next */
        {
          cov_1p0tt5b731().b[25][1]++;
        }
      });
      // Propagate and return output activations
      /* istanbul ignore next */
      cov_1p0tt5b731().s[119]++;
      this.propagate();
      const outputNodes =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[120]++, Array.from(this.nodes.entries()).filter(([, node]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[28]++;
        cov_1p0tt5b731().s[121]++;
        return node.type === 'output';
      }));
      /* istanbul ignore next */
      cov_1p0tt5b731().s[122]++;
      return Object.fromEntries(outputNodes.map(([id]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[29]++;
        cov_1p0tt5b731().s[123]++;
        return [id, this.getActivation(id)];
      }));
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[23][1]++;
    }
    cov_1p0tt5b731().s[124]++;
    return {};
  }
  /**
   * Learn from data (optional)
   */
  async learn(data) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[30]++;
    cov_1p0tt5b731().s[125]++;
    // Simple learning implementation - adjust based on data
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][0]++, data) &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][1]++, typeof data === 'object') &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][2]++, data.feedback)) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[27][0]++;
      // Apply small mutations based on feedback
      const learningRate =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[126]++, Math.abs(data.feedback) * 0.01);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[127]++;
      this.mutate(learningRate);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[27][1]++;
    }
  }
  /**
   * Get performance metrics (optional)
   */
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[31]++;
    cov_1p0tt5b731().s[128]++;
    return {
      nodeCount: this.nodes.size,
      connectionCount: Array.from(this.connections.values()).reduce((sum, connections) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[32]++;
        cov_1p0tt5b731().s[129]++;
        return sum + connections.size;
      }, 0),
      neuralActivity: this.getNeuralActivity(),
      connectionStrength: this.getConnectionStrength()
    };
  }
}
/* istanbul ignore next */
cov_1p0tt5b731().s[130]++;
exports.NeuralMesh = NeuralMesh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,