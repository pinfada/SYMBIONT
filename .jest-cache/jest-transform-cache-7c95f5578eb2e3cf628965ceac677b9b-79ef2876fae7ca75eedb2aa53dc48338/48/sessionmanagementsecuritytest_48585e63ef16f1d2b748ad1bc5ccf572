e1b5afdef69de6b6cf52c60607ae3b66
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests de sécurité pour la gestion des sessions
 * Améliore la couverture de sécurité selon audit
 */
const secureLogger_1 = require("@/shared/utils/secureLogger");
// Mock session management classes
class SessionManager {
    constructor() {
        this.sessions = new Map();
        this.maxSessionAge = 24 * 60 * 60 * 1000; // 24 hours
        this.maxSessions = 1000; // Prevent memory exhaustion
    }
    async createSession(userId) {
        // Cleanup expired sessions first
        this.cleanupExpiredSessions();
        // Prevent too many sessions
        if (this.sessions.size >= this.maxSessions) {
            throw new Error('Maximum sessions limit reached');
        }
        const sessionId = await this.generateSecureSessionId();
        const token = await this.generateSessionToken(sessionId);
        const sessionData = {
            id: sessionId,
            userId,
            createdAt: Date.now(),
            lastAccessedAt: Date.now(),
            expiresAt: Date.now() + this.maxSessionAge,
            isActive: true,
            ipAddress: 'unknown', // Would be set from request
            userAgent: 'unknown' // Would be set from request
        };
        this.sessions.set(sessionId, sessionData);
        secureLogger_1.logger.info('Session created', {
            sessionId: sessionId.substring(0, 8) + '...', // Partial logging for security
            userId
        }, 'session-management');
        return { sessionId, token, expiresAt: sessionData.expiresAt };
    }
    async validateSession(sessionId, token) {
        const session = this.sessions.get(sessionId);
        if (!session) {
            secureLogger_1.logger.warn('Session validation failed: session not found', {
                sessionId: sessionId.substring(0, 8) + '...'
            }, 'session-security');
            return null;
        }
        // Check if session is expired
        if (Date.now() > session.expiresAt || !session.isActive) {
            this.destroySession(sessionId);
            secureLogger_1.logger.warn('Session validation failed: session expired', {
                sessionId: sessionId.substring(0, 8) + '...'
            }, 'session-security');
            return null;
        }
        // Validate token (in real implementation, this would use cryptographic verification)
        const expectedToken = await this.generateSessionToken(sessionId);
        if (token !== expectedToken) {
            secureLogger_1.logger.error('Session validation failed: invalid token', {
                sessionId: sessionId.substring(0, 8) + '...'
            }, 'session-security');
            return null;
        }
        // Update last accessed time
        session.lastAccessedAt = Date.now();
        return session;
    }
    destroySession(sessionId) {
        const existed = this.sessions.has(sessionId);
        this.sessions.delete(sessionId);
        if (existed) {
            secureLogger_1.logger.info('Session destroyed', {
                sessionId: sessionId.substring(0, 8) + '...'
            }, 'session-management');
        }
        return existed;
    }
    async generateSecureSessionId() {
        // Generate cryptographically secure session ID
        const bytes = new Uint8Array(32);
        crypto.getRandomValues(bytes);
        return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');
    }
    async generateSessionToken(sessionId) {
        // In real implementation, this would be a cryptographically signed token
        const encoder = new TextEncoder();
        const data = encoder.encode(sessionId + Date.now().toString());
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    cleanupExpiredSessions() {
        const now = Date.now();
        const expiredSessions = [];
        for (const [sessionId, session] of this.sessions.entries()) {
            if (now > session.expiresAt || !session.isActive) {
                expiredSessions.push(sessionId);
            }
        }
        expiredSessions.forEach(sessionId => {
            this.sessions.delete(sessionId);
        });
        if (expiredSessions.length > 0) {
            secureLogger_1.logger.info('Cleaned up expired sessions', {
                count: expiredSessions.length
            }, 'session-management');
        }
    }
    getActiveSessionCount() {
        this.cleanupExpiredSessions();
        return this.sessions.size;
    }
}
describe('Session Management Security Tests', () => {
    let sessionManager;
    beforeEach(() => {
        sessionManager = new SessionManager();
    });
    describe('Session Creation Security', () => {
        it('should create sessions with cryptographically secure IDs', async () => {
            const session1 = await sessionManager.createSession('user1');
            const session2 = await sessionManager.createSession('user1');
            // Session IDs should be unique
            expect(session1.sessionId).not.toBe(session2.sessionId);
            // Session IDs should be long enough (256 bits = 64 hex chars)
            expect(session1.sessionId.length).toBe(64);
            expect(session2.sessionId.length).toBe(64);
            // Session IDs should be hex strings
            expect(session1.sessionId).toMatch(/^[a-f0-9]{64}$/);
            expect(session2.sessionId).toMatch(/^[a-f0-9]{64}$/);
        });
        it('should set proper session expiration times', async () => {
            const beforeCreation = Date.now();
            const session = await sessionManager.createSession('user1');
            const afterCreation = Date.now();
            // Session should expire in approximately 24 hours
            const expectedExpiration = beforeCreation + 24 * 60 * 60 * 1000;
            const maxExpiration = afterCreation + 24 * 60 * 60 * 1000;
            expect(session.expiresAt).toBeGreaterThanOrEqual(expectedExpiration);
            expect(session.expiresAt).toBeLessThanOrEqual(maxExpiration);
        });
        it('should prevent session fixation attacks', async () => {
            // Create multiple sessions for the same user
            const sessions = await Promise.all([
                sessionManager.createSession('user1'),
                sessionManager.createSession('user1'),
                sessionManager.createSession('user1')
            ]);
            // Each session should have a unique ID
            const sessionIds = sessions.map(s => s.sessionId);
            const uniqueIds = new Set(sessionIds);
            expect(uniqueIds.size).toBe(sessions.length);
        });
        it('should limit the number of concurrent sessions', async () => {
            // This test simulates preventing memory exhaustion attacks
            const maxSessions = 1000;
            const sessionPromises = [];
            // Try to create slightly more than the maximum allowed sessions
            for (let i = 0; i < maxSessions + 10; i++) {
                sessionPromises.push(sessionManager.createSession(`user${i}`).catch(() => null));
            }
            const results = await Promise.all(sessionPromises);
            const successfulSessions = results.filter(Boolean);
            // Should not exceed the maximum limit
            expect(successfulSessions.length).toBeLessThanOrEqual(maxSessions);
        }, 10000); // Increase timeout for this test
    });
    describe('Session Validation Security', () => {
        it('should validate legitimate sessions correctly', async () => {
            const session = await sessionManager.createSession('user1');
            const validatedSession = await sessionManager.validateSession(session.sessionId, session.token);
            expect(validatedSession).toBeTruthy();
            expect(validatedSession?.userId).toBe('user1');
            expect(validatedSession?.isActive).toBe(true);
        });
        it('should reject invalid session IDs', async () => {
            const maliciousSessionIds = [
                'invalid-session-id',
                '../../../etc/passwd',
                '<script>alert("xss")</script>',
                'null',
                '',
                'a'.repeat(1000), // Too long
                '0'.repeat(64), // Valid length but non-existent
                'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' // Invalid hex
            ];
            for (const sessionId of maliciousSessionIds) {
                const result = await sessionManager.validateSession(sessionId, 'any-token');
                expect(result).toBeNull();
            }
        });
        it('should reject tampered tokens', async () => {
            const session = await sessionManager.createSession('user1');
            const tamperedTokens = [
                session.token + 'x', // Appended character
                session.token.slice(0, -1), // Removed character
                session.token.replace('a', 'b'), // Changed character
                'malicious-token',
                '',
                null,
                undefined
            ];
            for (const token of tamperedTokens) {
                const result = await sessionManager.validateSession(session.sessionId, token);
                expect(result).toBeNull();
            }
        });
        it('should handle expired sessions securely', async () => {
            const session = await sessionManager.createSession('user1');
            // Mock expired session by manually setting expiration time in the past
            const sessionData = await sessionManager.validateSession(session.sessionId, session.token);
            if (sessionData) {
                sessionData.expiresAt = Date.now() - 1000; // 1 second ago
            }
            // Try to validate the expired session
            const result = await sessionManager.validateSession(session.sessionId, session.token);
            expect(result).toBeNull();
            // Session should be automatically cleaned up
            const activeCount = sessionManager.getActiveSessionCount();
            expect(activeCount).toBe(0);
        });
    });
    describe('Session Destruction Security', () => {
        it('should securely destroy sessions', async () => {
            const session = await sessionManager.createSession('user1');
            // Verify session exists
            let validatedSession = await sessionManager.validateSession(session.sessionId, session.token);
            expect(validatedSession).toBeTruthy();
            // Destroy session
            const destroyed = sessionManager.destroySession(session.sessionId);
            expect(destroyed).toBe(true);
            // Verify session no longer exists
            validatedSession = await sessionManager.validateSession(session.sessionId, session.token);
            expect(validatedSession).toBeNull();
        });
        it('should handle double destruction safely', async () => {
            const session = await sessionManager.createSession('user1');
            // Destroy session twice
            const firstDestroy = sessionManager.destroySession(session.sessionId);
            const secondDestroy = sessionManager.destroySession(session.sessionId);
            expect(firstDestroy).toBe(true);
            expect(secondDestroy).toBe(false);
        });
        it('should clean up expired sessions automatically', async () => {
            // Create multiple sessions
            const sessions = await Promise.all([
                sessionManager.createSession('user1'),
                sessionManager.createSession('user2'),
                sessionManager.createSession('user3')
            ]);
            expect(sessionManager.getActiveSessionCount()).toBe(3);
            // Mock all sessions as expired
            for (const session of sessions) {
                const sessionData = await sessionManager.validateSession(session.sessionId, session.token);
                if (sessionData) {
                    sessionData.expiresAt = Date.now() - 1000;
                }
            }
            // Trigger cleanup by calling getActiveSessionCount
            const activeCount = sessionManager.getActiveSessionCount();
            expect(activeCount).toBe(0);
        });
    });
    describe('Session Hijacking Prevention', () => {
        it('should detect session ID enumeration attempts', async () => {
            const session = await sessionManager.createSession('user1');
            // Simulate session ID enumeration
            const enumerationAttempts = [
                session.sessionId.replace(/.$/, '0'),
                session.sessionId.replace(/.$/, '1'),
                session.sessionId.replace(/.$/, '2'),
                session.sessionId.replace(/.$/, 'f'),
                session.sessionId.slice(0, -1) + 'x'
            ];
            let validationAttempts = 0;
            for (const attemptId of enumerationAttempts) {
                const result = await sessionManager.validateSession(attemptId, 'any-token');
                validationAttempts++;
                expect(result).toBeNull();
            }
            expect(validationAttempts).toBe(enumerationAttempts.length);
        });
        it('should use secure random number generation', async () => {
            // Test that session IDs use sufficient entropy
            const sessions = await Promise.all(Array.from({ length: 100 }, (_, i) => sessionManager.createSession(`user${i}`)));
            const sessionIds = sessions.map(s => s.sessionId);
            // Test entropy: no two session IDs should be similar
            for (let i = 0; i < sessionIds.length; i++) {
                for (let j = i + 1; j < sessionIds.length; j++) {
                    // Calculate Hamming distance (different characters)
                    let differences = 0;
                    for (let k = 0; k < Math.min(sessionIds[i].length, sessionIds[j].length); k++) {
                        if (sessionIds[i][k] !== sessionIds[j][k]) {
                            differences++;
                        }
                    }
                    // At least 50% of characters should be different (good entropy)
                    const minDifferences = Math.floor(sessionIds[i].length * 0.5);
                    expect(differences).toBeGreaterThan(minDifferences);
                }
            }
        }, 15000); // Increased timeout for this test
    });
    describe('Memory Security', () => {
        it('should not leak sensitive data in memory', async () => {
            const session = await sessionManager.createSession('user1');
            // Destroy the session
            sessionManager.destroySession(session.sessionId);
            // The session data should not be accessible
            const result = await sessionManager.validateSession(session.sessionId, session.token);
            expect(result).toBeNull();
        });
        it('should handle memory pressure gracefully', async () => {
            // Create many sessions to test memory management
            const sessionPromises = Array.from({ length: 500 }, (_, i) => sessionManager.createSession(`user${i}`));
            const sessions = await Promise.all(sessionPromises);
            expect(sessions.length).toBe(500);
            // All sessions should be valid initially
            const initialCount = sessionManager.getActiveSessionCount();
            expect(initialCount).toBeLessThanOrEqual(500);
        }, 10000);
    });
    describe('Logging Security', () => {
        it('should log security events without exposing sensitive data', async () => {
            const session = await sessionManager.createSession('user1');
            // Mock logger to capture logs
            const logSpy = jest.spyOn(secureLogger_1.logger, 'warn');
            // Attempt invalid session validation
            await sessionManager.validateSession('invalid-session', 'invalid-token');
            // Verify that sensitive data is not logged
            expect(logSpy).toHaveBeenCalled();
            const logCall = logSpy.mock.calls.find(call => call[0].includes('Session validation failed'));
            if (logCall) {
                const logMessage = JSON.stringify(logCall);
                expect(logMessage).not.toContain(session.token);
                expect(logMessage).not.toContain(session.sessionId); // Full session ID should not be logged
            }
            logSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,