e260cb1cdc9496452b0350860e25b01a
"use strict";

/* istanbul ignore next */
function cov_nbnxbqo65() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts";
  var hash = "8267c3bbe2301a3237acf2f101245d3c9d47ab69";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 107
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "4": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "5": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "6": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 52
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 121
        }
      },
      "8": {
        start: {
          line: 22,
          column: 30
        },
        end: {
          line: 22,
          column: 64
        }
      },
      "9": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "11": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 75
        }
      },
      "12": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "13": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 55
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 75
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 49
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "18": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 48
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 42
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 125
        }
      },
      "22": {
        start: {
          line: 55,
          column: 22
        },
        end: {
          line: 55,
          column: 44
        }
      },
      "23": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "24": {
        start: {
          line: 56,
          column: 21
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "25": {
        start: {
          line: 57,
          column: 34
        },
        end: {
          line: 57,
          column: 68
        }
      },
      "26": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "27": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 78
        }
      },
      "30": {
        start: {
          line: 69,
          column: 22
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "31": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 28
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "33": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 77,
          column: 44
        }
      },
      "34": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 42
        }
      },
      "35": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 48
        }
      },
      "36": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 48
        }
      },
      "37": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 88
        }
      },
      "38": {
        start: {
          line: 82,
          column: 47
        },
        end: {
          line: 82,
          column: 78
        }
      },
      "39": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "40": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 118
        }
      },
      "41": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "42": {
        start: {
          line: 94,
          column: 34
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "43": {
        start: {
          line: 95,
          column: 22
        },
        end: {
          line: 95,
          column: 44
        }
      },
      "44": {
        start: {
          line: 96,
          column: 22
        },
        end: {
          line: 96,
          column: 53
        }
      },
      "45": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 34
        }
      },
      "46": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "47": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "48": {
        start: {
          line: 105,
          column: 21
        },
        end: {
          line: 105,
          column: 22
        }
      },
      "49": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 72
        }
      },
      "50": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 22
        }
      },
      "51": {
        start: {
          line: 114,
          column: 19
        },
        end: {
          line: 114,
          column: 110
        }
      },
      "52": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "53": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 118,
          column: 36
        }
      },
      "54": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 119,
          column: 37
        }
      },
      "55": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 121,
          column: 43
        }
      },
      "56": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 122,
          column: 49
        }
      },
      "57": {
        start: {
          line: 123,
          column: 0
        },
        end: {
          line: 123,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 65
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 82,
            column: 43
          }
        },
        loc: {
          start: {
            line: 82,
            column: 47
          },
          end: {
            line: 82,
            column: 78
          }
        },
        line: 82
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 93,
            column: 71
          },
          end: {
            line: 93,
            column: 72
          }
        },
        loc: {
          start: {
            line: 93,
            column: 78
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 93
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 108
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 103
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 45
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 113
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 41
          }
        }, {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 67
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 30
          },
          end: {
            line: 22,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 30
          },
          end: {
            line: 22,
            column: 57
          }
        }, {
          start: {
            line: 22,
            column: 61
          },
          end: {
            line: 22,
            column: 64
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 41
          }
        }, {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 67
          }
        }],
        line: 48
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 34
          },
          end: {
            line: 57,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 34
          },
          end: {
            line: 57,
            column: 61
          }
        }, {
          start: {
            line: 57,
            column: 65
          },
          end: {
            line: 57,
            column: 68
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 41
          }
        }, {
          start: {
            line: 76,
            column: 45
          },
          end: {
            line: 76,
            column: 67
          }
        }],
        line: 76
      },
      "11": {
        loc: {
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 61
          }
        }, {
          start: {
            line: 94,
            column: 65
          },
          end: {
            line: 94,
            column: 68
          }
        }],
        line: 94
      },
      "12": {
        loc: {
          start: {
            line: 96,
            column: 22
          },
          end: {
            line: 96,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 96,
            column: 35
          }
        }, {
          start: {
            line: 96,
            column: 39
          },
          end: {
            line: 96,
            column: 52
          }
        }],
        line: 96
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 103,
            column: 106
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 31
          }
        }],
        line: 113
      },
      "15": {
        loc: {
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 113,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 43
          }
        }],
        line: 113
      },
      "16": {
        loc: {
          start: {
            line: 115,
            column: 15
          },
          end: {
            line: 115,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 24
          },
          end: {
            line: 115,
            column: 41
          }
        }, {
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 115,
            column: 46
          }
        }],
        line: 115
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts"],
      sourcesContent: ["import { logger } from '@shared/utils/secureLogger';\n/**\n * Utilitaires de g\xE9n\xE9ration de nombres al\xE9atoires s\xE9curis\xE9s\n * Remplace Math.random() par crypto.getRandomValues() pour la s\xE9curit\xE9 cryptographique\n */\n\nexport class SecureRandom {\n  private static readonly MAX_UINT32 = 0xFFFFFFFF;\n\n  /**\n   * G\xE9n\xE8re un nombre al\xE9atoire s\xE9curis\xE9 entre 0 et 1 (\xE9quivalent Math.random())\n   */\n  static random(): number {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint32Array(1);\n      crypto.getRandomValues(array);\n      return array[0] / (this.MAX_UINT32 + 1);\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMAND\xC9 EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, fallback non-s\xE9curis\xE9 utilis\xE9');\n    // Utilisation temporaire pour d\xE9veloppement uniquement\n    const insecureValue = globalThis.Math?.random?.() || 0.5;\n    return insecureValue;\n  }\n\n  /**\n   * G\xE9n\xE8re un entier al\xE9atoire s\xE9curis\xE9 dans une plage\n   */\n  static randomInt(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit \xEAtre inf\xE9rieur \xE0 max');\n    }\n    \n    const range = max - min;\n    return Math.floor(this.random() * range) + min;\n  }\n\n  /**\n   * G\xE9n\xE8re un nombre flottant al\xE9atoire s\xE9curis\xE9 dans une plage\n   */\n  static randomFloat(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit \xEAtre inf\xE9rieur \xE0 max');\n    }\n    \n    return this.random() * (max - min) + min;\n  }\n\n  /**\n   * G\xE9n\xE8re des bytes al\xE9atoires s\xE9curis\xE9s\n   */\n  static randomBytes(length: number): Uint8Array {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      return array;\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMAND\xC9 EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, g\xE9n\xE9ration fallback non-s\xE9curis\xE9e');\n    const array = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      array[i] = Math.floor(insecureValue * 256);\n    }\n    return array;\n  }\n\n  /**\n   * S\xE9lectionne un \xE9l\xE9ment al\xE9atoire d'un tableau\n   */\n  static choice<T>(array: T[]): T {\n    if (array.length === 0) {\n      throw new Error('SecureRandom: Le tableau ne peut pas \xEAtre vide');\n    }\n    \n    const index = this.randomInt(0, array.length);\n    return array[index];\n  }\n\n  /**\n   * G\xE9n\xE8re un UUID v4 s\xE9curis\xE9\n   */\n  static uuid(): string {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const bytes = new Uint8Array(16);\n      crypto.getRandomValues(bytes);\n      \n      // Version 4 UUID format\n      bytes[6] = (bytes[6] & 0x0f) | 0x40; // Version 4\n      bytes[8] = (bytes[8] & 0x3f) | 0x80; // Variant 10\n\n      const hex = Array.from(bytes, b => b.toString(16).padStart(2, '0')).join('');\n      return [\n        hex.slice(0, 8),\n        hex.slice(8, 12),\n        hex.slice(12, 16),\n        hex.slice(16, 20),\n        hex.slice(20, 32)\n      ].join('-');\n    }\n    \n    // Fallback UUID generation (NON RECOMMAND\xC9 EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, UUID fallback non-s\xE9curis\xE9');\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      const r = insecureValue * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * G\xE9n\xE8re une cha\xEEne al\xE9atoire s\xE9curis\xE9e\n   */\n  static randomString(length: number, charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'): string {\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += charset.charAt(this.randomInt(0, charset.length));\n    }\n    return result;\n  }\n\n  /**\n   * G\xE9n\xE8re un ID court s\xE9curis\xE9 pour les identifiants\n   */\n  static randomId(prefix = '', length = 8): string {\n    const id = this.randomString(length, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    return prefix ? `${prefix}_${id}` : id;\n  }\n}\n\n// Alias pour une migration facile depuis Math.random()\nexport const secureRandom = SecureRandom.random;\nexport const secureRandomInt = SecureRandom.randomInt;\nexport const secureRandomFloat = SecureRandom.randomFloat;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8267c3bbe2301a3237acf2f101245d3c9d47ab69"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nbnxbqo65 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nbnxbqo65();
cov_nbnxbqo65().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_nbnxbqo65().s[1]++;
exports.secureRandomFloat = exports.secureRandomInt = exports.secureRandom = exports.SecureRandom = void 0;
const secureLogger_1 =
/* istanbul ignore next */
(cov_nbnxbqo65().s[2]++, require("@shared/utils/secureLogger"));
/**
 * Utilitaires de génération de nombres aléatoires sécurisés
 * Remplace Math.random() par crypto.getRandomValues() pour la sécurité cryptographique
 */
class SecureRandom {
  /**
   * Génère un nombre aléatoire sécurisé entre 0 et 1 (équivalent Math.random())
   */
  static random() {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[0]++;
    cov_nbnxbqo65().s[3]++;
    if (
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[1][0]++, typeof crypto !== 'undefined') &&
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[1][1]++, crypto.getRandomValues)) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[0][0]++;
      const array =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[4]++, new Uint32Array(1));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[5]++;
      crypto.getRandomValues(array);
      /* istanbul ignore next */
      cov_nbnxbqo65().s[6]++;
      return array[0] / (this.MAX_UINT32 + 1);
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[0][1]++;
    }
    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)
    cov_nbnxbqo65().s[7]++;
    secureLogger_1.logger.warn('SecureRandom: crypto.getRandomValues non disponible, fallback non-sécurisé utilisé');
    // Utilisation temporaire pour développement uniquement
    const insecureValue =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[8]++,
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[2][0]++, globalThis.Math?.random?.()) ||
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[2][1]++, 0.5));
    /* istanbul ignore next */
    cov_nbnxbqo65().s[9]++;
    return insecureValue;
  }
  /**
   * Génère un entier aléatoire sécurisé dans une plage
   */
  static randomInt(min, max) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[1]++;
    cov_nbnxbqo65().s[10]++;
    if (min >= max) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[3][0]++;
      cov_nbnxbqo65().s[11]++;
      throw new Error('SecureRandom: min doit être inférieur à max');
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[3][1]++;
    }
    const range =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[12]++, max - min);
    /* istanbul ignore next */
    cov_nbnxbqo65().s[13]++;
    return Math.floor(this.random() * range) + min;
  }
  /**
   * Génère un nombre flottant aléatoire sécurisé dans une plage
   */
  static randomFloat(min, max) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[2]++;
    cov_nbnxbqo65().s[14]++;
    if (min >= max) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[4][0]++;
      cov_nbnxbqo65().s[15]++;
      throw new Error('SecureRandom: min doit être inférieur à max');
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[4][1]++;
    }
    cov_nbnxbqo65().s[16]++;
    return this.random() * (max - min) + min;
  }
  /**
   * Génère des bytes aléatoires sécurisés
   */
  static randomBytes(length) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[3]++;
    cov_nbnxbqo65().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[6][0]++, typeof crypto !== 'undefined') &&
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[6][1]++, crypto.getRandomValues)) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[5][0]++;
      const array =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[18]++, new Uint8Array(length));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[19]++;
      crypto.getRandomValues(array);
      /* istanbul ignore next */
      cov_nbnxbqo65().s[20]++;
      return array;
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[5][1]++;
    }
    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)
    cov_nbnxbqo65().s[21]++;
    secureLogger_1.logger.warn('SecureRandom: crypto.getRandomValues non disponible, génération fallback non-sécurisée');
    const array =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[22]++, new Uint8Array(length));
    /* istanbul ignore next */
    cov_nbnxbqo65().s[23]++;
    for (let i =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[24]++, 0); i < length; i++) {
      const insecureValue =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[25]++,
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[7][0]++, globalThis.Math?.random?.()) ||
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[7][1]++, 0.5));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[26]++;
      array[i] = Math.floor(insecureValue * 256);
    }
    /* istanbul ignore next */
    cov_nbnxbqo65().s[27]++;
    return array;
  }
  /**
   * Sélectionne un élément aléatoire d'un tableau
   */
  static choice(array) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[4]++;
    cov_nbnxbqo65().s[28]++;
    if (array.length === 0) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[8][0]++;
      cov_nbnxbqo65().s[29]++;
      throw new Error('SecureRandom: Le tableau ne peut pas être vide');
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[8][1]++;
    }
    const index =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[30]++, this.randomInt(0, array.length));
    /* istanbul ignore next */
    cov_nbnxbqo65().s[31]++;
    return array[index];
  }
  /**
   * Génère un UUID v4 sécurisé
   */
  static uuid() {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[5]++;
    cov_nbnxbqo65().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[10][0]++, typeof crypto !== 'undefined') &&
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[10][1]++, crypto.getRandomValues)) {
      /* istanbul ignore next */
      cov_nbnxbqo65().b[9][0]++;
      const bytes =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[33]++, new Uint8Array(16));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[34]++;
      crypto.getRandomValues(bytes);
      // Version 4 UUID format
      /* istanbul ignore next */
      cov_nbnxbqo65().s[35]++;
      bytes[6] = bytes[6] & 0x0f | 0x40; // Version 4
      /* istanbul ignore next */
      cov_nbnxbqo65().s[36]++;
      bytes[8] = bytes[8] & 0x3f | 0x80; // Variant 10
      const hex =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[37]++, Array.from(bytes, b => {
        /* istanbul ignore next */
        cov_nbnxbqo65().f[6]++;
        cov_nbnxbqo65().s[38]++;
        return b.toString(16).padStart(2, '0');
      }).join(''));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[39]++;
      return [hex.slice(0, 8), hex.slice(8, 12), hex.slice(12, 16), hex.slice(16, 20), hex.slice(20, 32)].join('-');
    } else
    /* istanbul ignore next */
    {
      cov_nbnxbqo65().b[9][1]++;
    }
    // Fallback UUID generation (NON RECOMMANDÉ EN PRODUCTION)
    cov_nbnxbqo65().s[40]++;
    secureLogger_1.logger.warn('SecureRandom: crypto.getRandomValues non disponible, UUID fallback non-sécurisé');
    /* istanbul ignore next */
    cov_nbnxbqo65().s[41]++;
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      /* istanbul ignore next */
      cov_nbnxbqo65().f[7]++;
      const insecureValue =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[42]++,
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[11][0]++, globalThis.Math?.random?.()) ||
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[11][1]++, 0.5));
      const r =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[43]++, insecureValue * 16 | 0);
      const v =
      /* istanbul ignore next */
      (cov_nbnxbqo65().s[44]++, c === 'x' ?
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[12][0]++, r) :
      /* istanbul ignore next */
      (cov_nbnxbqo65().b[12][1]++, r & 0x3 | 0x8));
      /* istanbul ignore next */
      cov_nbnxbqo65().s[45]++;
      return v.toString(16);
    });
  }
  /**
   * Génère une chaîne aléatoire sécurisée
   */
  static randomString(length, charset =
  /* istanbul ignore next */
  (cov_nbnxbqo65().b[13][0]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[8]++;
    let result =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[46]++, '');
    /* istanbul ignore next */
    cov_nbnxbqo65().s[47]++;
    for (let i =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[48]++, 0); i < length; i++) {
      /* istanbul ignore next */
      cov_nbnxbqo65().s[49]++;
      result += charset.charAt(this.randomInt(0, charset.length));
    }
    /* istanbul ignore next */
    cov_nbnxbqo65().s[50]++;
    return result;
  }
  /**
   * Génère un ID court sécurisé pour les identifiants
   */
  static randomId(prefix =
  /* istanbul ignore next */
  (cov_nbnxbqo65().b[14][0]++, ''), length =
  /* istanbul ignore next */
  (cov_nbnxbqo65().b[15][0]++, 8)) {
    /* istanbul ignore next */
    cov_nbnxbqo65().f[9]++;
    const id =
    /* istanbul ignore next */
    (cov_nbnxbqo65().s[51]++, this.randomString(length, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'));
    /* istanbul ignore next */
    cov_nbnxbqo65().s[52]++;
    return prefix ?
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[16][0]++, `${prefix}_${id}`) :
    /* istanbul ignore next */
    (cov_nbnxbqo65().b[16][1]++, id);
  }
}
/* istanbul ignore next */
cov_nbnxbqo65().s[53]++;
exports.SecureRandom = SecureRandom;
/* istanbul ignore next */
cov_nbnxbqo65().s[54]++;
SecureRandom.MAX_UINT32 = 0xFFFFFFFF;
// Alias pour une migration facile depuis Math.random()
/* istanbul ignore next */
cov_nbnxbqo65().s[55]++;
exports.secureRandom = SecureRandom.random;
/* istanbul ignore next */
cov_nbnxbqo65().s[56]++;
exports.secureRandomInt = SecureRandom.randomInt;
/* istanbul ignore next */
cov_nbnxbqo65().s[57]++;
exports.secureRandomFloat = SecureRandom.randomFloat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,