{"version":3,"names":["cov_nbnxbqo65","actualCoverage","s","secureLogger_1","require","SecureRandom","random","f","b","crypto","getRandomValues","array","Uint32Array","MAX_UINT32","logger","warn","insecureValue","globalThis","Math","randomInt","min","max","Error","range","floor","randomFloat","randomBytes","length","Uint8Array","i","choice","index","uuid","bytes","hex","Array","from","toString","padStart","join","slice","replace","c","r","v","randomString","charset","result","charAt","randomId","prefix","id","exports","secureRandom","secureRandomInt","secureRandomFloat"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts"],"sourcesContent":["import { logger } from '@shared/utils/secureLogger';\n/**\n * Utilitaires de génération de nombres aléatoires sécurisés\n * Remplace Math.random() par crypto.getRandomValues() pour la sécurité cryptographique\n */\n\nexport class SecureRandom {\n  private static readonly MAX_UINT32 = 0xFFFFFFFF;\n\n  /**\n   * Génère un nombre aléatoire sécurisé entre 0 et 1 (équivalent Math.random())\n   */\n  static random(): number {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint32Array(1);\n      crypto.getRandomValues(array);\n      return array[0] / (this.MAX_UINT32 + 1);\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, fallback non-sécurisé utilisé');\n    // Utilisation temporaire pour développement uniquement\n    const insecureValue = globalThis.Math?.random?.() || 0.5;\n    return insecureValue;\n  }\n\n  /**\n   * Génère un entier aléatoire sécurisé dans une plage\n   */\n  static randomInt(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    const range = max - min;\n    return Math.floor(this.random() * range) + min;\n  }\n\n  /**\n   * Génère un nombre flottant aléatoire sécurisé dans une plage\n   */\n  static randomFloat(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    return this.random() * (max - min) + min;\n  }\n\n  /**\n   * Génère des bytes aléatoires sécurisés\n   */\n  static randomBytes(length: number): Uint8Array {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      return array;\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, génération fallback non-sécurisée');\n    const array = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      array[i] = Math.floor(insecureValue * 256);\n    }\n    return array;\n  }\n\n  /**\n   * Sélectionne un élément aléatoire d'un tableau\n   */\n  static choice<T>(array: T[]): T {\n    if (array.length === 0) {\n      throw new Error('SecureRandom: Le tableau ne peut pas être vide');\n    }\n    \n    const index = this.randomInt(0, array.length);\n    return array[index];\n  }\n\n  /**\n   * Génère un UUID v4 sécurisé\n   */\n  static uuid(): string {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const bytes = new Uint8Array(16);\n      crypto.getRandomValues(bytes);\n      \n      // Version 4 UUID format\n      bytes[6] = (bytes[6] & 0x0f) | 0x40; // Version 4\n      bytes[8] = (bytes[8] & 0x3f) | 0x80; // Variant 10\n\n      const hex = Array.from(bytes, b => b.toString(16).padStart(2, '0')).join('');\n      return [\n        hex.slice(0, 8),\n        hex.slice(8, 12),\n        hex.slice(12, 16),\n        hex.slice(16, 20),\n        hex.slice(20, 32)\n      ].join('-');\n    }\n    \n    // Fallback UUID generation (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, UUID fallback non-sécurisé');\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      const r = insecureValue * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Génère une chaîne aléatoire sécurisée\n   */\n  static randomString(length: number, charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'): string {\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += charset.charAt(this.randomInt(0, charset.length));\n    }\n    return result;\n  }\n\n  /**\n   * Génère un ID court sécurisé pour les identifiants\n   */\n  static randomId(prefix = '', length = 8): string {\n    const id = this.randomString(length, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    return prefix ? `${prefix}_${id}` : id;\n  }\n}\n\n// Alias pour une migration facile depuis Math.random()\nexport const secureRandom = SecureRandom.random;\nexport const secureRandomInt = SecureRandom.randomInt;\nexport const secureRandomFloat = SecureRandom.randomFloat;"],"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","ignoreList":[]}