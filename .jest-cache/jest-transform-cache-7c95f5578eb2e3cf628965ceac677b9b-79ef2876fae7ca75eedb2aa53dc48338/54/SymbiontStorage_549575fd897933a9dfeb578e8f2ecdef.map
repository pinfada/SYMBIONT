{"version":3,"names":["SymbiontStorage","constructor","cov_2mktkw1gu6","f","s","db","DB_NAME","DB_VERSION","initialize","Promise","resolve","reject","request","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","b","organismStore","createObjectStore","keyPath","createIndex","unique","behaviorStore","mutationStore","autoIncrement","invitationStore","getOrganism","id","Error","transaction","store","objectStore","get","openCursor","cursor","value","saveOrganism","organism","put","getBehavior","url","saveBehavior","behavior","addMutation","mutation","mutationWithTimestamp","timestamp","Date","now","add","getRecentMutations","limit","index","mutations","length","push","continue","getSetting","key","defaultValue","setSetting","addInvitation","invitation","createdAt","updateInvitation","getInvitation","code","getAllInvitations","results","getBehaviorPatterns","sort","a","visitCount","lastVisit","getRecentActivity","periodMs","since","recent","filtered","interactions","filter","i","cleanup","retentionDays","cutoffDate","range","IDBKeyRange","upperBound","delete","close","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/storage/SymbiontStorage.ts"],"sourcesContent":["import { OrganismState, OrganismMutation } from '../../shared/types/organism';\r\n\r\ninterface BehaviorData {\r\n  url: string;\r\n  visitCount: number;\r\n  totalTime: number;\r\n  scrollDepth: number;\r\n  lastVisit: number;\r\n  interactions: Array<{\r\n    type: string;\r\n    timestamp: number;\r\n    data: unknown;\r\n  }>;\r\n}\r\n\r\n// @ts-expect-error Interface réservée pour usage futur\r\ninterface _StorageSchema {\r\n  version: number;\r\n  organisms: OrganismState[];\r\n  behaviors: BehaviorData[];\r\n  mutations: OrganismMutation[];\r\n  settings: unknown;\r\n}\r\n\r\nexport class SymbiontStorage {\r\n  private db: IDBDatabase | null = null;\r\n  private readonly DB_NAME = 'symbiont-db';\r\n  private readonly DB_VERSION = 3;\r\n\r\n  async initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        resolve();\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        \r\n        // Store pour les organismes\r\n        if (!db.objectStoreNames.contains('organisms')) {\r\n          const organismStore = db.createObjectStore('organisms', { keyPath: 'id' });\r\n          organismStore.createIndex('generation', 'generation', { unique: false });\r\n          organismStore.createIndex('createdAt', 'createdAt', { unique: false });\r\n        }\r\n        \r\n        // Store pour les comportements\r\n        if (!db.objectStoreNames.contains('behaviors')) {\r\n          const behaviorStore = db.createObjectStore('behaviors', { keyPath: 'url' });\r\n          behaviorStore.createIndex('lastVisit', 'lastVisit', { unique: false });\r\n          behaviorStore.createIndex('visitCount', 'visitCount', { unique: false });\r\n        }\r\n        \r\n        // Store pour les mutations\r\n        if (!db.objectStoreNames.contains('mutations')) {\r\n          const mutationStore = db.createObjectStore('mutations', { keyPath: 'id', autoIncrement: true });\r\n          mutationStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          mutationStore.createIndex('type', 'type', { unique: false });\r\n        }\r\n        \r\n        // Store pour les paramètres\r\n        if (!db.objectStoreNames.contains('settings')) {\r\n          db.createObjectStore('settings', { keyPath: 'key' });\r\n        }\r\n        \r\n        // Store pour les invitations\r\n        if (!db.objectStoreNames.contains('invitations')) {\r\n          const invitationStore = db.createObjectStore('invitations', { keyPath: 'code' });\r\n          invitationStore.createIndex('createdAt', 'createdAt', { unique: false });\r\n          invitationStore.createIndex('status', 'status', { unique: false });\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  async getOrganism(id?: string): Promise<OrganismState | null> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['organisms'], 'readonly');\r\n      const store = transaction.objectStore('organisms');\r\n      \r\n      if (id) {\r\n        const request = store.get(id);\r\n        request.onsuccess = () => resolve(request.result || null);\r\n        request.onerror = () => reject(request.error);\r\n      } else {\r\n        // Récupérer le premier organisme trouvé\r\n        const request = store.openCursor();\r\n        request.onsuccess = (event) => {\r\n          const cursor = (event.target as IDBRequest).result;\r\n          resolve(cursor ? cursor.value : null);\r\n        };\r\n        request.onerror = () => reject(request.error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveOrganism(organism: OrganismState): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['organisms'], 'readwrite');\r\n      const store = transaction.objectStore('organisms');\r\n      const request = store.put(organism);\r\n      \r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async getBehavior(url: string): Promise<BehaviorData | null> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['behaviors'], 'readonly');\r\n      const store = transaction.objectStore('behaviors');\r\n      const request = store.get(url);\r\n      \r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async saveBehavior(behavior: BehaviorData): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['behaviors'], 'readwrite');\r\n      const store = transaction.objectStore('behaviors');\r\n      const request = store.put(behavior);\r\n      \r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async addMutation(mutation: OrganismMutation & { timestamp?: number }): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    const mutationWithTimestamp = {\r\n      ...mutation,\r\n      timestamp: mutation.timestamp || Date.now()\r\n    };\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['mutations'], 'readwrite');\r\n      const store = transaction.objectStore('mutations');\r\n      const request = store.add(mutationWithTimestamp);\r\n      \r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async getRecentMutations(limit: number = 10): Promise<OrganismMutation[]> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['mutations'], 'readonly');\r\n      const store = transaction.objectStore('mutations');\r\n      const index = store.index('timestamp');\r\n      const request = index.openCursor(null, 'prev');\r\n      \r\n      const mutations: OrganismMutation[] = [];\r\n      \r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor && mutations.length < limit) {\r\n          mutations.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(mutations);\r\n        }\r\n      };\r\n      \r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async getSetting<T>(key: string, defaultValue: T): Promise<T> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['settings'], 'readonly');\r\n      const store = transaction.objectStore('settings');\r\n      const request = store.get(key);\r\n      \r\n      request.onsuccess = () => {\r\n        const result = request.result;\r\n        resolve(result ? result.value : defaultValue);\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async setSetting<T>(key: string, value: T): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n      const store = transaction.objectStore('settings');\r\n      const request = store.put({ key, value });\r\n      \r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // --- INVITATIONS ---\r\n  async addInvitation(invitation: any): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['invitations'], 'readwrite');\r\n      const store = transaction.objectStore('invitations');\r\n      const request = store.add({\r\n        ...invitation,\r\n        createdAt: invitation.createdAt || Date.now()\r\n      });\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async updateInvitation(invitation: any): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['invitations'], 'readwrite');\r\n      const store = transaction.objectStore('invitations');\r\n      const request = store.put(invitation);\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async getInvitation(code: string): Promise<any | null> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['invitations'], 'readonly');\r\n      const store = transaction.objectStore('invitations');\r\n      const request = store.get(code);\r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async getAllInvitations(): Promise<any[]> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['invitations'], 'readonly');\r\n      const store = transaction.objectStore('invitations');\r\n      const request = store.openCursor();\r\n      const results: unknown[] = [];\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor) {\r\n          results.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(results);\r\n        }\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retourne la liste des comportements triés par nombre de visites (visitCount) puis date de dernière visite (lastVisit)\r\n   */\r\n  async getBehaviorPatterns(): Promise<BehaviorData[]> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['behaviors'], 'readonly');\r\n      const store = transaction.objectStore('behaviors');\r\n      const request = store.openCursor();\r\n      const results: BehaviorData[] = [];\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor) {\r\n          results.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          // Tri par visitCount décroissant puis lastVisit décroissant\r\n          results.sort((a, b) => {\r\n            if (b.visitCount !== a.visitCount) return b.visitCount - a.visitCount;\r\n            return b.lastVisit - a.lastVisit;\r\n          });\r\n          resolve(results);\r\n        }\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retourne les interactions récentes sur une période donnée (en ms, par défaut 24h)\r\n   */\r\n  async getRecentActivity(periodMs: number = 24 * 60 * 60 * 1000): Promise<any[]> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    const since = Date.now() - periodMs;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['behaviors'], 'readonly');\r\n      const store = transaction.objectStore('behaviors');\r\n      const request = store.openCursor();\r\n      const recent: unknown[] = [];\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor) {\r\n          const behavior: BehaviorData = cursor.value;\r\n          // On prend toutes les interactions récentes de ce comportement\r\n          const filtered = (behavior.interactions || []).filter(i => i.timestamp >= since);\r\n          for (const i of filtered) {\r\n            recent.push({ ...i, url: behavior.url });\r\n          }\r\n          cursor.continue();\r\n        } else {\r\n          // Tri par timestamp décroissant\r\n          recent.sort((a, b) => (b as any).timestamp - (a as any).timestamp);\r\n          resolve(recent);\r\n        }\r\n      };\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Nettoie les anciennes données pour optimiser l'espace\r\n   */\r\n  async cleanup(retentionDays: number = 30): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    const cutoffDate = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\r\n    \r\n    // Nettoyer les anciennes mutations\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['mutations'], 'readwrite');\r\n      const store = transaction.objectStore('mutations');\r\n      const index = store.index('timestamp');\r\n      const range = IDBKeyRange.upperBound(cutoffDate);\r\n      const request = index.openCursor(range);\r\n      \r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor) {\r\n          cursor.delete();\r\n          cursor.continue();\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      \r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ferme la connexion à la base de données\r\n   */\r\n  close(): void {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}"],"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","ignoreList":[]}