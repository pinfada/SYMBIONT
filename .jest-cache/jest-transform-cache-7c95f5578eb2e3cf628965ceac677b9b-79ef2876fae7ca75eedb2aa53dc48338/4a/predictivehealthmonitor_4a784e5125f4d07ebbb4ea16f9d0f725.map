{"version":3,"names":["cov_p61vp0k4l","actualCoverage","s","secureRandom_1","require","secureLogger_1","PredictiveHealthMonitor","constructor","onAlert","f","healthMetrics","cpu","memory","latency","errors","modeConservateur","modeOffline","b","setupContinuousMonitoring","setInterval","collectMetrics","detectAnomalies","predictIssues","takePreventiveActions","SecureRandom","random","push","length","shift","avg","arr","reduce","a","alert","prediction","crashProbability","performanceDegradation","memoryIssue","logAction","getCurrentMode","logError","msg","logger","warn","info","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/monitoring/predictive-health-monitor.ts"],"sourcesContent":["import { SecureRandom } from '@shared/utils/secureRandom';\r\nimport { logger } from '@shared/utils/secureLogger';\r\n// monitoring/predictive-health-monitor.ts\r\n// Monitoring prédictif de la santé (Phase 2)\r\n\r\nexport class PredictiveHealthMonitor {\r\n  private healthMetrics: { cpu: number[]; memory: number[]; latency: number[]; errors: number } = {\r\n    cpu: [], memory: [], latency: [], errors: 0\r\n  }\r\n  private onAlert: ((msg: string) => void) | null = null\r\n  private modeConservateur = false\r\n  private modeOffline = false\r\n\r\n  constructor(onAlert?: (msg: string) => void) {\r\n    if (onAlert) this.onAlert = onAlert\r\n    this.setupContinuousMonitoring()\r\n  }\r\n\r\n  // Monitoring prédictif en temps réel\r\n  private setupContinuousMonitoring(): void {\r\n    setInterval(() => {\r\n      this.collectMetrics()\r\n      this.detectAnomalies()\r\n      this.predictIssues()\r\n      this.takePreventiveActions()\r\n    }, 1000) // Chaque seconde\r\n  }\r\n\r\n  private collectMetrics(): void {\r\n    // Simule la collecte CPU/mémoire/latence\r\n    const cpu = SecureRandom.random() * 0.2\r\n    const memory = SecureRandom.random() * 20\r\n    const latency = SecureRandom.random() * 5\r\n    this.healthMetrics.cpu.push(cpu)\r\n    this.healthMetrics.memory.push(memory)\r\n    this.healthMetrics.latency.push(latency)\r\n    if (this.healthMetrics.cpu.length > 100) this.healthMetrics.cpu.shift()\r\n    if (this.healthMetrics.memory.length > 100) this.healthMetrics.memory.shift()\r\n    if (this.healthMetrics.latency.length > 100) this.healthMetrics.latency.shift()\r\n  }\r\n\r\n  private detectAnomalies(): void {\r\n    const avg = (arr: number[]) => arr.reduce((a, b) => a + b, 0) / (arr.length || 1)\r\n    if (avg(this.healthMetrics.cpu) > 0.18) this.alert('CPU élevé (prédictif)')\r\n    if (avg(this.healthMetrics.memory) > 18) this.alert('Mémoire élevée (prédictif)')\r\n    if (avg(this.healthMetrics.latency) > 4) this.alert('Latence élevée (prédictif)')\r\n    if (this.healthMetrics.errors > 0) this.alert('Erreurs détectées (prédictif)')\r\n  }\r\n\r\n  private async predictIssues(): Promise<void> {\r\n    // Prédiction simple : si la moyenne CPU/mémoire/latence dépasse un seuil, on prédit un crash ou une dégradation\r\n    const avg = (arr: number[]) => arr.reduce((a, b) => a + b, 0) / (arr.length || 1)\r\n    const prediction = {\r\n      crashProbability: avg(this.healthMetrics.cpu) > 0.19 ? 0.8 : 0.2,\r\n      performanceDegradation: avg(this.healthMetrics.latency) > 4.5 ? 0.7 : 0.2,\r\n      memoryIssue: avg(this.healthMetrics.memory) > 19 ? 0.7 : 0.2\r\n    }\r\n    if (prediction.crashProbability > 0.7) {\r\n      this.alert('🚨 Crash imminent prédit')\r\n      this.modeConservateur = true\r\n    }\r\n    if (prediction.performanceDegradation > 0.5) {\r\n      this.alert('⚠️ Dégradation performance prédite')\r\n      this.modeConservateur = true\r\n    }\r\n    if (prediction.memoryIssue > 0.6) {\r\n      this.alert('💾 Problème mémoire prédit')\r\n      this.modeOffline = true\r\n    }\r\n  }\r\n\r\n  private async takePreventiveActions(): Promise<void> {\r\n    // Actions préventives simulées\r\n    const avg = (arr: number[]) => arr.reduce((a, b) => a + b, 0) / (arr.length || 1)\r\n    if (avg(this.healthMetrics.cpu) > 0.18) {\r\n      this.modeConservateur = true\r\n      this.logAction('Activation du mode conservateur')\r\n    }\r\n    if (avg(this.healthMetrics.memory) > 18) {\r\n      this.modeConservateur = true\r\n      this.logAction('Optimisation mémoire déclenchée')\r\n    }\r\n    if (avg(this.healthMetrics.latency) > 4) {\r\n      this.modeOffline = true\r\n      this.logAction('Passage en mode offline')\r\n    }\r\n  }\r\n\r\n  public getCurrentMode(): 'normal' | 'conservateur' | 'offline' {\r\n    if (this.modeOffline) return 'offline'\r\n    if (this.modeConservateur) return 'conservateur'\r\n    return 'normal'\r\n  }\r\n\r\n  public logError() {\r\n    this.healthMetrics.errors++\r\n  }\r\n\r\n  private alert(msg: string) {\r\n    logger.warn('🛑 [PredictiveHealthMonitor]', msg)\r\n    if (this.onAlert) this.onAlert(msg)\r\n  }\r\n\r\n  private logAction(msg: string) {\r\n    logger.info('🟢 [Prévention]', msg)\r\n  }\r\n} "],"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","ignoreList":[]}