5b68df09577be2d65e4fac9f7af9bc0f
"use strict";
/**
 * TraitService - Gestion des traits d'organisme
 * Part du refactoring d'OrganismCore selon l'architecture hexagonale
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraitService = void 0;
class TraitService {
    constructor(initialTraits) {
        this.history = [];
        this.listeners = [];
        this.traits = {
            curiosity: 0.5,
            focus: 0.5,
            rhythm: 0.5,
            empathy: 0.5,
            creativity: 0.5,
            memory: 0.5,
            intuition: 0.5,
            resilience: 0.5,
            adaptability: 0.5,
            collaboration: 0.5,
            ...initialTraits
        };
    }
    /**
     * Met à jour un trait spécifique
     */
    updateTrait(name, value, trigger = 'manual') {
        const oldValue = this.traits[name];
        const clampedValue = Math.max(0, Math.min(1, value));
        this.traits[name] = clampedValue;
        // Enregistrement dans l'historique
        this.history.push({
            trait: name,
            value: clampedValue,
            timestamp: Date.now(),
            trigger
        });
        // Notification des listeners
        const event = {
            traitName: name,
            oldValue,
            newValue: clampedValue,
            timestamp: Date.now()
        };
        this.listeners.forEach(listener => listener(event));
    }
    /**
     * Met à jour plusieurs traits simultanément
     */
    updateTraits(updates, trigger = 'batch') {
        Object.entries(updates).forEach(([key, value]) => {
            if (typeof value === 'number') {
                this.updateTrait(key, value, trigger);
            }
        });
    }
    /**
     * Obtient la valeur d'un trait
     */
    getTrait(name) {
        return this.traits[name];
    }
    /**
     * Obtient tous les traits
     */
    getAllTraits() {
        return { ...this.traits };
    }
    /**
     * Obtient l'historique d'un trait
     */
    getTraitHistory(name) {
        return this.history.filter(entry => entry.trait === name);
    }
    /**
     * Obtient l'historique complet limité
     */
    getFullHistory(limit = 100) {
        return this.history.slice(-limit);
    }
    /**
     * Normalise tous les traits (les ramène dans [0,1])
     */
    normalizeTraits() {
        Object.keys(this.traits).forEach(key => {
            const traitKey = key;
            const value = this.traits[traitKey];
            if (value < 0 || value > 1) {
                this.updateTrait(traitKey, Math.max(0, Math.min(1, value)), 'normalization');
            }
        });
    }
    /**
     * Calcule l'équilibre général des traits
     */
    calculateBalance() {
        const values = Object.values(this.traits);
        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
        const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
        // Plus la variance est faible, plus l'équilibre est bon
        return Math.max(0, 1 - variance);
    }
    /**
     * Ajoute un listener pour les changements de traits
     */
    addTraitChangeListener(listener) {
        this.listeners.push(listener);
    }
    /**
     * Supprime un listener
     */
    removeTraitChangeListener(listener) {
        const index = this.listeners.indexOf(listener);
        if (index > -1) {
            this.listeners.splice(index, 1);
        }
    }
    /**
     * Nettoyage de l'historique ancien
     */
    cleanup(maxAge = 24 * 60 * 60 * 1000) {
        const cutoff = Date.now() - maxAge;
        this.history = this.history.filter(entry => entry.timestamp > cutoff);
    }
    /**
     * Sérialisation pour sauvegarde
     */
    toJSON() {
        return {
            traits: { ...this.traits },
            history: [...this.history]
        };
    }
    /**
     * Restauration depuis JSON
     */
    fromJSON(data) {
        this.traits = { ...data.traits };
        this.history = [...data.history];
    }
}
exports.TraitService = TraitService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,