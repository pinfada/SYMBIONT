{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/TraitService.ts","mappings":";AAAA;;;GAGG;;;AAkBH,MAAa,YAAY;IAKvB,YAAY,aAAuC;QAH3C,YAAO,GAAmB,EAAE,CAAC;QAC7B,cAAS,GAA0C,EAAE,CAAC;QAG5D,IAAI,CAAC,MAAM,GAAG;YACZ,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,UAAU,EAAE,GAAG;YACf,MAAM,EAAE,GAAG;YACX,SAAS,EAAE,GAAG;YACd,UAAU,EAAE,GAAG;YACf,YAAY,EAAE,GAAG;YACjB,aAAa,EAAE,GAAG;YAClB,GAAG,aAAa;SACjB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,IAA0B,EAAE,KAAa,EAAE,OAAO,GAAG,QAAQ;QACvE,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAErD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;QAEjC,mCAAmC;QACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,KAAK,EAAE,IAAI;YACX,KAAK,EAAE,YAAY;YACnB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,OAAO;SACR,CAAC,CAAC;QAEH,6BAA6B;QAC7B,MAAM,KAAK,GAAqB;YAC9B,SAAS,EAAE,IAAI;YACf,QAAQ;YACR,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,OAAgC,EAAE,OAAO,GAAG,OAAO;QAC9D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,GAA2B,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAChE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,IAA0B;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,YAAY;QACV,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,IAA0B;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAK,GAAG,GAAG;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,eAAe;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,QAAQ,GAAG,GAA2B,CAAC;YAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YAC/E,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QACvE,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QAE/F,wDAAwD;QACxD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,sBAAsB,CAAC,QAA2C;QAChE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,yBAAyB,CAAC,QAA2C;QACnE,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO;YACL,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;YAC1B,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;SAC3B,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,IAAyD;QAChE,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;CACF;AA3JD,oCA2JC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/TraitService.ts"],"sourcesContent":["/**\n * TraitService - Gestion des traits d'organisme\n * Part du refactoring d'OrganismCore selon l'architecture hexagonale\n */\n\nimport { OrganismTraits } from '../../shared/types/organism';\n\nexport interface TraitUpdateEvent {\n  traitName: keyof OrganismTraits;\n  oldValue: number;\n  newValue: number;\n  timestamp: number;\n}\n\nexport interface TraitHistory {\n  trait: keyof OrganismTraits;\n  value: number;\n  timestamp: number;\n  trigger: string;\n}\n\nexport class TraitService {\n  private traits: OrganismTraits;\n  private history: TraitHistory[] = [];\n  private listeners: ((event: TraitUpdateEvent) => void)[] = [];\n\n  constructor(initialTraits?: Partial<OrganismTraits>) {\n    this.traits = {\n      curiosity: 0.5,\n      focus: 0.5,\n      rhythm: 0.5,\n      empathy: 0.5,\n      creativity: 0.5,\n      memory: 0.5,\n      intuition: 0.5,\n      resilience: 0.5,\n      adaptability: 0.5,\n      collaboration: 0.5,\n      ...initialTraits\n    };\n  }\n\n  /**\n   * Met à jour un trait spécifique\n   */\n  updateTrait(name: keyof OrganismTraits, value: number, trigger = 'manual'): void {\n    const oldValue = this.traits[name];\n    const clampedValue = Math.max(0, Math.min(1, value));\n    \n    this.traits[name] = clampedValue;\n    \n    // Enregistrement dans l'historique\n    this.history.push({\n      trait: name,\n      value: clampedValue,\n      timestamp: Date.now(),\n      trigger\n    });\n\n    // Notification des listeners\n    const event: TraitUpdateEvent = {\n      traitName: name,\n      oldValue,\n      newValue: clampedValue,\n      timestamp: Date.now()\n    };\n    \n    this.listeners.forEach(listener => listener(event));\n  }\n\n  /**\n   * Met à jour plusieurs traits simultanément\n   */\n  updateTraits(updates: Partial<OrganismTraits>, trigger = 'batch'): void {\n    Object.entries(updates).forEach(([key, value]) => {\n      if (typeof value === 'number') {\n        this.updateTrait(key as keyof OrganismTraits, value, trigger);\n      }\n    });\n  }\n\n  /**\n   * Obtient la valeur d'un trait\n   */\n  getTrait(name: keyof OrganismTraits): number {\n    return this.traits[name];\n  }\n\n  /**\n   * Obtient tous les traits\n   */\n  getAllTraits(): OrganismTraits {\n    return { ...this.traits };\n  }\n\n  /**\n   * Obtient l'historique d'un trait\n   */\n  getTraitHistory(name: keyof OrganismTraits): TraitHistory[] {\n    return this.history.filter(entry => entry.trait === name);\n  }\n\n  /**\n   * Obtient l'historique complet limité\n   */\n  getFullHistory(limit = 100): TraitHistory[] {\n    return this.history.slice(-limit);\n  }\n\n  /**\n   * Normalise tous les traits (les ramène dans [0,1])\n   */\n  normalizeTraits(): void {\n    Object.keys(this.traits).forEach(key => {\n      const traitKey = key as keyof OrganismTraits;\n      const value = this.traits[traitKey];\n      if (value < 0 || value > 1) {\n        this.updateTrait(traitKey, Math.max(0, Math.min(1, value)), 'normalization');\n      }\n    });\n  }\n\n  /**\n   * Calcule l'équilibre général des traits\n   */\n  calculateBalance(): number {\n    const values = Object.values(this.traits);\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    \n    // Plus la variance est faible, plus l'équilibre est bon\n    return Math.max(0, 1 - variance);\n  }\n\n  /**\n   * Ajoute un listener pour les changements de traits\n   */\n  addTraitChangeListener(listener: (event: TraitUpdateEvent) => void): void {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Supprime un listener\n   */\n  removeTraitChangeListener(listener: (event: TraitUpdateEvent) => void): void {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Nettoyage de l'historique ancien\n   */\n  cleanup(maxAge = 24 * 60 * 60 * 1000): void {\n    const cutoff = Date.now() - maxAge;\n    this.history = this.history.filter(entry => entry.timestamp > cutoff);\n  }\n\n  /**\n   * Sérialisation pour sauvegarde\n   */\n  toJSON(): { traits: OrganismTraits; history: TraitHistory[] } {\n    return {\n      traits: { ...this.traits },\n      history: [...this.history]\n    };\n  }\n\n  /**\n   * Restauration depuis JSON\n   */\n  fromJSON(data: { traits: OrganismTraits; history: TraitHistory[] }): void {\n    this.traits = { ...data.traits };\n    this.history = [...data.history];\n  }\n}"],"version":3}