35769f272cbcab24dd79d9611b5f3e68
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests de détection des vulnérabilités communes
 */
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
describe('Scan de vulnérabilités', () => {
    describe('Injection SQL/NoSQL', () => {
        it('détecte les requêtes potentiellement vulnérables', async () => {
            // Patterns d'injection SQL/NoSQL à éviter
            const sqlInjectionPatterns = [
                /\$\{.*\}/g, // Template literals non sécurisés
                /['"].*\+.*['"]/g, // Concaténation de strings
                /WHERE.*=.*\+/g, // WHERE clauses avec concaténation
                /\$ne\$|ne:|exists:/g // NoSQL injection patterns
            ];
            const srcDir = path_1.default.resolve(__dirname, '../../src');
            async function scanDirectory(dir) {
                const vulnerabilities = [];
                const entries = await fs_1.promises.readdir(dir, { withFileTypes: true });
                for (const entry of entries) {
                    const fullPath = path_1.default.join(dir, entry.name);
                    if (entry.isDirectory()) {
                        vulnerabilities.push(...await scanDirectory(fullPath));
                    }
                    else if (entry.name.endsWith('.ts') || entry.name.endsWith('.js')) {
                        try {
                            const content = await fs_1.promises.readFile(fullPath, 'utf-8');
                            sqlInjectionPatterns.forEach((pattern, index) => {
                                if (pattern.test(content)) {
                                    vulnerabilities.push(`Potential SQL injection in ${fullPath}: pattern ${index}`);
                                }
                            });
                        }
                        catch (error) {
                            // Ignore files that can't be read
                        }
                    }
                }
                return vulnerabilities;
            }
            const vulnerabilities = await scanDirectory(srcDir);
            // Les vulnérabilités détectées doivent être documentées et justifiées
            if (vulnerabilities.length > 0) {
                console.warn('Vulnérabilités potentielles détectées:', vulnerabilities);
                // Ne pas faire échouer le test automatiquement, mais alerter
            }
            expect(vulnerabilities).toBeDefined(); // Test always passes but logs warnings
        });
    });
    describe('Cross-Site Scripting (XSS)', () => {
        it('détecte innerHTML et eval non sécurisés', async () => {
            const xssPatterns = [
                /\.innerHTML\s*=/g,
                /\.outerHTML\s*=/g,
                /document\.write\(/g,
                /eval\(/g,
                /Function\(/g,
                /setTimeout\(.*string/g,
                /setInterval\(.*string/g
            ];
            // Mock file content with potential XSS
            const mockFileContent = `
        // Sécurisé
        element.textContent = userInput;
        element.setAttribute('title', escapeHtml(userInput));
        
        // Potentiellement vulnérable
        // element.innerHTML = userInput; // Cette ligne devrait être détectée
      `;
            let vulnerabilitiesFound = 0;
            xssPatterns.forEach(pattern => {
                if (pattern.test(mockFileContent)) {
                    vulnerabilitiesFound++;
                }
            });
            // Dans ce test, on s'attend à ne pas trouver de vulnérabilités car elles sont commentées
            expect(vulnerabilitiesFound).toBe(0);
        });
        it('valide l\'utilisation de sanitizers', () => {
            const sanitizationFunctions = [
                'escapeHtml',
                'sanitizeInput',
                'DOMPurify.sanitize',
                'validator.escape'
            ];
            const codeWithSanitization = `
        const safeContent = escapeHtml(userInput);
        element.textContent = safeContent;
      `;
            const hasSanitization = sanitizationFunctions.some(func => codeWithSanitization.includes(func));
            expect(hasSanitization).toBe(true);
        });
    });
    describe('Regex Denial of Service (ReDoS)', () => {
        it('détecte les regex potentiellement vulnérables', () => {
            const vulnerableRegexPatterns = [
                // Nested quantifiers
                /\(\.\*\)\+/,
                /\(\.\+\)\*/,
                /\(\.\*\)\{/,
                // Alternation with overlap
                /\(\w\+\)\|\(\w\+\.\*\)/,
                // Catastrophic backtracking patterns
                /\(\w\+\)\+/
            ];
            const potentialVulnerableRegex = [
                '(a+)+',
                '([a-zA-Z]+)*',
                '(a|a)*',
                '(a|a|b)*'
            ];
            potentialVulnerableRegex.forEach(regexStr => {
                vulnerableRegexPatterns.forEach(pattern => {
                    if (pattern.test(regexStr)) {
                        console.warn(`Regex potentiellement vulnérable: ${regexStr}`);
                    }
                });
            });
            // Test passes but warns about potential issues
            expect(potentialVulnerableRegex).toHaveLength(4);
        });
        it('teste la performance des regex utilisées', () => {
            const testInputs = [
                'a'.repeat(1000),
                'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!',
                'x'.repeat(10000)
            ];
            const safeRegex = /^[a-zA-Z0-9]+$/;
            testInputs.forEach(input => {
                const start = performance.now();
                safeRegex.test(input);
                const duration = performance.now() - start;
                // La regex ne doit pas prendre plus de 10ms
                expect(duration).toBeLessThan(10);
            });
        });
    });
    describe('Prototype Pollution', () => {
        it('détecte les accès dangereux au prototype', () => {
            const dangerousPatterns = [
                '__proto__',
                'constructor.prototype',
                'prototype.constructor'
            ];
            const suspiciousCode = `
        // Code sécurisé
        const obj = Object.create(null);
        obj.property = value;
        
        // Code potentiellement dangereux (commenté)
        // obj.__proto__ = maliciousObject;
      `;
            dangerousPatterns.forEach(pattern => {
                // Dans ce test, les patterns dangereux sont commentés
                const uncommentedCode = suspiciousCode.replace(/\/\/ /g, '');
                const hasUnsafeAccess = uncommentedCode.includes(pattern);
                if (hasUnsafeAccess) {
                    console.warn(`Accès prototype détecté: ${pattern}`);
                }
            });
            expect(suspiciousCode).toBeDefined();
        });
        it('valide la création d\'objets sécurisée', () => {
            // Méthodes sécurisées de création d'objets
            const safeObject1 = Object.create(null);
            const safeObject2 = {};
            const safeObject3 = new Map();
            expect(safeObject1).toBeDefined();
            expect(safeObject2).toBeDefined();
            expect(safeObject3).toBeDefined();
            // Vérifier que Object.create(null) n'a pas de prototype
            expect(Object.getPrototypeOf(safeObject1)).toBeNull();
        });
    });
    describe('Path Traversal', () => {
        it('détecte les tentatives de traversée de répertoires', () => {
            const maliciousPaths = [
                '../../../etc/passwd',
                '..\\..\\windows\\system32',
                '/etc/passwd',
                'C:\\Windows\\System32',
                '....//....//etc/passwd'
            ];
            const isPathSafe = (path) => {
                const normalized = path.normalize();
                const resolved = path.resolve(normalized);
                const allowedBasePath = '/allowed/directory';
                return resolved.startsWith(allowedBasePath);
            };
            maliciousPaths.forEach(maliciousPath => {
                expect(isPathSafe(maliciousPath)).toBe(false);
            });
            // Test avec des chemins légitimes
            const legitimatePaths = [
                'file.txt',
                'subdir/file.txt',
                './local/file.txt'
            ];
            legitimatePaths.forEach(legitimatePath => {
                // Ces tests passeront seulement si isPathSafe est bien implémenté
                expect(typeof isPathSafe(legitimatePath)).toBe('boolean');
            });
        });
    });
    describe('Insecure Dependencies', () => {
        it('vérifie les dépendances pour vulnérabilités connues', async () => {
            const packageJsonPath = path_1.default.resolve(__dirname, '../../package.json');
            const packageJson = require(packageJsonPath);
            const knownVulnerableDeps = [
                'lodash@<4.17.21',
                'moment@<2.29.4',
                'axios@<0.21.1',
                'serialize-javascript@<6.0.0'
            ];
            const dependencies = {
                ...packageJson.dependencies,
                ...packageJson.devDependencies
            };
            knownVulnerableDeps.forEach(vulnDep => {
                const [name, version] = vulnDep.split('@');
                if (dependencies[name]) {
                    console.warn(`Dépendance potentiellement vulnérable détectée: ${name}@${dependencies[name]}`);
                    // En production, on utiliserait npm audit ou snyk
                }
            });
            expect(dependencies).toBeDefined();
        });
    });
    describe('Information Disclosure', () => {
        it('vérifie qu\'aucune information sensible n\'est exposée', () => {
            const sensitivePatterns = [
                /password\s*[:=]\s*['"][^'"]+['"]/gi,
                /api[_-]?key\s*[:=]\s*['"][^'"]+['"]/gi,
                /secret\s*[:=]\s*['"][^'"]+['"]/gi,
                /token\s*[:=]\s*['"][^'"]+['"]/gi
            ];
            const codeExample = `
        // Sécurisé
        const config = {
          apiUrl: process.env.API_URL,
          debugMode: false
        };
        
        // Non sécurisé (éviter)
        // const config = { apiKey: "hardcoded-key-123" };
      `;
            sensitivePatterns.forEach(pattern => {
                const matches = codeExample.match(pattern);
                if (matches) {
                    console.warn('Information sensible potentiellement exposée:', matches);
                }
            });
            expect(codeExample).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,