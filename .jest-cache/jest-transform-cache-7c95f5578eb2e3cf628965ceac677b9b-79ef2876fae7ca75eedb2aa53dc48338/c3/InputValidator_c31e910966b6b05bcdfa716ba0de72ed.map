{"version":3,"names":["cov_14u5qd5l88","actualCoverage","s","secureLogger_1","require","ValidationError","Error","constructor","message","field","value","f","name","exports","InputValidator","sanitizeUserInput","input","maxLength","b","undefined","sanitized","String","trim","length","substring","logger","warn","originalLength","replace","pattern","XSS_PATTERNS","validateOrganismName","ORGANISM_NAME_REGEX","test","validateEmail","email","EMAIL_REGEX","includes","toLowerCase","validateMutationData","data","mutation","type","validTypes","strength","target","validateFilePath","path","PATH_TRAVERSAL_PATTERNS","SAFE_PATH_REGEX","validateJSON","jsonString","NOSQL_PATTERNS","parsed","JSON","parse","validateObjectForInjection","_error","validateUUID","uuid","UUID_REGEX","validateSessionId","sessionId","SESSION_ID_REGEX","validateApiParams","params","allowedParams","validated","paramsObj","key","Object","entries","Number","isFinite","validateUserPreferences","preferences","prefs","theme","validThemes","notifications","language","validLanguages","obj","depth","validateRegexSafety","timeoutMs","regex","RegExp","start","Date","now","duration","inputLength","error","escapeRegex","string","validateRateLimit","identifier","maxRequests","windowMs","requests","getRateLimitData","incrementRateLimit","rateLimitCache","get","validRequests","filter","timestamp","set","push","Map","sanitize"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/InputValidator.ts"],"sourcesContent":["/**\r\n * Validation et sanitisation centralisée des inputs utilisateur\r\n * Améliore la sécurité selon les recommandations d'audit\r\n */\r\nimport { logger } from '@/shared/utils/secureLogger';\r\n\r\nexport class ValidationError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public field?: string,\r\n    public value?: unknown\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n  }\r\n}\r\n\r\nexport class InputValidator {\r\n  private static readonly EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  private static readonly ORGANISM_NAME_REGEX = /^[a-zA-Z0-9\\s\\-_]{3,50}$/;\r\n  private static readonly UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\n  private static readonly SESSION_ID_REGEX = /^[a-f0-9]{32,}$/i;\r\n  private static readonly SAFE_PATH_REGEX = /^[a-zA-Z0-9._\\-\\/]+$/;\r\n  \r\n  // XSS patterns to detect and remove\r\n  private static readonly XSS_PATTERNS = [\r\n    /<script[^>]*>.*?<\\/script>/gi,\r\n    /<iframe[^>]*>.*?<\\/iframe>/gi,\r\n    /<object[^>]*>.*?<\\/object>/gi,\r\n    /<embed[^>]*>/gi,\r\n    /<form[^>]*>.*?<\\/form>/gi,\r\n    /javascript:/gi,\r\n    /vbscript:/gi,\r\n    /data:text\\/html/gi,\r\n    /on\\w+\\s*=/gi,\r\n    /<[^>]*\\s+on\\w+[^>]*>/gi\r\n  ];\r\n  \r\n  // NoSQL injection patterns\r\n  private static readonly NOSQL_PATTERNS = [\r\n    /\\$ne\\b/gi,\r\n    /\\$gt\\b/gi,\r\n    /\\$lt\\b/gi,\r\n    /\\$in\\b/gi,\r\n    /\\$nin\\b/gi,\r\n    /\\$regex\\b/gi,\r\n    /\\$where\\b/gi,\r\n    /\\$exists\\b/gi,\r\n    /\\$or\\b/gi,\r\n    /\\$and\\b/gi\r\n  ];\r\n  \r\n  // Path traversal patterns\r\n  private static readonly PATH_TRAVERSAL_PATTERNS = [\r\n    /\\.\\./g,\r\n    /%2e%2e/gi,\r\n    /%252e%252e/gi,\r\n    /\\.%2e/gi,\r\n    /%2e\\./gi,\r\n    /\\.\\\\\\./g,\r\n    /%5c\\.\\./gi,\r\n    /\\.\\.\\//g,\r\n    /\\.\\.%2f/gi\r\n  ];\r\n\r\n  /**\r\n   * Sanitise les inputs de base en supprimant les caractères dangereux\r\n   */\r\n  static sanitizeUserInput(input: unknown, maxLength: number = 1000): string {\r\n    if (input === null || input === undefined) {\r\n      return '';\r\n    }\r\n\r\n    let sanitized = String(input).trim();\r\n\r\n    // Limiter la longueur pour éviter les attaques par buffer overflow\r\n    if (sanitized.length > maxLength) {\r\n      sanitized = sanitized.substring(0, maxLength);\r\n      logger.warn('Input truncated due to length limit', { \r\n        originalLength: String(input).length, \r\n        maxLength \r\n      }, 'input-validation');\r\n    }\r\n\r\n    // Supprimer les caractères de contrôle potentiellement dangereux\r\n    sanitized = sanitized.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, '');\r\n\r\n    // Encoder les caractères HTML de base\r\n    sanitized = sanitized\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#x27;')\r\n      .replace(/\\//g, '&#x2F;');\r\n\r\n    // Supprimer les patterns XSS\r\n    for (const pattern of this.XSS_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, '');\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Valide et sanitise les noms d'organismes\r\n   */\r\n  static validateOrganismName(name: unknown): string {\r\n    if (typeof name !== 'string') {\r\n      throw new ValidationError('Organism name must be a string', 'name', name);\r\n    }\r\n\r\n    const sanitized = this.sanitizeUserInput(name, 50);\r\n    \r\n    if (sanitized.length < 3) {\r\n      throw new ValidationError('Organism name must be at least 3 characters long', 'name', sanitized);\r\n    }\r\n\r\n    if (!this.ORGANISM_NAME_REGEX.test(sanitized)) {\r\n      throw new ValidationError('Organism name contains invalid characters', 'name', sanitized);\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Valide les adresses email\r\n   */\r\n  static validateEmail(email: unknown): string {\r\n    if (typeof email !== 'string') {\r\n      throw new ValidationError('Email must be a string', 'email', email);\r\n    }\r\n\r\n    const sanitized = this.sanitizeUserInput(email, 254);\r\n    \r\n    if (!this.EMAIL_REGEX.test(sanitized)) {\r\n      throw new ValidationError('Invalid email format', 'email', sanitized);\r\n    }\r\n\r\n    // Vérifications de sécurité supplémentaires\r\n    if (sanitized.includes('javascript:') || sanitized.includes('<script>')) {\r\n      throw new ValidationError('Email contains potentially malicious content', 'email', sanitized);\r\n    }\r\n\r\n    return sanitized.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Valide les données de mutation d'organisme\r\n   */\r\n  static validateMutationData(data: unknown): MutationData {\r\n    if (!data || typeof data !== 'object') {\r\n      throw new ValidationError('Mutation data must be an object', 'mutationData', data);\r\n    }\r\n\r\n    const mutation = data as any;\r\n\r\n    // Valider le type\r\n    if (typeof mutation.type !== 'string') {\r\n      throw new ValidationError('Mutation type must be a string', 'type', mutation.type);\r\n    }\r\n    \r\n    const validTypes = ['genetic', 'behavioral', 'neural', 'adaptive', 'environmental'];\r\n    if (!validTypes.includes(mutation.type)) {\r\n      throw new ValidationError('Invalid mutation type', 'type', mutation.type);\r\n    }\r\n\r\n    // Valider la force\r\n    if (typeof mutation.strength !== 'number') {\r\n      throw new ValidationError('Mutation strength must be a number', 'strength', mutation.strength);\r\n    }\r\n    \r\n    if (mutation.strength < 0 || mutation.strength > 1) {\r\n      throw new ValidationError('Mutation strength must be between 0 and 1', 'strength', mutation.strength);\r\n    }\r\n\r\n    // Valider la cible (optionnelle)\r\n    let target: string | undefined;\r\n    if (mutation.target !== undefined) {\r\n      if (typeof mutation.target !== 'string') {\r\n        throw new ValidationError('Mutation target must be a string', 'target', mutation.target);\r\n      }\r\n      target = this.sanitizeUserInput(mutation.target, 100);\r\n    }\r\n\r\n    return {\r\n      type: mutation.type,\r\n      strength: mutation.strength,\r\n      target: target || ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Valide et sanitise les chemins de fichiers\r\n   */\r\n  static validateFilePath(path: unknown): string {\r\n    if (typeof path !== 'string') {\r\n      throw new ValidationError('File path must be a string', 'path', path);\r\n    }\r\n\r\n    // Détecter les tentatives de path traversal\r\n    for (const pattern of this.PATH_TRAVERSAL_PATTERNS) {\r\n      if (pattern.test(path)) {\r\n        throw new ValidationError('Path traversal attempt detected', 'path', path);\r\n      }\r\n    }\r\n\r\n    // Sanitiser le chemin\r\n    let sanitized = this.sanitizeUserInput(path, 500);\r\n\r\n    // Supprimer les caractères potentiellement dangereux pour les systèmes de fichiers\r\n    sanitized = sanitized.replace(/[<>:\"|?*\\x00-\\x1f]/g, '_');\r\n\r\n    // Vérifier que le chemin est dans la liste des caractères sûrs\r\n    if (!this.SAFE_PATH_REGEX.test(sanitized)) {\r\n      throw new ValidationError('Path contains unsafe characters', 'path', sanitized);\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Valide les objets JSON en détectant les injections NoSQL\r\n   */\r\n  static validateJSON(jsonString: unknown): any {\r\n    if (typeof jsonString !== 'string') {\r\n      throw new ValidationError('JSON input must be a string', 'json', jsonString);\r\n    }\r\n\r\n    // Détecter les patterns d'injection NoSQL\r\n    for (const pattern of this.NOSQL_PATTERNS) {\r\n      if (pattern.test(jsonString)) {\r\n        throw new ValidationError('Potential NoSQL injection detected', 'json', jsonString);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const parsed = JSON.parse(jsonString);\r\n      \r\n      // Vérifier récursivement les objets parsés\r\n      this.validateObjectForInjection(parsed);\r\n      \r\n      return parsed;\r\n    } catch (_error) {\r\n      throw new ValidationError('Invalid JSON format', 'json', jsonString);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valide les UUIDs\r\n   */\r\n  static validateUUID(uuid: unknown): string {\r\n    if (typeof uuid !== 'string') {\r\n      throw new ValidationError('UUID must be a string', 'uuid', uuid);\r\n    }\r\n\r\n    if (!this.UUID_REGEX.test(uuid)) {\r\n      throw new ValidationError('Invalid UUID format', 'uuid', uuid);\r\n    }\r\n\r\n    return uuid.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Valide les IDs de session\r\n   */\r\n  static validateSessionId(sessionId: unknown): string {\r\n    if (typeof sessionId !== 'string') {\r\n      throw new ValidationError('Session ID must be a string', 'sessionId', sessionId);\r\n    }\r\n\r\n    if (!this.SESSION_ID_REGEX.test(sessionId)) {\r\n      throw new ValidationError('Invalid session ID format', 'sessionId', sessionId);\r\n    }\r\n\r\n    if (sessionId.length < 32 || sessionId.length > 128) {\r\n      throw new ValidationError('Session ID length must be between 32 and 128 characters', 'sessionId', sessionId);\r\n    }\r\n\r\n    return sessionId.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Valide les paramètres d'API avec whitelist\r\n   */\r\n  static validateApiParams(params: unknown, allowedParams: string[]): Record<string, any> {\r\n    if (!params || typeof params !== 'object') {\r\n      throw new ValidationError('API parameters must be an object', 'params', params);\r\n    }\r\n\r\n    const validated: Record<string, any> = {};\r\n    const paramsObj = params as Record<string, any>;\r\n\r\n    for (const [key, value] of Object.entries(paramsObj)) {\r\n      if (!allowedParams.includes(key)) {\r\n        logger.warn('Unauthorized parameter filtered out', { key }, 'input-validation');\r\n        continue;\r\n      }\r\n\r\n      // Sanitiser la valeur selon son type\r\n      if (typeof value === 'string') {\r\n        validated[key] = this.sanitizeUserInput(value);\r\n      } else if (typeof value === 'number') {\r\n        if (!Number.isFinite(value)) {\r\n          throw new ValidationError(`Parameter ${key} must be a finite number`, key, value);\r\n        }\r\n        validated[key] = value;\r\n      } else if (typeof value === 'boolean') {\r\n        validated[key] = value;\r\n      } else {\r\n        throw new ValidationError(`Parameter ${key} has unsupported type`, key, value);\r\n      }\r\n    }\r\n\r\n    return validated;\r\n  }\r\n\r\n  /**\r\n   * Valide les données de configuration utilisateur\r\n   */\r\n  static validateUserPreferences(preferences: unknown): UserPreferences {\r\n    if (!preferences || typeof preferences !== 'object') {\r\n      throw new ValidationError('User preferences must be an object', 'preferences', preferences);\r\n    }\r\n\r\n    const prefs = preferences as any;\r\n    const validated: UserPreferences = {};\r\n\r\n    // Thème\r\n    if (prefs.theme !== undefined) {\r\n      if (typeof prefs.theme !== 'string') {\r\n        throw new ValidationError('Theme must be a string', 'theme', prefs.theme);\r\n      }\r\n      const validThemes = ['light', 'dark', 'auto'];\r\n      if (!validThemes.includes(prefs.theme)) {\r\n        throw new ValidationError('Invalid theme value', 'theme', prefs.theme);\r\n      }\r\n      validated.theme = prefs.theme;\r\n    }\r\n\r\n    // Notifications\r\n    if (prefs.notifications !== undefined) {\r\n      if (typeof prefs.notifications !== 'boolean') {\r\n        throw new ValidationError('Notifications setting must be a boolean', 'notifications', prefs.notifications);\r\n      }\r\n      validated.notifications = prefs.notifications;\r\n    }\r\n\r\n    // Langue\r\n    if (prefs.language !== undefined) {\r\n      if (typeof prefs.language !== 'string') {\r\n        throw new ValidationError('Language must be a string', 'language', prefs.language);\r\n      }\r\n      const validLanguages = ['en', 'fr', 'es', 'de', 'it'];\r\n      if (!validLanguages.includes(prefs.language)) {\r\n        throw new ValidationError('Invalid language code', 'language', prefs.language);\r\n      }\r\n      validated.language = prefs.language;\r\n    }\r\n\r\n    return validated;\r\n  }\r\n\r\n  /**\r\n   * Recherche récursive d'injections dans les objets\r\n   */\r\n  private static validateObjectForInjection(obj: Record<string, unknown>, depth: number = 0): void {\r\n    // Limiter la profondeur pour éviter les attaques par récursion\r\n    if (depth > 10) {\r\n      throw new ValidationError('Object nesting too deep', 'object', obj);\r\n    }\r\n\r\n    if (obj && typeof obj === 'object') {\r\n      for (const [key, value] of Object.entries(obj)) {\r\n        // Vérifier les clés pour les opérateurs NoSQL\r\n        for (const pattern of this.NOSQL_PATTERNS) {\r\n          if (pattern.test(key)) {\r\n            throw new ValidationError('NoSQL injection pattern detected in object key', 'key', key);\r\n          }\r\n        }\r\n\r\n        // Vérifier récursivement les valeurs\r\n        if (typeof value === 'string') {\r\n          for (const pattern of this.NOSQL_PATTERNS) {\r\n            if (pattern.test(value)) {\r\n              throw new ValidationError('NoSQL injection pattern detected in value', 'value', value);\r\n            }\r\n          }\r\n        } else if (typeof value === 'object' && value !== null) {\r\n          this.validateObjectForInjection(value as Record<string, unknown>, depth + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valide la sécurité des regex pour éviter ReDoS\r\n   */\r\n  static validateRegexSafety(pattern: string, input: string, timeoutMs: number = 100): boolean {\r\n    try {\r\n      const regex = new RegExp(pattern);\r\n      const start = Date.now();\r\n      \r\n      regex.test(input);\r\n      \r\n      const duration = Date.now() - start;\r\n      \r\n      if (duration > timeoutMs) {\r\n        logger.warn('Potential ReDoS detected', { \r\n          pattern, \r\n          inputLength: input.length, \r\n          duration \r\n        }, 'input-validation');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (_error) {\r\n      logger.error('Invalid regex pattern', { pattern, error: _error }, 'input-validation');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Échappe les caractères spéciaux pour utilisation dans regex\r\n   */\r\n  static escapeRegex(string: string): string {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * Valide les limites de taux (rate limiting)\r\n   */\r\n  static validateRateLimit(\r\n    identifier: string, \r\n    maxRequests: number = 100, \r\n    windowMs: number = 60000\r\n  ): boolean {\r\n    // Cette implémentation basique pourrait être étendue avec Redis\r\n    const now = Date.now();\r\n    const key = `rate_limit_${identifier}`;\r\n    \r\n    // Simulation d'un stockage en mémoire (à remplacer par Redis en production)\r\n    const requests = this.getRateLimitData(key, now, windowMs);\r\n    \r\n    if (requests >= maxRequests) {\r\n      logger.warn('Rate limit exceeded', { \r\n        identifier: this.sanitizeUserInput(identifier, 50),\r\n        requests,\r\n        maxRequests,\r\n        windowMs\r\n      }, 'input-validation');\r\n      return false;\r\n    }\r\n    \r\n    this.incrementRateLimit(key, now);\r\n    return true;\r\n  }\r\n\r\n  private static rateLimitCache = new Map<string, number[]>();\r\n\r\n  private static getRateLimitData(key: string, now: number, windowMs: number): number {\r\n    const requests = this.rateLimitCache.get(key) || [];\r\n    // Nettoyer les anciennes requêtes\r\n    const validRequests = requests.filter(timestamp => now - timestamp < windowMs);\r\n    this.rateLimitCache.set(key, validRequests);\r\n    return validRequests.length;\r\n  }\r\n\r\n  private static incrementRateLimit(key: string, now: number): void {\r\n    const requests = this.rateLimitCache.get(key) || [];\r\n    requests.push(now);\r\n    this.rateLimitCache.set(key, requests);\r\n  }\r\n}\r\n\r\n// Types d'interface\r\nexport interface MutationData {\r\n  type: string;\r\n  strength: number;\r\n  target?: string;\r\n}\r\n\r\nexport interface UserPreferences {\r\n  theme?: 'light' | 'dark' | 'auto';\r\n  notifications?: boolean;\r\n  language?: string;\r\n}\r\n\r\n// Fonctions utilitaires exportées\r\nexport const sanitize = InputValidator.sanitizeUserInput;\r\nexport const validateEmail = InputValidator.validateEmail;\r\nexport const validateJSON = InputValidator.validateJSON;\r\nexport const validateOrganismName = InputValidator.validateOrganismName;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}