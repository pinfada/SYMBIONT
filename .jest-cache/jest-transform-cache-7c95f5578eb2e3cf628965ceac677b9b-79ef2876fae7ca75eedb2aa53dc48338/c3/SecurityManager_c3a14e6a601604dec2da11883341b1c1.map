{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/SecurityManager.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/SecurityManager.ts"],"sourcesContent":["/**\r\n * SecurityManager - Sécurité avancée (chiffrement, anonymisation, contrôle d'accès)\r\n */\r\nimport { BehaviorPattern } from '../shared/types/organism'\r\nimport { swCryptoAPI } from './service-worker-adapter'\r\nimport { logger } from '@shared/utils/secureLogger';\r\n\r\nexport class SecurityManager {\r\n  private encryptionKey: CryptoKey | null = null\r\n  private keyPromise: Promise<CryptoKey> | null = null\r\n\r\n  constructor(skipAutoInit: boolean = false) {\r\n    // Initialisation sécurisée avec génération de clé WebCrypto\r\n    if (!skipAutoInit) {\r\n      this.initializeSecureKey()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialise une clé de chiffrement sécurisée avec WebCrypto\r\n   */\r\n  private async initializeSecureKey(): Promise<void> {\r\n    if (this.keyPromise) return\r\n    \r\n    this.keyPromise = this.generateSecureKey()\r\n    this.encryptionKey = await this.keyPromise\r\n  }\r\n\r\n  /**\r\n   * Génère une clé AES-GCM 256 bits sécurisée\r\n   */\r\n  private async generateSecureKey(): Promise<CryptoKey> {\r\n    if (!swCryptoAPI?.subtle) {\r\n      logger.warn('WebCrypto API non disponible - mode développement activé (NON SÉCURISÉ)');\r\n      // Retourner une clé factice pour le développement\r\n      return this.createDevelopmentKey();\r\n    }\r\n\r\n    // Tentative de récupération d'une clé stockée ou génération nouvelle\r\n    const storedKeyData = await this.getStoredKey()\r\n    \r\n    if (storedKeyData) {\r\n      return await swCryptoAPI.subtle.importKey(\r\n        'raw',\r\n        storedKeyData,\r\n        { name: 'AES-GCM' },\r\n        false,\r\n        ['encrypt', 'decrypt']\r\n      )\r\n    }\r\n\r\n    // Génération d'une nouvelle clé sécurisée\r\n    const key = await swCryptoAPI.subtle.generateKey(\r\n      { name: 'AES-GCM', length: 256 },\r\n      true, // Extractible pour stockage\r\n      ['encrypt', 'decrypt']\r\n    )\r\n\r\n    // Stockage sécurisé de la clé\r\n    await this.storeKey(key)\r\n    \r\n    return key\r\n  }\r\n\r\n  /**\r\n   * Crée une clé factice pour le développement (NON SÉCURISÉ)\r\n   */\r\n  private createDevelopmentKey(): CryptoKey {\r\n    // Clé factice pour éviter les erreurs en développement\r\n    // ATTENTION: Cette clé n'est PAS sécurisée et ne doit jamais être utilisée en production\r\n    return {\r\n      type: 'secret',\r\n      extractable: false,\r\n      algorithm: { name: 'AES-GCM' },\r\n      usages: ['encrypt', 'decrypt']\r\n    } as CryptoKey;\r\n  }\r\n\r\n  /**\r\n   * Récupère la clé stockée de manière sécurisée\r\n   */\r\n  private async getStoredKey(): Promise<ArrayBuffer | null> {\r\n    try {\r\n      return new Promise((resolve) => {\r\n        chrome.storage.local.get(['symbiont_key_v2'], (result) => {\r\n          if (result.symbiont_key_v2) {\r\n            const keyData = new Uint8Array(result.symbiont_key_v2)\r\n            resolve(keyData.buffer)\r\n          } else {\r\n            resolve(null)\r\n          }\r\n        })\r\n      })\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stocke la clé de manière sécurisée\r\n   */\r\n  private async storeKey(key: CryptoKey): Promise<void> {\r\n    try {\r\n      // En mode développement, ne pas essayer d'exporter la clé factice\r\n      if (!swCryptoAPI?.subtle) {\r\n        logger.warn('Mode développement: pas de stockage de clé réel');\r\n        return;\r\n      }\r\n      \r\n      const keyData = await swCryptoAPI.subtle.exportKey('raw', key)\r\n      const keyArray = Array.from(new Uint8Array(keyData))\r\n      \r\n      chrome.storage.local.set({ \r\n        symbiont_key_v2: keyArray,\r\n        symbiont_key_created: Date.now()\r\n      })\r\n    } catch (error) {\r\n      logger.error('Erreur lors du stockage de la clé:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Garantit que la clé est initialisée avant utilisation\r\n   */\r\n  private async ensureKeyReady(): Promise<CryptoKey> {\r\n    if (!this.encryptionKey) {\r\n      await this.initializeSecureKey()\r\n    }\r\n    \r\n    if (!this.encryptionKey) {\r\n      throw new Error('Impossible d\\'initialiser la clé de chiffrement')\r\n    }\r\n    \r\n    return this.encryptionKey\r\n  }\r\n\r\n  /**\r\n   * Chiffre des données sensibles avec AES-GCM sécurisé\r\n   */\r\n  async encryptSensitiveData(data: any): Promise<string> {\r\n    if (!swCryptoAPI?.subtle) {\r\n      logger.warn('WebCrypto API non disponible - chiffrement factice pour développement');\r\n      // Mode développement : pas de chiffrement réel mais évite les erreurs\r\n      return 'DEV_MODE:' + btoa(JSON.stringify(data));\r\n    }\r\n\r\n    try {\r\n      const key = await this.ensureKeyReady()\r\n      const enc = new TextEncoder()\r\n      const iv = swCryptoAPI.getRandomValues(new Uint8Array(12))\r\n      const encoded = enc.encode(JSON.stringify(data))\r\n      \r\n      const ciphertext = await swCryptoAPI.subtle.encrypt(\r\n        { name: 'AES-GCM', iv },\r\n        key,\r\n        encoded\r\n      )\r\n      \r\n      // Concatène IV + ciphertext en base64\r\n      const buf = new Uint8Array(iv.length + ciphertext.byteLength)\r\n      buf.set(iv, 0)\r\n      buf.set(new Uint8Array(ciphertext), iv.length)\r\n      return btoa(String.fromCharCode(...buf))\r\n    } catch (error) {\r\n      logger.error('Erreur de chiffrement:', error)\r\n      throw new Error('Échec du chiffrement des données sensibles')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Déchiffre des données sensibles avec AES-GCM sécurisé\r\n   */\r\n  async decryptSensitiveData(data: unknown): Promise<any> {\r\n    if (typeof data !== 'string') {\r\n      throw new Error('decryptSensitiveData attend une chaîne de caractères.')\r\n    }\r\n\r\n    // Gestion du mode développement\r\n    if (data.startsWith('DEV_MODE:')) {\r\n      logger.warn('Déchiffrement en mode développement (non sécurisé)');\r\n      try {\r\n        return JSON.parse(atob(data.substring(9)));\r\n      } catch (error) {\r\n        logger.error('Erreur déchiffrement mode développement:', error);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (!swCryptoAPI?.subtle) {\r\n      logger.warn('WebCrypto API non disponible - déchiffrement factice pour développement');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const key = await this.ensureKeyReady()\r\n      const bin = Uint8Array.from(atob(String(data)), c => c.charCodeAt(0))\r\n      const iv = bin.slice(0, 12)\r\n      const ciphertext = bin.slice(12)\r\n      \r\n      const plainBuffer = await swCryptoAPI.subtle.decrypt(\r\n        { name: 'AES-GCM', iv },\r\n        key,\r\n        ciphertext\r\n      )\r\n      \r\n      const plainText = new TextDecoder().decode(plainBuffer)\r\n      return JSON.parse(plainText)\r\n    } catch (error) {\r\n      logger.error('Erreur de déchiffrement:', error)\r\n      throw new Error('Échec du déchiffrement des données - données corrompues ou clé invalide')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Anonymise un pattern comportemental (suppression PII, hashage sécurisé)\r\n   */\r\n  async anonymizeForSharing(data: BehaviorPattern): Promise<any> {\r\n    const anonymized = { ...data }\r\n    \r\n    // Suppression des URLs sensibles\r\n    if ('url' in anonymized) {\r\n      anonymized.url = 'anonymized'\r\n    }\r\n    \r\n    // Hashage sécurisé des identifiants\r\n    if ('userId' in anonymized && typeof anonymized.userId === 'string') {\r\n      anonymized.userId = await this.hash(anonymized.userId)\r\n    }\r\n    \r\n    if ('id' in anonymized && typeof anonymized.id === 'string') {\r\n      anonymized.id = await this.hash(anonymized.id)\r\n    }\r\n    \r\n    // Suppression d'autres données personnelles potentielles (RGPD)\r\n    const sensitiveFields = [\r\n      'email', 'name', 'address', 'phone', 'ip', \r\n      'ssn', 'creditCard', 'passport', 'nationalId',\r\n      'birthDate', 'age', 'location', 'coordinates',\r\n      'biometric', 'medical', 'financial', 'salary'\r\n    ]\r\n    sensitiveFields.forEach(field => {\r\n      if (field in anonymized) {\r\n        delete (anonymized as any)[field]\r\n      }\r\n    })\r\n    \r\n    // Généralisation des timestamps (précision à l'heure)\r\n    if ('timestamp' in anonymized && typeof anonymized.timestamp === 'number') {\r\n      anonymized.timestamp = Math.floor(anonymized.timestamp / (60 * 60 * 1000)) * (60 * 60 * 1000)\r\n    }\r\n    \r\n    return anonymized\r\n  }\r\n\r\n  /**\r\n   * Version synchrone pour compatibilité (utilise hashSync)\r\n   */\r\n  anonymizeForSharingSync(data: BehaviorPattern): any {\r\n    const anonymized = { ...data }\r\n    if ('url' in anonymized) anonymized.url = 'anonymized'\r\n    if ('userId' in anonymized && typeof anonymized.userId === 'string') anonymized.userId = this.hashSync(anonymized.userId)\r\n    if ('id' in anonymized && typeof anonymized.id === 'string') anonymized.id = this.hashSync(anonymized.id)\r\n    return anonymized\r\n  }\r\n\r\n  /**\r\n   * Contrôle d'accès par rôle (user/admin), ressource, etc.\r\n   */\r\n  validateDataAccess(request: { userId: string; resource: string; role?: 'user' | 'admin' }, requiredRole: 'user' | 'admin' = 'user'): boolean {\r\n    if (!request.userId || !request.resource) return false\r\n    if (requiredRole === 'admin' && request.role !== 'admin') return false\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Hash cryptographique SHA-256 pour anonymisation sécurisée\r\n   */\r\n  async hash(str: string): Promise<string> {\r\n    if (!swCryptoAPI?.subtle) {\r\n      // Fallback simple en cas d'indisponibilité de WebCrypto\r\n      let hash = 0\r\n      for (let i = 0; i < str.length; i++) {\r\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\r\n        hash |= 0\r\n      }\r\n      return btoa(hash.toString())\r\n    }\r\n\r\n    try {\r\n      const encoder = new TextEncoder()\r\n      const data = encoder.encode(str)\r\n      const hashBuffer = await swCryptoAPI.subtle.digest('SHA-256', data)\r\n      const hashArray = new Uint8Array(hashBuffer)\r\n      \r\n      // Conversion en base64 pour un hash compact\r\n      return btoa(String.fromCharCode(...hashArray))\r\n    } catch (error) {\r\n      logger.error('Erreur de hashage:', error)\r\n      throw new Error('Échec du hashage sécurisé')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Version synchrone du hash pour compatibilité (non recommandée pour nouveau code)\r\n   */\r\n  hashSync(str: string): string {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n      hash = ((hash << 5) - hash) + str.charCodeAt(i)\r\n      hash |= 0\r\n    }\r\n    return btoa(hash.toString())\r\n  }\r\n} "],"version":3}