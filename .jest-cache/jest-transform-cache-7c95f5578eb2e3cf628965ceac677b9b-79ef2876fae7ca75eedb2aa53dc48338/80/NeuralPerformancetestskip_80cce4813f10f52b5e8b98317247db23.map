{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/NeuralPerformance.test.skip.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/NeuralPerformance.test.skip.ts"],"sourcesContent":["import { NeuralMeshAsync } from '../src/core/NeuralMeshAsync';\r\nimport { NeuralMesh } from '../src/core/NeuralMesh';\r\n\r\ndescribe.skip('Neural Performance Tests', () => {\r\n  let asyncMesh: NeuralMeshAsync;\r\n  let syncMesh: NeuralMesh;\r\n  \r\n  beforeEach(() => {\r\n    asyncMesh = new NeuralMeshAsync('test-network');\r\n    syncMesh = new NeuralMesh();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    if (asyncMesh) {\r\n      await asyncMesh.suspend();\r\n    }\r\n  });\r\n\r\n  it('should initialize within reasonable time', async () => {\r\n    const startTime = performance.now();\r\n    await asyncMesh.initialize();\r\n    const endTime = performance.now();\r\n    \r\n    const initTime = endTime - startTime;\r\n    expect(initTime).toBeLessThan(1000); // Should init within 1 second\r\n  });\r\n\r\n  it('should track performance metrics', async () => {\r\n    await asyncMesh.initialize();\r\n    \r\n    // Stimulate network\r\n    asyncMesh.stimulate('sensory_input', 0.8);\r\n    asyncMesh.stimulate('memory_input', 0.6);\r\n    \r\n    // Perform propagation\r\n    await asyncMesh.propagate();\r\n    \r\n    const metrics = asyncMesh.getPerformanceMetrics();\r\n    expect(metrics.operationCount).toBeGreaterThan(0);\r\n    expect(metrics.lastPropagationTime).toBeGreaterThanOrEqual(0);\r\n    expect(metrics.averageProcessingTime).toBeGreaterThanOrEqual(0);\r\n  });\r\n\r\n  it('should handle mutations efficiently', async () => {\r\n    await asyncMesh.initialize();\r\n    \r\n    const startTime = performance.now();\r\n    await asyncMesh.mutate(0.1);\r\n    const endTime = performance.now();\r\n    \r\n    expect(endTime - startTime).toBeLessThan(100); // Should be fast\r\n  });\r\n\r\n  it('should report memory usage', async () => {\r\n    await asyncMesh.initialize();\r\n    \r\n    const memoryUsage = await asyncMesh.getMemoryUsage();\r\n    expect(memoryUsage).toBeGreaterThan(0);\r\n    expect(memoryUsage).toBeLessThanOrEqual(1); // Normalized to 0-1\r\n  });\r\n\r\n  it('should report CPU usage', async () => {\r\n    await asyncMesh.initialize();\r\n    \r\n    const cpuUsage = await asyncMesh.getCPUUsage();\r\n    expect(cpuUsage).toBeGreaterThanOrEqual(0);\r\n    expect(cpuUsage).toBeLessThanOrEqual(1); // Normalized to 0-1\r\n  });\r\n\r\n  it('should handle large networks', async () => {\r\n    // Create a larger network\r\n    for (let i = 0; i < 50; i++) {\r\n      asyncMesh.addNode(`node_${i}`, i < 10 ? 'input' : i > 40 ? 'output' : 'hidden');\r\n    }\r\n    \r\n    // Add connections\r\n    for (let i = 0; i < 40; i++) {\r\n      for (let j = 10; j < 50; j++) {\r\n        if (Math.random() < 0.2) { // 20% connectivity\r\n          asyncMesh.addConnection(`node_${i}`, `node_${j}`, Math.random() - 0.5);\r\n        }\r\n      }\r\n    }\r\n    \r\n    await asyncMesh.initialize();\r\n    \r\n    const startTime = performance.now();\r\n    await asyncMesh.propagate();\r\n    const endTime = performance.now();\r\n    \r\n    // Should complete within reasonable time\r\n    expect(endTime - startTime).toBeLessThan(300); // 300ms max\r\n  });\r\n\r\n  it('should maintain worker readiness status', async () => {\r\n    await asyncMesh.initialize();\r\n    \r\n    const metrics = asyncMesh.getPerformanceMetrics();\r\n    expect(typeof metrics.workerReady).toBe('boolean');\r\n  });\r\n}); "],"version":3}