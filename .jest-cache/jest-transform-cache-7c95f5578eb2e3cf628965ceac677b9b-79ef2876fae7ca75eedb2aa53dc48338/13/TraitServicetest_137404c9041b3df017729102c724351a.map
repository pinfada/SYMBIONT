{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/core/services/TraitService.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/core/services/TraitService.test.ts"],"sourcesContent":["/**\n * Tests pour TraitService - Service de gestion des traits d'organisme\n */\n\nimport { TraitService } from '../../../src/core/services/TraitService';\nimport { OrganismTraits } from '../../../src/shared/types/organism';\n\ndescribe('TraitService', () => {\n  let traitService: TraitService;\n\n  beforeEach(() => {\n    traitService = new TraitService();\n  });\n\n  afterEach(() => {\n    traitService.cleanup();\n  });\n\n  describe('Initialization', () => {\n    test('should initialize with default traits', () => {\n      const traits = traitService.getAllTraits();\n      \n      expect(traits.curiosity).toBe(0.5);\n      expect(traits.focus).toBe(0.5);\n      expect(traits.empathy).toBe(0.5);\n      expect(Object.keys(traits)).toHaveLength(10);\n    });\n\n    test('should initialize with custom traits', () => {\n      const customTraits: Partial<OrganismTraits> = {\n        curiosity: 0.8,\n        creativity: 0.9\n      };\n      \n      const service = new TraitService(customTraits);\n      const traits = service.getAllTraits();\n      \n      expect(traits.curiosity).toBe(0.8);\n      expect(traits.creativity).toBe(0.9);\n      expect(traits.focus).toBe(0.5); // Valeur par dÃ©faut\n      \n      service.cleanup();\n    });\n  });\n\n  describe('Trait Updates', () => {\n    test('should update a single trait', () => {\n      traitService.updateTrait('curiosity', 0.7);\n      \n      expect(traitService.getTrait('curiosity')).toBe(0.7);\n    });\n\n    test('should clamp trait values between 0 and 1', () => {\n      traitService.updateTrait('curiosity', 1.5);\n      expect(traitService.getTrait('curiosity')).toBe(1);\n      \n      traitService.updateTrait('focus', -0.5);\n      expect(traitService.getTrait('focus')).toBe(0);\n    });\n\n    test('should update multiple traits', () => {\n      const updates: Partial<OrganismTraits> = {\n        curiosity: 0.8,\n        creativity: 0.6,\n        empathy: 0.9\n      };\n      \n      traitService.updateTraits(updates);\n      \n      expect(traitService.getTrait('curiosity')).toBe(0.8);\n      expect(traitService.getTrait('creativity')).toBe(0.6);\n      expect(traitService.getTrait('empathy')).toBe(0.9);\n    });\n\n    test('should normalize traits to valid range', () => {\n      // Force des valeurs invalides\n      traitService.updateTrait('curiosity', 2.0);\n      traitService.updateTrait('focus', -1.0);\n      \n      traitService.normalizeTraits();\n      \n      expect(traitService.getTrait('curiosity')).toBe(1.0);\n      expect(traitService.getTrait('focus')).toBe(0.0);\n    });\n  });\n\n  describe('History Tracking', () => {\n    test('should track trait change history', () => {\n      traitService.updateTrait('curiosity', 0.7, 'test_trigger');\n      traitService.updateTrait('curiosity', 0.8, 'test_trigger');\n      \n      const history = traitService.getTraitHistory('curiosity');\n      \n      expect(history).toHaveLength(2);\n      expect(history[0].value).toBe(0.7);\n      expect(history[1].value).toBe(0.8);\n      expect(history[0].trigger).toBe('test_trigger');\n    });\n\n    test('should get full history with limit', () => {\n      // Ajoute plusieurs changements\n      for (let i = 0; i < 20; i++) {\n        traitService.updateTrait('curiosity', i / 20);\n      }\n      \n      const history = traitService.getFullHistory(10);\n      expect(history).toHaveLength(10);\n    });\n\n    test('should cleanup old history', () => {\n      traitService.updateTrait('curiosity', 0.7);\n      \n      // Force un timestamp ancien\n      const history = traitService.getTraitHistory('curiosity');\n      if (history.length > 0) {\n        history[0].timestamp = Date.now() - (25 * 60 * 60 * 1000); // 25 heures\n      }\n      \n      traitService.cleanup(24 * 60 * 60 * 1000); // 24 heures\n      \n      const remainingHistory = traitService.getTraitHistory('curiosity');\n      expect(remainingHistory.length).toBeLessThan(history.length);\n    });\n  });\n\n  describe('Event Listeners', () => {\n    test('should notify listeners on trait changes', (done) => {\n      let eventReceived = false;\n      \n      traitService.addTraitChangeListener((event) => {\n        expect(event.traitName).toBe('curiosity');\n        expect(event.newValue).toBe(0.8);\n        expect(event.oldValue).toBe(0.5);\n        eventReceived = true;\n        done();\n      });\n      \n      traitService.updateTrait('curiosity', 0.8);\n      \n      // VÃ©rification de sÃ©curitÃ©\n      setTimeout(() => {\n        if (!eventReceived) {\n          done(new Error('Event listener not triggered'));\n        }\n      }, 100);\n    });\n\n    test('should remove listeners correctly', () => {\n      let callCount = 0;\n      \n      const listener = () => { callCount++; };\n      \n      traitService.addTraitChangeListener(listener);\n      traitService.updateTrait('curiosity', 0.8);\n      expect(callCount).toBe(1);\n      \n      traitService.removeTraitChangeListener(listener);\n      traitService.updateTrait('focus', 0.7);\n      expect(callCount).toBe(1); // Pas d'augmentation\n    });\n  });\n\n  describe('Balance Calculation', () => {\n    test('should calculate balance for even traits', () => {\n      // Traits Ã©quilibrÃ©s (tous Ã  0.5)\n      const balance = traitService.calculateBalance();\n      expect(balance).toBeCloseTo(1.0, 2); // Balance parfaite\n    });\n\n    test('should calculate balance for uneven traits', () => {\n      traitService.updateTraits({\n        curiosity: 1.0,\n        focus: 0.0,\n        empathy: 1.0,\n        creativity: 0.0\n      });\n      \n      const balance = traitService.calculateBalance();\n      // Avec des valeurs trÃ¨s dÃ©sÃ©quilibrÃ©es (0,1,0,1), variance=0.25, balance=1-0.25=0.75\n      expect(balance).toBeGreaterThan(0.5); // Balance calculÃ©e avec 1-variance\n      expect(balance).toBeLessThan(1.0);\n    });\n  });\n\n  describe('Serialization', () => {\n    test('should serialize and deserialize correctly', () => {\n      traitService.updateTrait('curiosity', 0.8);\n      traitService.updateTrait('creativity', 0.6);\n      \n      const serialized = traitService.toJSON();\n      const newService = new TraitService();\n      newService.fromJSON(serialized);\n      \n      expect(newService.getTrait('curiosity')).toBe(0.8);\n      expect(newService.getTrait('creativity')).toBe(0.6);\n      \n      newService.cleanup();\n    });\n\n    test('should preserve history in serialization', () => {\n      traitService.updateTrait('curiosity', 0.8, 'test');\n      \n      const serialized = traitService.toJSON();\n      const newService = new TraitService();\n      newService.fromJSON(serialized);\n      \n      const history = newService.getTraitHistory('curiosity');\n      expect(history).toHaveLength(1);\n      expect(history[0].trigger).toBe('test');\n      \n      newService.cleanup();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle invalid trait names gracefully', () => {\n      expect(() => {\n        traitService.updateTrait('invalid_trait' as any, 0.5);\n      }).not.toThrow();\n    });\n\n    test('should handle cleanup when no data exists', () => {\n      expect(() => {\n        traitService.cleanup();\n      }).not.toThrow();\n    });\n  });\n});"],"version":3}