{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/CSP.security.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/CSP.security.test.ts"],"sourcesContent":["/**\n * Tests de sécurité Content Security Policy\n */\n\ndescribe('Content Security Policy Tests', () => {\n  describe('Manifest CSP Validation', () => {\n    it('vérifie la CSP du manifest.json', async () => {\n      const manifestPath = require('path').resolve(__dirname, '../../dist/manifest.json');\n      \n      let manifest;\n      try {\n        manifest = require(manifestPath);\n      } catch (error) {\n        // Fallback to source manifest if dist doesn't exist\n        manifest = require('../../manifest.json');\n      }\n      \n      expect(manifest.content_security_policy).toBeDefined();\n      \n      const csp = manifest.content_security_policy;\n      \n      // Vérifier que script-src est restrictif\n      expect(csp).toContain(\"script-src 'self'\");\n      expect(csp).not.toContain(\"'unsafe-eval'\");\n      expect(csp).not.toContain(\"'unsafe-inline'\");\n      \n      // Vérifier object-src est bloqué\n      expect(csp).toContain(\"object-src 'none'\");\n      \n      // Vérifier base-uri est restrictif  \n      expect(csp).toContain(\"base-uri 'self'\");\n    });\n  });\n\n  describe('Injection Prevention', () => {\n    it('vérifie qu\\'aucun script inline n\\'est injecté', () => {\n      // Simuler des tentatives d'injection XSS communes\n      const xssPayloads = [\n        '<script>alert(1)</script>',\n        'javascript:alert(1)',\n        'onload=alert(1)',\n        'onerror=alert(1)',\n        'data:text/html,<script>alert(1)</script>'\n      ];\n      \n      xssPayloads.forEach(payload => {\n        // Ces payloads ne doivent jamais être exécutés\n        expect(payload).toContain('<'); // Simple validation que c'est du HTML/JS\n        // Dans une vraie extension, ces payloads seraient bloqués par CSP\n      });\n    });\n\n    it('valide l\\'échappement des données utilisateur', () => {\n      const dangerousInputs = [\n        '<img src=x onerror=alert(1)>',\n        '\"><script>alert(1)</script>',\n        '\\';alert(1);//',\n        '${alert(1)}',\n        '{{alert(1)}}'\n      ];\n      \n      dangerousInputs.forEach(input => {\n        // Simuler l'échappement qui devrait être fait\n        const escaped = input\n          .replace(/&/g, '&amp;')\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;')\n          .replace(/\"/g, '&quot;')\n          .replace(/'/g, '&#x27;');\n        \n        expect(escaped).not.toContain('<script>');\n        expect(escaped).not.toContain('onerror=');\n        expect(escaped).not.toContain('javascript:');\n      });\n    });\n  });\n\n  describe('Resource Loading Security', () => {\n    it('vérifie que les ressources externes sont contrôlées', () => {\n      // Liste des domaines autorisés pour les ressources externes\n      const allowedDomains = [\n        'self',\n        'localhost',\n        '127.0.0.1'\n      ];\n      \n      // Domaines suspects à bloquer\n      const suspiciousDomains = [\n        'evil.com',\n        'data:',\n        'javascript:',\n        'vbscript:',\n        'file://'\n      ];\n      \n      suspiciousDomains.forEach(domain => {\n        expect(allowedDomains).not.toContain(domain);\n      });\n    });\n\n    it('valide les hashes des ressources critiques', () => {\n      // En production, on devrait vérifier les hashes SRI\n      const criticalResources = [\n        'popup/index.js',\n        'popup/index.css',\n        'background/index.js'\n      ];\n      \n      criticalResources.forEach(resource => {\n        expect(resource).toMatch(/\\.(js|css)$/);\n        // En production, on vérifierait le hash SHA-384 de chaque ressource\n      });\n    });\n  });\n\n  describe('Permissions Security', () => {\n    it('vérifie que les permissions sont minimales', () => {\n      let manifest;\n      try {\n        manifest = require('../../dist/manifest.json');\n      } catch (error) {\n        manifest = require('../../manifest.json');\n      }\n      \n      const permissions = manifest.permissions || [];\n      const dangerousPermissions = [\n        'tabs',\n        'history',\n        'bookmarks',\n        'downloads',\n        'geolocation',\n        'notifications',\n        'debugger'\n      ];\n      \n      // Vérifier qu'on n'utilise que les permissions nécessaires\n      expect(permissions).toContain('storage');\n      expect(permissions).toContain('activeTab');\n      \n      // Vérifier qu'on n'a pas de permissions dangereuses non nécessaires\n      dangerousPermissions.forEach(permission => {\n        if (permissions.includes(permission)) {\n          // Si la permission est utilisée, elle doit être justifiée\n          console.warn(`Permission potentiellement dangereuse détectée: ${permission}`);\n        }\n      });\n    });\n\n    it('vérifie l\\'host_permissions est restreint', () => {\n      let manifest;\n      try {\n        manifest = require('../../dist/manifest.json');\n      } catch (error) {\n        manifest = require('../../manifest.json');\n      }\n      \n      const hostPermissions = manifest.host_permissions || [];\n      \n      // Ne doit pas inclure \"*://*/*\" (accès à tous les sites)\n      expect(hostPermissions).not.toContain('*://*/*');\n      expect(hostPermissions).not.toContain('<all_urls>');\n      \n      // Vérifier que chaque permission d'hôte est spécifique\n      hostPermissions.forEach((permission: string) => {\n        expect(permission).toMatch(/^https?:\\/\\//);\n      });\n    });\n  });\n\n  describe('Storage Security', () => {\n    it('vérifie que les données sensibles ne sont pas stockées en clair', () => {\n      // Simuler des clés de stockage qui ne doivent jamais contenir de données sensibles\n      const forbiddenKeys = [\n        'password',\n        'token',\n        'api_key',\n        'secret',\n        'private_key',\n        'session_id'\n      ];\n      \n      const allowedKeys = [\n        'user_preferences',\n        'organism_state',\n        'encrypted_data',\n        'hashed_user_id'\n      ];\n      \n      forbiddenKeys.forEach(key => {\n        expect(allowedKeys).not.toContain(key);\n      });\n    });\n\n    it('valide le chiffrement des données stockées', () => {\n      // Simuler des données qui devraient être chiffrées\n      const sensitiveDataTypes = [\n        'user_behavior',\n        'personal_info',\n        'tracking_data',\n        'organism_dna'\n      ];\n      \n      sensitiveDataTypes.forEach(dataType => {\n        // En production, ces données devraient passer par SecurityManager.encryptSensitiveData\n        expect(dataType).toBeDefined();\n      });\n    });\n  });\n});"],"version":3}