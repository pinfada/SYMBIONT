4c03f9dda11beaf13841a587ebde6992
"use strict";

/* istanbul ignore next */
function cov_11rek6wo81() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/SecureErrorHandler.ts";
  var hash = "6427a19cceb758046b31653cf5ce399a088e3bf1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/SecureErrorHandler.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 130
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 61
        }
      },
      "4": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 61
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 23
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 34
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "13": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 49
        }
      },
      "14": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 94
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 58
        }
      },
      "16": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "18": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 22
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 44
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 28
        }
      },
      "23": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 73
        }
      },
      "25": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 34
        }
      },
      "26": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 68,
          column: 76
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "28": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "29": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 27
        }
      },
      "30": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "31": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 25
        }
      },
      "32": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "33": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "34": {
        start: {
          line: 84,
          column: 30
        },
        end: {
          line: 84,
          column: 72
        }
      },
      "35": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 84
        }
      },
      "36": {
        start: {
          line: 92,
          column: 33
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "37": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 49
        }
      },
      "38": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "39": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "40": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "41": {
        start: {
          line: 108,
          column: 17
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "42": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 34
        }
      },
      "43": {
        start: {
          line: 111,
          column: 17
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "44": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 33
        }
      },
      "45": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "46": {
        start: {
          line: 121,
          column: 22
        },
        end: {
          line: 121,
          column: 46
        }
      },
      "47": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "48": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 36
        }
      },
      "49": {
        start: {
          line: 125,
          column: 13
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "50": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 28
        }
      },
      "51": {
        start: {
          line: 128,
          column: 13
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "52": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 44
        }
      },
      "53": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 50
        }
      },
      "54": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 31
        }
      },
      "55": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "56": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 65
        }
      },
      "57": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 92
        }
      },
      "58": {
        start: {
          line: 146,
          column: 22
        },
        end: {
          line: 146,
          column: 43
        }
      },
      "59": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "60": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "61": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "62": {
        start: {
          line: 156,
          column: 24
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "63": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "64": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 117
        }
      },
      "65": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 113
        }
      },
      "66": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "67": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 135
        }
      },
      "68": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 22
        }
      },
      "69": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 134
        }
      },
      "70": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "71": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 135
        }
      },
      "72": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "73": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 132
        }
      },
      "74": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "75": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 190,
          column: 29
        }
      },
      "76": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 29
        }
      },
      "77": {
        start: {
          line: 191,
          column: 22
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "78": {
        start: {
          line: 192,
          column: 31
        },
        end: {
          line: 197,
          column: 10
        }
      },
      "79": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "80": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 41
        }
      },
      "81": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "82": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 52
        }
      },
      "83": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 22
        }
      },
      "84": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 65
        }
      },
      "85": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 22
        }
      },
      "86": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 52
        }
      },
      "87": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 22
        }
      },
      "88": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 22
        }
      },
      "89": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 230,
          column: 29
        }
      },
      "90": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 95
        }
      },
      "91": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 250,
          column: 30
        }
      },
      "92": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "93": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 37
        }
      },
      "94": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "95": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 24
        }
      },
      "96": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "97": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "98": {
        start: {
          line: 270,
          column: 31
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "99": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 276,
          column: 17
        }
      },
      "100": {
        start: {
          line: 273,
          column: 20
        },
        end: {
          line: 275,
          column: 23
        }
      },
      "101": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 73
        }
      },
      "102": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 30
        }
      },
      "103": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 65
        }
      },
      "104": {
        start: {
          line: 288,
          column: 25
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "105": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "106": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 45
        }
      },
      "107": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "108": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 47
        }
      },
      "109": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 47
        }
      },
      "110": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 24
        }
      },
      "111": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "112": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 25
        }
      },
      "113": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "114": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 25
        }
      },
      "115": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 20
        }
      },
      "116": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 48
        }
      },
      "117": {
        start: {
          line: 319,
          column: 0
        },
        end: {
          line: 319,
          column: 40
        }
      },
      "118": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 333,
          column: 2
        }
      },
      "119": {
        start: {
          line: 335,
          column: 0
        },
        end: {
          line: 335,
          column: 53
        }
      },
      "120": {
        start: {
          line: 336,
          column: 0
        },
        end: {
          line: 336,
          column: 63
        }
      },
      "121": {
        start: {
          line: 337,
          column: 0
        },
        end: {
          line: 337,
          column: 55
        }
      },
      "122": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 357,
          column: 6
        }
      },
      "123": {
        start: {
          line: 341,
          column: 31
        },
        end: {
          line: 341,
          column: 47
        }
      },
      "124": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 355,
          column: 10
        }
      },
      "125": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "126": {
        start: {
          line: 344,
          column: 31
        },
        end: {
          line: 344,
          column: 63
        }
      },
      "127": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 349,
          column: 17
        }
      },
      "128": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 348,
          column: 23
        }
      },
      "129": {
        start: {
          line: 347,
          column: 24
        },
        end: {
          line: 347,
          column: 134
        }
      },
      "130": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 30
        }
      },
      "131": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 126
        }
      },
      "132": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 84
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 22
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 77
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 78
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 46
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 90
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 120
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 137
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 72
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 155
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 188
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 194,
            column: 17
          },
          end: {
            line: 194,
            column: 18
          }
        },
        loc: {
          start: {
            line: 194,
            column: 25
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 46
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 203
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 42
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 225
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 43
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 237
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 42
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 244
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 76
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 255
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 59
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 267
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        loc: {
          start: {
            line: 268,
            column: 29
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 268
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 273,
            column: 40
          },
          end: {
            line: 273,
            column: 41
          }
        },
        loc: {
          start: {
            line: 273,
            column: 51
          },
          end: {
            line: 275,
            column: 21
          }
        },
        line: 273
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 64
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 287
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 306
      },
      "23": {
        name: "HandleErrors",
        decl: {
          start: {
            line: 339,
            column: 9
          },
          end: {
            line: 339,
            column: 21
          }
        },
        loc: {
          start: {
            line: 339,
            column: 53
          },
          end: {
            line: 358,
            column: 1
          }
        },
        line: 339
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 340,
            column: 11
          },
          end: {
            line: 340,
            column: 12
          }
        },
        loc: {
          start: {
            line: 340,
            column: 54
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 340
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 342,
            column: 27
          },
          end: {
            line: 342,
            column: 28
          }
        },
        loc: {
          start: {
            line: 342,
            column: 46
          },
          end: {
            line: 355,
            column: 9
          }
        },
        line: 342
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 346,
            column: 40
          },
          end: {
            line: 346,
            column: 41
          }
        },
        loc: {
          start: {
            line: 346,
            column: 51
          },
          end: {
            line: 348,
            column: 21
          }
        },
        line: 346
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 12,
            column: 45
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 47
          },
          end: {
            line: 12,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 12,
            column: 66
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 45
          }
        }, {
          start: {
            line: 59,
            column: 49
          },
          end: {
            line: 59,
            column: 72
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 30
          },
          end: {
            line: 67,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 67,
            column: 50
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 30
          },
          end: {
            line: 84,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 55
          },
          end: {
            line: 84,
            column: 60
          }
        }, {
          start: {
            line: 84,
            column: 63
          },
          end: {
            line: 84,
            column: 72
          }
        }],
        line: 84
      },
      "8": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: 111,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        }],
        line: 108
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 17
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: 125,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 125,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: 128,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        }],
        line: 125
      },
      "14": {
        loc: {
          start: {
            line: 128,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 13
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "15": {
        loc: {
          start: {
            line: 128,
            column: 17
          },
          end: {
            line: 128,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 17
          },
          end: {
            line: 128,
            column: 22
          }
        }, {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 51
          }
        }, {
          start: {
            line: 128,
            column: 55
          },
          end: {
            line: 128,
            column: 73
          }
        }],
        line: 128
      },
      "16": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "17": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "18": {
        loc: {
          start: {
            line: 166,
            column: 38
          },
          end: {
            line: 166,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 71
          },
          end: {
            line: 166,
            column: 92
          }
        }, {
          start: {
            line: 166,
            column: 95
          },
          end: {
            line: 166,
            column: 116
          }
        }],
        line: 166
      },
      "19": {
        loc: {
          start: {
            line: 167,
            column: 28
          },
          end: {
            line: 167,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 61
          },
          end: {
            line: 167,
            column: 100
          }
        }, {
          start: {
            line: 167,
            column: 103
          },
          end: {
            line: 167,
            column: 112
          }
        }],
        line: 167
      },
      "20": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 22
          }
        }, {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 22
          }
        }, {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 22
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 22
          }
        }],
        line: 170
      },
      "21": {
        loc: {
          start: {
            line: 172,
            column: 95
          },
          end: {
            line: 172,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 95
          },
          end: {
            line: 172,
            column: 114
          }
        }, {
          start: {
            line: 172,
            column: 118
          },
          end: {
            line: 172,
            column: 133
          }
        }],
        line: 172
      },
      "22": {
        loc: {
          start: {
            line: 175,
            column: 94
          },
          end: {
            line: 175,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 94
          },
          end: {
            line: 175,
            column: 113
          }
        }, {
          start: {
            line: 175,
            column: 117
          },
          end: {
            line: 175,
            column: 132
          }
        }],
        line: 175
      },
      "23": {
        loc: {
          start: {
            line: 178,
            column: 95
          },
          end: {
            line: 178,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 95
          },
          end: {
            line: 178,
            column: 114
          }
        }, {
          start: {
            line: 178,
            column: 118
          },
          end: {
            line: 178,
            column: 133
          }
        }],
        line: 178
      },
      "24": {
        loc: {
          start: {
            line: 181,
            column: 92
          },
          end: {
            line: 181,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 92
          },
          end: {
            line: 181,
            column: 111
          }
        }, {
          start: {
            line: 181,
            column: 115
          },
          end: {
            line: 181,
            column: 130
          }
        }],
        line: 181
      },
      "25": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 190,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 190,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "26": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 208,
            column: 22
          }
        }, {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 212,
            column: 22
          }
        }, {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 216,
            column: 22
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 22
          }
        }],
        line: 204
      },
      "27": {
        loc: {
          start: {
            line: 255,
            column: 45
          },
          end: {
            line: 255,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 255,
            column: 56
          },
          end: {
            line: 255,
            column: 65
          }
        }],
        line: 255
      },
      "28": {
        loc: {
          start: {
            line: 267,
            column: 28
          },
          end: {
            line: 267,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 267,
            column: 39
          },
          end: {
            line: 267,
            column: 48
          }
        }],
        line: 267
      },
      "29": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "30": {
        loc: {
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 272,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 272,
            column: 26
          }
        }, {
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 272,
            column: 63
          }
        }],
        line: 272
      },
      "31": {
        loc: {
          start: {
            line: 287,
            column: 41
          },
          end: {
            line: 287,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 287,
            column: 58
          },
          end: {
            line: 287,
            column: 62
          }
        }],
        line: 287
      },
      "32": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "33": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "34": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "35": {
        loc: {
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 308,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 308,
            column: 39
          }
        }, {
          start: {
            line: 308,
            column: 43
          },
          end: {
            line: 308,
            column: 78
          }
        }],
        line: 308
      },
      "36": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "37": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 312,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 312,
            column: 49
          }
        }, {
          start: {
            line: 312,
            column: 53
          },
          end: {
            line: 312,
            column: 78
          }
        }],
        line: 312
      },
      "38": {
        loc: {
          start: {
            line: 339,
            column: 22
          },
          end: {
            line: 339,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 339,
            column: 33
          },
          end: {
            line: 339,
            column: 42
          }
        }],
        line: 339
      },
      "39": {
        loc: {
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "40": {
        loc: {
          start: {
            line: 345,
            column: 20
          },
          end: {
            line: 345,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 20
          },
          end: {
            line: 345,
            column: 26
          }
        }, {
          start: {
            line: 345,
            column: 30
          },
          end: {
            line: 345,
            column: 63
          }
        }],
        line: 345
      },
      "41": {
        loc: {
          start: {
            line: 347,
            column: 78
          },
          end: {
            line: 347,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 78
          },
          end: {
            line: 347,
            column: 85
          }
        }, {
          start: {
            line: 347,
            column: 89
          },
          end: {
            line: 347,
            column: 132
          }
        }],
        line: 347
      },
      "42": {
        loc: {
          start: {
            line: 353,
            column: 70
          },
          end: {
            line: 353,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 70
          },
          end: {
            line: 353,
            column: 77
          }
        }, {
          start: {
            line: 353,
            column: 81
          },
          end: {
            line: 353,
            column: 124
          }
        }],
        line: 353
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0],
      "27": [0],
      "28": [0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/SecureErrorHandler.ts",
      mappings: ";;;AA6bA,oCAsBC;AAndD;;;GAGG;AACH,8DAAqD;AACrD,8DAA2D;AAE3D,MAAa,WAAY,SAAQ,KAAK;IAOpC,YACE,OAAe,EACf,WAA0B,SAAS,EACnC,WAA0B,QAAQ,EAClC,OAA2B,EACX,KAAa;QAE7B,KAAK,CAAC,OAAO,CAAC,CAAC;QAFC,UAAK,GAAL,KAAK,CAAQ;QAG7B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEO,eAAe;QACrB,0EAA0E;QAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,2BAAY,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxE,OAAO,OAAO,SAAS,IAAI,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;IACpD,CAAC;IAED,YAAY;QACV,MAAM,MAAM,GAAoB;YAC9B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE;SAC/B,CAAC;QAEF,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YAC/B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAChC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,cAAc;QACpB,oFAAoF;QACpF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAC1C,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAClC,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,iBAAiB;QACvB,MAAM,eAAe,GAAkC;YACrD,cAAc,EAAE,uBAAuB;YACvC,aAAa,EAAE,eAAe;YAC9B,UAAU,EAAE,wBAAwB;YACpC,OAAO,EAAE,6BAA6B;YACtC,OAAO,EAAE,oBAAoB;YAC7B,MAAM,EAAE,gCAAgC;YACxC,WAAW,EAAE,gCAAgC;YAC7C,OAAO,EAAE,iDAAiD;SAC3D,CAAC;QAEF,OAAO,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC;IACnE,CAAC;CACF;AApED,kCAoEC;AAuBD,MAAa,kBAAkB;IAiB7B;;OAEG;IACH,MAAM,CAAC,WAAW,CAChB,KAAsB,EACtB,WAA0B,SAAS,EACnC,OAAgB,EAChB,cAAwC;QAExC,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAErE,0DAA0D;QAC1D,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;QAE1D,gDAAgD;QAChD,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAExC,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,iBAAiB,CAC9B,KAAsB,EACtB,QAAuB,EACvB,OAAgB;QAEhB,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;YACjC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,aAAa,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAEjE,OAAO,IAAI,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,iBAAiB,CAC9B,KAAsB,EACtB,QAAuB;QAEvB,kCAAkC;QAClC,MAAM,gBAAgB,GAAyC;YAC7D,cAAc,EAAE,MAAM;YACtB,aAAa,EAAE,MAAM;YACrB,MAAM,EAAE,UAAU;YAClB,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,QAAQ;YACjB,OAAO,EAAE,QAAQ;YACjB,WAAW,EAAE,KAAK;YAClB,OAAO,EAAE,QAAQ;SAClB,CAAC;QAEF,IAAI,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAE1C,iCAAiC;QACjC,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBACrD,QAAQ,GAAG,UAAU,CAAC;YACxB,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;gBAChE,QAAQ,GAAG,MAAM,CAAC;YACpB,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC7D,QAAQ,GAAG,KAAK,CAAC;YACnB,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,kBAAkB,CAAC,KAAsB;QACtD,IAAI,OAAO,GAAG,wBAAwB,CAAC;QAEvC,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC1B,CAAC;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACrC,OAAO,GAAG,KAAK,CAAC;QAClB,CAAC;aAAM,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;YACpE,OAAO,GAAG,MAAM,CAAE,KAAa,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC;QAED,uDAAuD;QACvD,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,oBAAoB,CAAC,OAAe;QACjD,IAAI,SAAS,GAAG,OAAO,CAAC;QAExB,wDAAwD;QACxD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9C,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACvD,CAAC;QAED,kEAAkE;QAClE,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,iCAAiC,EAAE,iBAAiB,CAAC,CAAC;QAEpF,wCAAwC;QACxC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrB,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC;QACnE,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,gBAAgB,CAC7B,WAAwB,EACxB,aAA8B,EAC9B,cAAwC;QAExC,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,SAAS,EAAE,WAAW,CAAC,SAAS;YAChC,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,GAAG,cAAc;SAClB,CAAC;QAEF,4CAA4C;QAC5C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;YAC1C,OAAe,CAAC,eAAe,GAAG,aAAa,YAAY,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACjH,OAAe,CAAC,KAAK,GAAG,aAAa,YAAY,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAChH,CAAC;QAED,2BAA2B;QAC3B,QAAQ,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC7B,KAAK,UAAU;gBACb,qBAAM,CAAC,KAAK,CAAC,mBAAmB,WAAW,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,eAAe,CAAC,CAAC;gBACxG,MAAM;YACR,KAAK,MAAM;gBACT,qBAAM,CAAC,KAAK,CAAC,kBAAkB,WAAW,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,eAAe,CAAC,CAAC;gBACvG,MAAM;YACR,KAAK,QAAQ;gBACX,qBAAM,CAAC,IAAI,CAAC,oBAAoB,WAAW,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,eAAe,CAAC,CAAC;gBACxG,MAAM;YACR,KAAK,KAAK;gBACR,qBAAM,CAAC,IAAI,CAAC,iBAAiB,WAAW,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,eAAe,CAAC,CAAC;gBACrG,MAAM;QACV,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,aAAa,CAAC,KAAc;QACzC,IAAI,CAAC,KAAK;YAAE,OAAO,SAAS,CAAC;QAE7B,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,cAAc,GAAG,KAAK;aACzB,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC;aAC9B,GAAG,CAAC,IAAI,CAAC,EAAE;YACV,8BAA8B;YAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,iCAAiC,EAAE,QAAQ,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEL,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,qBAAqB,CAAC,WAAwB;QAC3D,QAAQ,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC7B,KAAK,UAAU;gBACb,sDAAsD;gBACtD,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;gBACpC,MAAM;YACR,KAAK,MAAM;gBACT,wBAAwB;gBACxB,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACjD,MAAM;YACR,KAAK,QAAQ;gBACX,wBAAwB;gBACxB,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;gBACpC,MAAM;YACR,KAAK,KAAK;gBACR,iBAAiB;gBACjB,MAAM;QACV,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,iBAAiB,CAAC,WAAwB;QACvD,qBAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE;YACtD,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,SAAS,EAAE,WAAW,CAAC,SAAS;SACjC,EAAE,gBAAgB,CAAC,CAAC;QAErB,kDAAkD;QAClD,gEAAgE;IAClE,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,qBAAqB,CAAC,QAAuB;QAC1D,2EAA2E;QAC3E,qBAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,QAAQ,EAAE,EAAE,eAAe,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,iBAAiB,CAAC,WAAwB;QACvD,0EAA0E;QAC1E,qBAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE;YACnC,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,OAAO,EAAE,WAAW,CAAC,OAAO;SAC7B,EAAE,iBAAiB,CAAC,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAC3B,SAA2B,EAC3B,WAA0B,SAAS,EACnC,OAAgB;QAEhB,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,YAAY,CACjB,EAAK,EACL,WAA0B,SAAS,EACnC,OAAgB;QAEhB,OAAO,CAAC,CAAC,GAAG,IAAmB,EAAE,EAAE;YACjC,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;gBAE3B,+DAA+D;gBAC/D,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;oBAChD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;wBACnC,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACnD,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO,MAAM,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YACnD,CAAC;QACH,CAAC,CAAM,CAAC;IACV,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,sBAAsB,CAC3B,KAAkB,EAClB,iBAA0B,IAAI;QAE9B,MAAM,QAAQ,GAAqB;YACjC,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,OAAO;YACrC,SAAS,EAAE,KAAK,CAAC,SAAS;SAC3B,CAAC;QAEF,IAAI,cAAc,EAAE,CAAC;YACnB,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QACnC,CAAC;QAED,4CAA4C;QAC5C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;YAC3C,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;YACnC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QACrC,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,iBAAiB,CAAC,KAAkB;QACzC,sDAAsD;QACtD,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,IAAI,KAAK,CAAC,QAAQ,KAAK,gBAAgB,EAAE,CAAC;YACvE,OAAO,KAAK,CAAC;QACf,CAAC;QAED,0DAA0D;QAC1D,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,KAAK,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;YACvE,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;;AAzUH,gDA0UC;AAzUyB,kCAAe,GAAG,EAAE,CAAC;AACrB,qCAAkB,GAAG;IAC3C,YAAY;IACZ,SAAS;IACT,UAAU;IACV,OAAO;IACP,QAAQ;IACR,WAAW;IACX,UAAU;IACV,eAAe;IACf,sBAAsB;IACtB,uDAAuD,EAAE,SAAS;IAClE,8CAA8C,EAAE,uBAAuB;IACvE,+BAA+B,EAAE,eAAe;CACjD,CAAC;AAsUJ,kCAAkC;AACrB,QAAA,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC;AAC7C,QAAA,gBAAgB,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;AACvD,QAAA,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;AAE5D,mDAAmD;AACnD,SAAgB,YAAY,CAAC,WAA0B,SAAS,EAAE,OAAgB;IAChF,OAAO,UAAU,MAAW,EAAE,WAAmB,EAAE,UAA8B;QAC/E,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAExC,UAAU,CAAC,KAAK,GAAG,UAAU,GAAG,IAAe;YAC7C,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAEhD,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;oBAChD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;wBACnC,MAAM,kBAAkB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,WAAW,EAAE,CAAC,CAAC;oBAChH,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO,MAAM,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,kBAAkB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,WAAW,EAAE,CAAC,CAAC;YAChH,CAAC;QACH,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/SecureErrorHandler.ts"],
      sourcesContent: ["/**\r\n * Gestionnaire d'erreurs s\xE9curis\xE9 pour \xE9viter l'exposition d'informations sensibles\r\n * Am\xE9liore la s\xE9curit\xE9 selon les recommandations d'audit\r\n */\r\nimport { logger } from '@/shared/utils/secureLogger';\r\nimport { SecureRandom } from '@/shared/utils/secureRandom';\r\n\r\nexport class SecureError extends Error {\r\n  public readonly errorId: string;\r\n  public readonly timestamp: number;\r\n  public readonly category: ErrorCategory;\r\n  public readonly severity: ErrorSeverity;\r\n  public readonly context: string | undefined;\r\n\r\n  constructor(\r\n    message: string,\r\n    category: ErrorCategory = 'GENERAL',\r\n    severity: ErrorSeverity = 'MEDIUM',\r\n    context: string | undefined,\r\n    public readonly cause?: Error\r\n  ) {\r\n    super(message);\r\n    this.name = 'SecureError';\r\n    this.errorId = this.generateErrorId();\r\n    this.timestamp = Date.now();\r\n    this.category = category;\r\n    this.severity = severity;\r\n    this.context = context;\r\n  }\r\n\r\n  private generateErrorId(): string {\r\n    // G\xE9n\xE9rer un ID d'erreur unique pour le suivi sans exposer d'informations\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.floor(SecureRandom.random() * 1000000).toString(36);\r\n    return `ERR_${timestamp}_${random}`.toUpperCase();\r\n  }\r\n\r\n  toSafeObject(): SafeErrorObject {\r\n    const result: SafeErrorObject = {\r\n      errorId: this.errorId,\r\n      timestamp: this.timestamp,\r\n      category: this.category,\r\n      severity: this.severity,\r\n      message: this.getSafeMessage()\r\n    };\r\n    \r\n    if (this.context !== undefined) {\r\n      result.context = this.context;\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  private getSafeMessage(): string {\r\n    // Retourner un message g\xE9n\xE9rique pour la production, d\xE9taill\xE9 pour le d\xE9veloppement\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return this.getGenericMessage();\r\n    }\r\n    return this.message;\r\n  }\r\n\r\n  private getGenericMessage(): string {\r\n    const genericMessages: Record<ErrorCategory, string> = {\r\n      AUTHENTICATION: 'Authentication failed',\r\n      AUTHORIZATION: 'Access denied',\r\n      VALIDATION: 'Invalid input provided',\r\n      NETWORK: 'Network communication error',\r\n      STORAGE: 'Data storage error',\r\n      CRYPTO: 'Cryptographic operation failed',\r\n      PERFORMANCE: 'Performance threshold exceeded',\r\n      GENERAL: 'An error occurred while processing your request'\r\n    };\r\n\r\n    return genericMessages[this.category] || genericMessages.GENERAL;\r\n  }\r\n}\r\n\r\nexport type ErrorCategory = \r\n  | 'AUTHENTICATION' \r\n  | 'AUTHORIZATION' \r\n  | 'VALIDATION' \r\n  | 'NETWORK' \r\n  | 'STORAGE' \r\n  | 'CRYPTO' \r\n  | 'PERFORMANCE' \r\n  | 'GENERAL';\r\n\r\nexport type ErrorSeverity = 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n\r\nexport interface SafeErrorObject {\r\n  errorId: string;\r\n  timestamp: number;\r\n  category: ErrorCategory;\r\n  severity: ErrorSeverity;\r\n  message: string;\r\n  context?: string;\r\n}\r\n\r\nexport class SecureErrorHandler {\r\n  private static readonly MAX_STACK_DEPTH = 10;\r\n  private static readonly SENSITIVE_PATTERNS = [\r\n    /password/gi,\r\n    /token/gi,\r\n    /secret/gi,\r\n    /key/gi,\r\n    /auth/gi,\r\n    /session/gi,\r\n    /cookie/gi,\r\n    /api[_-]?key/gi,\r\n    /bearer\\s+[\\w\\-._]+/gi,\r\n    /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/gi, // emails\r\n    /\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/gi, // credit cards pattern\r\n    /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/gi, // IP addresses\r\n  ];\r\n\r\n  /**\r\n   * Traite une erreur de mani\xE8re s\xE9curis\xE9e\r\n   */\r\n  static handleError(\r\n    error: Error | unknown,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string,\r\n    additionalInfo?: Record<string, unknown>\r\n  ): SecureError {\r\n    const secureError = this.createSecureError(error, category, context);\r\n    \r\n    // Logger l'erreur avec informations d\xE9taill\xE9es en interne\r\n    this.logErrorSecurely(secureError, error, additionalInfo);\r\n    \r\n    // D\xE9clencher des actions bas\xE9es sur la s\xE9v\xE9rit\xE9\r\n    this.handleErrorBySeverity(secureError);\r\n    \r\n    return secureError;\r\n  }\r\n\r\n  /**\r\n   * Cr\xE9e une erreur s\xE9curis\xE9e \xE0 partir d'une erreur standard\r\n   */\r\n  private static createSecureError(\r\n    error: Error | unknown,\r\n    category: ErrorCategory,\r\n    context?: string\r\n  ): SecureError {\r\n    if (error instanceof SecureError) {\r\n      return error;\r\n    }\r\n\r\n    const severity = this.determineSeverity(error, category);\r\n    const message = this.extractSafeMessage(error);\r\n    const originalError = error instanceof Error ? error : undefined;\r\n\r\n    return new SecureError(message, category, severity, context, originalError);\r\n  }\r\n\r\n  /**\r\n   * D\xE9termine la s\xE9v\xE9rit\xE9 de l'erreur\r\n   */\r\n  private static determineSeverity(\r\n    error: Error | unknown,\r\n    category: ErrorCategory\r\n  ): ErrorSeverity {\r\n    // S\xE9v\xE9rit\xE9 bas\xE9e sur la cat\xE9gorie\r\n    const categorySeverity: Record<ErrorCategory, ErrorSeverity> = {\r\n      AUTHENTICATION: 'HIGH',\r\n      AUTHORIZATION: 'HIGH',\r\n      CRYPTO: 'CRITICAL',\r\n      VALIDATION: 'MEDIUM',\r\n      NETWORK: 'MEDIUM',\r\n      STORAGE: 'MEDIUM',\r\n      PERFORMANCE: 'LOW',\r\n      GENERAL: 'MEDIUM'\r\n    };\r\n\r\n    let severity = categorySeverity[category];\r\n\r\n    // Ajuster selon le type d'erreur\r\n    if (error instanceof Error) {\r\n      if (error.message.toLowerCase().includes('security')) {\r\n        severity = 'CRITICAL';\r\n      } else if (error.message.toLowerCase().includes('unauthorized')) {\r\n        severity = 'HIGH';\r\n      } else if (error.message.toLowerCase().includes('not found')) {\r\n        severity = 'LOW';\r\n      }\r\n    }\r\n\r\n    return severity;\r\n  }\r\n\r\n  /**\r\n   * Extrait un message s\xFBr de l'erreur en supprimant les informations sensibles\r\n   */\r\n  private static extractSafeMessage(error: Error | unknown): string {\r\n    let message = 'Unknown error occurred';\r\n\r\n    if (error instanceof Error) {\r\n      message = error.message;\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error && typeof error === 'object' && 'message' in error) {\r\n      message = String((error as any).message);\r\n    }\r\n\r\n    // Supprimer les informations potentiellement sensibles\r\n    return this.sanitizeErrorMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Sanitise le message d'erreur en supprimant les informations sensibles\r\n   */\r\n  private static sanitizeErrorMessage(message: string): string {\r\n    let sanitized = message;\r\n\r\n    // Remplacer les patterns sensibles par des placeholders\r\n    for (const pattern of this.SENSITIVE_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, '[REDACTED]');\r\n    }\r\n\r\n    // Supprimer les paths absolus qui pourraient r\xE9v\xE9ler la structure\r\n    sanitized = sanitized.replace(/[A-Z]:\\\\[^\\\\]+\\\\.*|\\/[^\\/]+\\/.*/, '[PATH_REDACTED]');\r\n    \r\n    // Supprimer les stack traces d\xE9taill\xE9es\r\n    const lines = sanitized.split('\\n');\r\n    if (lines.length > 3) {\r\n      sanitized = lines.slice(0, 3).join('\\n') + '\\n[STACK_TRUNCATED]';\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Logger l'erreur de mani\xE8re s\xE9curis\xE9e\r\n   */\r\n  private static logErrorSecurely(\r\n    secureError: SecureError,\r\n    originalError: Error | unknown,\r\n    additionalInfo?: Record<string, unknown>\r\n  ): void {\r\n    const logData = {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      severity: secureError.severity,\r\n      timestamp: secureError.timestamp,\r\n      context: secureError.context,\r\n      ...additionalInfo\r\n    };\r\n\r\n    // En d\xE9veloppement, inclure plus de d\xE9tails\r\n    if (process.env.NODE_ENV === 'development') {\r\n      (logData as any).originalMessage = originalError instanceof Error ? originalError.message : String(originalError);\r\n      (logData as any).stack = originalError instanceof Error ? this.sanitizeStack(originalError.stack) : undefined;\r\n    }\r\n\r\n    // Logger selon la s\xE9v\xE9rit\xE9\r\n    switch (secureError.severity) {\r\n      case 'CRITICAL':\r\n        logger.error(`CRITICAL ERROR: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'HIGH':\r\n        logger.error(`HIGH SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'MEDIUM':\r\n        logger.warn(`MEDIUM SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'LOW':\r\n        logger.info(`LOW SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitise la stack trace\r\n   */\r\n  private static sanitizeStack(stack?: string): string | undefined {\r\n    if (!stack) return undefined;\r\n\r\n    const lines = stack.split('\\n');\r\n    const sanitizedLines = lines\r\n      .slice(0, this.MAX_STACK_DEPTH)\r\n      .map(line => {\r\n        // Supprimer les paths absolus\r\n        return line.replace(/[A-Z]:\\\\[^\\\\]+\\\\.*|\\/[^\\/]+\\/.*/, '[PATH]');\r\n      });\r\n\r\n    return sanitizedLines.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Actions \xE0 prendre selon la s\xE9v\xE9rit\xE9\r\n   */\r\n  private static handleErrorBySeverity(secureError: SecureError): void {\r\n    switch (secureError.severity) {\r\n      case 'CRITICAL':\r\n        // En production, cela pourrait d\xE9clencher des alertes\r\n        this.alertSecurityTeam(secureError);\r\n        break;\r\n      case 'HIGH':\r\n        // Monitoring et alertes\r\n        this.incrementErrorCounter(secureError.category);\r\n        break;\r\n      case 'MEDIUM':\r\n        // Tracking pour analyse\r\n        this.trackErrorPattern(secureError);\r\n        break;\r\n      case 'LOW':\r\n        // Simple logging\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Alerte l'\xE9quipe de s\xE9curit\xE9 (simulation)\r\n   */\r\n  private static alertSecurityTeam(secureError: SecureError): void {\r\n    logger.error('SECURITY ALERT: Critical error detected', {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      timestamp: secureError.timestamp\r\n    }, 'security-alert');\r\n    \r\n    // En production, cela enverrait une alerte r\xE9elle\r\n    // await sendAlert('security-team', secureError.toSafeObject());\r\n  }\r\n\r\n  /**\r\n   * Incr\xE9mente le compteur d'erreurs\r\n   */\r\n  private static incrementErrorCounter(category: ErrorCategory): void {\r\n    // En production, cela utiliserait un syst\xE8me de m\xE9triques comme Prometheus\r\n    logger.info('Error counter incremented', { category }, 'error-metrics');\r\n  }\r\n\r\n  /**\r\n   * Track les patterns d'erreurs\r\n   */\r\n  private static trackErrorPattern(secureError: SecureError): void {\r\n    // En production, cela analyserait les patterns pour d\xE9tecter des attaques\r\n    logger.info('Error pattern tracked', {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      context: secureError.context\r\n    }, 'error-analytics');\r\n  }\r\n\r\n  /**\r\n   * G\xE8re les erreurs async de mani\xE8re s\xE9curis\xE9e\r\n   */\r\n  static async handleAsyncError<T>(\r\n    operation: () => Promise<T>,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string\r\n  ): Promise<T | null> {\r\n    try {\r\n      return await operation();\r\n    } catch (error) {\r\n      this.handleError(error, category, context);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrap une fonction pour la gestion d'erreurs s\xE9curis\xE9e\r\n   */\r\n  static wrapFunction<T extends (...args: unknown[]) => any>(\r\n    fn: T,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string\r\n  ): T {\r\n    return ((...args: Parameters<T>) => {\r\n      try {\r\n        const result = fn(...args);\r\n        \r\n        // Si la fonction retourne une Promise, g\xE9rer les erreurs async\r\n        if (result && typeof result.then === 'function') {\r\n          return result.catch((error: Error) => {\r\n            throw this.handleError(error, category, context);\r\n          });\r\n        }\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        throw this.handleError(error, category, context);\r\n      }\r\n    }) as T;\r\n  }\r\n\r\n  /**\r\n   * Cr\xE9e une r\xE9ponse d'erreur s\xE9curis\xE9e pour les APIs\r\n   */\r\n  static createApiErrorResponse(\r\n    error: SecureError,\r\n    includeErrorId: boolean = true\r\n  ): ApiErrorResponse {\r\n    const response: ApiErrorResponse = {\r\n      success: false,\r\n      message: error.toSafeObject().message,\r\n      timestamp: error.timestamp\r\n    };\r\n\r\n    if (includeErrorId) {\r\n      response.errorId = error.errorId;\r\n    }\r\n\r\n    // En d\xE9veloppement, inclure plus de d\xE9tails\r\n    if (process.env.NODE_ENV === 'development') {\r\n      response.category = error.category;\r\n      response.severity = error.severity;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Valide si une erreur doit \xEAtre expos\xE9e publiquement\r\n   */\r\n  static shouldExposeError(error: SecureError): boolean {\r\n    // Ne jamais exposer les erreurs critiques de s\xE9curit\xE9\r\n    if (error.category === 'CRYPTO' || error.category === 'AUTHENTICATION') {\r\n      return false;\r\n    }\r\n\r\n    // Ne pas exposer les erreurs haute s\xE9v\xE9rit\xE9 en production\r\n    if (process.env.NODE_ENV === 'production' && error.severity === 'HIGH') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  success: false;\r\n  message: string;\r\n  timestamp: number;\r\n  errorId?: string;\r\n  category?: ErrorCategory;\r\n  severity?: ErrorSeverity;\r\n}\r\n\r\n// Fonctions utilitaires export\xE9es\r\nexport const handleError = SecureErrorHandler.handleError;\r\nexport const handleAsyncError = SecureErrorHandler.handleAsyncError;\r\nexport const wrapFunction = SecureErrorHandler.wrapFunction;\r\n\r\n// D\xE9corateur pour la gestion automatique d'erreurs\r\nexport function HandleErrors(category: ErrorCategory = 'GENERAL', context?: string) {\r\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const originalMethod = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]) {\r\n      try {\r\n        const result = originalMethod.apply(this, args);\r\n        \r\n        if (result && typeof result.then === 'function') {\r\n          return result.catch((error: Error) => {\r\n            throw SecureErrorHandler.handleError(error, category, context || `${target.constructor.name}.${propertyKey}`);\r\n          });\r\n        }\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        throw SecureErrorHandler.handleError(error, category, context || `${target.constructor.name}.${propertyKey}`);\r\n      }\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6427a19cceb758046b31653cf5ce399a088e3bf1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11rek6wo81 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11rek6wo81();
cov_11rek6wo81().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_11rek6wo81().s[1]++;
exports.wrapFunction = exports.handleAsyncError = exports.handleError = exports.SecureErrorHandler = exports.SecureError = void 0;
/* istanbul ignore next */
cov_11rek6wo81().s[2]++;
exports.HandleErrors = HandleErrors;
/**
 * Gestionnaire d'erreurs sécurisé pour éviter l'exposition d'informations sensibles
 * Améliore la sécurité selon les recommandations d'audit
 */
const secureLogger_1 =
/* istanbul ignore next */
(cov_11rek6wo81().s[3]++, require("@/shared/utils/secureLogger"));
const secureRandom_1 =
/* istanbul ignore next */
(cov_11rek6wo81().s[4]++, require("@/shared/utils/secureRandom"));
class SecureError extends Error {
  constructor(message, category =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[0][0]++, 'GENERAL'), severity =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[1][0]++, 'MEDIUM'), context, cause) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[0]++;
    cov_11rek6wo81().s[5]++;
    super(message);
    /* istanbul ignore next */
    cov_11rek6wo81().s[6]++;
    this.cause = cause;
    /* istanbul ignore next */
    cov_11rek6wo81().s[7]++;
    this.name = 'SecureError';
    /* istanbul ignore next */
    cov_11rek6wo81().s[8]++;
    this.errorId = this.generateErrorId();
    /* istanbul ignore next */
    cov_11rek6wo81().s[9]++;
    this.timestamp = Date.now();
    /* istanbul ignore next */
    cov_11rek6wo81().s[10]++;
    this.category = category;
    /* istanbul ignore next */
    cov_11rek6wo81().s[11]++;
    this.severity = severity;
    /* istanbul ignore next */
    cov_11rek6wo81().s[12]++;
    this.context = context;
  }
  generateErrorId() {
    /* istanbul ignore next */
    cov_11rek6wo81().f[1]++;
    // Générer un ID d'erreur unique pour le suivi sans exposer d'informations
    const timestamp =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[13]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[14]++, Math.floor(secureRandom_1.SecureRandom.random() * 1000000).toString(36));
    /* istanbul ignore next */
    cov_11rek6wo81().s[15]++;
    return `ERR_${timestamp}_${random}`.toUpperCase();
  }
  toSafeObject() {
    /* istanbul ignore next */
    cov_11rek6wo81().f[2]++;
    const result =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[16]++, {
      errorId: this.errorId,
      timestamp: this.timestamp,
      category: this.category,
      severity: this.severity,
      message: this.getSafeMessage()
    });
    /* istanbul ignore next */
    cov_11rek6wo81().s[17]++;
    if (this.context !== undefined) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[2][0]++;
      cov_11rek6wo81().s[18]++;
      result.context = this.context;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[2][1]++;
    }
    cov_11rek6wo81().s[19]++;
    return result;
  }
  getSafeMessage() {
    /* istanbul ignore next */
    cov_11rek6wo81().f[3]++;
    cov_11rek6wo81().s[20]++;
    // Retourner un message générique pour la production, détaillé pour le développement
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_11rek6wo81().b[3][0]++;
      cov_11rek6wo81().s[21]++;
      return this.getGenericMessage();
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[3][1]++;
    }
    cov_11rek6wo81().s[22]++;
    return this.message;
  }
  getGenericMessage() {
    /* istanbul ignore next */
    cov_11rek6wo81().f[4]++;
    const genericMessages =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[23]++, {
      AUTHENTICATION: 'Authentication failed',
      AUTHORIZATION: 'Access denied',
      VALIDATION: 'Invalid input provided',
      NETWORK: 'Network communication error',
      STORAGE: 'Data storage error',
      CRYPTO: 'Cryptographic operation failed',
      PERFORMANCE: 'Performance threshold exceeded',
      GENERAL: 'An error occurred while processing your request'
    });
    /* istanbul ignore next */
    cov_11rek6wo81().s[24]++;
    return /* istanbul ignore next */(cov_11rek6wo81().b[4][0]++, genericMessages[this.category]) ||
    /* istanbul ignore next */
    (cov_11rek6wo81().b[4][1]++, genericMessages.GENERAL);
  }
}
/* istanbul ignore next */
cov_11rek6wo81().s[25]++;
exports.SecureError = SecureError;
class SecureErrorHandler {
  /**
   * Traite une erreur de manière sécurisée
   */
  static handleError(error, category =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[5][0]++, 'GENERAL'), context, additionalInfo) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[5]++;
    const secureError =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[26]++, this.createSecureError(error, category, context));
    // Logger l'erreur avec informations détaillées en interne
    /* istanbul ignore next */
    cov_11rek6wo81().s[27]++;
    this.logErrorSecurely(secureError, error, additionalInfo);
    // Déclencher des actions basées sur la sévérité
    /* istanbul ignore next */
    cov_11rek6wo81().s[28]++;
    this.handleErrorBySeverity(secureError);
    /* istanbul ignore next */
    cov_11rek6wo81().s[29]++;
    return secureError;
  }
  /**
   * Crée une erreur sécurisée à partir d'une erreur standard
   */
  static createSecureError(error, category, context) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[6]++;
    cov_11rek6wo81().s[30]++;
    if (error instanceof SecureError) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[6][0]++;
      cov_11rek6wo81().s[31]++;
      return error;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[6][1]++;
    }
    const severity =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[32]++, this.determineSeverity(error, category));
    const message =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[33]++, this.extractSafeMessage(error));
    const originalError =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[34]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_11rek6wo81().b[7][0]++, error) :
    /* istanbul ignore next */
    (cov_11rek6wo81().b[7][1]++, undefined));
    /* istanbul ignore next */
    cov_11rek6wo81().s[35]++;
    return new SecureError(message, category, severity, context, originalError);
  }
  /**
   * Détermine la sévérité de l'erreur
   */
  static determineSeverity(error, category) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[7]++;
    // Sévérité basée sur la catégorie
    const categorySeverity =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[36]++, {
      AUTHENTICATION: 'HIGH',
      AUTHORIZATION: 'HIGH',
      CRYPTO: 'CRITICAL',
      VALIDATION: 'MEDIUM',
      NETWORK: 'MEDIUM',
      STORAGE: 'MEDIUM',
      PERFORMANCE: 'LOW',
      GENERAL: 'MEDIUM'
    });
    let severity =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[37]++, categorySeverity[category]);
    // Ajuster selon le type d'erreur
    /* istanbul ignore next */
    cov_11rek6wo81().s[38]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[8][0]++;
      cov_11rek6wo81().s[39]++;
      if (error.message.toLowerCase().includes('security')) {
        /* istanbul ignore next */
        cov_11rek6wo81().b[9][0]++;
        cov_11rek6wo81().s[40]++;
        severity = 'CRITICAL';
      } else {
        /* istanbul ignore next */
        cov_11rek6wo81().b[9][1]++;
        cov_11rek6wo81().s[41]++;
        if (error.message.toLowerCase().includes('unauthorized')) {
          /* istanbul ignore next */
          cov_11rek6wo81().b[10][0]++;
          cov_11rek6wo81().s[42]++;
          severity = 'HIGH';
        } else {
          /* istanbul ignore next */
          cov_11rek6wo81().b[10][1]++;
          cov_11rek6wo81().s[43]++;
          if (error.message.toLowerCase().includes('not found')) {
            /* istanbul ignore next */
            cov_11rek6wo81().b[11][0]++;
            cov_11rek6wo81().s[44]++;
            severity = 'LOW';
          } else
          /* istanbul ignore next */
          {
            cov_11rek6wo81().b[11][1]++;
          }
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[8][1]++;
    }
    cov_11rek6wo81().s[45]++;
    return severity;
  }
  /**
   * Extrait un message sûr de l'erreur en supprimant les informations sensibles
   */
  static extractSafeMessage(error) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[8]++;
    let message =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[46]++, 'Unknown error occurred');
    /* istanbul ignore next */
    cov_11rek6wo81().s[47]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[12][0]++;
      cov_11rek6wo81().s[48]++;
      message = error.message;
    } else {
      /* istanbul ignore next */
      cov_11rek6wo81().b[12][1]++;
      cov_11rek6wo81().s[49]++;
      if (typeof error === 'string') {
        /* istanbul ignore next */
        cov_11rek6wo81().b[13][0]++;
        cov_11rek6wo81().s[50]++;
        message = error;
      } else {
        /* istanbul ignore next */
        cov_11rek6wo81().b[13][1]++;
        cov_11rek6wo81().s[51]++;
        if (
        /* istanbul ignore next */
        (cov_11rek6wo81().b[15][0]++, error) &&
        /* istanbul ignore next */
        (cov_11rek6wo81().b[15][1]++, typeof error === 'object') &&
        /* istanbul ignore next */
        (cov_11rek6wo81().b[15][2]++, 'message' in error)) {
          /* istanbul ignore next */
          cov_11rek6wo81().b[14][0]++;
          cov_11rek6wo81().s[52]++;
          message = String(error.message);
        } else
        /* istanbul ignore next */
        {
          cov_11rek6wo81().b[14][1]++;
        }
      }
    }
    // Supprimer les informations potentiellement sensibles
    /* istanbul ignore next */
    cov_11rek6wo81().s[53]++;
    return this.sanitizeErrorMessage(message);
  }
  /**
   * Sanitise le message d'erreur en supprimant les informations sensibles
   */
  static sanitizeErrorMessage(message) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[9]++;
    let sanitized =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[54]++, message);
    // Remplacer les patterns sensibles par des placeholders
    /* istanbul ignore next */
    cov_11rek6wo81().s[55]++;
    for (const pattern of this.SENSITIVE_PATTERNS) {
      /* istanbul ignore next */
      cov_11rek6wo81().s[56]++;
      sanitized = sanitized.replace(pattern, '[REDACTED]');
    }
    // Supprimer les paths absolus qui pourraient révéler la structure
    /* istanbul ignore next */
    cov_11rek6wo81().s[57]++;
    sanitized = sanitized.replace(/[A-Z]:\\[^\\]+\\.*|\/[^\/]+\/.*/, '[PATH_REDACTED]');
    // Supprimer les stack traces détaillées
    const lines =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[58]++, sanitized.split('\n'));
    /* istanbul ignore next */
    cov_11rek6wo81().s[59]++;
    if (lines.length > 3) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[16][0]++;
      cov_11rek6wo81().s[60]++;
      sanitized = lines.slice(0, 3).join('\n') + '\n[STACK_TRUNCATED]';
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[16][1]++;
    }
    cov_11rek6wo81().s[61]++;
    return sanitized;
  }
  /**
   * Logger l'erreur de manière sécurisée
   */
  static logErrorSecurely(secureError, originalError, additionalInfo) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[10]++;
    const logData =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[62]++, {
      errorId: secureError.errorId,
      category: secureError.category,
      severity: secureError.severity,
      timestamp: secureError.timestamp,
      context: secureError.context,
      ...additionalInfo
    });
    // En développement, inclure plus de détails
    /* istanbul ignore next */
    cov_11rek6wo81().s[63]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_11rek6wo81().b[17][0]++;
      cov_11rek6wo81().s[64]++;
      logData.originalMessage = originalError instanceof Error ?
      /* istanbul ignore next */
      (cov_11rek6wo81().b[18][0]++, originalError.message) :
      /* istanbul ignore next */
      (cov_11rek6wo81().b[18][1]++, String(originalError));
      /* istanbul ignore next */
      cov_11rek6wo81().s[65]++;
      logData.stack = originalError instanceof Error ?
      /* istanbul ignore next */
      (cov_11rek6wo81().b[19][0]++, this.sanitizeStack(originalError.stack)) :
      /* istanbul ignore next */
      (cov_11rek6wo81().b[19][1]++, undefined);
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[17][1]++;
    }
    // Logger selon la sévérité
    cov_11rek6wo81().s[66]++;
    switch (secureError.severity) {
      case 'CRITICAL':
        /* istanbul ignore next */
        cov_11rek6wo81().b[20][0]++;
        cov_11rek6wo81().s[67]++;
        secureLogger_1.logger.error(`CRITICAL ERROR: ${secureError.message}`, logData,
        /* istanbul ignore next */
        (cov_11rek6wo81().b[21][0]++, secureError.context) ||
        /* istanbul ignore next */
        (cov_11rek6wo81().b[21][1]++, 'error-handler'));
        /* istanbul ignore next */
        cov_11rek6wo81().s[68]++;
        break;
      case 'HIGH':
        /* istanbul ignore next */
        cov_11rek6wo81().b[20][1]++;
        cov_11rek6wo81().s[69]++;
        secureLogger_1.logger.error(`HIGH SEVERITY: ${secureError.message}`, logData,
        /* istanbul ignore next */
        (cov_11rek6wo81().b[22][0]++, secureError.context) ||
        /* istanbul ignore next */
        (cov_11rek6wo81().b[22][1]++, 'error-handler'));
        /* istanbul ignore next */
        cov_11rek6wo81().s[70]++;
        break;
      case 'MEDIUM':
        /* istanbul ignore next */
        cov_11rek6wo81().b[20][2]++;
        cov_11rek6wo81().s[71]++;
        secureLogger_1.logger.warn(`MEDIUM SEVERITY: ${secureError.message}`, logData,
        /* istanbul ignore next */
        (cov_11rek6wo81().b[23][0]++, secureError.context) ||
        /* istanbul ignore next */
        (cov_11rek6wo81().b[23][1]++, 'error-handler'));
        /* istanbul ignore next */
        cov_11rek6wo81().s[72]++;
        break;
      case 'LOW':
        /* istanbul ignore next */
        cov_11rek6wo81().b[20][3]++;
        cov_11rek6wo81().s[73]++;
        secureLogger_1.logger.info(`LOW SEVERITY: ${secureError.message}`, logData,
        /* istanbul ignore next */
        (cov_11rek6wo81().b[24][0]++, secureError.context) ||
        /* istanbul ignore next */
        (cov_11rek6wo81().b[24][1]++, 'error-handler'));
        /* istanbul ignore next */
        cov_11rek6wo81().s[74]++;
        break;
    }
  }
  /**
   * Sanitise la stack trace
   */
  static sanitizeStack(stack) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[11]++;
    cov_11rek6wo81().s[75]++;
    if (!stack) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[25][0]++;
      cov_11rek6wo81().s[76]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[25][1]++;
    }
    const lines =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[77]++, stack.split('\n'));
    const sanitizedLines =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[78]++, lines.slice(0, this.MAX_STACK_DEPTH).map(line => {
      /* istanbul ignore next */
      cov_11rek6wo81().f[12]++;
      cov_11rek6wo81().s[79]++;
      // Supprimer les paths absolus
      return line.replace(/[A-Z]:\\[^\\]+\\.*|\/[^\/]+\/.*/, '[PATH]');
    }));
    /* istanbul ignore next */
    cov_11rek6wo81().s[80]++;
    return sanitizedLines.join('\n');
  }
  /**
   * Actions à prendre selon la sévérité
   */
  static handleErrorBySeverity(secureError) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[13]++;
    cov_11rek6wo81().s[81]++;
    switch (secureError.severity) {
      case 'CRITICAL':
        /* istanbul ignore next */
        cov_11rek6wo81().b[26][0]++;
        cov_11rek6wo81().s[82]++;
        // En production, cela pourrait déclencher des alertes
        this.alertSecurityTeam(secureError);
        /* istanbul ignore next */
        cov_11rek6wo81().s[83]++;
        break;
      case 'HIGH':
        /* istanbul ignore next */
        cov_11rek6wo81().b[26][1]++;
        cov_11rek6wo81().s[84]++;
        // Monitoring et alertes
        this.incrementErrorCounter(secureError.category);
        /* istanbul ignore next */
        cov_11rek6wo81().s[85]++;
        break;
      case 'MEDIUM':
        /* istanbul ignore next */
        cov_11rek6wo81().b[26][2]++;
        cov_11rek6wo81().s[86]++;
        // Tracking pour analyse
        this.trackErrorPattern(secureError);
        /* istanbul ignore next */
        cov_11rek6wo81().s[87]++;
        break;
      case 'LOW':
        /* istanbul ignore next */
        cov_11rek6wo81().b[26][3]++;
        cov_11rek6wo81().s[88]++;
        // Simple logging
        break;
    }
  }
  /**
   * Alerte l'équipe de sécurité (simulation)
   */
  static alertSecurityTeam(secureError) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[14]++;
    cov_11rek6wo81().s[89]++;
    secureLogger_1.logger.error('SECURITY ALERT: Critical error detected', {
      errorId: secureError.errorId,
      category: secureError.category,
      timestamp: secureError.timestamp
    }, 'security-alert');
    // En production, cela enverrait une alerte réelle
    // await sendAlert('security-team', secureError.toSafeObject());
  }
  /**
   * Incrémente le compteur d'erreurs
   */
  static incrementErrorCounter(category) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[15]++;
    cov_11rek6wo81().s[90]++;
    // En production, cela utiliserait un système de métriques comme Prometheus
    secureLogger_1.logger.info('Error counter incremented', {
      category
    }, 'error-metrics');
  }
  /**
   * Track les patterns d'erreurs
   */
  static trackErrorPattern(secureError) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[16]++;
    cov_11rek6wo81().s[91]++;
    // En production, cela analyserait les patterns pour détecter des attaques
    secureLogger_1.logger.info('Error pattern tracked', {
      errorId: secureError.errorId,
      category: secureError.category,
      context: secureError.context
    }, 'error-analytics');
  }
  /**
   * Gère les erreurs async de manière sécurisée
   */
  static async handleAsyncError(operation, category =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[27][0]++, 'GENERAL'), context) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[17]++;
    cov_11rek6wo81().s[92]++;
    try {
      /* istanbul ignore next */
      cov_11rek6wo81().s[93]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_11rek6wo81().s[94]++;
      this.handleError(error, category, context);
      /* istanbul ignore next */
      cov_11rek6wo81().s[95]++;
      return null;
    }
  }
  /**
   * Wrap une fonction pour la gestion d'erreurs sécurisée
   */
  static wrapFunction(fn, category =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[28][0]++, 'GENERAL'), context) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[18]++;
    cov_11rek6wo81().s[96]++;
    return (...args) => {
      /* istanbul ignore next */
      cov_11rek6wo81().f[19]++;
      cov_11rek6wo81().s[97]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_11rek6wo81().s[98]++, fn(...args));
        // Si la fonction retourne une Promise, gérer les erreurs async
        /* istanbul ignore next */
        cov_11rek6wo81().s[99]++;
        if (
        /* istanbul ignore next */
        (cov_11rek6wo81().b[30][0]++, result) &&
        /* istanbul ignore next */
        (cov_11rek6wo81().b[30][1]++, typeof result.then === 'function')) {
          /* istanbul ignore next */
          cov_11rek6wo81().b[29][0]++;
          cov_11rek6wo81().s[100]++;
          return result.catch(error => {
            /* istanbul ignore next */
            cov_11rek6wo81().f[20]++;
            cov_11rek6wo81().s[101]++;
            throw this.handleError(error, category, context);
          });
        } else
        /* istanbul ignore next */
        {
          cov_11rek6wo81().b[29][1]++;
        }
        cov_11rek6wo81().s[102]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rek6wo81().s[103]++;
        throw this.handleError(error, category, context);
      }
    };
  }
  /**
   * Crée une réponse d'erreur sécurisée pour les APIs
   */
  static createApiErrorResponse(error, includeErrorId =
  /* istanbul ignore next */
  (cov_11rek6wo81().b[31][0]++, true)) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[21]++;
    const response =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[104]++, {
      success: false,
      message: error.toSafeObject().message,
      timestamp: error.timestamp
    });
    /* istanbul ignore next */
    cov_11rek6wo81().s[105]++;
    if (includeErrorId) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[32][0]++;
      cov_11rek6wo81().s[106]++;
      response.errorId = error.errorId;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[32][1]++;
    }
    // En développement, inclure plus de détails
    cov_11rek6wo81().s[107]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_11rek6wo81().b[33][0]++;
      cov_11rek6wo81().s[108]++;
      response.category = error.category;
      /* istanbul ignore next */
      cov_11rek6wo81().s[109]++;
      response.severity = error.severity;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[33][1]++;
    }
    cov_11rek6wo81().s[110]++;
    return response;
  }
  /**
   * Valide si une erreur doit être exposée publiquement
   */
  static shouldExposeError(error) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[22]++;
    cov_11rek6wo81().s[111]++;
    // Ne jamais exposer les erreurs critiques de sécurité
    if (
    /* istanbul ignore next */
    (cov_11rek6wo81().b[35][0]++, error.category === 'CRYPTO') ||
    /* istanbul ignore next */
    (cov_11rek6wo81().b[35][1]++, error.category === 'AUTHENTICATION')) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[34][0]++;
      cov_11rek6wo81().s[112]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[34][1]++;
    }
    // Ne pas exposer les erreurs haute sévérité en production
    cov_11rek6wo81().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_11rek6wo81().b[37][0]++, process.env.NODE_ENV === 'production') &&
    /* istanbul ignore next */
    (cov_11rek6wo81().b[37][1]++, error.severity === 'HIGH')) {
      /* istanbul ignore next */
      cov_11rek6wo81().b[36][0]++;
      cov_11rek6wo81().s[114]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_11rek6wo81().b[36][1]++;
    }
    cov_11rek6wo81().s[115]++;
    return true;
  }
}
/* istanbul ignore next */
cov_11rek6wo81().s[116]++;
exports.SecureErrorHandler = SecureErrorHandler;
/* istanbul ignore next */
cov_11rek6wo81().s[117]++;
SecureErrorHandler.MAX_STACK_DEPTH = 10;
/* istanbul ignore next */
cov_11rek6wo81().s[118]++;
SecureErrorHandler.SENSITIVE_PATTERNS = [/password/gi, /token/gi, /secret/gi, /key/gi, /auth/gi, /session/gi, /cookie/gi, /api[_-]?key/gi, /bearer\s+[\w\-._]+/gi, /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/gi,
// emails
/\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b/gi,
// credit cards pattern
/\b(?:\d{1,3}\.){3}\d{1,3}\b/gi // IP addresses
];
// Fonctions utilitaires exportées
/* istanbul ignore next */
cov_11rek6wo81().s[119]++;
exports.handleError = SecureErrorHandler.handleError;
/* istanbul ignore next */
cov_11rek6wo81().s[120]++;
exports.handleAsyncError = SecureErrorHandler.handleAsyncError;
/* istanbul ignore next */
cov_11rek6wo81().s[121]++;
exports.wrapFunction = SecureErrorHandler.wrapFunction;
// Décorateur pour la gestion automatique d'erreurs
function HandleErrors(category =
/* istanbul ignore next */
(cov_11rek6wo81().b[38][0]++, 'GENERAL'), context) {
  /* istanbul ignore next */
  cov_11rek6wo81().f[23]++;
  cov_11rek6wo81().s[122]++;
  return function (target, propertyKey, descriptor) {
    /* istanbul ignore next */
    cov_11rek6wo81().f[24]++;
    const originalMethod =
    /* istanbul ignore next */
    (cov_11rek6wo81().s[123]++, descriptor.value);
    /* istanbul ignore next */
    cov_11rek6wo81().s[124]++;
    descriptor.value = function (...args) {
      /* istanbul ignore next */
      cov_11rek6wo81().f[25]++;
      cov_11rek6wo81().s[125]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_11rek6wo81().s[126]++, originalMethod.apply(this, args));
        /* istanbul ignore next */
        cov_11rek6wo81().s[127]++;
        if (
        /* istanbul ignore next */
        (cov_11rek6wo81().b[40][0]++, result) &&
        /* istanbul ignore next */
        (cov_11rek6wo81().b[40][1]++, typeof result.then === 'function')) {
          /* istanbul ignore next */
          cov_11rek6wo81().b[39][0]++;
          cov_11rek6wo81().s[128]++;
          return result.catch(error => {
            /* istanbul ignore next */
            cov_11rek6wo81().f[26]++;
            cov_11rek6wo81().s[129]++;
            throw SecureErrorHandler.handleError(error, category,
            /* istanbul ignore next */
            (cov_11rek6wo81().b[41][0]++, context) ||
            /* istanbul ignore next */
            (cov_11rek6wo81().b[41][1]++, `${target.constructor.name}.${propertyKey}`));
          });
        } else
        /* istanbul ignore next */
        {
          cov_11rek6wo81().b[39][1]++;
        }
        cov_11rek6wo81().s[130]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rek6wo81().s[131]++;
        throw SecureErrorHandler.handleError(error, category,
        /* istanbul ignore next */
        (cov_11rek6wo81().b[42][0]++, context) ||
        /* istanbul ignore next */
        (cov_11rek6wo81().b[42][1]++, `${target.constructor.name}.${propertyKey}`));
      }
    };
    /* istanbul ignore next */
    cov_11rek6wo81().s[132]++;
    return descriptor;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,