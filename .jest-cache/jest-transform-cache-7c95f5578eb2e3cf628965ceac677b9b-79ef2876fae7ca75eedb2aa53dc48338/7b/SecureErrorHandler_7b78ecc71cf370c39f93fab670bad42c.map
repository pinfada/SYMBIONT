{"version":3,"names":["cov_11rek6wo81","actualCoverage","s","exports","HandleErrors","secureLogger_1","require","secureRandom_1","SecureError","Error","constructor","message","category","b","severity","context","cause","f","name","errorId","generateErrorId","timestamp","Date","now","toString","random","Math","floor","SecureRandom","toUpperCase","toSafeObject","result","getSafeMessage","undefined","process","env","NODE_ENV","getGenericMessage","genericMessages","AUTHENTICATION","AUTHORIZATION","VALIDATION","NETWORK","STORAGE","CRYPTO","PERFORMANCE","GENERAL","SecureErrorHandler","handleError","error","additionalInfo","secureError","createSecureError","logErrorSecurely","handleErrorBySeverity","determineSeverity","extractSafeMessage","originalError","categorySeverity","toLowerCase","includes","String","sanitizeErrorMessage","sanitized","pattern","SENSITIVE_PATTERNS","replace","lines","split","length","slice","join","logData","originalMessage","stack","sanitizeStack","logger","warn","info","sanitizedLines","MAX_STACK_DEPTH","map","line","alertSecurityTeam","incrementErrorCounter","trackErrorPattern","handleAsyncError","operation","wrapFunction","fn","args","then","catch","createApiErrorResponse","includeErrorId","response","success","shouldExposeError","target","propertyKey","descriptor","originalMethod","value","apply"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/SecureErrorHandler.ts"],"sourcesContent":["/**\r\n * Gestionnaire d'erreurs sécurisé pour éviter l'exposition d'informations sensibles\r\n * Améliore la sécurité selon les recommandations d'audit\r\n */\r\nimport { logger } from '@/shared/utils/secureLogger';\r\nimport { SecureRandom } from '@/shared/utils/secureRandom';\r\n\r\nexport class SecureError extends Error {\r\n  public readonly errorId: string;\r\n  public readonly timestamp: number;\r\n  public readonly category: ErrorCategory;\r\n  public readonly severity: ErrorSeverity;\r\n  public readonly context: string | undefined;\r\n\r\n  constructor(\r\n    message: string,\r\n    category: ErrorCategory = 'GENERAL',\r\n    severity: ErrorSeverity = 'MEDIUM',\r\n    context: string | undefined,\r\n    public readonly cause?: Error\r\n  ) {\r\n    super(message);\r\n    this.name = 'SecureError';\r\n    this.errorId = this.generateErrorId();\r\n    this.timestamp = Date.now();\r\n    this.category = category;\r\n    this.severity = severity;\r\n    this.context = context;\r\n  }\r\n\r\n  private generateErrorId(): string {\r\n    // Générer un ID d'erreur unique pour le suivi sans exposer d'informations\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.floor(SecureRandom.random() * 1000000).toString(36);\r\n    return `ERR_${timestamp}_${random}`.toUpperCase();\r\n  }\r\n\r\n  toSafeObject(): SafeErrorObject {\r\n    const result: SafeErrorObject = {\r\n      errorId: this.errorId,\r\n      timestamp: this.timestamp,\r\n      category: this.category,\r\n      severity: this.severity,\r\n      message: this.getSafeMessage()\r\n    };\r\n    \r\n    if (this.context !== undefined) {\r\n      result.context = this.context;\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  private getSafeMessage(): string {\r\n    // Retourner un message générique pour la production, détaillé pour le développement\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return this.getGenericMessage();\r\n    }\r\n    return this.message;\r\n  }\r\n\r\n  private getGenericMessage(): string {\r\n    const genericMessages: Record<ErrorCategory, string> = {\r\n      AUTHENTICATION: 'Authentication failed',\r\n      AUTHORIZATION: 'Access denied',\r\n      VALIDATION: 'Invalid input provided',\r\n      NETWORK: 'Network communication error',\r\n      STORAGE: 'Data storage error',\r\n      CRYPTO: 'Cryptographic operation failed',\r\n      PERFORMANCE: 'Performance threshold exceeded',\r\n      GENERAL: 'An error occurred while processing your request'\r\n    };\r\n\r\n    return genericMessages[this.category] || genericMessages.GENERAL;\r\n  }\r\n}\r\n\r\nexport type ErrorCategory = \r\n  | 'AUTHENTICATION' \r\n  | 'AUTHORIZATION' \r\n  | 'VALIDATION' \r\n  | 'NETWORK' \r\n  | 'STORAGE' \r\n  | 'CRYPTO' \r\n  | 'PERFORMANCE' \r\n  | 'GENERAL';\r\n\r\nexport type ErrorSeverity = 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\r\n\r\nexport interface SafeErrorObject {\r\n  errorId: string;\r\n  timestamp: number;\r\n  category: ErrorCategory;\r\n  severity: ErrorSeverity;\r\n  message: string;\r\n  context?: string;\r\n}\r\n\r\nexport class SecureErrorHandler {\r\n  private static readonly MAX_STACK_DEPTH = 10;\r\n  private static readonly SENSITIVE_PATTERNS = [\r\n    /password/gi,\r\n    /token/gi,\r\n    /secret/gi,\r\n    /key/gi,\r\n    /auth/gi,\r\n    /session/gi,\r\n    /cookie/gi,\r\n    /api[_-]?key/gi,\r\n    /bearer\\s+[\\w\\-._]+/gi,\r\n    /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/gi, // emails\r\n    /\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/gi, // credit cards pattern\r\n    /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/gi, // IP addresses\r\n  ];\r\n\r\n  /**\r\n   * Traite une erreur de manière sécurisée\r\n   */\r\n  static handleError(\r\n    error: Error | unknown,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string,\r\n    additionalInfo?: Record<string, unknown>\r\n  ): SecureError {\r\n    const secureError = this.createSecureError(error, category, context);\r\n    \r\n    // Logger l'erreur avec informations détaillées en interne\r\n    this.logErrorSecurely(secureError, error, additionalInfo);\r\n    \r\n    // Déclencher des actions basées sur la sévérité\r\n    this.handleErrorBySeverity(secureError);\r\n    \r\n    return secureError;\r\n  }\r\n\r\n  /**\r\n   * Crée une erreur sécurisée à partir d'une erreur standard\r\n   */\r\n  private static createSecureError(\r\n    error: Error | unknown,\r\n    category: ErrorCategory,\r\n    context?: string\r\n  ): SecureError {\r\n    if (error instanceof SecureError) {\r\n      return error;\r\n    }\r\n\r\n    const severity = this.determineSeverity(error, category);\r\n    const message = this.extractSafeMessage(error);\r\n    const originalError = error instanceof Error ? error : undefined;\r\n\r\n    return new SecureError(message, category, severity, context, originalError);\r\n  }\r\n\r\n  /**\r\n   * Détermine la sévérité de l'erreur\r\n   */\r\n  private static determineSeverity(\r\n    error: Error | unknown,\r\n    category: ErrorCategory\r\n  ): ErrorSeverity {\r\n    // Sévérité basée sur la catégorie\r\n    const categorySeverity: Record<ErrorCategory, ErrorSeverity> = {\r\n      AUTHENTICATION: 'HIGH',\r\n      AUTHORIZATION: 'HIGH',\r\n      CRYPTO: 'CRITICAL',\r\n      VALIDATION: 'MEDIUM',\r\n      NETWORK: 'MEDIUM',\r\n      STORAGE: 'MEDIUM',\r\n      PERFORMANCE: 'LOW',\r\n      GENERAL: 'MEDIUM'\r\n    };\r\n\r\n    let severity = categorySeverity[category];\r\n\r\n    // Ajuster selon le type d'erreur\r\n    if (error instanceof Error) {\r\n      if (error.message.toLowerCase().includes('security')) {\r\n        severity = 'CRITICAL';\r\n      } else if (error.message.toLowerCase().includes('unauthorized')) {\r\n        severity = 'HIGH';\r\n      } else if (error.message.toLowerCase().includes('not found')) {\r\n        severity = 'LOW';\r\n      }\r\n    }\r\n\r\n    return severity;\r\n  }\r\n\r\n  /**\r\n   * Extrait un message sûr de l'erreur en supprimant les informations sensibles\r\n   */\r\n  private static extractSafeMessage(error: Error | unknown): string {\r\n    let message = 'Unknown error occurred';\r\n\r\n    if (error instanceof Error) {\r\n      message = error.message;\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n    } else if (error && typeof error === 'object' && 'message' in error) {\r\n      message = String((error as any).message);\r\n    }\r\n\r\n    // Supprimer les informations potentiellement sensibles\r\n    return this.sanitizeErrorMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Sanitise le message d'erreur en supprimant les informations sensibles\r\n   */\r\n  private static sanitizeErrorMessage(message: string): string {\r\n    let sanitized = message;\r\n\r\n    // Remplacer les patterns sensibles par des placeholders\r\n    for (const pattern of this.SENSITIVE_PATTERNS) {\r\n      sanitized = sanitized.replace(pattern, '[REDACTED]');\r\n    }\r\n\r\n    // Supprimer les paths absolus qui pourraient révéler la structure\r\n    sanitized = sanitized.replace(/[A-Z]:\\\\[^\\\\]+\\\\.*|\\/[^\\/]+\\/.*/, '[PATH_REDACTED]');\r\n    \r\n    // Supprimer les stack traces détaillées\r\n    const lines = sanitized.split('\\n');\r\n    if (lines.length > 3) {\r\n      sanitized = lines.slice(0, 3).join('\\n') + '\\n[STACK_TRUNCATED]';\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Logger l'erreur de manière sécurisée\r\n   */\r\n  private static logErrorSecurely(\r\n    secureError: SecureError,\r\n    originalError: Error | unknown,\r\n    additionalInfo?: Record<string, unknown>\r\n  ): void {\r\n    const logData = {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      severity: secureError.severity,\r\n      timestamp: secureError.timestamp,\r\n      context: secureError.context,\r\n      ...additionalInfo\r\n    };\r\n\r\n    // En développement, inclure plus de détails\r\n    if (process.env.NODE_ENV === 'development') {\r\n      (logData as any).originalMessage = originalError instanceof Error ? originalError.message : String(originalError);\r\n      (logData as any).stack = originalError instanceof Error ? this.sanitizeStack(originalError.stack) : undefined;\r\n    }\r\n\r\n    // Logger selon la sévérité\r\n    switch (secureError.severity) {\r\n      case 'CRITICAL':\r\n        logger.error(`CRITICAL ERROR: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'HIGH':\r\n        logger.error(`HIGH SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'MEDIUM':\r\n        logger.warn(`MEDIUM SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n      case 'LOW':\r\n        logger.info(`LOW SEVERITY: ${secureError.message}`, logData, secureError.context || 'error-handler');\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitise la stack trace\r\n   */\r\n  private static sanitizeStack(stack?: string): string | undefined {\r\n    if (!stack) return undefined;\r\n\r\n    const lines = stack.split('\\n');\r\n    const sanitizedLines = lines\r\n      .slice(0, this.MAX_STACK_DEPTH)\r\n      .map(line => {\r\n        // Supprimer les paths absolus\r\n        return line.replace(/[A-Z]:\\\\[^\\\\]+\\\\.*|\\/[^\\/]+\\/.*/, '[PATH]');\r\n      });\r\n\r\n    return sanitizedLines.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Actions à prendre selon la sévérité\r\n   */\r\n  private static handleErrorBySeverity(secureError: SecureError): void {\r\n    switch (secureError.severity) {\r\n      case 'CRITICAL':\r\n        // En production, cela pourrait déclencher des alertes\r\n        this.alertSecurityTeam(secureError);\r\n        break;\r\n      case 'HIGH':\r\n        // Monitoring et alertes\r\n        this.incrementErrorCounter(secureError.category);\r\n        break;\r\n      case 'MEDIUM':\r\n        // Tracking pour analyse\r\n        this.trackErrorPattern(secureError);\r\n        break;\r\n      case 'LOW':\r\n        // Simple logging\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Alerte l'équipe de sécurité (simulation)\r\n   */\r\n  private static alertSecurityTeam(secureError: SecureError): void {\r\n    logger.error('SECURITY ALERT: Critical error detected', {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      timestamp: secureError.timestamp\r\n    }, 'security-alert');\r\n    \r\n    // En production, cela enverrait une alerte réelle\r\n    // await sendAlert('security-team', secureError.toSafeObject());\r\n  }\r\n\r\n  /**\r\n   * Incrémente le compteur d'erreurs\r\n   */\r\n  private static incrementErrorCounter(category: ErrorCategory): void {\r\n    // En production, cela utiliserait un système de métriques comme Prometheus\r\n    logger.info('Error counter incremented', { category }, 'error-metrics');\r\n  }\r\n\r\n  /**\r\n   * Track les patterns d'erreurs\r\n   */\r\n  private static trackErrorPattern(secureError: SecureError): void {\r\n    // En production, cela analyserait les patterns pour détecter des attaques\r\n    logger.info('Error pattern tracked', {\r\n      errorId: secureError.errorId,\r\n      category: secureError.category,\r\n      context: secureError.context\r\n    }, 'error-analytics');\r\n  }\r\n\r\n  /**\r\n   * Gère les erreurs async de manière sécurisée\r\n   */\r\n  static async handleAsyncError<T>(\r\n    operation: () => Promise<T>,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string\r\n  ): Promise<T | null> {\r\n    try {\r\n      return await operation();\r\n    } catch (error) {\r\n      this.handleError(error, category, context);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrap une fonction pour la gestion d'erreurs sécurisée\r\n   */\r\n  static wrapFunction<T extends (...args: unknown[]) => any>(\r\n    fn: T,\r\n    category: ErrorCategory = 'GENERAL',\r\n    context?: string\r\n  ): T {\r\n    return ((...args: Parameters<T>) => {\r\n      try {\r\n        const result = fn(...args);\r\n        \r\n        // Si la fonction retourne une Promise, gérer les erreurs async\r\n        if (result && typeof result.then === 'function') {\r\n          return result.catch((error: Error) => {\r\n            throw this.handleError(error, category, context);\r\n          });\r\n        }\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        throw this.handleError(error, category, context);\r\n      }\r\n    }) as T;\r\n  }\r\n\r\n  /**\r\n   * Crée une réponse d'erreur sécurisée pour les APIs\r\n   */\r\n  static createApiErrorResponse(\r\n    error: SecureError,\r\n    includeErrorId: boolean = true\r\n  ): ApiErrorResponse {\r\n    const response: ApiErrorResponse = {\r\n      success: false,\r\n      message: error.toSafeObject().message,\r\n      timestamp: error.timestamp\r\n    };\r\n\r\n    if (includeErrorId) {\r\n      response.errorId = error.errorId;\r\n    }\r\n\r\n    // En développement, inclure plus de détails\r\n    if (process.env.NODE_ENV === 'development') {\r\n      response.category = error.category;\r\n      response.severity = error.severity;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Valide si une erreur doit être exposée publiquement\r\n   */\r\n  static shouldExposeError(error: SecureError): boolean {\r\n    // Ne jamais exposer les erreurs critiques de sécurité\r\n    if (error.category === 'CRYPTO' || error.category === 'AUTHENTICATION') {\r\n      return false;\r\n    }\r\n\r\n    // Ne pas exposer les erreurs haute sévérité en production\r\n    if (process.env.NODE_ENV === 'production' && error.severity === 'HIGH') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  success: false;\r\n  message: string;\r\n  timestamp: number;\r\n  errorId?: string;\r\n  category?: ErrorCategory;\r\n  severity?: ErrorSeverity;\r\n}\r\n\r\n// Fonctions utilitaires exportées\r\nexport const handleError = SecureErrorHandler.handleError;\r\nexport const handleAsyncError = SecureErrorHandler.handleAsyncError;\r\nexport const wrapFunction = SecureErrorHandler.wrapFunction;\r\n\r\n// Décorateur pour la gestion automatique d'erreurs\r\nexport function HandleErrors(category: ErrorCategory = 'GENERAL', context?: string) {\r\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const originalMethod = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]) {\r\n      try {\r\n        const result = originalMethod.apply(this, args);\r\n        \r\n        if (result && typeof result.then === 'function') {\r\n          return result.catch((error: Error) => {\r\n            throw SecureErrorHandler.handleError(error, category, context || `${target.constructor.name}.${propertyKey}`);\r\n          });\r\n        }\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        throw SecureErrorHandler.handleError(error, category, context || `${target.constructor.name}.${propertyKey}`);\r\n      }\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}"],"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","ignoreList":[]}