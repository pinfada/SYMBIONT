0e2db7be488aa9f6240cf8489a1928f9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityManager = void 0;
const service_worker_adapter_1 = require("./service-worker-adapter");
const secureLogger_1 = require("@shared/utils/secureLogger");
class SecurityManager {
    constructor(skipAutoInit = false) {
        this.encryptionKey = null;
        this.keyPromise = null;
        // Initialisation sécurisée avec génération de clé WebCrypto
        if (!skipAutoInit) {
            this.initializeSecureKey();
        }
    }
    /**
     * Initialise une clé de chiffrement sécurisée avec WebCrypto
     */
    async initializeSecureKey() {
        if (this.keyPromise)
            return;
        this.keyPromise = this.generateSecureKey();
        this.encryptionKey = await this.keyPromise;
    }
    /**
     * Génère une clé AES-GCM 256 bits sécurisée
     */
    async generateSecureKey() {
        if (!service_worker_adapter_1.swCryptoAPI?.subtle) {
            throw new Error('WebCrypto API non disponible - environnement non sécurisé');
        }
        // Tentative de récupération d'une clé stockée ou génération nouvelle
        const storedKeyData = await this.getStoredKey();
        if (storedKeyData) {
            return await service_worker_adapter_1.swCryptoAPI.subtle.importKey('raw', storedKeyData, { name: 'AES-GCM' }, false, ['encrypt', 'decrypt']);
        }
        // Génération d'une nouvelle clé sécurisée
        const key = await service_worker_adapter_1.swCryptoAPI.subtle.generateKey({ name: 'AES-GCM', length: 256 }, true, // Extractible pour stockage
        ['encrypt', 'decrypt']);
        // Stockage sécurisé de la clé
        await this.storeKey(key);
        return key;
    }
    /**
     * Récupère la clé stockée de manière sécurisée
     */
    async getStoredKey() {
        try {
            return new Promise((resolve) => {
                chrome.storage.local.get(['symbiont_key_v2'], (result) => {
                    if (result.symbiont_key_v2) {
                        const keyData = new Uint8Array(result.symbiont_key_v2);
                        resolve(keyData.buffer);
                    }
                    else {
                        resolve(null);
                    }
                });
            });
        }
        catch {
            return null;
        }
    }
    /**
     * Stocke la clé de manière sécurisée
     */
    async storeKey(key) {
        try {
            const keyData = await service_worker_adapter_1.swCryptoAPI.subtle.exportKey('raw', key);
            const keyArray = Array.from(new Uint8Array(keyData));
            chrome.storage.local.set({
                symbiont_key_v2: keyArray,
                symbiont_key_created: Date.now()
            });
        }
        catch (error) {
            secureLogger_1.logger.error('Erreur lors du stockage de la clé:', error);
        }
    }
    /**
     * Garantit que la clé est initialisée avant utilisation
     */
    async ensureKeyReady() {
        if (!this.encryptionKey) {
            await this.initializeSecureKey();
        }
        if (!this.encryptionKey) {
            throw new Error('Impossible d\'initialiser la clé de chiffrement');
        }
        return this.encryptionKey;
    }
    /**
     * Chiffre des données sensibles avec AES-GCM sécurisé
     */
    async encryptSensitiveData(data) {
        if (!service_worker_adapter_1.swCryptoAPI?.subtle) {
            throw new Error('WebCrypto API non disponible - chiffrement non sécurisé refusé');
        }
        try {
            const key = await this.ensureKeyReady();
            const enc = new TextEncoder();
            const iv = service_worker_adapter_1.swCryptoAPI.getRandomValues(new Uint8Array(12));
            const encoded = enc.encode(JSON.stringify(data));
            const ciphertext = await service_worker_adapter_1.swCryptoAPI.subtle.encrypt({ name: 'AES-GCM', iv }, key, encoded);
            // Concatène IV + ciphertext en base64
            const buf = new Uint8Array(iv.length + ciphertext.byteLength);
            buf.set(iv, 0);
            buf.set(new Uint8Array(ciphertext), iv.length);
            return btoa(String.fromCharCode(...buf));
        }
        catch (error) {
            secureLogger_1.logger.error('Erreur de chiffrement:', error);
            throw new Error('Échec du chiffrement des données sensibles');
        }
    }
    /**
     * Déchiffre des données sensibles avec AES-GCM sécurisé
     */
    async decryptSensitiveData(data) {
        if (typeof data !== 'string') {
            throw new Error('decryptSensitiveData attend une chaîne de caractères.');
        }
        if (!service_worker_adapter_1.swCryptoAPI?.subtle) {
            throw new Error('WebCrypto API non disponible - déchiffrement non sécurisé refusé');
        }
        try {
            const key = await this.ensureKeyReady();
            const bin = Uint8Array.from(atob(String(data)), c => c.charCodeAt(0));
            const iv = bin.slice(0, 12);
            const ciphertext = bin.slice(12);
            const plainBuffer = await service_worker_adapter_1.swCryptoAPI.subtle.decrypt({ name: 'AES-GCM', iv }, key, ciphertext);
            const plainText = new TextDecoder().decode(plainBuffer);
            return JSON.parse(plainText);
        }
        catch (error) {
            secureLogger_1.logger.error('Erreur de déchiffrement:', error);
            throw new Error('Échec du déchiffrement des données - données corrompues ou clé invalide');
        }
    }
    /**
     * Anonymise un pattern comportemental (suppression PII, hashage sécurisé)
     */
    async anonymizeForSharing(data) {
        const anonymized = { ...data };
        // Suppression des URLs sensibles
        if ('url' in anonymized) {
            anonymized.url = 'anonymized';
        }
        // Hashage sécurisé des identifiants
        if ('userId' in anonymized && typeof anonymized.userId === 'string') {
            anonymized.userId = await this.hash(anonymized.userId);
        }
        if ('id' in anonymized && typeof anonymized.id === 'string') {
            anonymized.id = await this.hash(anonymized.id);
        }
        // Suppression d'autres données personnelles potentielles (RGPD)
        const sensitiveFields = [
            'email', 'name', 'address', 'phone', 'ip',
            'ssn', 'creditCard', 'passport', 'nationalId',
            'birthDate', 'age', 'location', 'coordinates',
            'biometric', 'medical', 'financial', 'salary'
        ];
        sensitiveFields.forEach(field => {
            if (field in anonymized) {
                delete anonymized[field];
            }
        });
        // Généralisation des timestamps (précision à l'heure)
        if ('timestamp' in anonymized && typeof anonymized.timestamp === 'number') {
            anonymized.timestamp = Math.floor(anonymized.timestamp / (60 * 60 * 1000)) * (60 * 60 * 1000);
        }
        return anonymized;
    }
    /**
     * Version synchrone pour compatibilité (utilise hashSync)
     */
    anonymizeForSharingSync(data) {
        const anonymized = { ...data };
        if ('url' in anonymized)
            anonymized.url = 'anonymized';
        if ('userId' in anonymized && typeof anonymized.userId === 'string')
            anonymized.userId = this.hashSync(anonymized.userId);
        if ('id' in anonymized && typeof anonymized.id === 'string')
            anonymized.id = this.hashSync(anonymized.id);
        return anonymized;
    }
    /**
     * Contrôle d'accès par rôle (user/admin), ressource, etc.
     */
    validateDataAccess(request, requiredRole = 'user') {
        if (!request.userId || !request.resource)
            return false;
        if (requiredRole === 'admin' && request.role !== 'admin')
            return false;
        return true;
    }
    /**
     * Hash cryptographique SHA-256 pour anonymisation sécurisée
     */
    async hash(str) {
        if (!service_worker_adapter_1.swCryptoAPI?.subtle) {
            // Fallback simple en cas d'indisponibilité de WebCrypto
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = ((hash << 5) - hash) + str.charCodeAt(i);
                hash |= 0;
            }
            return btoa(hash.toString());
        }
        try {
            const encoder = new TextEncoder();
            const data = encoder.encode(str);
            const hashBuffer = await service_worker_adapter_1.swCryptoAPI.subtle.digest('SHA-256', data);
            const hashArray = new Uint8Array(hashBuffer);
            // Conversion en base64 pour un hash compact
            return btoa(String.fromCharCode(...hashArray));
        }
        catch (error) {
            secureLogger_1.logger.error('Erreur de hashage:', error);
            throw new Error('Échec du hashage sécurisé');
        }
    }
    /**
     * Version synchrone du hash pour compatibilité (non recommandée pour nouveau code)
     */
    hashSync(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = ((hash << 5) - hash) + str.charCodeAt(i);
            hash |= 0;
        }
        return btoa(hash.toString());
    }
}
exports.SecurityManager = SecurityManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,