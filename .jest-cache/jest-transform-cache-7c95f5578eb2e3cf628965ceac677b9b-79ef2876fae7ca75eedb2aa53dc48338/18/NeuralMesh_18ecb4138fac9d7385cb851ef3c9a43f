55d6af5ead47ad2d698967488f5add61
"use strict";

/* istanbul ignore next */
function cov_1p0tt5b731() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts";
  var hash = "2c52d44e286f9bc31edd0b9c15da351a787ef7bb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 31
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 37
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "6": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "10": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 87
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 52
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 55
        }
      },
      "14": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 71
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 44
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "20": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "21": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 56
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "23": {
        start: {
          line: 60,
          column: 35
        },
        end: {
          line: 60,
          column: 68
        }
      },
      "24": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "25": {
        start: {
          line: 62,
          column: 42
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "26": {
        start: {
          line: 63,
          column: 38
        },
        end: {
          line: 63,
          column: 83
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 72
        }
      },
      "28": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 49
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "32": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 90,
          column: 17
        }
      },
      "33": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "34": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 97
        }
      },
      "35": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "36": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "37": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 57
        }
      },
      "38": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 65
        }
      },
      "39": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "40": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "41": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "42": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 50
        }
      },
      "43": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 24
        }
      },
      "44": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 61
        }
      },
      "45": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 117,
          column: 27
        }
      },
      "46": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 31
        }
      },
      "47": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "48": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "49": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "50": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 34
        }
      },
      "51": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 71
        }
      },
      "52": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "53": {
        start: {
          line: 133,
          column: 82
        },
        end: {
          line: 133,
          column: 115
        }
      },
      "54": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "55": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 39
        }
      },
      "56": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "57": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 47
        }
      },
      "58": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 46
        }
      },
      "59": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 52
        }
      },
      "60": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "61": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 47
        }
      },
      "62": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 49
        }
      },
      "63": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 65
        }
      },
      "64": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 64
        }
      },
      "65": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 64
        }
      },
      "66": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 66
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 64
        }
      },
      "68": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 33
        }
      },
      "69": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 45
        }
      },
      "70": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "71": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "72": {
        start: {
          line: 189,
          column: 27
        },
        end: {
          line: 189,
          column: 73
        }
      },
      "73": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "74": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 193,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 40
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 29
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 83
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 104
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 28
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 116
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 130
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 133,
            column: 67
          },
          end: {
            line: 133,
            column: 68
          }
        },
        loc: {
          start: {
            line: 133,
            column: 82
          },
          end: {
            line: 133,
            column: 115
          }
        },
        line: 133
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 140
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 26
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 151
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 171
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 179
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 187
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 30
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 35
          }
        }, {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 29,
            column: 60
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 42
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 60,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 60,
            column: 63
          }
        }, {
          start: {
            line: 60,
            column: 67
          },
          end: {
            line: 60,
            column: 68
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 68
          }
        }, {
          start: {
            line: 62,
            column: 72
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 43
          }
        }, {
          start: {
            line: 78,
            column: 47
          },
          end: {
            line: 78,
            column: 48
          }
        }],
        line: 78
      },
      "10": {
        loc: {
          start: {
            line: 83,
            column: 11
          },
          end: {
            line: 83,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 83,
            column: 18
          },
          end: {
            line: 83,
            column: 22
          }
        }],
        line: 83
      },
      "11": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "12": {
        loc: {
          start: {
            line: 89,
            column: 67
          },
          end: {
            line: 89,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 67
          },
          end: {
            line: 89,
            column: 88
          }
        }, {
          start: {
            line: 89,
            column: 92
          },
          end: {
            line: 89,
            column: 93
          }
        }],
        line: 89
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 111,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 111,
            column: 56
          }
        }, {
          start: {
            line: 111,
            column: 59
          },
          end: {
            line: 111,
            column: 60
          }
        }],
        line: 111
      },
      "15": {
        loc: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 37
          },
          end: {
            line: 125,
            column: 66
          }
        }, {
          start: {
            line: 125,
            column: 69
          },
          end: {
            line: 125,
            column: 70
          }
        }],
        line: 125
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts"],
      sourcesContent: ["import { INeuralMesh } from './interfaces/INeuralMesh';\r\n\r\nexport class NeuralMesh implements INeuralMesh {\r\n  private nodes: Map<string, { type: string; activation: number; bias: number }> = new Map();\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux r\xE9serv\xE9 pour usage futur\r\n  private learningRate: number = 0.01;\r\n\r\n  constructor() {\r\n    // Initialize empty network\r\n  }\r\n\r\n  /**\r\n   * Ajoute un n\u0153ud au r\xE9seau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: { type: string; activation: number; bias: number } = {\r\n      type,\r\n      activation: 0,\r\n      bias\r\n    };\r\n\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux n\u0153uds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, new Map());\r\n    }\r\n    this.connections.get(fromId)!.set(toId, weight);\r\n  }\r\n\r\n  /**\r\n   * Stimule un n\u0153ud d'entr\xE9e\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      console.warn(`Cannot stimulate non-input node: ${nodeId}`);\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation \xE0 travers le r\xE9seau\r\n   */\r\n  propagate(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const [toId, weight] of connections) {\r\n        const currentActivation = this.activations.get(toId) || 0;\r\n        const newActivation = currentActivation + (fromActivation * weight);\r\n        this.activations.set(toId, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmo\xEFde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re l'activation d'un n\u0153ud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation al\xE9atoire au r\xE9seau\r\n   */\r\n  mutate(rate: number = 0.05): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const [toId, weight] of connections) {\r\n        if (Math.random() < rate) {\r\n          connections.set(toId, weight + (Math.random() - 0.5) * 0.2);\r\n          connections.set(toId, Math.max(-2, Math.min(2, connections.get(toId) || 0)));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (Math.random() < rate) {\r\n        node.bias += (Math.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activit\xE9 neurale globale\r\n   */\r\n  getNeuralActivity(): number {\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const weight of connections.values()) {\r\n        totalWeight += Math.abs(weight);\r\n        connectionCount++;\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).map(connections => Array.from(connections.entries())),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le r\xE9seau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un r\xE9seau par d\xE9faut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    console.log('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual computation time\r\n    const complexity = this.nodes.size * this.connections.size;\r\n    return Math.min(1, complexity / 1000);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual memory footprint\r\n    const memorySize = (this.nodes.size + this.connections.size) * 64; // bytes approximation\r\n    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2c52d44e286f9bc31edd0b9c15da351a787ef7bb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1p0tt5b731 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1p0tt5b731();
cov_1p0tt5b731().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1p0tt5b731().s[1]++;
exports.NeuralMesh = void 0;
class NeuralMesh {
  constructor() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[0]++;
    cov_1p0tt5b731().s[2]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[3]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[4]++;
    this.activations = new Map();
    // @ts-expect-error Taux réservé pour usage futur
    /* istanbul ignore next */
    cov_1p0tt5b731().s[5]++;
    this.learningRate = 0.01;
    // Initialize empty network
  }
  /**
   * Ajoute un nœud au réseau
   */
  addNode(id, type, bias =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[0][0]++, 0)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[1]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[6]++, {
      type,
      activation: 0,
      bias
    });
    /* istanbul ignore next */
    cov_1p0tt5b731().s[7]++;
    this.nodes.set(id, node);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[8]++;
    this.activations.set(id, 0);
  }
  /**
   * Ajoute une connexion entre deux nœuds
   */
  addConnection(fromId, toId, weight) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[2]++;
    cov_1p0tt5b731().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][0]++, !this.nodes.has(fromId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][1]++, !this.nodes.has(toId))) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[1][0]++;
      cov_1p0tt5b731().s[10]++;
      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[1][1]++;
    }
    cov_1p0tt5b731().s[11]++;
    if (!this.connections.has(fromId)) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[3][0]++;
      cov_1p0tt5b731().s[12]++;
      this.connections.set(fromId, new Map());
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[3][1]++;
    }
    cov_1p0tt5b731().s[13]++;
    this.connections.get(fromId).set(toId, weight);
  }
  /**
   * Stimule un nœud d'entrée
   */
  stimulate(nodeId, value) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[3]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[14]++, this.nodes.get(nodeId));
    /* istanbul ignore next */
    cov_1p0tt5b731().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][0]++, !node) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][1]++, node.type !== 'input')) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[4][0]++;
      cov_1p0tt5b731().s[16]++;
      console.warn(`Cannot stimulate non-input node: ${nodeId}`);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[4][1]++;
    }
    cov_1p0tt5b731().s[18]++;
    this.activations.set(nodeId, value);
  }
  /**
   * Propage l'activation à travers le réseau
   */
  propagate() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[4]++;
    cov_1p0tt5b731().s[19]++;
    // Reset non-input activations
    for (const [nodeId, node] of this.nodes) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[20]++;
      if (node.type !== 'input') {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[6][0]++;
        cov_1p0tt5b731().s[21]++;
        this.activations.set(nodeId, node.bias);
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[6][1]++;
      }
    }
    // Propagate through connections
    /* istanbul ignore next */
    cov_1p0tt5b731().s[22]++;
    for (const [fromId, connections] of this.connections) {
      const fromActivation =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[23]++,
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][0]++, this.activations.get(fromId)) ||
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][1]++, 0));
      /* istanbul ignore next */
      cov_1p0tt5b731().s[24]++;
      for (const [toId, weight] of connections) {
        const currentActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[25]++,
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][0]++, this.activations.get(toId)) ||
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][1]++, 0));
        const newActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[26]++, currentActivation + fromActivation * weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[27]++;
        this.activations.set(toId, this.sigmoid(newActivation));
      }
    }
  }
  /**
   * Fonction d'activation sigmoïde
   */
  sigmoid(x) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[5]++;
    cov_1p0tt5b731().s[28]++;
    return 1 / (1 + Math.exp(-x));
  }
  /**
   * Récupère l'activation d'un nœud
   */
  getActivation(nodeId) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[6]++;
    cov_1p0tt5b731().s[29]++;
    return /* istanbul ignore next */(cov_1p0tt5b731().b[9][0]++, this.activations.get(nodeId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[9][1]++, 0);
  }
  /**
   * Applique une mutation aléatoire au réseau
   */
  mutate(rate =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[10][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[7]++;
    cov_1p0tt5b731().s[30]++;
    // Mutate connection weights
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[31]++;
      for (const [toId, weight] of connections) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[32]++;
        if (Math.random() < rate) {
          /* istanbul ignore next */
          cov_1p0tt5b731().b[11][0]++;
          cov_1p0tt5b731().s[33]++;
          connections.set(toId, weight + (Math.random() - 0.5) * 0.2);
          /* istanbul ignore next */
          cov_1p0tt5b731().s[34]++;
          connections.set(toId, Math.max(-2, Math.min(2,
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][0]++, connections.get(toId)) ||
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][1]++, 0))));
        } else
        /* istanbul ignore next */
        {
          cov_1p0tt5b731().b[11][1]++;
        }
      }
    }
    // Mutate node biases
    /* istanbul ignore next */
    cov_1p0tt5b731().s[35]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[36]++;
      if (Math.random() < rate) {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[13][0]++;
        cov_1p0tt5b731().s[37]++;
        node.bias += (Math.random() - 0.5) * 0.1;
        /* istanbul ignore next */
        cov_1p0tt5b731().s[38]++;
        node.bias = Math.max(-1, Math.min(1, node.bias));
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[13][1]++;
      }
    }
  }
  /**
   * Mesure l'activité neurale globale
   */
  getNeuralActivity() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[8]++;
    let totalActivity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[39]++, 0);
    let nodeCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[40]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[41]++;
    for (const activation of this.activations.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[42]++;
      totalActivity += Math.abs(activation);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[43]++;
      nodeCount++;
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[44]++;
    return nodeCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][0]++, totalActivity / nodeCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][1]++, 0);
  }
  /**
   * Mesure la force moyenne des connexions
   */
  getConnectionStrength() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[9]++;
    let totalWeight =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[45]++, 0);
    let connectionCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[46]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[47]++;
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[48]++;
      for (const weight of connections.values()) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[49]++;
        totalWeight += Math.abs(weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[50]++;
        connectionCount++;
      }
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[51]++;
    return connectionCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][0]++, totalWeight / connectionCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][1]++, 0);
  }
  /**
   * Export JSON pour debug/sauvegarde
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[10]++;
    cov_1p0tt5b731().s[52]++;
    return {
      nodes: Array.from(this.nodes.values()),
      connections: Array.from(this.connections.values()).map(connections => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[11]++;
        cov_1p0tt5b731().s[53]++;
        return Array.from(connections.entries());
      }),
      activations: Object.fromEntries(this.activations)
    };
  }
  /**
   * Initialise le réseau neuronal
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[12]++;
    cov_1p0tt5b731().s[54]++;
    // Setup default network if empty
    if (this.nodes.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[16][0]++;
      cov_1p0tt5b731().s[55]++;
      this.setupDefaultNetwork();
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[16][1]++;
    }
    // Perform initial propagation
    cov_1p0tt5b731().s[56]++;
    this.propagate();
  }
  /**
   * Configure un réseau par défaut pour les tests
   */
  setupDefaultNetwork() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[13]++;
    cov_1p0tt5b731().s[57]++;
    // Add input nodes
    this.addNode('sensory_input', 'input');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[58]++;
    this.addNode('memory_input', 'input');
    // Add hidden nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[59]++;
    this.addNode('processing_1', 'hidden', 0.1);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[60]++;
    this.addNode('processing_2', 'hidden', -0.1);
    // Add output nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[61]++;
    this.addNode('motor_output', 'output');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[62]++;
    this.addNode('emotion_output', 'output');
    // Connect the network
    /* istanbul ignore next */
    cov_1p0tt5b731().s[63]++;
    this.addConnection('sensory_input', 'processing_1', 0.8);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[64]++;
    this.addConnection('memory_input', 'processing_2', 0.6);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[65]++;
    this.addConnection('processing_1', 'motor_output', 0.9);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[66]++;
    this.addConnection('processing_2', 'emotion_output', 0.7);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[67]++;
    this.addConnection('processing_1', 'processing_2', 0.3);
  }
  /**
   * Suspend neural processing
   */
  async suspend() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[14]++;
    cov_1p0tt5b731().s[68]++;
    // Clear activations but keep structure
    this.activations.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[69]++;
    console.log('Neural mesh suspended');
  }
  /**
   * Get CPU usage estimation
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[15]++;
    // Mock implementation - in real scenario, measure actual computation time
    const complexity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[70]++, this.nodes.size * this.connections.size);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[71]++;
    return Math.min(1, complexity / 1000);
  }
  /**
   * Get memory usage estimation
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[16]++;
    // Mock implementation - in real scenario, measure actual memory footprint
    const memorySize =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[72]++, (this.nodes.size + this.connections.size) * 64); // bytes approximation
    /* istanbul ignore next */
    cov_1p0tt5b731().s[73]++;
    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio
  }
}
/* istanbul ignore next */
cov_1p0tt5b731().s[74]++;
exports.NeuralMesh = NeuralMesh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,