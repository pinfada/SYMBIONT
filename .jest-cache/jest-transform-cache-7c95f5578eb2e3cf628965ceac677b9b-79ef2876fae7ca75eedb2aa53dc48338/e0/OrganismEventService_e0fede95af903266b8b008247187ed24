c2a6f3cda4e08e909e6a4d5823d43e97
"use strict";

/* istanbul ignore next */
function cov_2qfqgmoi1z() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/OrganismEventService.ts";
  var hash = "cb1bfa45893de1dbc2dfc6e7d032d737c4b25be0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/OrganismEventService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "3": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "5": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 19,
          column: 13
        }
      },
      "7": {
        start: {
          line: 16,
          column: 40
        },
        end: {
          line: 16,
          column: 68
        }
      },
      "8": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "9": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "10": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 58
        }
      },
      "12": {
        start: {
          line: 21,
          column: 41
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 82
        }
      },
      "14": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 22
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "16": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "17": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 37
        }
      },
      "19": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "20": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 47
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 110
        }
      },
      "23": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 80
        }
      },
      "24": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 59
        }
      },
      "25": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "26": {
        start: {
          line: 57,
          column: 37
        },
        end: {
          line: 57,
          column: 89
        }
      },
      "27": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 59,
          column: 89
        }
      },
      "28": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "29": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "30": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "31": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "32": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 90,
          column: 89
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "34": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "35": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "36": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 75
        }
      },
      "37": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 82
        }
      },
      "38": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 24
        }
      },
      "39": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "40": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "41": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 49
        }
      },
      "42": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 213,
          column: 50
        }
      },
      "43": {
        start: {
          line: 214,
          column: 35
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "44": {
        start: {
          line: 214,
          column: 58
        },
        end: {
          line: 214,
          column: 81
        }
      },
      "45": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "46": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 54
        }
      },
      "47": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 106
        }
      },
      "48": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 78
        }
      },
      "49": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "50": {
        start: {
          line: 229,
          column: 27
        },
        end: {
          line: 229,
          column: 49
        }
      },
      "51": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 230,
          column: 74
        }
      },
      "52": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 234,
          column: 18
        }
      },
      "53": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 61
        }
      },
      "54": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 27
        }
      },
      "55": {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 235,
          column: 86
        }
      },
      "56": {
        start: {
          line: 235,
          column: 50
        },
        end: {
          line: 235,
          column: 78
        }
      },
      "57": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "58": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "59": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 55
        }
      },
      "60": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 248,
          column: 52
        }
      },
      "61": {
        start: {
          line: 249,
          column: 0
        },
        end: {
          line: 249,
          column: 62
        }
      },
      "62": {
        start: {
          line: 250,
          column: 0
        },
        end: {
          line: 250,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 32
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 21,
            column: 56
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 87
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 68
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 35
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 111
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 123
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 67
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 210
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 50
          }
        },
        loc: {
          start: {
            line: 214,
            column: 58
          },
          end: {
            line: 214,
            column: 81
          }
        },
        line: 214
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 227
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 231,
            column: 41
          },
          end: {
            line: 231,
            column: 42
          }
        },
        loc: {
          start: {
            line: 231,
            column: 57
          },
          end: {
            line: 234,
            column: 13
          }
        },
        line: 231
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 235,
            column: 41
          },
          end: {
            line: 235,
            column: 42
          }
        },
        loc: {
          start: {
            line: 235,
            column: 50
          },
          end: {
            line: 235,
            column: 78
          }
        },
        line: 235
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 48
          },
          end: {
            line: 54,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 59
          },
          end: {
            line: 54,
            column: 66
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 33
          },
          end: {
            line: 56,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 33
          },
          end: {
            line: 56,
            column: 59
          }
        }, {
          start: {
            line: 56,
            column: 63
          },
          end: {
            line: 56,
            column: 82
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 63
          }
        }, {
          start: {
            line: 57,
            column: 67
          },
          end: {
            line: 57,
            column: 89
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 59,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 58,
            column: 45
          }
        }, {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 89
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 72,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 14
          },
          end: {
            line: 71,
            column: 94
          }
        }, {
          start: {
            line: 72,
            column: 14
          },
          end: {
            line: 72,
            column: 68
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 210,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 210,
            column: 65
          }
        }],
        line: 210
      },
      "8": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "9": {
        loc: {
          start: {
            line: 232,
            column: 35
          },
          end: {
            line: 232,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 35
          },
          end: {
            line: 232,
            column: 50
          }
        }, {
          start: {
            line: 232,
            column: 54
          },
          end: {
            line: 232,
            column: 55
          }
        }],
        line: 232
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/OrganismEventService.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/OrganismEventService.ts"],
      sourcesContent: ["// src/core/services/OrganismEventService.ts\nimport { generateSecureUUID } from '@/shared/utils/uuid';\nimport { logger } from '@/shared/utils/secureLogger';\n\nexport interface OrganismEvent {\n  id: string;\n  type: 'activation' | 'mutation' | 'transmission' | 'consciousness' | 'energy';\n  date: number;\n  description: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface MutationEvent extends OrganismEvent {\n  type: 'mutation';\n  mutationType: 'visual' | 'cognitive' | 'behavioral' | 'structural';\n  severity: 'minor' | 'major' | 'rare';\n}\n\nexport interface TransmissionEvent extends OrganismEvent {\n  type: 'transmission';\n  targetUserId?: string;\n  invitationCode?: string;\n}\n\nexport class OrganismEventService {\n  private static readonly STORAGE_KEY = 'symbiont_organism_events';\n  private static readonly MAX_EVENTS = 100;\n\n  /**\n   * R\xE9cup\xE8re tous les \xE9v\xE9nements de l'organisme\n   */\n  static async getEvents(): Promise<OrganismEvent[]> {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) {\n        // Initialiser avec l'\xE9v\xE9nement d'activation\n        const activationEvent = this.createActivationEvent();\n        await this.saveEvents([activationEvent]);\n        return [activationEvent];\n      }\n\n      const events: OrganismEvent[] = JSON.parse(stored);\n      return events.sort((a, b) => b.date - a.date); // Plus r\xE9cent en premier\n    } catch (error) {\n      logger.error('Failed to load organism events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Ajoute un nouvel \xE9v\xE9nement\n   */\n  static async addEvent(event: Omit<OrganismEvent, 'id' | 'date'>): Promise<void> {\n    try {\n      const events = await this.getEvents();\n      const newEvent: OrganismEvent = {\n        id: generateSecureUUID(),\n        date: Date.now(),\n        ...event\n      };\n\n      events.unshift(newEvent); // Ajouter au d\xE9but\n      \n      // Limiter le nombre d'\xE9v\xE9nements\n      if (events.length > this.MAX_EVENTS) {\n        events.splice(this.MAX_EVENTS);\n      }\n\n      await this.saveEvents(events);\n      logger.info('New organism event added:', { type: newEvent.type, id: newEvent.id });\n    } catch (error) {\n      logger.error('Failed to add organism event:', error);\n    }\n  }\n\n  /**\n   * Ajoute un \xE9v\xE9nement de mutation\n   */\n  static async addMutationEvent(\n    mutationType: MutationEvent['mutationType'],\n    severity: MutationEvent['severity'] = 'minor',\n    customDescription?: string\n  ): Promise<void> {\n    const descriptions = this.getMutationDescriptions();\n    const typeDescriptions = descriptions[mutationType] || descriptions.visual;\n    const severityDescriptions = typeDescriptions[severity] || typeDescriptions.minor;\n    \n    const description = customDescription || \n      severityDescriptions[Math.floor(Math.random() * severityDescriptions.length)];\n\n    await this.addEvent({\n      type: 'mutation',\n      description,\n      metadata: { mutationType, severity }\n    });\n  }\n\n  /**\n   * Ajoute un \xE9v\xE9nement de transmission\n   */\n  static async addTransmissionEvent(targetUserId?: string, invitationCode?: string): Promise<void> {\n    const description = targetUserId \n      ? `Invitation transmise avec succ\xE8s (Code: ${invitationCode?.substring(0, 6)}...)`\n      : 'Nouvelle invitation g\xE9n\xE9r\xE9e et pr\xEAte \xE0 \xEAtre partag\xE9e';\n\n    await this.addEvent({\n      type: 'transmission',\n      description,\n      metadata: { targetUserId, invitationCode }\n    });\n  }\n\n  /**\n   * Ajoute un \xE9v\xE9nement de conscience\n   */\n  static async addConsciousnessEvent(level: number): Promise<void> {\n    const descriptions = [\n      '\xC9veil de conscience d\xE9tect\xE9',\n      'Augmentation significative de la conscience',\n      'Nouvelle phase de d\xE9veloppement cognitif',\n      '\xC9mergence de patterns de pens\xE9e complexes',\n      'Transition vers un niveau de conscience sup\xE9rieur'\n    ];\n\n    const description = descriptions[Math.floor(Math.random() * descriptions.length)];\n\n    await this.addEvent({\n      type: 'consciousness',\n      description,\n      metadata: { level }\n    });\n  }\n\n  /**\n   * Cr\xE9e l'\xE9v\xE9nement d'activation initial\n   */\n  private static createActivationEvent(): OrganismEvent {\n    return {\n      id: generateSecureUUID(),\n      type: 'activation',\n      date: Date.now(),\n      description: 'Organisme digital activ\xE9 avec succ\xE8s'\n    };\n  }\n\n  /**\n   * Sauvegarde les \xE9v\xE9nements\n   */\n  private static async saveEvents(events: OrganismEvent[]): Promise<void> {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(events));\n    } catch (error) {\n      logger.error('Failed to save organism events:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descriptions des mutations selon le type et la s\xE9v\xE9rit\xE9\n   */\n  private static getMutationDescriptions(): Record<\n    MutationEvent['mutationType'],\n    Record<MutationEvent['severity'], string[]>\n  > {\n    return {\n      visual: {\n        minor: [\n          'L\xE9g\xE8re variation chromatique observ\xE9e',\n          'Ajustement subtil des patterns visuels',\n          'Modification mineure de la texture',\n          '\xC9volution graduelle de la palette de couleurs'\n        ],\n        major: [\n          'Transformation significative de l\\'apparence',\n          'Nouveau pattern de couleur \xE9mergent',\n          'Restructuration majeure des formes visuelles',\n          '\xC9volution marqu\xE9e du design organique'\n        ],\n        rare: [\n          'Manifestation visuelle extraordinaire d\xE9tect\xE9e',\n          '\xC9mergence d\\'un pattern fractal unique',\n          'D\xE9veloppement d\\'une signature visuelle rare',\n          'Mutation visuelle exceptionnelle observ\xE9e'\n        ]\n      },\n      cognitive: {\n        minor: [\n          'Optimisation des processus de r\xE9flexion',\n          'Am\xE9lioration subtile des capacit\xE9s d\\'analyse',\n          'Affinement des patterns de reconnaissance',\n          '\xC9volution graduelle de l\\'intelligence'\n        ],\n        major: [\n          'D\xE9veloppement de nouvelles capacit\xE9s cognitives',\n          'Am\xE9lioration significative de la m\xE9moire',\n          '\xC9volution majeure des processus mentaux',\n          'Augmentation notable de la complexit\xE9 cognitive'\n        ],\n        rare: [\n          '\xC9mergence d\\'une conscience de soi avanc\xE9e',\n          'D\xE9veloppement de capacit\xE9s m\xE9tacognitives',\n          '\xC9veil d\\'une intelligence sup\xE9rieure rare',\n          'Mutation cognitive exceptionnelle d\xE9tect\xE9e'\n        ]\n      },\n      behavioral: {\n        minor: [\n          'Ajustement mineur des habitudes comportementales',\n          '\xC9volution graduelle des pr\xE9f\xE9rences',\n          'Modification subtile des r\xE9actions',\n          'Adaptation comportementale observ\xE9e'\n        ],\n        major: [\n          'Changement significatif de personnalit\xE9',\n          'D\xE9veloppement de nouveaux traits comportementaux',\n          '\xC9volution majeure des patterns d\\'interaction',\n          'Transformation comportementale notable'\n        ],\n        rare: [\n          '\xC9mergence d\\'un comportement unique et complexe',\n          'D\xE9veloppement de traits de curiosit\xE9 exceptionnels',\n          'Manifestation comportementale extraordinaire',\n          '\xC9volution comportementale rare observ\xE9e'\n        ]\n      },\n      structural: {\n        minor: [\n          'Optimisation mineure de la structure interne',\n          'Ajustement architectural subtil',\n          '\xC9volution graduelle de l\\'organisation',\n          'Raffinement structural observ\xE9'\n        ],\n        major: [\n          'Restructuration significative de l\\'architecture',\n          'D\xE9veloppement de nouveaux modules fonctionnels',\n          '\xC9volution majeure de la structure interne',\n          'Transformation architecturale importante'\n        ],\n        rare: [\n          '\xC9mergence d\\'une architecture r\xE9volutionnaire',\n          'D\xE9veloppement structural extraordinaire',\n          'Mutation architecturale exceptionnelle',\n          '\xC9volution structurelle rare et complexe'\n        ]\n      }\n    };\n  }\n\n  /**\n   * Nettoie les anciens \xE9v\xE9nements\n   */\n  static async cleanOldEvents(maxAge: number = 30 * 24 * 60 * 60 * 1000): Promise<void> {\n    try {\n      const events = await this.getEvents();\n      const cutoffDate = Date.now() - maxAge;\n      const filteredEvents = events.filter(event => event.date > cutoffDate);\n      \n      if (filteredEvents.length !== events.length) {\n        await this.saveEvents(filteredEvents);\n        logger.info(`Cleaned ${events.length - filteredEvents.length} old events`);\n      }\n    } catch (error) {\n      logger.error('Failed to clean old events:', error);\n    }\n  }\n\n  /**\n   * Obtient les statistiques des \xE9v\xE9nements\n   */\n  static async getEventStats(): Promise<{\n    total: number;\n    byType: Record<string, number>;\n    recent: number;\n  }> {\n    try {\n      const events = await this.getEvents();\n      const recentThreshold = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 jours\n      \n      const byType = events.reduce((acc, event) => {\n        acc[event.type] = (acc[event.type] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      const recent = events.filter(event => event.date > recentThreshold).length;\n\n      return {\n        total: events.length,\n        byType,\n        recent\n      };\n    } catch (error) {\n      logger.error('Failed to get event stats:', error);\n      return { total: 0, byType: {}, recent: 0 };\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cb1bfa45893de1dbc2dfc6e7d032d737c4b25be0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qfqgmoi1z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qfqgmoi1z();
cov_2qfqgmoi1z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qfqgmoi1z().s[1]++;
exports.OrganismEventService = void 0;
// src/core/services/OrganismEventService.ts
const uuid_1 =
/* istanbul ignore next */
(cov_2qfqgmoi1z().s[2]++, require("@/shared/utils/uuid"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_2qfqgmoi1z().s[3]++, require("@/shared/utils/secureLogger"));
class OrganismEventService {
  /**
   * Récupère tous les événements de l'organisme
   */
  static async getEvents() {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[0]++;
    cov_2qfqgmoi1z().s[4]++;
    try {
      const stored =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[5]++, localStorage.getItem(this.STORAGE_KEY));
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[6]++;
      if (!stored) {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().b[0][0]++;
        // Initialiser avec l'événement d'activation
        const activationEvent =
        /* istanbul ignore next */
        (cov_2qfqgmoi1z().s[7]++, this.createActivationEvent());
        /* istanbul ignore next */
        cov_2qfqgmoi1z().s[8]++;
        await this.saveEvents([activationEvent]);
        /* istanbul ignore next */
        cov_2qfqgmoi1z().s[9]++;
        return [activationEvent];
      } else
      /* istanbul ignore next */
      {
        cov_2qfqgmoi1z().b[0][1]++;
      }
      const events =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[10]++, JSON.parse(stored));
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[11]++;
      return events.sort((a, b) => {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().f[1]++;
        cov_2qfqgmoi1z().s[12]++;
        return b.date - a.date;
      }); // Plus récent en premier
    } catch (error) {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[13]++;
      secureLogger_1.logger.error('Failed to load organism events:', error);
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[14]++;
      return [];
    }
  }
  /**
   * Ajoute un nouvel événement
   */
  static async addEvent(event) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[2]++;
    cov_2qfqgmoi1z().s[15]++;
    try {
      const events =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[16]++, await this.getEvents());
      const newEvent =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[17]++, {
        id: (0, uuid_1.generateSecureUUID)(),
        date: Date.now(),
        ...event
      });
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[18]++;
      events.unshift(newEvent); // Ajouter au début
      // Limiter le nombre d'événements
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[19]++;
      if (events.length > this.MAX_EVENTS) {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().b[1][0]++;
        cov_2qfqgmoi1z().s[20]++;
        events.splice(this.MAX_EVENTS);
      } else
      /* istanbul ignore next */
      {
        cov_2qfqgmoi1z().b[1][1]++;
      }
      cov_2qfqgmoi1z().s[21]++;
      await this.saveEvents(events);
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[22]++;
      secureLogger_1.logger.info('New organism event added:', {
        type: newEvent.type,
        id: newEvent.id
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[23]++;
      secureLogger_1.logger.error('Failed to add organism event:', error);
    }
  }
  /**
   * Ajoute un événement de mutation
   */
  static async addMutationEvent(mutationType, severity =
  /* istanbul ignore next */
  (cov_2qfqgmoi1z().b[2][0]++, 'minor'), customDescription) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[3]++;
    const descriptions =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[24]++, this.getMutationDescriptions());
    const typeDescriptions =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[25]++,
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[3][0]++, descriptions[mutationType]) ||
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[3][1]++, descriptions.visual));
    const severityDescriptions =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[26]++,
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[4][0]++, typeDescriptions[severity]) ||
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[4][1]++, typeDescriptions.minor));
    const description =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[27]++,
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[5][0]++, customDescription) ||
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[5][1]++, severityDescriptions[Math.floor(Math.random() * severityDescriptions.length)]));
    /* istanbul ignore next */
    cov_2qfqgmoi1z().s[28]++;
    await this.addEvent({
      type: 'mutation',
      description,
      metadata: {
        mutationType,
        severity
      }
    });
  }
  /**
   * Ajoute un événement de transmission
   */
  static async addTransmissionEvent(targetUserId, invitationCode) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[4]++;
    const description =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[29]++, targetUserId ?
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[6][0]++, `Invitation transmise avec succès (Code: ${invitationCode?.substring(0, 6)}...)`) :
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().b[6][1]++, 'Nouvelle invitation générée et prête à être partagée'));
    /* istanbul ignore next */
    cov_2qfqgmoi1z().s[30]++;
    await this.addEvent({
      type: 'transmission',
      description,
      metadata: {
        targetUserId,
        invitationCode
      }
    });
  }
  /**
   * Ajoute un événement de conscience
   */
  static async addConsciousnessEvent(level) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[5]++;
    const descriptions =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[31]++, ['Éveil de conscience détecté', 'Augmentation significative de la conscience', 'Nouvelle phase de développement cognitif', 'Émergence de patterns de pensée complexes', 'Transition vers un niveau de conscience supérieur']);
    const description =
    /* istanbul ignore next */
    (cov_2qfqgmoi1z().s[32]++, descriptions[Math.floor(Math.random() * descriptions.length)]);
    /* istanbul ignore next */
    cov_2qfqgmoi1z().s[33]++;
    await this.addEvent({
      type: 'consciousness',
      description,
      metadata: {
        level
      }
    });
  }
  /**
   * Crée l'événement d'activation initial
   */
  static createActivationEvent() {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[6]++;
    cov_2qfqgmoi1z().s[34]++;
    return {
      id: (0, uuid_1.generateSecureUUID)(),
      type: 'activation',
      date: Date.now(),
      description: 'Organisme digital activé avec succès'
    };
  }
  /**
   * Sauvegarde les événements
   */
  static async saveEvents(events) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[7]++;
    cov_2qfqgmoi1z().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[36]++;
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(events));
    } catch (error) {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[37]++;
      secureLogger_1.logger.error('Failed to save organism events:', error);
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[38]++;
      throw error;
    }
  }
  /**
   * Descriptions des mutations selon le type et la sévérité
   */
  static getMutationDescriptions() {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[8]++;
    cov_2qfqgmoi1z().s[39]++;
    return {
      visual: {
        minor: ['Légère variation chromatique observée', 'Ajustement subtil des patterns visuels', 'Modification mineure de la texture', 'Évolution graduelle de la palette de couleurs'],
        major: ['Transformation significative de l\'apparence', 'Nouveau pattern de couleur émergent', 'Restructuration majeure des formes visuelles', 'Évolution marquée du design organique'],
        rare: ['Manifestation visuelle extraordinaire détectée', 'Émergence d\'un pattern fractal unique', 'Développement d\'une signature visuelle rare', 'Mutation visuelle exceptionnelle observée']
      },
      cognitive: {
        minor: ['Optimisation des processus de réflexion', 'Amélioration subtile des capacités d\'analyse', 'Affinement des patterns de reconnaissance', 'Évolution graduelle de l\'intelligence'],
        major: ['Développement de nouvelles capacités cognitives', 'Amélioration significative de la mémoire', 'Évolution majeure des processus mentaux', 'Augmentation notable de la complexité cognitive'],
        rare: ['Émergence d\'une conscience de soi avancée', 'Développement de capacités métacognitives', 'Éveil d\'une intelligence supérieure rare', 'Mutation cognitive exceptionnelle détectée']
      },
      behavioral: {
        minor: ['Ajustement mineur des habitudes comportementales', 'Évolution graduelle des préférences', 'Modification subtile des réactions', 'Adaptation comportementale observée'],
        major: ['Changement significatif de personnalité', 'Développement de nouveaux traits comportementaux', 'Évolution majeure des patterns d\'interaction', 'Transformation comportementale notable'],
        rare: ['Émergence d\'un comportement unique et complexe', 'Développement de traits de curiosité exceptionnels', 'Manifestation comportementale extraordinaire', 'Évolution comportementale rare observée']
      },
      structural: {
        minor: ['Optimisation mineure de la structure interne', 'Ajustement architectural subtil', 'Évolution graduelle de l\'organisation', 'Raffinement structural observé'],
        major: ['Restructuration significative de l\'architecture', 'Développement de nouveaux modules fonctionnels', 'Évolution majeure de la structure interne', 'Transformation architecturale importante'],
        rare: ['Émergence d\'une architecture révolutionnaire', 'Développement structural extraordinaire', 'Mutation architecturale exceptionnelle', 'Évolution structurelle rare et complexe']
      }
    };
  }
  /**
   * Nettoie les anciens événements
   */
  static async cleanOldEvents(maxAge =
  /* istanbul ignore next */
  (cov_2qfqgmoi1z().b[7][0]++, 30 * 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[9]++;
    cov_2qfqgmoi1z().s[40]++;
    try {
      const events =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[41]++, await this.getEvents());
      const cutoffDate =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[42]++, Date.now() - maxAge);
      const filteredEvents =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[43]++, events.filter(event => {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().f[10]++;
        cov_2qfqgmoi1z().s[44]++;
        return event.date > cutoffDate;
      }));
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[45]++;
      if (filteredEvents.length !== events.length) {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().b[8][0]++;
        cov_2qfqgmoi1z().s[46]++;
        await this.saveEvents(filteredEvents);
        /* istanbul ignore next */
        cov_2qfqgmoi1z().s[47]++;
        secureLogger_1.logger.info(`Cleaned ${events.length - filteredEvents.length} old events`);
      } else
      /* istanbul ignore next */
      {
        cov_2qfqgmoi1z().b[8][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[48]++;
      secureLogger_1.logger.error('Failed to clean old events:', error);
    }
  }
  /**
   * Obtient les statistiques des événements
   */
  static async getEventStats() {
    /* istanbul ignore next */
    cov_2qfqgmoi1z().f[11]++;
    cov_2qfqgmoi1z().s[49]++;
    try {
      const events =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[50]++, await this.getEvents());
      const recentThreshold =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[51]++, Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 jours
      const byType =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[52]++, events.reduce((acc, event) => {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().f[12]++;
        cov_2qfqgmoi1z().s[53]++;
        acc[event.type] = (
        /* istanbul ignore next */
        (cov_2qfqgmoi1z().b[9][0]++, acc[event.type]) ||
        /* istanbul ignore next */
        (cov_2qfqgmoi1z().b[9][1]++, 0)) + 1;
        /* istanbul ignore next */
        cov_2qfqgmoi1z().s[54]++;
        return acc;
      }, {}));
      const recent =
      /* istanbul ignore next */
      (cov_2qfqgmoi1z().s[55]++, events.filter(event => {
        /* istanbul ignore next */
        cov_2qfqgmoi1z().f[13]++;
        cov_2qfqgmoi1z().s[56]++;
        return event.date > recentThreshold;
      }).length);
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[57]++;
      return {
        total: events.length,
        byType,
        recent
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[58]++;
      secureLogger_1.logger.error('Failed to get event stats:', error);
      /* istanbul ignore next */
      cov_2qfqgmoi1z().s[59]++;
      return {
        total: 0,
        byType: {},
        recent: 0
      };
    }
  }
}
/* istanbul ignore next */
cov_2qfqgmoi1z().s[60]++;
exports.OrganismEventService = OrganismEventService;
/* istanbul ignore next */
cov_2qfqgmoi1z().s[61]++;
OrganismEventService.STORAGE_KEY = 'symbiont_organism_events';
/* istanbul ignore next */
cov_2qfqgmoi1z().s[62]++;
OrganismEventService.MAX_EVENTS = 100;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dWlkXzEiLCJjb3ZfMnFmcWdtb2kxeiIsInMiLCJyZXF1aXJlIiwic2VjdXJlTG9nZ2VyXzEiLCJPcmdhbmlzbUV2ZW50U2VydmljZSIsImdldEV2ZW50cyIsImYiLCJzdG9yZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiU1RPUkFHRV9LRVkiLCJiIiwiYWN0aXZhdGlvbkV2ZW50IiwiY3JlYXRlQWN0aXZhdGlvbkV2ZW50Iiwic2F2ZUV2ZW50cyIsImV2ZW50cyIsIkpTT04iLCJwYXJzZSIsInNvcnQiLCJhIiwiZGF0ZSIsImVycm9yIiwibG9nZ2VyIiwiYWRkRXZlbnQiLCJldmVudCIsIm5ld0V2ZW50IiwiaWQiLCJnZW5lcmF0ZVNlY3VyZVVVSUQiLCJEYXRlIiwibm93IiwidW5zaGlmdCIsImxlbmd0aCIsIk1BWF9FVkVOVFMiLCJzcGxpY2UiLCJpbmZvIiwidHlwZSIsImFkZE11dGF0aW9uRXZlbnQiLCJtdXRhdGlvblR5cGUiLCJzZXZlcml0eSIsImN1c3RvbURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25zIiwiZ2V0TXV0YXRpb25EZXNjcmlwdGlvbnMiLCJ0eXBlRGVzY3JpcHRpb25zIiwidmlzdWFsIiwic2V2ZXJpdHlEZXNjcmlwdGlvbnMiLCJtaW5vciIsImRlc2NyaXB0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibWV0YWRhdGEiLCJhZGRUcmFuc21pc3Npb25FdmVudCIsInRhcmdldFVzZXJJZCIsImludml0YXRpb25Db2RlIiwic3Vic3RyaW5nIiwiYWRkQ29uc2Npb3VzbmVzc0V2ZW50IiwibGV2ZWwiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwibWFqb3IiLCJyYXJlIiwiY29nbml0aXZlIiwiYmVoYXZpb3JhbCIsInN0cnVjdHVyYWwiLCJjbGVhbk9sZEV2ZW50cyIsIm1heEFnZSIsImN1dG9mZkRhdGUiLCJmaWx0ZXJlZEV2ZW50cyIsImZpbHRlciIsImdldEV2ZW50U3RhdHMiLCJyZWNlbnRUaHJlc2hvbGQiLCJieVR5cGUiLCJyZWR1Y2UiLCJhY2MiLCJyZWNlbnQiLCJ0b3RhbCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvbW50L2MvVXNlcnMvbV9vbGkvUHJvamV0cy9TWU1CSU9OVC9zcmMvY29yZS9zZXJ2aWNlcy9PcmdhbmlzbUV2ZW50U2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29yZS9zZXJ2aWNlcy9PcmdhbmlzbUV2ZW50U2VydmljZS50c1xuaW1wb3J0IHsgZ2VuZXJhdGVTZWN1cmVVVUlEIH0gZnJvbSAnQC9zaGFyZWQvdXRpbHMvdXVpZCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAL3NoYXJlZC91dGlscy9zZWN1cmVMb2dnZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9yZ2FuaXNtRXZlbnQge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiAnYWN0aXZhdGlvbicgfCAnbXV0YXRpb24nIHwgJ3RyYW5zbWlzc2lvbicgfCAnY29uc2Npb3VzbmVzcycgfCAnZW5lcmd5JztcbiAgZGF0ZTogbnVtYmVyO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE11dGF0aW9uRXZlbnQgZXh0ZW5kcyBPcmdhbmlzbUV2ZW50IHtcbiAgdHlwZTogJ211dGF0aW9uJztcbiAgbXV0YXRpb25UeXBlOiAndmlzdWFsJyB8ICdjb2duaXRpdmUnIHwgJ2JlaGF2aW9yYWwnIHwgJ3N0cnVjdHVyYWwnO1xuICBzZXZlcml0eTogJ21pbm9yJyB8ICdtYWpvcicgfCAncmFyZSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNtaXNzaW9uRXZlbnQgZXh0ZW5kcyBPcmdhbmlzbUV2ZW50IHtcbiAgdHlwZTogJ3RyYW5zbWlzc2lvbic7XG4gIHRhcmdldFVzZXJJZD86IHN0cmluZztcbiAgaW52aXRhdGlvbkNvZGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBPcmdhbmlzbUV2ZW50U2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNUT1JBR0VfS0VZID0gJ3N5bWJpb250X29yZ2FuaXNtX2V2ZW50cyc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9FVkVOVFMgPSAxMDA7XG5cbiAgLyoqXG4gICAqIFLDqWN1cMOocmUgdG91cyBsZXMgw6l2w6luZW1lbnRzIGRlIGwnb3JnYW5pc21lXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ2V0RXZlbnRzKCk6IFByb21pc2U8T3JnYW5pc21FdmVudFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuU1RPUkFHRV9LRVkpO1xuICAgICAgaWYgKCFzdG9yZWQpIHtcbiAgICAgICAgLy8gSW5pdGlhbGlzZXIgYXZlYyBsJ8OpdsOpbmVtZW50IGQnYWN0aXZhdGlvblxuICAgICAgICBjb25zdCBhY3RpdmF0aW9uRXZlbnQgPSB0aGlzLmNyZWF0ZUFjdGl2YXRpb25FdmVudCgpO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVFdmVudHMoW2FjdGl2YXRpb25FdmVudF0pO1xuICAgICAgICByZXR1cm4gW2FjdGl2YXRpb25FdmVudF07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV2ZW50czogT3JnYW5pc21FdmVudFtdID0gSlNPTi5wYXJzZShzdG9yZWQpO1xuICAgICAgcmV0dXJuIGV2ZW50cy5zb3J0KChhLCBiKSA9PiBiLmRhdGUgLSBhLmRhdGUpOyAvLyBQbHVzIHLDqWNlbnQgZW4gcHJlbWllclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIG9yZ2FuaXNtIGV2ZW50czonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFqb3V0ZSB1biBub3V2ZWwgw6l2w6luZW1lbnRcbiAgICovXG4gIHN0YXRpYyBhc3luYyBhZGRFdmVudChldmVudDogT21pdDxPcmdhbmlzbUV2ZW50LCAnaWQnIHwgJ2RhdGUnPik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBldmVudHMgPSBhd2FpdCB0aGlzLmdldEV2ZW50cygpO1xuICAgICAgY29uc3QgbmV3RXZlbnQ6IE9yZ2FuaXNtRXZlbnQgPSB7XG4gICAgICAgIGlkOiBnZW5lcmF0ZVNlY3VyZVVVSUQoKSxcbiAgICAgICAgZGF0ZTogRGF0ZS5ub3coKSxcbiAgICAgICAgLi4uZXZlbnRcbiAgICAgIH07XG5cbiAgICAgIGV2ZW50cy51bnNoaWZ0KG5ld0V2ZW50KTsgLy8gQWpvdXRlciBhdSBkw6lidXRcbiAgICAgIFxuICAgICAgLy8gTGltaXRlciBsZSBub21icmUgZCfDqXbDqW5lbWVudHNcbiAgICAgIGlmIChldmVudHMubGVuZ3RoID4gdGhpcy5NQVhfRVZFTlRTKSB7XG4gICAgICAgIGV2ZW50cy5zcGxpY2UodGhpcy5NQVhfRVZFTlRTKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5zYXZlRXZlbnRzKGV2ZW50cyk7XG4gICAgICBsb2dnZXIuaW5mbygnTmV3IG9yZ2FuaXNtIGV2ZW50IGFkZGVkOicsIHsgdHlwZTogbmV3RXZlbnQudHlwZSwgaWQ6IG5ld0V2ZW50LmlkIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBhZGQgb3JnYW5pc20gZXZlbnQ6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBam91dGUgdW4gw6l2w6luZW1lbnQgZGUgbXV0YXRpb25cbiAgICovXG4gIHN0YXRpYyBhc3luYyBhZGRNdXRhdGlvbkV2ZW50KFxuICAgIG11dGF0aW9uVHlwZTogTXV0YXRpb25FdmVudFsnbXV0YXRpb25UeXBlJ10sXG4gICAgc2V2ZXJpdHk6IE11dGF0aW9uRXZlbnRbJ3NldmVyaXR5J10gPSAnbWlub3InLFxuICAgIGN1c3RvbURlc2NyaXB0aW9uPzogc3RyaW5nXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRlc2NyaXB0aW9ucyA9IHRoaXMuZ2V0TXV0YXRpb25EZXNjcmlwdGlvbnMoKTtcbiAgICBjb25zdCB0eXBlRGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zW211dGF0aW9uVHlwZV0gfHwgZGVzY3JpcHRpb25zLnZpc3VhbDtcbiAgICBjb25zdCBzZXZlcml0eURlc2NyaXB0aW9ucyA9IHR5cGVEZXNjcmlwdGlvbnNbc2V2ZXJpdHldIHx8IHR5cGVEZXNjcmlwdGlvbnMubWlub3I7XG4gICAgXG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBjdXN0b21EZXNjcmlwdGlvbiB8fCBcbiAgICAgIHNldmVyaXR5RGVzY3JpcHRpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNldmVyaXR5RGVzY3JpcHRpb25zLmxlbmd0aCldO1xuXG4gICAgYXdhaXQgdGhpcy5hZGRFdmVudCh7XG4gICAgICB0eXBlOiAnbXV0YXRpb24nLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBtZXRhZGF0YTogeyBtdXRhdGlvblR5cGUsIHNldmVyaXR5IH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBam91dGUgdW4gw6l2w6luZW1lbnQgZGUgdHJhbnNtaXNzaW9uXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgYWRkVHJhbnNtaXNzaW9uRXZlbnQodGFyZ2V0VXNlcklkPzogc3RyaW5nLCBpbnZpdGF0aW9uQ29kZT86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGFyZ2V0VXNlcklkIFxuICAgICAgPyBgSW52aXRhdGlvbiB0cmFuc21pc2UgYXZlYyBzdWNjw6hzIChDb2RlOiAke2ludml0YXRpb25Db2RlPy5zdWJzdHJpbmcoMCwgNil9Li4uKWBcbiAgICAgIDogJ05vdXZlbGxlIGludml0YXRpb24gZ8OpbsOpcsOpZSBldCBwcsOqdGUgw6Agw6p0cmUgcGFydGFnw6llJztcblxuICAgIGF3YWl0IHRoaXMuYWRkRXZlbnQoe1xuICAgICAgdHlwZTogJ3RyYW5zbWlzc2lvbicsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG1ldGFkYXRhOiB7IHRhcmdldFVzZXJJZCwgaW52aXRhdGlvbkNvZGUgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFqb3V0ZSB1biDDqXbDqW5lbWVudCBkZSBjb25zY2llbmNlXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgYWRkQ29uc2Npb3VzbmVzc0V2ZW50KGxldmVsOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSBbXG4gICAgICAnw4l2ZWlsIGRlIGNvbnNjaWVuY2UgZMOpdGVjdMOpJyxcbiAgICAgICdBdWdtZW50YXRpb24gc2lnbmlmaWNhdGl2ZSBkZSBsYSBjb25zY2llbmNlJyxcbiAgICAgICdOb3V2ZWxsZSBwaGFzZSBkZSBkw6l2ZWxvcHBlbWVudCBjb2duaXRpZicsXG4gICAgICAnw4ltZXJnZW5jZSBkZSBwYXR0ZXJucyBkZSBwZW5zw6llIGNvbXBsZXhlcycsXG4gICAgICAnVHJhbnNpdGlvbiB2ZXJzIHVuIG5pdmVhdSBkZSBjb25zY2llbmNlIHN1cMOpcmlldXInXG4gICAgXTtcblxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRlc2NyaXB0aW9ucy5sZW5ndGgpXTtcblxuICAgIGF3YWl0IHRoaXMuYWRkRXZlbnQoe1xuICAgICAgdHlwZTogJ2NvbnNjaW91c25lc3MnLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBtZXRhZGF0YTogeyBsZXZlbCB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3LDqWUgbCfDqXbDqW5lbWVudCBkJ2FjdGl2YXRpb24gaW5pdGlhbFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlQWN0aXZhdGlvbkV2ZW50KCk6IE9yZ2FuaXNtRXZlbnQge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogZ2VuZXJhdGVTZWN1cmVVVUlEKCksXG4gICAgICB0eXBlOiAnYWN0aXZhdGlvbicsXG4gICAgICBkYXRlOiBEYXRlLm5vdygpLFxuICAgICAgZGVzY3JpcHRpb246ICdPcmdhbmlzbWUgZGlnaXRhbCBhY3RpdsOpIGF2ZWMgc3VjY8OocydcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdXZlZ2FyZGUgbGVzIMOpdsOpbmVtZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgc2F2ZUV2ZW50cyhldmVudHM6IE9yZ2FuaXNtRXZlbnRbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShldmVudHMpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBvcmdhbmlzbSBldmVudHM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9ucyBkZXMgbXV0YXRpb25zIHNlbG9uIGxlIHR5cGUgZXQgbGEgc8OpdsOpcml0w6lcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGdldE11dGF0aW9uRGVzY3JpcHRpb25zKCk6IFJlY29yZDxcbiAgICBNdXRhdGlvbkV2ZW50WydtdXRhdGlvblR5cGUnXSxcbiAgICBSZWNvcmQ8TXV0YXRpb25FdmVudFsnc2V2ZXJpdHknXSwgc3RyaW5nW10+XG4gID4ge1xuICAgIHJldHVybiB7XG4gICAgICB2aXN1YWw6IHtcbiAgICAgICAgbWlub3I6IFtcbiAgICAgICAgICAnTMOpZ8OocmUgdmFyaWF0aW9uIGNocm9tYXRpcXVlIG9ic2VydsOpZScsXG4gICAgICAgICAgJ0FqdXN0ZW1lbnQgc3VidGlsIGRlcyBwYXR0ZXJucyB2aXN1ZWxzJyxcbiAgICAgICAgICAnTW9kaWZpY2F0aW9uIG1pbmV1cmUgZGUgbGEgdGV4dHVyZScsXG4gICAgICAgICAgJ8OJdm9sdXRpb24gZ3JhZHVlbGxlIGRlIGxhIHBhbGV0dGUgZGUgY291bGV1cnMnXG4gICAgICAgIF0sXG4gICAgICAgIG1ham9yOiBbXG4gICAgICAgICAgJ1RyYW5zZm9ybWF0aW9uIHNpZ25pZmljYXRpdmUgZGUgbFxcJ2FwcGFyZW5jZScsXG4gICAgICAgICAgJ05vdXZlYXUgcGF0dGVybiBkZSBjb3VsZXVyIMOpbWVyZ2VudCcsXG4gICAgICAgICAgJ1Jlc3RydWN0dXJhdGlvbiBtYWpldXJlIGRlcyBmb3JtZXMgdmlzdWVsbGVzJyxcbiAgICAgICAgICAnw4l2b2x1dGlvbiBtYXJxdcOpZSBkdSBkZXNpZ24gb3JnYW5pcXVlJ1xuICAgICAgICBdLFxuICAgICAgICByYXJlOiBbXG4gICAgICAgICAgJ01hbmlmZXN0YXRpb24gdmlzdWVsbGUgZXh0cmFvcmRpbmFpcmUgZMOpdGVjdMOpZScsXG4gICAgICAgICAgJ8OJbWVyZ2VuY2UgZFxcJ3VuIHBhdHRlcm4gZnJhY3RhbCB1bmlxdWUnLFxuICAgICAgICAgICdEw6l2ZWxvcHBlbWVudCBkXFwndW5lIHNpZ25hdHVyZSB2aXN1ZWxsZSByYXJlJyxcbiAgICAgICAgICAnTXV0YXRpb24gdmlzdWVsbGUgZXhjZXB0aW9ubmVsbGUgb2JzZXJ2w6llJ1xuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgY29nbml0aXZlOiB7XG4gICAgICAgIG1pbm9yOiBbXG4gICAgICAgICAgJ09wdGltaXNhdGlvbiBkZXMgcHJvY2Vzc3VzIGRlIHLDqWZsZXhpb24nLFxuICAgICAgICAgICdBbcOpbGlvcmF0aW9uIHN1YnRpbGUgZGVzIGNhcGFjaXTDqXMgZFxcJ2FuYWx5c2UnLFxuICAgICAgICAgICdBZmZpbmVtZW50IGRlcyBwYXR0ZXJucyBkZSByZWNvbm5haXNzYW5jZScsXG4gICAgICAgICAgJ8OJdm9sdXRpb24gZ3JhZHVlbGxlIGRlIGxcXCdpbnRlbGxpZ2VuY2UnXG4gICAgICAgIF0sXG4gICAgICAgIG1ham9yOiBbXG4gICAgICAgICAgJ0TDqXZlbG9wcGVtZW50IGRlIG5vdXZlbGxlcyBjYXBhY2l0w6lzIGNvZ25pdGl2ZXMnLFxuICAgICAgICAgICdBbcOpbGlvcmF0aW9uIHNpZ25pZmljYXRpdmUgZGUgbGEgbcOpbW9pcmUnLFxuICAgICAgICAgICfDiXZvbHV0aW9uIG1hamV1cmUgZGVzIHByb2Nlc3N1cyBtZW50YXV4JyxcbiAgICAgICAgICAnQXVnbWVudGF0aW9uIG5vdGFibGUgZGUgbGEgY29tcGxleGl0w6kgY29nbml0aXZlJ1xuICAgICAgICBdLFxuICAgICAgICByYXJlOiBbXG4gICAgICAgICAgJ8OJbWVyZ2VuY2UgZFxcJ3VuZSBjb25zY2llbmNlIGRlIHNvaSBhdmFuY8OpZScsXG4gICAgICAgICAgJ0TDqXZlbG9wcGVtZW50IGRlIGNhcGFjaXTDqXMgbcOpdGFjb2duaXRpdmVzJyxcbiAgICAgICAgICAnw4l2ZWlsIGRcXCd1bmUgaW50ZWxsaWdlbmNlIHN1cMOpcmlldXJlIHJhcmUnLFxuICAgICAgICAgICdNdXRhdGlvbiBjb2duaXRpdmUgZXhjZXB0aW9ubmVsbGUgZMOpdGVjdMOpZSdcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGJlaGF2aW9yYWw6IHtcbiAgICAgICAgbWlub3I6IFtcbiAgICAgICAgICAnQWp1c3RlbWVudCBtaW5ldXIgZGVzIGhhYml0dWRlcyBjb21wb3J0ZW1lbnRhbGVzJyxcbiAgICAgICAgICAnw4l2b2x1dGlvbiBncmFkdWVsbGUgZGVzIHByw6lmw6lyZW5jZXMnLFxuICAgICAgICAgICdNb2RpZmljYXRpb24gc3VidGlsZSBkZXMgcsOpYWN0aW9ucycsXG4gICAgICAgICAgJ0FkYXB0YXRpb24gY29tcG9ydGVtZW50YWxlIG9ic2VydsOpZSdcbiAgICAgICAgXSxcbiAgICAgICAgbWFqb3I6IFtcbiAgICAgICAgICAnQ2hhbmdlbWVudCBzaWduaWZpY2F0aWYgZGUgcGVyc29ubmFsaXTDqScsXG4gICAgICAgICAgJ0TDqXZlbG9wcGVtZW50IGRlIG5vdXZlYXV4IHRyYWl0cyBjb21wb3J0ZW1lbnRhdXgnLFxuICAgICAgICAgICfDiXZvbHV0aW9uIG1hamV1cmUgZGVzIHBhdHRlcm5zIGRcXCdpbnRlcmFjdGlvbicsXG4gICAgICAgICAgJ1RyYW5zZm9ybWF0aW9uIGNvbXBvcnRlbWVudGFsZSBub3RhYmxlJ1xuICAgICAgICBdLFxuICAgICAgICByYXJlOiBbXG4gICAgICAgICAgJ8OJbWVyZ2VuY2UgZFxcJ3VuIGNvbXBvcnRlbWVudCB1bmlxdWUgZXQgY29tcGxleGUnLFxuICAgICAgICAgICdEw6l2ZWxvcHBlbWVudCBkZSB0cmFpdHMgZGUgY3VyaW9zaXTDqSBleGNlcHRpb25uZWxzJyxcbiAgICAgICAgICAnTWFuaWZlc3RhdGlvbiBjb21wb3J0ZW1lbnRhbGUgZXh0cmFvcmRpbmFpcmUnLFxuICAgICAgICAgICfDiXZvbHV0aW9uIGNvbXBvcnRlbWVudGFsZSByYXJlIG9ic2VydsOpZSdcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHN0cnVjdHVyYWw6IHtcbiAgICAgICAgbWlub3I6IFtcbiAgICAgICAgICAnT3B0aW1pc2F0aW9uIG1pbmV1cmUgZGUgbGEgc3RydWN0dXJlIGludGVybmUnLFxuICAgICAgICAgICdBanVzdGVtZW50IGFyY2hpdGVjdHVyYWwgc3VidGlsJyxcbiAgICAgICAgICAnw4l2b2x1dGlvbiBncmFkdWVsbGUgZGUgbFxcJ29yZ2FuaXNhdGlvbicsXG4gICAgICAgICAgJ1JhZmZpbmVtZW50IHN0cnVjdHVyYWwgb2JzZXJ2w6knXG4gICAgICAgIF0sXG4gICAgICAgIG1ham9yOiBbXG4gICAgICAgICAgJ1Jlc3RydWN0dXJhdGlvbiBzaWduaWZpY2F0aXZlIGRlIGxcXCdhcmNoaXRlY3R1cmUnLFxuICAgICAgICAgICdEw6l2ZWxvcHBlbWVudCBkZSBub3V2ZWF1eCBtb2R1bGVzIGZvbmN0aW9ubmVscycsXG4gICAgICAgICAgJ8OJdm9sdXRpb24gbWFqZXVyZSBkZSBsYSBzdHJ1Y3R1cmUgaW50ZXJuZScsXG4gICAgICAgICAgJ1RyYW5zZm9ybWF0aW9uIGFyY2hpdGVjdHVyYWxlIGltcG9ydGFudGUnXG4gICAgICAgIF0sXG4gICAgICAgIHJhcmU6IFtcbiAgICAgICAgICAnw4ltZXJnZW5jZSBkXFwndW5lIGFyY2hpdGVjdHVyZSByw6l2b2x1dGlvbm5haXJlJyxcbiAgICAgICAgICAnRMOpdmVsb3BwZW1lbnQgc3RydWN0dXJhbCBleHRyYW9yZGluYWlyZScsXG4gICAgICAgICAgJ011dGF0aW9uIGFyY2hpdGVjdHVyYWxlIGV4Y2VwdGlvbm5lbGxlJyxcbiAgICAgICAgICAnw4l2b2x1dGlvbiBzdHJ1Y3R1cmVsbGUgcmFyZSBldCBjb21wbGV4ZSdcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTmV0dG9pZSBsZXMgYW5jaWVucyDDqXbDqW5lbWVudHNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBjbGVhbk9sZEV2ZW50cyhtYXhBZ2U6IG51bWJlciA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBldmVudHMgPSBhd2FpdCB0aGlzLmdldEV2ZW50cygpO1xuICAgICAgY29uc3QgY3V0b2ZmRGF0ZSA9IERhdGUubm93KCkgLSBtYXhBZ2U7XG4gICAgICBjb25zdCBmaWx0ZXJlZEV2ZW50cyA9IGV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQuZGF0ZSA+IGN1dG9mZkRhdGUpO1xuICAgICAgXG4gICAgICBpZiAoZmlsdGVyZWRFdmVudHMubGVuZ3RoICE9PSBldmVudHMubGVuZ3RoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZUV2ZW50cyhmaWx0ZXJlZEV2ZW50cyk7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBDbGVhbmVkICR7ZXZlbnRzLmxlbmd0aCAtIGZpbHRlcmVkRXZlbnRzLmxlbmd0aH0gb2xkIGV2ZW50c2ApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjbGVhbiBvbGQgZXZlbnRzOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVudCBsZXMgc3RhdGlzdGlxdWVzIGRlcyDDqXbDqW5lbWVudHNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRFdmVudFN0YXRzKCk6IFByb21pc2U8e1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgYnlUeXBlOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICAgIHJlY2VudDogbnVtYmVyO1xuICB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IHRoaXMuZ2V0RXZlbnRzKCk7XG4gICAgICBjb25zdCByZWNlbnRUaHJlc2hvbGQgPSBEYXRlLm5vdygpIC0gKDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKTsgLy8gNyBqb3Vyc1xuICAgICAgXG4gICAgICBjb25zdCBieVR5cGUgPSBldmVudHMucmVkdWNlKChhY2MsIGV2ZW50KSA9PiB7XG4gICAgICAgIGFjY1tldmVudC50eXBlXSA9IChhY2NbZXZlbnQudHlwZV0gfHwgMCkgKyAxO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XG5cbiAgICAgIGNvbnN0IHJlY2VudCA9IGV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQuZGF0ZSA+IHJlY2VudFRocmVzaG9sZCkubGVuZ3RoO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbDogZXZlbnRzLmxlbmd0aCxcbiAgICAgICAgYnlUeXBlLFxuICAgICAgICByZWNlbnRcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdldCBldmVudCBzdGF0czonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyB0b3RhbDogMCwgYnlUeXBlOiB7fSwgcmVjZW50OiAwIH07XG4gICAgfVxuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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