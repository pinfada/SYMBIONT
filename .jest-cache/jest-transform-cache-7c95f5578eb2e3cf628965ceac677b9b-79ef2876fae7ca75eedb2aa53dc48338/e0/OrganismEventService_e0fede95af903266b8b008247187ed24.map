{"version":3,"names":["uuid_1","cov_2qfqgmoi1z","s","require","secureLogger_1","OrganismEventService","getEvents","f","stored","localStorage","getItem","STORAGE_KEY","b","activationEvent","createActivationEvent","saveEvents","events","JSON","parse","sort","a","date","error","logger","addEvent","event","newEvent","id","generateSecureUUID","Date","now","unshift","length","MAX_EVENTS","splice","info","type","addMutationEvent","mutationType","severity","customDescription","descriptions","getMutationDescriptions","typeDescriptions","visual","severityDescriptions","minor","description","Math","floor","random","metadata","addTransmissionEvent","targetUserId","invitationCode","substring","addConsciousnessEvent","level","setItem","stringify","major","rare","cognitive","behavioral","structural","cleanOldEvents","maxAge","cutoffDate","filteredEvents","filter","getEventStats","recentThreshold","byType","reduce","acc","recent","total","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/OrganismEventService.ts"],"sourcesContent":["// src/core/services/OrganismEventService.ts\nimport { generateSecureUUID } from '@/shared/utils/uuid';\nimport { logger } from '@/shared/utils/secureLogger';\n\nexport interface OrganismEvent {\n  id: string;\n  type: 'activation' | 'mutation' | 'transmission' | 'consciousness' | 'energy';\n  date: number;\n  description: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface MutationEvent extends OrganismEvent {\n  type: 'mutation';\n  mutationType: 'visual' | 'cognitive' | 'behavioral' | 'structural';\n  severity: 'minor' | 'major' | 'rare';\n}\n\nexport interface TransmissionEvent extends OrganismEvent {\n  type: 'transmission';\n  targetUserId?: string;\n  invitationCode?: string;\n}\n\nexport class OrganismEventService {\n  private static readonly STORAGE_KEY = 'symbiont_organism_events';\n  private static readonly MAX_EVENTS = 100;\n\n  /**\n   * Récupère tous les événements de l'organisme\n   */\n  static async getEvents(): Promise<OrganismEvent[]> {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) {\n        // Initialiser avec l'événement d'activation\n        const activationEvent = this.createActivationEvent();\n        await this.saveEvents([activationEvent]);\n        return [activationEvent];\n      }\n\n      const events: OrganismEvent[] = JSON.parse(stored);\n      return events.sort((a, b) => b.date - a.date); // Plus récent en premier\n    } catch (error) {\n      logger.error('Failed to load organism events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Ajoute un nouvel événement\n   */\n  static async addEvent(event: Omit<OrganismEvent, 'id' | 'date'>): Promise<void> {\n    try {\n      const events = await this.getEvents();\n      const newEvent: OrganismEvent = {\n        id: generateSecureUUID(),\n        date: Date.now(),\n        ...event\n      };\n\n      events.unshift(newEvent); // Ajouter au début\n      \n      // Limiter le nombre d'événements\n      if (events.length > this.MAX_EVENTS) {\n        events.splice(this.MAX_EVENTS);\n      }\n\n      await this.saveEvents(events);\n      logger.info('New organism event added:', { type: newEvent.type, id: newEvent.id });\n    } catch (error) {\n      logger.error('Failed to add organism event:', error);\n    }\n  }\n\n  /**\n   * Ajoute un événement de mutation\n   */\n  static async addMutationEvent(\n    mutationType: MutationEvent['mutationType'],\n    severity: MutationEvent['severity'] = 'minor',\n    customDescription?: string\n  ): Promise<void> {\n    const descriptions = this.getMutationDescriptions();\n    const typeDescriptions = descriptions[mutationType] || descriptions.visual;\n    const severityDescriptions = typeDescriptions[severity] || typeDescriptions.minor;\n    \n    const description = customDescription || \n      severityDescriptions[Math.floor(Math.random() * severityDescriptions.length)];\n\n    await this.addEvent({\n      type: 'mutation',\n      description,\n      metadata: { mutationType, severity }\n    });\n  }\n\n  /**\n   * Ajoute un événement de transmission\n   */\n  static async addTransmissionEvent(targetUserId?: string, invitationCode?: string): Promise<void> {\n    const description = targetUserId \n      ? `Invitation transmise avec succès (Code: ${invitationCode?.substring(0, 6)}...)`\n      : 'Nouvelle invitation générée et prête à être partagée';\n\n    await this.addEvent({\n      type: 'transmission',\n      description,\n      metadata: { targetUserId, invitationCode }\n    });\n  }\n\n  /**\n   * Ajoute un événement de conscience\n   */\n  static async addConsciousnessEvent(level: number): Promise<void> {\n    const descriptions = [\n      'Éveil de conscience détecté',\n      'Augmentation significative de la conscience',\n      'Nouvelle phase de développement cognitif',\n      'Émergence de patterns de pensée complexes',\n      'Transition vers un niveau de conscience supérieur'\n    ];\n\n    const description = descriptions[Math.floor(Math.random() * descriptions.length)];\n\n    await this.addEvent({\n      type: 'consciousness',\n      description,\n      metadata: { level }\n    });\n  }\n\n  /**\n   * Crée l'événement d'activation initial\n   */\n  private static createActivationEvent(): OrganismEvent {\n    return {\n      id: generateSecureUUID(),\n      type: 'activation',\n      date: Date.now(),\n      description: 'Organisme digital activé avec succès'\n    };\n  }\n\n  /**\n   * Sauvegarde les événements\n   */\n  private static async saveEvents(events: OrganismEvent[]): Promise<void> {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(events));\n    } catch (error) {\n      logger.error('Failed to save organism events:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descriptions des mutations selon le type et la sévérité\n   */\n  private static getMutationDescriptions(): Record<\n    MutationEvent['mutationType'],\n    Record<MutationEvent['severity'], string[]>\n  > {\n    return {\n      visual: {\n        minor: [\n          'Légère variation chromatique observée',\n          'Ajustement subtil des patterns visuels',\n          'Modification mineure de la texture',\n          'Évolution graduelle de la palette de couleurs'\n        ],\n        major: [\n          'Transformation significative de l\\'apparence',\n          'Nouveau pattern de couleur émergent',\n          'Restructuration majeure des formes visuelles',\n          'Évolution marquée du design organique'\n        ],\n        rare: [\n          'Manifestation visuelle extraordinaire détectée',\n          'Émergence d\\'un pattern fractal unique',\n          'Développement d\\'une signature visuelle rare',\n          'Mutation visuelle exceptionnelle observée'\n        ]\n      },\n      cognitive: {\n        minor: [\n          'Optimisation des processus de réflexion',\n          'Amélioration subtile des capacités d\\'analyse',\n          'Affinement des patterns de reconnaissance',\n          'Évolution graduelle de l\\'intelligence'\n        ],\n        major: [\n          'Développement de nouvelles capacités cognitives',\n          'Amélioration significative de la mémoire',\n          'Évolution majeure des processus mentaux',\n          'Augmentation notable de la complexité cognitive'\n        ],\n        rare: [\n          'Émergence d\\'une conscience de soi avancée',\n          'Développement de capacités métacognitives',\n          'Éveil d\\'une intelligence supérieure rare',\n          'Mutation cognitive exceptionnelle détectée'\n        ]\n      },\n      behavioral: {\n        minor: [\n          'Ajustement mineur des habitudes comportementales',\n          'Évolution graduelle des préférences',\n          'Modification subtile des réactions',\n          'Adaptation comportementale observée'\n        ],\n        major: [\n          'Changement significatif de personnalité',\n          'Développement de nouveaux traits comportementaux',\n          'Évolution majeure des patterns d\\'interaction',\n          'Transformation comportementale notable'\n        ],\n        rare: [\n          'Émergence d\\'un comportement unique et complexe',\n          'Développement de traits de curiosité exceptionnels',\n          'Manifestation comportementale extraordinaire',\n          'Évolution comportementale rare observée'\n        ]\n      },\n      structural: {\n        minor: [\n          'Optimisation mineure de la structure interne',\n          'Ajustement architectural subtil',\n          'Évolution graduelle de l\\'organisation',\n          'Raffinement structural observé'\n        ],\n        major: [\n          'Restructuration significative de l\\'architecture',\n          'Développement de nouveaux modules fonctionnels',\n          'Évolution majeure de la structure interne',\n          'Transformation architecturale importante'\n        ],\n        rare: [\n          'Émergence d\\'une architecture révolutionnaire',\n          'Développement structural extraordinaire',\n          'Mutation architecturale exceptionnelle',\n          'Évolution structurelle rare et complexe'\n        ]\n      }\n    };\n  }\n\n  /**\n   * Nettoie les anciens événements\n   */\n  static async cleanOldEvents(maxAge: number = 30 * 24 * 60 * 60 * 1000): Promise<void> {\n    try {\n      const events = await this.getEvents();\n      const cutoffDate = Date.now() - maxAge;\n      const filteredEvents = events.filter(event => event.date > cutoffDate);\n      \n      if (filteredEvents.length !== events.length) {\n        await this.saveEvents(filteredEvents);\n        logger.info(`Cleaned ${events.length - filteredEvents.length} old events`);\n      }\n    } catch (error) {\n      logger.error('Failed to clean old events:', error);\n    }\n  }\n\n  /**\n   * Obtient les statistiques des événements\n   */\n  static async getEventStats(): Promise<{\n    total: number;\n    byType: Record<string, number>;\n    recent: number;\n  }> {\n    try {\n      const events = await this.getEvents();\n      const recentThreshold = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 jours\n      \n      const byType = events.reduce((acc, event) => {\n        acc[event.type] = (acc[event.type] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      const recent = events.filter(event => event.date > recentThreshold).length;\n\n      return {\n        total: events.length,\n        byType,\n        recent\n      };\n    } catch (error) {\n      logger.error('Failed to get event stats:', error);\n      return { total: 0, byType: {}, recent: 0 };\n    }\n  }\n}"],"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","ignoreList":[]}