34a48a9103e9a10faf2cfcdc5d345699
"use strict";

/* istanbul ignore next */
function cov_s2hdpkuwi() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/NeuralOptimizer.ts";
  var hash = "dac3757169cba75fa9f09a3bba5c1f272226d596";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/NeuralOptimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 25
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 81
        }
      },
      "4": {
        start: {
          line: 12,
          column: 46
        },
        end: {
          line: 12,
          column: 79
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "6": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 68
        }
      },
      "7": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 43
        }
      },
      "10": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "11": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 33,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 7,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 39
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 12,
            column: 37
          }
        },
        loc: {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 12,
            column: 79
          }
        },
        line: 12
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 34
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 17
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 18,
            column: 37
          }
        },
        loc: {
          start: {
            line: 18,
            column: 46
          },
          end: {
            line: 20,
            column: 9
          }
        },
        line: 18
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 36
          },
          end: {
            line: 27,
            column: 37
          }
        },
        loc: {
          start: {
            line: 27,
            column: 46
          },
          end: {
            line: 29,
            column: 9
          }
        },
        line: 27
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 11,
            column: 37
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 20
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 31
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/NeuralOptimizer.ts",
      mappings: ";;;AAQA,MAAa,eAAe;IAE1B,YAAY,IAAgB;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,SAAS,GAAG,IAAI;QAC/B,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAA;IAC1E,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,QAAQ,GAAG,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,EAAE;YACnC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,EAAE;YACnC,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;QACF,OAAO,KAAK,CAAA;IACd,CAAC;CACF;AAhCD,0CAgCC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/NeuralOptimizer.ts"],
      sourcesContent: ["/**\r\n * NeuralOptimizer - Optimisation du r\xE9seau neuronal\r\n * - Pruning (\xE9lagage des connexions faibles)\r\n * - Quantification des poids\r\n * - Monitoring de la charge\r\n */\r\nimport { NeuralMesh } from '../core/neural/NeuralMesh'\r\n\r\nexport class NeuralOptimizer {\r\n  private mesh: NeuralMesh\r\n  constructor(mesh: NeuralMesh) {\r\n    this.mesh = mesh\r\n  }\r\n\r\n  /**\r\n   * Prune les connexions dont le poids est inf\xE9rieur \xE0 un seuil\r\n   */\r\n  pruneConnections(threshold = 0.05) {\r\n    this.mesh.removeConnections((conn) => Math.abs(conn.weight) < threshold)\r\n  }\r\n\r\n  /**\r\n   * Quantifie les poids des connexions (arrondi \xE0 n d\xE9cimales)\r\n   */\r\n  quantizeWeights(decimals = 2) {\r\n    this.mesh.forEachConnection((conn) => {\r\n      conn.weight = parseFloat(conn.weight.toFixed(decimals))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retourne la charge totale du r\xE9seau (somme des poids absolus)\r\n   */\r\n  getNetworkLoad(): number {\r\n    let total = 0\r\n    this.mesh.forEachConnection((conn) => {\r\n      total += Math.abs(conn.weight)\r\n    })\r\n    return total\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dac3757169cba75fa9f09a3bba5c1f272226d596"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_s2hdpkuwi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_s2hdpkuwi();
cov_s2hdpkuwi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_s2hdpkuwi().s[1]++;
exports.NeuralOptimizer = void 0;
class NeuralOptimizer {
  constructor(mesh) {
    /* istanbul ignore next */
    cov_s2hdpkuwi().f[0]++;
    cov_s2hdpkuwi().s[2]++;
    this.mesh = mesh;
  }
  /**
   * Prune les connexions dont le poids est inférieur à un seuil
   */
  pruneConnections(threshold =
  /* istanbul ignore next */
  (cov_s2hdpkuwi().b[0][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_s2hdpkuwi().f[1]++;
    cov_s2hdpkuwi().s[3]++;
    this.mesh.removeConnections(conn => {
      /* istanbul ignore next */
      cov_s2hdpkuwi().f[2]++;
      cov_s2hdpkuwi().s[4]++;
      return Math.abs(conn.weight) < threshold;
    });
  }
  /**
   * Quantifie les poids des connexions (arrondi à n décimales)
   */
  quantizeWeights(decimals =
  /* istanbul ignore next */
  (cov_s2hdpkuwi().b[1][0]++, 2)) {
    /* istanbul ignore next */
    cov_s2hdpkuwi().f[3]++;
    cov_s2hdpkuwi().s[5]++;
    this.mesh.forEachConnection(conn => {
      /* istanbul ignore next */
      cov_s2hdpkuwi().f[4]++;
      cov_s2hdpkuwi().s[6]++;
      conn.weight = parseFloat(conn.weight.toFixed(decimals));
    });
  }
  /**
   * Retourne la charge totale du réseau (somme des poids absolus)
   */
  getNetworkLoad() {
    /* istanbul ignore next */
    cov_s2hdpkuwi().f[5]++;
    let total =
    /* istanbul ignore next */
    (cov_s2hdpkuwi().s[7]++, 0);
    /* istanbul ignore next */
    cov_s2hdpkuwi().s[8]++;
    this.mesh.forEachConnection(conn => {
      /* istanbul ignore next */
      cov_s2hdpkuwi().f[6]++;
      cov_s2hdpkuwi().s[9]++;
      total += Math.abs(conn.weight);
    });
    /* istanbul ignore next */
    cov_s2hdpkuwi().s[10]++;
    return total;
  }
}
/* istanbul ignore next */
cov_s2hdpkuwi().s[11]++;
exports.NeuralOptimizer = NeuralOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfczJoZHBrdXdpIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiTmV1cmFsT3B0aW1pemVyIiwiY29uc3RydWN0b3IiLCJtZXNoIiwiZiIsInBydW5lQ29ubmVjdGlvbnMiLCJ0aHJlc2hvbGQiLCJiIiwicmVtb3ZlQ29ubmVjdGlvbnMiLCJjb25uIiwiTWF0aCIsImFicyIsIndlaWdodCIsInF1YW50aXplV2VpZ2h0cyIsImRlY2ltYWxzIiwiZm9yRWFjaENvbm5lY3Rpb24iLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImdldE5ldHdvcmtMb2FkIiwidG90YWwiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL29wdGltaXplcnMvTmV1cmFsT3B0aW1pemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBOZXVyYWxPcHRpbWl6ZXIgLSBPcHRpbWlzYXRpb24gZHUgcsOpc2VhdSBuZXVyb25hbFxyXG4gKiAtIFBydW5pbmcgKMOpbGFnYWdlIGRlcyBjb25uZXhpb25zIGZhaWJsZXMpXHJcbiAqIC0gUXVhbnRpZmljYXRpb24gZGVzIHBvaWRzXHJcbiAqIC0gTW9uaXRvcmluZyBkZSBsYSBjaGFyZ2VcclxuICovXHJcbmltcG9ydCB7IE5ldXJhbE1lc2ggfSBmcm9tICcuLi9jb3JlL25ldXJhbC9OZXVyYWxNZXNoJ1xyXG5cclxuZXhwb3J0IGNsYXNzIE5ldXJhbE9wdGltaXplciB7XHJcbiAgcHJpdmF0ZSBtZXNoOiBOZXVyYWxNZXNoXHJcbiAgY29uc3RydWN0b3IobWVzaDogTmV1cmFsTWVzaCkge1xyXG4gICAgdGhpcy5tZXNoID0gbWVzaFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJ1bmUgbGVzIGNvbm5leGlvbnMgZG9udCBsZSBwb2lkcyBlc3QgaW5mw6lyaWV1ciDDoCB1biBzZXVpbFxyXG4gICAqL1xyXG4gIHBydW5lQ29ubmVjdGlvbnModGhyZXNob2xkID0gMC4wNSkge1xyXG4gICAgdGhpcy5tZXNoLnJlbW92ZUNvbm5lY3Rpb25zKChjb25uKSA9PiBNYXRoLmFicyhjb25uLndlaWdodCkgPCB0aHJlc2hvbGQpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBRdWFudGlmaWUgbGVzIHBvaWRzIGRlcyBjb25uZXhpb25zIChhcnJvbmRpIMOgIG4gZMOpY2ltYWxlcylcclxuICAgKi9cclxuICBxdWFudGl6ZVdlaWdodHMoZGVjaW1hbHMgPSAyKSB7XHJcbiAgICB0aGlzLm1lc2guZm9yRWFjaENvbm5lY3Rpb24oKGNvbm4pID0+IHtcclxuICAgICAgY29ubi53ZWlnaHQgPSBwYXJzZUZsb2F0KGNvbm4ud2VpZ2h0LnRvRml4ZWQoZGVjaW1hbHMpKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldG91cm5lIGxhIGNoYXJnZSB0b3RhbGUgZHUgcsOpc2VhdSAoc29tbWUgZGVzIHBvaWRzIGFic29sdXMpXHJcbiAgICovXHJcbiAgZ2V0TmV0d29ya0xvYWQoKTogbnVtYmVyIHtcclxuICAgIGxldCB0b3RhbCA9IDBcclxuICAgIHRoaXMubWVzaC5mb3JFYWNoQ29ubmVjdGlvbigoY29ubikgPT4ge1xyXG4gICAgICB0b3RhbCArPSBNYXRoLmFicyhjb25uLndlaWdodClcclxuICAgIH0pXHJcbiAgICByZXR1cm4gdG90YWxcclxuICB9XHJcbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF1Qks7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTtBQUFBQSxhQUFBLEdBQUFFLENBQUE7Ozs7Ozs7QUFmTCxNQUFhQyxlQUFlO0VBRTFCQyxZQUFZQyxJQUFnQjtJQUFBO0lBQUFMLGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFFLENBQUE7SUFDMUIsSUFBSSxDQUFDRyxJQUFJLEdBQUdBLElBQUk7RUFDbEI7RUFFQTs7O0VBR0FFLGdCQUFnQkEsQ0FBQ0MsU0FBUztFQUFBO0VBQUEsQ0FBQVIsYUFBQSxHQUFBUyxDQUFBLFVBQUcsSUFBSTtJQUFBO0lBQUFULGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFFLENBQUE7SUFDL0IsSUFBSSxDQUFDRyxJQUFJLENBQUNLLGlCQUFpQixDQUFFQyxJQUFJLElBQUs7TUFBQTtNQUFBWCxhQUFBLEdBQUFNLENBQUE7TUFBQU4sYUFBQSxHQUFBRSxDQUFBO01BQUEsT0FBQVUsSUFBSSxDQUFDQyxHQUFHLENBQUNGLElBQUksQ0FBQ0csTUFBTSxDQUFDLEdBQUdOLFNBQVM7SUFBVCxDQUFTLENBQUM7RUFDMUU7RUFFQTs7O0VBR0FPLGVBQWVBLENBQUNDLFFBQVE7RUFBQTtFQUFBLENBQUFoQixhQUFBLEdBQUFTLENBQUEsVUFBRyxDQUFDO0lBQUE7SUFBQVQsYUFBQSxHQUFBTSxDQUFBO0lBQUFOLGFBQUEsR0FBQUUsQ0FBQTtJQUMxQixJQUFJLENBQUNHLElBQUksQ0FBQ1ksaUJBQWlCLENBQUVOLElBQUksSUFBSTtNQUFBO01BQUFYLGFBQUEsR0FBQU0sQ0FBQTtNQUFBTixhQUFBLEdBQUFFLENBQUE7TUFDbkNTLElBQUksQ0FBQ0csTUFBTSxHQUFHSSxVQUFVLENBQUNQLElBQUksQ0FBQ0csTUFBTSxDQUFDSyxPQUFPLENBQUNILFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQztFQUNKO0VBRUE7OztFQUdBSSxjQUFjQSxDQUFBO0lBQUE7SUFBQXBCLGFBQUEsR0FBQU0sQ0FBQTtJQUNaLElBQUllLEtBQUs7SUFBQTtJQUFBLENBQUFyQixhQUFBLEdBQUFFLENBQUEsT0FBRyxDQUFDO0lBQUE7SUFBQUYsYUFBQSxHQUFBRSxDQUFBO0lBQ2IsSUFBSSxDQUFDRyxJQUFJLENBQUNZLGlCQUFpQixDQUFFTixJQUFJLElBQUk7TUFBQTtNQUFBWCxhQUFBLEdBQUFNLENBQUE7TUFBQU4sYUFBQSxHQUFBRSxDQUFBO01BQ25DbUIsS0FBSyxJQUFJVCxJQUFJLENBQUNDLEdBQUcsQ0FBQ0YsSUFBSSxDQUFDRyxNQUFNLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBQUE7SUFBQWQsYUFBQSxHQUFBRSxDQUFBO0lBQ0YsT0FBT21CLEtBQUs7RUFDZDs7QUFDRDtBQUFBckIsYUFBQSxHQUFBRSxDQUFBO0FBaENEb0IsT0FBQSxDQUFBbkIsZUFBQSxHQUFBQSxlQUFBIiwiaWdub3JlTGlzdCI6W119