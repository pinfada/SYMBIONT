{"version":3,"names":["cov_s2hdpkuwi","actualCoverage","s","NeuralOptimizer","constructor","mesh","f","pruneConnections","threshold","b","removeConnections","conn","Math","abs","weight","quantizeWeights","decimals","forEachConnection","parseFloat","toFixed","getNetworkLoad","total","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/NeuralOptimizer.ts"],"sourcesContent":["/**\r\n * NeuralOptimizer - Optimisation du réseau neuronal\r\n * - Pruning (élagage des connexions faibles)\r\n * - Quantification des poids\r\n * - Monitoring de la charge\r\n */\r\nimport { NeuralMesh } from '../core/neural/NeuralMesh'\r\n\r\nexport class NeuralOptimizer {\r\n  private mesh: NeuralMesh\r\n  constructor(mesh: NeuralMesh) {\r\n    this.mesh = mesh\r\n  }\r\n\r\n  /**\r\n   * Prune les connexions dont le poids est inférieur à un seuil\r\n   */\r\n  pruneConnections(threshold = 0.05) {\r\n    this.mesh.removeConnections((conn) => Math.abs(conn.weight) < threshold)\r\n  }\r\n\r\n  /**\r\n   * Quantifie les poids des connexions (arrondi à n décimales)\r\n   */\r\n  quantizeWeights(decimals = 2) {\r\n    this.mesh.forEachConnection((conn) => {\r\n      conn.weight = parseFloat(conn.weight.toFixed(decimals))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retourne la charge totale du réseau (somme des poids absolus)\r\n   */\r\n  getNetworkLoad(): number {\r\n    let total = 0\r\n    this.mesh.forEachConnection((conn) => {\r\n      total += Math.abs(conn.weight)\r\n    })\r\n    return total\r\n  }\r\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuBK;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;AAfL,MAAaC,eAAe;EAE1BC,YAAYC,IAAgB;IAAA;IAAAL,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACG,IAAI,GAAGA,IAAI;EAClB;EAEA;;;EAGAE,gBAAgBA,CAACC,SAAS;EAAA;EAAA,CAAAR,aAAA,GAAAS,CAAA,UAAG,IAAI;IAAA;IAAAT,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC/B,IAAI,CAACG,IAAI,CAACK,iBAAiB,CAAEC,IAAI,IAAK;MAAA;MAAAX,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MAAA,OAAAU,IAAI,CAACC,GAAG,CAACF,IAAI,CAACG,MAAM,CAAC,GAAGN,SAAS;IAAT,CAAS,CAAC;EAC1E;EAEA;;;EAGAO,eAAeA,CAACC,QAAQ;EAAA;EAAA,CAAAhB,aAAA,GAAAS,CAAA,UAAG,CAAC;IAAA;IAAAT,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACG,IAAI,CAACY,iBAAiB,CAAEN,IAAI,IAAI;MAAA;MAAAX,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MACnCS,IAAI,CAACG,MAAM,GAAGI,UAAU,CAACP,IAAI,CAACG,MAAM,CAACK,OAAO,CAACH,QAAQ,CAAC,CAAC;IACzD,CAAC,CAAC;EACJ;EAEA;;;EAGAI,cAAcA,CAAA;IAAA;IAAApB,aAAA,GAAAM,CAAA;IACZ,IAAIe,KAAK;IAAA;IAAA,CAAArB,aAAA,GAAAE,CAAA,OAAG,CAAC;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACb,IAAI,CAACG,IAAI,CAACY,iBAAiB,CAAEN,IAAI,IAAI;MAAA;MAAAX,aAAA,GAAAM,CAAA;MAAAN,aAAA,GAAAE,CAAA;MACnCmB,KAAK,IAAIT,IAAI,CAACC,GAAG,CAACF,IAAI,CAACG,MAAM,CAAC;IAChC,CAAC,CAAC;IAAA;IAAAd,aAAA,GAAAE,CAAA;IACF,OAAOmB,KAAK;EACd;;AACD;AAAArB,aAAA,GAAAE,CAAA;AAhCDoB,OAAA,CAAAnB,eAAA,GAAAA,eAAA","ignoreList":[]}