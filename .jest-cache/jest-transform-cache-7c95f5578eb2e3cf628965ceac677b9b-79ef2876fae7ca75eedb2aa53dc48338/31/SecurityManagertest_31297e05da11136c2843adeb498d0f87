35547ac697b5a720904f9f8ede46c17b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../src/background/service-worker-adapter', () => ({
    swCryptoAPI: {
        subtle: mockCryptoSubtle,
        getRandomValues: mockCryptoGetRandomValues
    }
}));
// Mock service-worker-adapter before importing SecurityManager
const mockCryptoSubtle = {
    generateKey: jest.fn().mockResolvedValue({
        type: 'secret',
        extractable: true,
        algorithm: { name: 'AES-GCM', length: 256 },
        usages: ['encrypt', 'decrypt']
    }),
    importKey: jest.fn().mockResolvedValue({
        type: 'secret',
        extractable: true,
        algorithm: { name: 'AES-GCM', length: 256 },
        usages: ['encrypt', 'decrypt']
    }),
    exportKey: jest.fn().mockResolvedValue(new ArrayBuffer(32)),
    encrypt: jest.fn().mockImplementation(async (algorithm, key, data) => {
        // Validate parameters
        if (!algorithm || !key || !data) {
            throw new Error('Missing required parameters for encryption');
        }
        // Ensure data is an ArrayBuffer or can be converted to one
        let dataBuffer = data;
        if (!(data instanceof ArrayBuffer)) {
            if (data instanceof Uint8Array) {
                dataBuffer = data.buffer;
            }
            else {
                throw new Error('Data must be ArrayBuffer or Uint8Array');
            }
        }
        // Simulate realistic encryption result with proper buffer
        const inputLength = dataBuffer.byteLength || 0;
        const ciphertext = new Uint8Array(inputLength + 16); // Add some auth tag bytes
        ciphertext.fill(0xBB);
        // Add some variation based on input
        for (let i = 0; i < Math.min(inputLength, ciphertext.length); i++) {
            ciphertext[i] = (ciphertext[i] + i) % 256;
        }
        return ciphertext.buffer;
    }),
    decrypt: jest.fn().mockImplementation(async () => {
        const testData = JSON.stringify({ foo: 'bar', n: 42 });
        return new TextEncoder().encode(testData).buffer;
    }),
    digest: jest.fn().mockImplementation(async () => {
        const hash = new Uint8Array(32);
        hash.fill(0xCD);
        return hash.buffer;
    })
};
const mockCryptoGetRandomValues = jest.fn().mockImplementation((arr) => {
    // Fill with deterministic values for testing
    if (arr && arr.length) {
        for (let i = 0; i < arr.length; i++) {
            arr[i] = i % 256;
        }
    }
    return arr;
});
const SecurityManager_1 = require("../src/background/SecurityManager");
describe('SecurityManager', () => {
    let security;
    beforeEach(async () => {
        jest.clearAllMocks();
        // Reset all crypto mocks
        mockCryptoSubtle.generateKey.mockClear();
        mockCryptoSubtle.encrypt.mockClear();
        mockCryptoSubtle.decrypt.mockClear();
        mockCryptoSubtle.digest.mockClear();
        mockCryptoGetRandomValues.mockClear();
        // Create SecurityManager with manual initialization to avoid chrome.storage issues
        security = new SecurityManager_1.SecurityManager(true); // Skip auto-init
        // Manually set the encryption key for testing
        security.encryptionKey = {
            type: 'secret',
            extractable: true,
            algorithm: { name: 'AES-GCM', length: 256 },
            usages: ['encrypt', 'decrypt']
        };
    });
    describe('Chiffrement/Déchiffrement', () => {
        it('chiffre et déchiffre correctement les données', async () => {
            const testData = { foo: 'bar', n: 42 };
            // Test encryption
            try {
                const encrypted = await security.encryptSensitiveData(testData);
                expect(typeof encrypted).toBe('string');
                expect(encrypted.length).toBeGreaterThan(0);
                expect(mockCryptoSubtle.encrypt).toHaveBeenCalled();
                // Test decryption  
                const decrypted = await security.decryptSensitiveData(encrypted);
                expect(decrypted).toEqual(testData);
                expect(mockCryptoSubtle.decrypt).toHaveBeenCalled();
            }
            catch (error) {
                console.log('Mock calls:', {
                    getRandomValues: mockCryptoGetRandomValues.mock.calls,
                    encrypt: mockCryptoSubtle.encrypt.mock.calls
                });
                throw error;
            }
        });
        it('gère les erreurs de chiffrement gracieusement', async () => {
            mockCryptoSubtle.encrypt.mockRejectedValue(new Error('Crypto failure'));
            await expect(security.encryptSensitiveData({})).rejects.toThrow('Échec du chiffrement des données sensibles');
        });
        it('gère les erreurs de déchiffrement gracieusement', async () => {
            mockCryptoSubtle.decrypt.mockRejectedValue(new Error('Decrypt failure'));
            await expect(security.decryptSensitiveData('invalid')).rejects.toThrow('Échec du déchiffrement des données');
        });
    });
    describe('Anonymisation', () => {
        it('anonymise les données comportementales (async)', async () => {
            const pattern = {
                url: 'https://secret.com',
                interactions: 5,
                timeSpent: 10,
                scrollDepth: 0.8,
                timestamp: Date.now()
            };
            const anonymized = await security.anonymizeForSharing(pattern);
            expect(anonymized.url).toBe('anonymized');
            expect(anonymized.interactions).toBe(pattern.interactions);
            expect(anonymized.timeSpent).toBe(pattern.timeSpent);
            expect(anonymized.scrollDepth).toBe(pattern.scrollDepth);
        });
        it('anonymise les données comportementales (sync)', () => {
            const pattern = {
                url: 'https://secret.com',
                userId: 'user123',
                interactions: 5,
                timeSpent: 10,
                scrollDepth: 0.8,
                timestamp: Date.now()
            };
            const anonymized = security.anonymizeForSharingSync(pattern);
            expect(anonymized.url).toBe('anonymized');
            expect(anonymized.userId).not.toBe('user123'); // Hashé
            expect(typeof anonymized.userId).toBe('string');
        });
        it('supprime les champs sensibles', async () => {
            const pattern = {
                url: 'https://secret.com',
                email: 'test@example.com',
                name: 'John Doe',
                phone: '123456789',
                interactions: 5
            };
            const anonymized = await security.anonymizeForSharing(pattern);
            expect(anonymized.email).toBeUndefined();
            expect(anonymized.name).toBeUndefined();
            expect(anonymized.phone).toBeUndefined();
            expect(anonymized.interactions).toBe(5);
        });
    });
    describe('Contrôle d\'accès', () => {
        it('valide l\'accès utilisateur basique', () => {
            const request = { userId: 'user123', resource: 'organisms' };
            expect(security.validateDataAccess(request)).toBe(true);
        });
        it('rejette l\'accès admin sans rôle admin', () => {
            const request = { userId: 'user123', resource: 'admin', role: 'user' };
            expect(security.validateDataAccess(request, 'admin')).toBe(false);
        });
        it('accepte l\'accès admin avec rôle admin', () => {
            const request = { userId: 'admin123', resource: 'admin', role: 'admin' };
            expect(security.validateDataAccess(request, 'admin')).toBe(true);
        });
        it('rejette les requêtes invalides', () => {
            expect(security.validateDataAccess({ userId: '', resource: 'test' })).toBe(false);
            expect(security.validateDataAccess({ userId: 'user', resource: '' })).toBe(false);
        });
    });
    describe('Hashage', () => {
        it('hash des chaînes avec SHA-256', async () => {
            const testString = 'test-string';
            const hash = await security.hash(testString);
            expect(typeof hash).toBe('string');
            expect(hash.length).toBeGreaterThan(0);
            expect(mockCryptoSubtle.digest).toHaveBeenCalledWith('SHA-256', expect.any(Uint8Array));
        });
        it('produit des hashs cohérents', async () => {
            const testString = 'consistent-test';
            const hash1 = await security.hash(testString);
            const hash2 = await security.hash(testString);
            expect(hash1).toBe(hash2);
        });
        it('hash sync fonctionne comme fallback', () => {
            const testString = 'sync-test';
            const hash = security.hashSync(testString);
            expect(typeof hash).toBe('string');
            expect(hash.length).toBeGreaterThan(0);
        });
    });
    describe('Initialisation', () => {
        it('peut être créé sans auto-initialisation', () => {
            const testSecurity = new SecurityManager_1.SecurityManager(true);
            expect(testSecurity).toBeInstanceOf(SecurityManager_1.SecurityManager);
        });
        it('gère gracieusement l\'absence de clé lors des opérations', async () => {
            const testSecurity = new SecurityManager_1.SecurityManager(true);
            // Sans clé définie, devrait essayer d'initialiser puis échouer proprement
            await expect(testSecurity.encryptSensitiveData({})).rejects.toThrow();
        });
        it('valide la présence de WebCrypto API', async () => {
            // Temporarily disable the crypto API
            const originalSubtle = mockCryptoSubtle;
            jest.doMock('../src/background/service-worker-adapter', () => ({
                swCryptoAPI: null
            }));
            await expect(security.encryptSensitiveData({})).rejects.toThrow('WebCrypto API non disponible');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL1NlY3VyaXR5TWFuYWdlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBZ0VBLElBQUksQ0FBQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMzRCxXQUFXLEVBQUU7UUFDWCxNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLGVBQWUsRUFBRSx5QkFBeUI7S0FDM0M7Q0FDRixDQUFDLENBQUMsQ0FBQztBQXJFSiwrREFBK0Q7QUFDL0QsTUFBTSxnQkFBZ0IsR0FBRztJQUN2QixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1FBQ3ZDLElBQUksRUFBRSxRQUFRO1FBQ2QsV0FBVyxFQUFFLElBQUk7UUFDakIsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7S0FDbEIsQ0FBQztJQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUM7UUFDckMsSUFBSSxFQUFFLFFBQVE7UUFDZCxXQUFXLEVBQUUsSUFBSTtRQUNqQixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztLQUNsQixDQUFDO0lBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ25FLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsU0FB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bW50L2MvVXNlcnMvbV9vbGkvUHJvamV0cy9TWU1CSU9OVC9fX3Rlc3RzX18vU2VjdXJpdHlNYW5hZ2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTW9jayBzZXJ2aWNlLXdvcmtlci1hZGFwdGVyIGJlZm9yZSBpbXBvcnRpbmcgU2VjdXJpdHlNYW5hZ2VyXHJcbmNvbnN0IG1vY2tDcnlwdG9TdWJ0bGUgPSB7XHJcbiAgZ2VuZXJhdGVLZXk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IFxyXG4gICAgdHlwZTogJ3NlY3JldCcsIFxyXG4gICAgZXh0cmFjdGFibGU6IHRydWUsIFxyXG4gICAgYWxnb3JpdGhtOiB7IG5hbWU6ICdBRVMtR0NNJywgbGVuZ3RoOiAyNTYgfSwgXHJcbiAgICB1c2FnZXM6IFsnZW5jcnlwdCcsICdkZWNyeXB0J10gXHJcbiAgfSBhcyBDcnlwdG9LZXkpLFxyXG4gIGltcG9ydEtleTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgXHJcbiAgICB0eXBlOiAnc2VjcmV0JywgXHJcbiAgICBleHRyYWN0YWJsZTogdHJ1ZSwgXHJcbiAgICBhbGdvcml0aG06IHsgbmFtZTogJ0FFUy1HQ00nLCBsZW5ndGg6IDI1NiB9LCBcclxuICAgIHVzYWdlczogWydlbmNyeXB0JywgJ2RlY3J5cHQnXSBcclxuICB9IGFzIENyeXB0b0tleSksXHJcbiAgZXhwb3J0S2V5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobmV3IEFycmF5QnVmZmVyKDMyKSksXHJcbiAgZW5jcnlwdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoYWxnb3JpdGhtLCBrZXksIGRhdGEpID0+IHtcclxuICAgIC8vIFZhbGlkYXRlIHBhcmFtZXRlcnNcclxuICAgIGlmICghYWxnb3JpdGhtIHx8ICFrZXkgfHwgIWRhdGEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcnMgZm9yIGVuY3J5cHRpb24nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRW5zdXJlIGRhdGEgaXMgYW4gQXJyYXlCdWZmZXIgb3IgY2FuIGJlIGNvbnZlcnRlZCB0byBvbmVcclxuICAgIGxldCBkYXRhQnVmZmVyID0gZGF0YTtcclxuICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcclxuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgZGF0YUJ1ZmZlciA9IGRhdGEuYnVmZmVyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBtdXN0IGJlIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXknKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBTaW11bGF0ZSByZWFsaXN0aWMgZW5jcnlwdGlvbiByZXN1bHQgd2l0aCBwcm9wZXIgYnVmZmVyXHJcbiAgICBjb25zdCBpbnB1dExlbmd0aCA9IGRhdGFCdWZmZXIuYnl0ZUxlbmd0aCB8fCAwO1xyXG4gICAgY29uc3QgY2lwaGVydGV4dCA9IG5ldyBVaW50OEFycmF5KGlucHV0TGVuZ3RoICsgMTYpOyAvLyBBZGQgc29tZSBhdXRoIHRhZyBieXRlc1xyXG4gICAgY2lwaGVydGV4dC5maWxsKDB4QkIpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgc29tZSB2YXJpYXRpb24gYmFzZWQgb24gaW5wdXRcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oaW5wdXRMZW5ndGgsIGNpcGhlcnRleHQubGVuZ3RoKTsgaSsrKSB7XHJcbiAgICAgIGNpcGhlcnRleHRbaV0gPSAoY2lwaGVydGV4dFtpXSArIGkpICUgMjU2O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gY2lwaGVydGV4dC5idWZmZXI7XHJcbiAgfSksXHJcbiAgZGVjcnlwdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB0ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHsgZm9vOiAnYmFyJywgbjogNDIgfSk7XHJcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHRlc3REYXRhKS5idWZmZXI7XHJcbiAgfSksXHJcbiAgZGlnZXN0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGhhc2ggPSBuZXcgVWludDhBcnJheSgzMik7XHJcbiAgICBoYXNoLmZpbGwoMHhDRCk7XHJcbiAgICByZXR1cm4gaGFzaC5idWZmZXI7XHJcbiAgfSlcclxufTtcclxuXHJcbmNvbnN0IG1vY2tDcnlwdG9HZXRSYW5kb21WYWx1ZXMgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChhcnIpID0+IHtcclxuICAvLyBGaWxsIHdpdGggZGV0ZXJtaW5pc3RpYyB2YWx1ZXMgZm9yIHRlc3RpbmdcclxuICBpZiAoYXJyICYmIGFyci5sZW5ndGgpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGFycltpXSA9IGkgJSAyNTY7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBhcnI7XHJcbn0pO1xyXG5cclxuamVzdC5tb2NrKCcuLi9zcmMvYmFja2dyb3VuZC9zZXJ2aWNlLXdvcmtlci1hZGFwdGVyJywgKCkgPT4gKHtcclxuICBzd0NyeXB0b0FQSToge1xyXG4gICAgc3VidGxlOiBtb2NrQ3J5cHRvU3VidGxlLFxyXG4gICAgZ2V0UmFuZG9tVmFsdWVzOiBtb2NrQ3J5cHRvR2V0UmFuZG9tVmFsdWVzXHJcbiAgfVxyXG59KSk7XHJcblxyXG5pbXBvcnQgeyBTZWN1cml0eU1hbmFnZXIgfSBmcm9tICcuLi9zcmMvYmFja2dyb3VuZC9TZWN1cml0eU1hbmFnZXInXHJcblxyXG5kZXNjcmliZSgnU2VjdXJpdHlNYW5hZ2VyJywgKCkgPT4ge1xyXG4gIGxldCBzZWN1cml0eTogU2VjdXJpdHlNYW5hZ2VyO1xyXG4gIFxyXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIFJlc2V0IGFsbCBjcnlwdG8gbW9ja3NcclxuICAgIG1vY2tDcnlwdG9TdWJ0bGUuZ2VuZXJhdGVLZXkubW9ja0NsZWFyKCk7XHJcbiAgICBtb2NrQ3J5cHRvU3VidGxlLmVuY3J5cHQubW9ja0NsZWFyKCk7XHJcbiAgICBtb2NrQ3J5cHRvU3VidGxlLmRlY3J5cHQubW9ja0NsZWFyKCk7XHJcbiAgICBtb2NrQ3J5cHRvU3VidGxlLmRpZ2VzdC5tb2NrQ2xlYXIoKTtcclxuICAgIG1vY2tDcnlwdG9HZXRSYW5kb21WYWx1ZXMubW9ja0NsZWFyKCk7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBTZWN1cml0eU1hbmFnZXIgd2l0aCBtYW51YWwgaW5pdGlhbGl6YXRpb24gdG8gYXZvaWQgY2hyb21lLnN0b3JhZ2UgaXNzdWVzXHJcbiAgICBzZWN1cml0eSA9IG5ldyBTZWN1cml0eU1hbmFnZXIodHJ1ZSk7IC8vIFNraXAgYXV0by1pbml0XHJcbiAgICBcclxuICAgIC8vIE1hbnVhbGx5IHNldCB0aGUgZW5jcnlwdGlvbiBrZXkgZm9yIHRlc3RpbmdcclxuICAgIChzZWN1cml0eSBhcyBhbnkpLmVuY3J5cHRpb25LZXkgPSB7IFxyXG4gICAgICB0eXBlOiAnc2VjcmV0JywgXHJcbiAgICAgIGV4dHJhY3RhYmxlOiB0cnVlLCBcclxuICAgICAgYWxnb3JpdGhtOiB7IG5hbWU6ICdBRVMtR0NNJywgbGVuZ3RoOiAyNTYgfSwgXHJcbiAgICAgIHVzYWdlczogWydlbmNyeXB0JywgJ2RlY3J5cHQnXSBcclxuICAgIH0gYXMgQ3J5cHRvS2V5O1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQ2hpZmZyZW1lbnQvRMOpY2hpZmZyZW1lbnQnLCAoKSA9PiB7XHJcbiAgICBpdCgnY2hpZmZyZSBldCBkw6ljaGlmZnJlIGNvcnJlY3RlbWVudCBsZXMgZG9ubsOpZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRlc3REYXRhID0geyBmb286ICdiYXInLCBuOiA0MiB9O1xyXG4gICAgICBcclxuICAgICAgLy8gVGVzdCBlbmNyeXB0aW9uXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gYXdhaXQgc2VjdXJpdHkuZW5jcnlwdFNlbnNpdGl2ZURhdGEodGVzdERhdGEpO1xyXG4gICAgICAgIGV4cGVjdCh0eXBlb2YgZW5jcnlwdGVkKS50b0JlKCdzdHJpbmcnKTtcclxuICAgICAgICBleHBlY3QoZW5jcnlwdGVkLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgICAgIGV4cGVjdChtb2NrQ3J5cHRvU3VidGxlLmVuY3J5cHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUZXN0IGRlY3J5cHRpb24gIFxyXG4gICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0IHNlY3VyaXR5LmRlY3J5cHRTZW5zaXRpdmVEYXRhKGVuY3J5cHRlZCk7XHJcbiAgICAgICAgZXhwZWN0KGRlY3J5cHRlZCkudG9FcXVhbCh0ZXN0RGF0YSk7XHJcbiAgICAgICAgZXhwZWN0KG1vY2tDcnlwdG9TdWJ0bGUuZGVjcnlwdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNb2NrIGNhbGxzOicsIHtcclxuICAgICAgICAgIGdldFJhbmRvbVZhbHVlczogbW9ja0NyeXB0b0dldFJhbmRvbVZhbHVlcy5tb2NrLmNhbGxzLFxyXG4gICAgICAgICAgZW5jcnlwdDogbW9ja0NyeXB0b1N1YnRsZS5lbmNyeXB0Lm1vY2suY2FsbHNcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2fDqHJlIGxlcyBlcnJldXJzIGRlIGNoaWZmcmVtZW50IGdyYWNpZXVzZW1lbnQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIG1vY2tDcnlwdG9TdWJ0bGUuZW5jcnlwdC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0NyeXB0byBmYWlsdXJlJykpO1xyXG4gICAgICBcclxuICAgICAgYXdhaXQgZXhwZWN0KHNlY3VyaXR5LmVuY3J5cHRTZW5zaXRpdmVEYXRhKHt9KSkucmVqZWN0cy50b1Rocm93KCfDiWNoZWMgZHUgY2hpZmZyZW1lbnQgZGVzIGRvbm7DqWVzIHNlbnNpYmxlcycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2fDqHJlIGxlcyBlcnJldXJzIGRlIGTDqWNoaWZmcmVtZW50IGdyYWNpZXVzZW1lbnQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIG1vY2tDcnlwdG9TdWJ0bGUuZGVjcnlwdC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0RlY3J5cHQgZmFpbHVyZScpKTtcclxuICAgICAgXHJcbiAgICAgIGF3YWl0IGV4cGVjdChzZWN1cml0eS5kZWNyeXB0U2Vuc2l0aXZlRGF0YSgnaW52YWxpZCcpKS5yZWplY3RzLnRvVGhyb3coJ8OJY2hlYyBkdSBkw6ljaGlmZnJlbWVudCBkZXMgZG9ubsOpZXMnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQW5vbnltaXNhdGlvbicsICgpID0+IHtcclxuICAgIGl0KCdhbm9ueW1pc2UgbGVzIGRvbm7DqWVzIGNvbXBvcnRlbWVudGFsZXMgKGFzeW5jKScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGF0dGVybiA9IHsgXHJcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9zZWNyZXQuY29tJywgXHJcbiAgICAgICAgaW50ZXJhY3Rpb25zOiA1LCBcclxuICAgICAgICB0aW1lU3BlbnQ6IDEwLCBcclxuICAgICAgICBzY3JvbGxEZXB0aDogMC44LCBcclxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCkgXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBhbm9ueW1pemVkID0gYXdhaXQgc2VjdXJpdHkuYW5vbnltaXplRm9yU2hhcmluZyhwYXR0ZXJuKTtcclxuICAgICAgZXhwZWN0KGFub255bWl6ZWQudXJsKS50b0JlKCdhbm9ueW1pemVkJyk7XHJcbiAgICAgIGV4cGVjdChhbm9ueW1pemVkLmludGVyYWN0aW9ucykudG9CZShwYXR0ZXJuLmludGVyYWN0aW9ucyk7XHJcbiAgICAgIGV4cGVjdChhbm9ueW1pemVkLnRpbWVTcGVudCkudG9CZShwYXR0ZXJuLnRpbWVTcGVudCk7XHJcbiAgICAgIGV4cGVjdChhbm9ueW1pemVkLnNjcm9sbERlcHRoKS50b0JlKHBhdHRlcm4uc2Nyb2xsRGVwdGgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2Fub255bWlzZSBsZXMgZG9ubsOpZXMgY29tcG9ydGVtZW50YWxlcyAoc3luYyknLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhdHRlcm4gPSB7IFxyXG4gICAgICAgIHVybDogJ2h0dHBzOi8vc2VjcmV0LmNvbScsIFxyXG4gICAgICAgIHVzZXJJZDogJ3VzZXIxMjMnLFxyXG4gICAgICAgIGludGVyYWN0aW9uczogNSwgXHJcbiAgICAgICAgdGltZVNwZW50OiAxMCwgXHJcbiAgICAgICAgc2Nyb2xsRGVwdGg6IDAuOCwgXHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpIFxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgY29uc3QgYW5vbnltaXplZCA9IHNlY3VyaXR5LmFub255bWl6ZUZvclNoYXJpbmdTeW5jKHBhdHRlcm4pO1xyXG4gICAgICBleHBlY3QoYW5vbnltaXplZC51cmwpLnRvQmUoJ2Fub255bWl6ZWQnKTtcclxuICAgICAgZXhwZWN0KGFub255bWl6ZWQudXNlcklkKS5ub3QudG9CZSgndXNlcjEyMycpOyAvLyBIYXNow6lcclxuICAgICAgZXhwZWN0KHR5cGVvZiBhbm9ueW1pemVkLnVzZXJJZCkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc3VwcHJpbWUgbGVzIGNoYW1wcyBzZW5zaWJsZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhdHRlcm4gPSB7IFxyXG4gICAgICAgIHVybDogJ2h0dHBzOi8vc2VjcmV0LmNvbScsXHJcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgICBuYW1lOiAnSm9obiBEb2UnLFxyXG4gICAgICAgIHBob25lOiAnMTIzNDU2Nzg5JyxcclxuICAgICAgICBpbnRlcmFjdGlvbnM6IDVcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGFub255bWl6ZWQgPSBhd2FpdCBzZWN1cml0eS5hbm9ueW1pemVGb3JTaGFyaW5nKHBhdHRlcm4pO1xyXG4gICAgICBleHBlY3QoYW5vbnltaXplZC5lbWFpbCkudG9CZVVuZGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QoYW5vbnltaXplZC5uYW1lKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChhbm9ueW1pemVkLnBob25lKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChhbm9ueW1pemVkLmludGVyYWN0aW9ucykudG9CZSg1KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQ29udHLDtGxlIGRcXCdhY2PDqHMnLCAoKSA9PiB7XHJcbiAgICBpdCgndmFsaWRlIGxcXCdhY2PDqHMgdXRpbGlzYXRldXIgYmFzaXF1ZScsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IHsgdXNlcklkOiAndXNlcjEyMycsIHJlc291cmNlOiAnb3JnYW5pc21zJyB9O1xyXG4gICAgICBleHBlY3Qoc2VjdXJpdHkudmFsaWRhdGVEYXRhQWNjZXNzKHJlcXVlc3QpKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JlamV0dGUgbFxcJ2FjY8OocyBhZG1pbiBzYW5zIHLDtGxlIGFkbWluJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXF1ZXN0ID0geyB1c2VySWQ6ICd1c2VyMTIzJywgcmVzb3VyY2U6ICdhZG1pbicsIHJvbGU6ICd1c2VyJyBhcyBjb25zdCB9O1xyXG4gICAgICBleHBlY3Qoc2VjdXJpdHkudmFsaWRhdGVEYXRhQWNjZXNzKHJlcXVlc3QsICdhZG1pbicpKS50b0JlKGZhbHNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdhY2NlcHRlIGxcXCdhY2PDqHMgYWRtaW4gYXZlYyByw7RsZSBhZG1pbicsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IHsgdXNlcklkOiAnYWRtaW4xMjMnLCByZXNvdXJjZTogJ2FkbWluJywgcm9sZTogJ2FkbWluJyBhcyBjb25zdCB9O1xyXG4gICAgICBleHBlY3Qoc2VjdXJpdHkudmFsaWRhdGVEYXRhQWNjZXNzKHJlcXVlc3QsICdhZG1pbicpKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JlamV0dGUgbGVzIHJlcXXDqnRlcyBpbnZhbGlkZXMnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzZWN1cml0eS52YWxpZGF0ZURhdGFBY2Nlc3MoeyB1c2VySWQ6ICcnLCByZXNvdXJjZTogJ3Rlc3QnIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgZXhwZWN0KHNlY3VyaXR5LnZhbGlkYXRlRGF0YUFjY2Vzcyh7IHVzZXJJZDogJ3VzZXInLCByZXNvdXJjZTogJycgfSkpLnRvQmUoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdIYXNoYWdlJywgKCkgPT4ge1xyXG4gICAgaXQoJ2hhc2ggZGVzIGNoYcOubmVzIGF2ZWMgU0hBLTI1NicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgdGVzdFN0cmluZyA9ICd0ZXN0LXN0cmluZyc7XHJcbiAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCBzZWN1cml0eS5oYXNoKHRlc3RTdHJpbmcpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHR5cGVvZiBoYXNoKS50b0JlKCdzdHJpbmcnKTtcclxuICAgICAgZXhwZWN0KGhhc2gubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgICAgIGV4cGVjdChtb2NrQ3J5cHRvU3VidGxlLmRpZ2VzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1NIQS0yNTYnLCBleHBlY3QuYW55KFVpbnQ4QXJyYXkpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdwcm9kdWl0IGRlcyBoYXNocyBjb2jDqXJlbnRzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0U3RyaW5nID0gJ2NvbnNpc3RlbnQtdGVzdCc7XHJcbiAgICAgIGNvbnN0IGhhc2gxID0gYXdhaXQgc2VjdXJpdHkuaGFzaCh0ZXN0U3RyaW5nKTtcclxuICAgICAgY29uc3QgaGFzaDIgPSBhd2FpdCBzZWN1cml0eS5oYXNoKHRlc3RTdHJpbmcpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGhhc2gxKS50b0JlKGhhc2gyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdoYXNoIHN5bmMgZm9uY3Rpb25uZSBjb21tZSBmYWxsYmFjaycsICgpID0+IHtcclxuICAgICAgY29uc3QgdGVzdFN0cmluZyA9ICdzeW5jLXRlc3QnO1xyXG4gICAgICBjb25zdCBoYXNoID0gc2VjdXJpdHkuaGFzaFN5bmModGVzdFN0cmluZyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QodHlwZW9mIGhhc2gpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3QoaGFzaC5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnSW5pdGlhbGlzYXRpb24nLCAoKSA9PiB7XHJcbiAgICBpdCgncGV1dCDDqnRyZSBjcsOpw6kgc2FucyBhdXRvLWluaXRpYWxpc2F0aW9uJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0U2VjdXJpdHkgPSBuZXcgU2VjdXJpdHlNYW5hZ2VyKHRydWUpO1xyXG4gICAgICBleHBlY3QodGVzdFNlY3VyaXR5KS50b0JlSW5zdGFuY2VPZihTZWN1cml0eU1hbmFnZXIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2fDqHJlIGdyYWNpZXVzZW1lbnQgbFxcJ2Fic2VuY2UgZGUgY2zDqSBsb3JzIGRlcyBvcMOpcmF0aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgdGVzdFNlY3VyaXR5ID0gbmV3IFNlY3VyaXR5TWFuYWdlcih0cnVlKTtcclxuICAgICAgLy8gU2FucyBjbMOpIGTDqWZpbmllLCBkZXZyYWl0IGVzc2F5ZXIgZCdpbml0aWFsaXNlciBwdWlzIMOpY2hvdWVyIHByb3ByZW1lbnRcclxuICAgICAgYXdhaXQgZXhwZWN0KHRlc3RTZWN1cml0eS5lbmNyeXB0U2Vuc2l0aXZlRGF0YSh7fSkpLnJlamVjdHMudG9UaHJvdygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3ZhbGlkZSBsYSBwcsOpc2VuY2UgZGUgV2ViQ3J5cHRvIEFQSScsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZSB0aGUgY3J5cHRvIEFQSVxyXG4gICAgICBjb25zdCBvcmlnaW5hbFN1YnRsZSA9IG1vY2tDcnlwdG9TdWJ0bGU7XHJcbiAgICAgIGplc3QuZG9Nb2NrKCcuLi9zcmMvYmFja2dyb3VuZC9zZXJ2aWNlLXdvcmtlci1hZGFwdGVyJywgKCkgPT4gKHtcclxuICAgICAgICBzd0NyeXB0b0FQSTogbnVsbFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICBhd2FpdCBleHBlY3Qoc2VjdXJpdHkuZW5jcnlwdFNlbnNpdGl2ZURhdGEoe30pKS5yZWplY3RzLnRvVGhyb3coJ1dlYkNyeXB0byBBUEkgbm9uIGRpc3BvbmlibGUnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTsgIl0sInZlcnNpb24iOjN9