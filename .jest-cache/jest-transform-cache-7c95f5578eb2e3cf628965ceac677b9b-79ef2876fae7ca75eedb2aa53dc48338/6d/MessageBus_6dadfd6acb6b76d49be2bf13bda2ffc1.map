{"version":3,"names":["cov_1e8yjr3qu8","actualCoverage","s","exports","validatePayload","MessageBus_1","require","uuid_1","serialization_1","secureLogger_1","isOrganismState","obj","f","b","id","generation","health","energy","traits","isOrganismMutation","type","trigger","isBehaviorData","url","visitCount","isMurmur","text","timestamp","isInvitationPayload","code","isInvitationResult","status","payload","MessageType","ORGANISM_UPDATE","ORGANISM_MUTATE","PAGE_VISIT","SCROLL_EVENT","MURMUR","GENERATE_INVITATION","CONSUME_INVITATION","CHECK_INVITATION","INVITATION_GENERATED","INVITATION_CONSUMED","INVITATION_CHECKED","SHARED_MUTATION_RESULT","serializeMessage","message","JSON","parse","stringify","error","logger","warn","cleanMessage","cleanObjectForSerialization","seen","WeakSet","undefined","Date","toISOString","Error","name","stack","WebGLRenderingContext","WebGL2RenderingContext","HTMLElement","HTMLCanvasElement","CanvasRenderingContext2D","WebGLProgram","WebGLBuffer","WebGLTexture","$$typeof","__reactFiber","_owner","constructor","includes","has","add","Array","isArray","map","item","cleaned","key","hasOwnProperty","MessageBus","source","handlers","Map","globalHandlers","Set","filters","messageQueue","processing","setupListeners","chrome","runtime","onMessage","addListener","sender","sendResponse","shouldProcessMessage","enqueueMessage","received","every","filter","push","processQueue","length","shift","processMessage","handler","get","on","set","off","delete","onAny","offAny","addFilter","send","fullMessage","now","generateUUID","sanitizedMessage","sanitizeMessage","sendMessage","tabs","query","isRelevantTab","tab","active","activeTabs","catch","sendToBackground","emit","forEach","handleMessage","targetFrame","info","sendToFrame","default"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/MessageBus.ts"],"sourcesContent":["import { Message, MessageType } from '../../shared/messaging/MessageBus';\r\nimport { OrganismState, OrganismMutation } from '../../shared/types/organism';\r\nimport { InvitationPayload, InvitationResult } from '../../shared/types/invitation';\r\nimport { Murmur } from '../../shared/types/murmur';\r\nimport { generateUUID } from '../../shared/utils/uuid';\r\nimport { sanitizeMessage } from '../../shared/utils/serialization';\r\nimport { logger } from '@shared/utils/secureLogger';\n\r\ntype MessageHandler<T extends Message = Message> = (message: T) => void | Promise<void>;\r\ntype MessageFilter = (message: Message) => boolean;\r\n\r\nfunction isOrganismState(obj: any): obj is OrganismState {\r\n  return obj &&\r\n    typeof obj.id === 'string' &&\r\n    typeof obj.generation === 'number' &&\r\n    typeof obj.health === 'number' &&\r\n    typeof obj.energy === 'number' &&\r\n    obj.traits && typeof obj.traits === 'object';\r\n}\r\n\r\nfunction isOrganismMutation(obj: any): obj is OrganismMutation {\r\n  return obj && typeof obj.type === 'string' && typeof obj.trigger === 'string';\r\n}\r\n\r\nfunction isBehaviorData(obj: any): boolean {\r\n  return obj && typeof obj.url === 'string' && typeof obj.visitCount === 'number';\r\n}\r\n\r\nfunction isMurmur(obj: any): obj is Murmur {\r\n  return obj && typeof obj.text === 'string' && typeof obj.timestamp === 'number';\r\n}\r\n\r\nfunction isInvitationPayload(obj: any): obj is InvitationPayload {\r\n  return obj && typeof obj.code === 'string';\r\n}\r\n\r\nfunction isInvitationResult(obj: any): obj is InvitationResult {\r\n  return obj && typeof obj.code === 'string' && typeof obj.status === 'string';\r\n}\r\n\r\nfunction validatePayload(type: MessageType, payload: any): boolean {\r\n  switch (type) {\r\n    case MessageType.ORGANISM_UPDATE:\r\n      return isOrganismState(payload);\r\n    case MessageType.ORGANISM_MUTATE:\r\n      return isOrganismMutation(payload);\r\n    case MessageType.PAGE_VISIT:\r\n    case MessageType.SCROLL_EVENT:\r\n      return isBehaviorData(payload);\r\n    case MessageType.MURMUR:\r\n      return isMurmur(payload);\r\n    case MessageType.GENERATE_INVITATION:\r\n    case MessageType.CONSUME_INVITATION:\r\n    case MessageType.CHECK_INVITATION:\r\n      return isInvitationPayload(payload);\r\n    case MessageType.INVITATION_GENERATED:\r\n      return typeof payload === 'string' || isInvitationResult(payload);\r\n    case MessageType.INVITATION_CONSUMED:\r\n    case MessageType.INVITATION_CHECKED:\r\n      return isInvitationResult(payload);\r\n    case MessageType.SHARED_MUTATION_RESULT:\r\n      // Accepte un string (chiffré) ou un objet (résultat de mutation)\r\n      return typeof payload === 'string' || (payload && typeof payload === 'object');\r\n    // Ajouter d'autres cas selon les besoins\r\n    default:\r\n      return true; // Par défaut, on accepte (à affiner selon les besoins)\r\n  }\r\n}\r\n\r\n// Fonction pour nettoyer les messages avant sérialisation\r\nfunction serializeMessage(message: any): any {\r\n  try {\r\n    // Test de sérialisation avec JSON.parse/stringify\r\n    return JSON.parse(JSON.stringify(message));\r\n  } catch (error) {\r\n    logger.warn('Message serialization issue, cleaning object:', error);\r\n    \r\n    // Nettoyage manuel pour les cas problématiques\r\n    const cleanMessage = cleanObjectForSerialization(message);\r\n    return cleanMessage;\r\n  }\r\n}\r\n\r\nfunction cleanObjectForSerialization(obj: any, seen = new WeakSet()): any {\r\n  if (obj === null || obj === undefined) {\r\n    return obj;\r\n  }\r\n  \r\n  if (typeof obj === 'function') {\r\n    return '[Function]'; // Remplace les fonctions par une string\r\n  }\r\n  \r\n  if (obj instanceof Date) {\r\n    return obj.toISOString(); // Convertit les dates en ISO string\r\n  }\r\n  \r\n  if (obj instanceof Error) {\r\n    return {\r\n      name: obj.name,\r\n      message: obj.message,\r\n      stack: obj.stack\r\n    };\r\n  }\r\n\r\n  // Objets WebGL, DOM, React non-sérialisables\r\n  if (obj instanceof WebGLRenderingContext || \r\n      obj instanceof WebGL2RenderingContext ||\r\n      obj instanceof HTMLElement ||\r\n      obj instanceof HTMLCanvasElement ||\r\n      obj instanceof CanvasRenderingContext2D ||\r\n      obj instanceof WebGLProgram ||\r\n      obj instanceof WebGLBuffer ||\r\n      obj instanceof WebGLTexture ||\r\n      (obj && obj.$$typeof) || // React elements\r\n      (obj && obj.__reactFiber) || // React fiber\r\n      (obj && obj._owner) || // React internal\r\n      (obj && typeof obj === 'object' && obj.constructor && obj.constructor.name && obj.constructor.name.includes('Fiber')) // React Fiber variants\r\n  ) {\r\n    return '[Non-serializable Object]';\r\n  }\r\n  \r\n  if (typeof obj !== 'object') {\r\n    return obj; // Primitives sont OK\r\n  }\r\n  \r\n  // Vérification des références circulaires AVANT la récursion\r\n  if (seen.has(obj)) {\r\n    return '[Circular Reference]';\r\n  }\r\n  seen.add(obj);\r\n  \r\n  if (Array.isArray(obj)) {\r\n    return obj.map(item => cleanObjectForSerialization(item, seen));\r\n  }\r\n  \r\n  // Pour les objets, on nettoie récursivement\r\n  const cleaned: any = {};\r\n  \r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      try {\r\n        cleaned[key] = cleanObjectForSerialization(obj[key], seen);\r\n      } catch (error) {\r\n        // Supprime les logs verbeux pour éviter le spam\r\n        cleaned[key] = '[Non-serializable]';\r\n      }\r\n    }\r\n  }\r\n  \r\n  return cleaned;\r\n}\r\n\r\nexport class MessageBus {\r\n  private handlers: Map<MessageType, Set<MessageHandler>> = new Map();\r\n  private globalHandlers: Set<MessageHandler> = new Set();\r\n  private filters: MessageFilter[] = [];\r\n  private messageQueue: Message[] = [];\r\n  private processing = false;\r\n\r\n  constructor(private readonly source: 'background' | 'content' | 'popup') {\r\n    this.setupListeners();\r\n  }\r\n\r\n  private setupListeners(): void {\r\n    // @ts-expect-error Paramètre réservé pour usage futur\r\n    chrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {\r\n      if (this.shouldProcessMessage(message)) {\r\n        this.enqueueMessage(message);\r\n        sendResponse({ received: true });\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  private shouldProcessMessage(message: Message): boolean {\r\n    return this.filters.every(filter => filter(message));\r\n  }\r\n\r\n  private async enqueueMessage(message: Message): Promise<void> {\r\n    this.messageQueue.push(message);\r\n    if (!this.processing) {\r\n      this.processing = true;\r\n      try {\r\n        await this.processQueue();\r\n      } finally {\r\n        this.processing = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async processQueue(): Promise<void> {\r\n    while (this.messageQueue.length > 0) {\r\n      const message = this.messageQueue.shift()!;\r\n      await this.processMessage(message);\r\n    }\r\n  }\r\n\r\n  private async processMessage(message: Message): Promise<void> {\r\n    // --- Validation stricte du payload ---\r\n    if (!validatePayload(message.type, message.payload)) {\r\n      logger.warn(`[MessageBus] Payload non valide pour le type ${message.type}`, message.payload);\r\n      return;\r\n    }\r\n\r\n    // Global handlers\r\n    for (const handler of this.globalHandlers) {\r\n      try {\r\n        await handler(message);\r\n      } catch (error) {\r\n        logger.error(`Error in global handler:`, error);\r\n      }\r\n    }\r\n\r\n    // Type-specific handlers\r\n    const handlers = this.handlers.get(message.type);\r\n    if (handlers) {\r\n      for (const handler of handlers) {\r\n        try {\r\n          await handler(message);\r\n        } catch (error) {\r\n          logger.error(`Error in handler for ${message.type}:`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public on<T extends Message>(type: T['type'], handler: MessageHandler<T>): void {\r\n    if (!this.handlers.has(type)) {\r\n      this.handlers.set(type, new Set());\r\n    }\r\n    this.handlers.get(type)!.add(handler as MessageHandler);\r\n  }\r\n\r\n  public off<T extends Message>(type: T['type'], handler: MessageHandler<T>): void {\r\n    const handlers = this.handlers.get(type);\r\n    if (handlers) {\r\n      handlers.delete(handler as MessageHandler);\r\n    }\r\n  }\r\n\r\n  public onAny(handler: MessageHandler): void {\r\n    this.globalHandlers.add(handler);\r\n  }\r\n\r\n  public offAny(handler: MessageHandler): void {\r\n    this.globalHandlers.delete(handler);\r\n  }\r\n\r\n  public addFilter(filter: MessageFilter): void {\r\n    this.filters.push(filter);\r\n  }\r\n\r\n  public async send(message: Omit<Message, 'source' | 'timestamp' | 'id'>): Promise<void> {\r\n    const fullMessage: Message = {\r\n      ...message,\r\n      source: this.source,\r\n      timestamp: Date.now(),\r\n      id: generateUUID(),\r\n    } as Message;\r\n\r\n    try {\r\n      // Sanitize le message d'abord pour éviter les objets problématiques\r\n      const sanitizedMessage = sanitizeMessage(fullMessage);\r\n      // Nettoyer le message avant envoi pour éviter les erreurs de sérialisation\r\n      const cleanMessage = serializeMessage(sanitizedMessage);\r\n      \r\n      if (this.source === 'content') {\r\n        await chrome.runtime.sendMessage(cleanMessage);\r\n      } else {\r\n        // Send to all tabs for content scripts\r\n        const tabs = await chrome.tabs.query({});\r\n        // Routage intelligent : on ne cible que les tabs actifs ou pertinents\r\n        const isRelevantTab = (tab: any) => tab.active || (tab.url && tab.url.includes('symbiont'));\r\n        const activeTabs = tabs.filter(isRelevantTab);\r\n        for (const tab of activeTabs) {\r\n          if (tab.id) {\r\n            chrome.tabs.sendMessage(tab.id, cleanMessage).catch(() => {\r\n              // Ignore errors for inactive tabs\r\n            });\r\n          }\r\n        }\r\n        // Also send to runtime for popup/background\r\n        chrome.runtime.sendMessage(cleanMessage).catch(() => {});\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error sending message:', error);\r\n    }\r\n  }\r\n\r\n  // Ajout pour compatibilité content script\r\n  public sendToBackground(message: any): void {\r\n    this.send(message);\r\n  }\r\n\r\n  public emit(type: any, payload: any): void {\r\n    // Appel direct des handlers si besoin (mock minimal)\r\n    const handlers = this.handlers.get(type as MessageType);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler({ type, payload }));\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Variables réservées pour usage futur\r\n  private handleMessage(message: any, targetFrame: string): void {\r\n    // Handle cross-frame messages\r\n    logger.info('Handling message:', message);\r\n  }\r\n\r\n  // @ts-expect-error Paramètre réservé pour usage futur\r\n  private onMessage(message: any, sender: chrome.runtime.MessageSender, sendResponse: (response?: any) => void): boolean {\r\n    // Handle incoming message\r\n    logger.info('Received message:', message);\r\n    return true;\r\n  }\r\n\r\n  // @ts-expect-error Variables réservées pour usage futur\r\n  private sendToFrame(handleMessage: (msg: any) => any, targetFrame: MessageTarget, payload: any): void {\r\n    // Send message to frame\r\n    logger.info('Sending to frame:', targetFrame, payload);\r\n  }\r\n}\r\n\r\nexport default MessageBus;\r\nexport { validatePayload };"],"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","ignoreList":[]}