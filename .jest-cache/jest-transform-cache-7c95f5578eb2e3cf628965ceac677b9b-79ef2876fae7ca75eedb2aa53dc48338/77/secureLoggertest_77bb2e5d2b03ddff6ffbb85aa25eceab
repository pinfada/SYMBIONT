fd3b92468e3f07692d77f893cf7b775a
"use strict";
/**
 * Tests pour le système de logging sécurisé
 */
Object.defineProperty(exports, "__esModule", { value: true });
const secureLogger_1 = require("../../src/shared/utils/secureLogger");
describe('SecureLogger', () => {
    let loggerInstance;
    let consoleSpy;
    beforeEach(() => {
        // Reset singleton instance for each test
        secureLogger_1.SecureLogger.instance = undefined;
        // Mock console methods
        consoleSpy = jest.spyOn(console, 'info').mockImplementation();
        jest.spyOn(console, 'warn').mockImplementation();
        jest.spyOn(console, 'error').mockImplementation();
        jest.spyOn(console, 'debug').mockImplementation();
        // Mock process.env
        Object.defineProperty(process, 'env', {
            value: { NODE_ENV: 'test' },
            writable: true,
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('getInstance()', () => {
        it('should return singleton instance', () => {
            const instance1 = secureLogger_1.SecureLogger.getInstance();
            const instance2 = secureLogger_1.SecureLogger.getInstance();
            expect(instance1).toBe(instance2);
        });
        it('should configure logger with provided config', () => {
            const config = {
                level: secureLogger_1.LogLevel.WARN,
                enableConsole: false,
                enableStorage: false,
            };
            loggerInstance = secureLogger_1.SecureLogger.getInstance(config);
            // Log at DEBUG level (should be filtered out)
            loggerInstance.debug('test message');
            expect(consoleSpy).not.toHaveBeenCalled();
            // Log at WARN level (should pass through)
            loggerInstance.warn('warn message');
            expect(consoleSpy).not.toHaveBeenCalled(); // Console disabled
        });
    });
    describe('Data Sanitization', () => {
        beforeEach(() => {
            loggerInstance = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should sanitize sensitive strings', () => {
            const sensitiveData = {
                password: 'secret123',
                token: 'abc123token',
                apiKey: 'sk-1234567890abcdef',
                email: 'user@example.com',
                normalData: 'this is fine',
            };
            loggerInstance.info('Test with sensitive data', sensitiveData);
            const logs = secureLogger_1.logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data.password).toBe('[REDACTED]');
            expect(lastLog.data.token).toBe('[REDACTED]');
            expect(lastLog.data.apiKey).toBe('[REDACTED]');
            expect(lastLog.data.normalData).toBe('this is fine');
            expect(lastLog.sanitized).toBe(true);
        });
        it('should detect and sanitize pattern-based sensitive data', () => {
            const sensitiveString = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';
            loggerInstance.warn(sensitiveString);
            const logs = secureLogger_1.logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.message).toContain('[REDACTED]');
        });
        it('should sanitize nested objects', () => {
            const nestedData = {
                user: {
                    name: 'John',
                    password: 'secret',
                    settings: {
                        apiToken: 'token123',
                        theme: 'dark',
                    },
                },
            };
            loggerInstance.info('Nested data test', nestedData);
            const logs = secureLogger_1.logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data.user.name).toBe('John');
            expect(lastLog.data.user.password).toBe('[REDACTED]');
            expect(lastLog.data.user.settings.apiToken).toBe('[REDACTED]');
            expect(lastLog.data.user.settings.theme).toBe('dark');
        });
        it('should sanitize arrays', () => {
            const arrayData = [
                { id: 1, secret: 'hidden' },
                { id: 2, name: 'visible' },
            ];
            loggerInstance.info('Array data test', arrayData);
            const logs = secureLogger_1.logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data[0].id).toBe(1);
            expect(lastLog.data[0].secret).toBe('[REDACTED]');
            expect(lastLog.data[1].name).toBe('visible');
        });
    });
    describe('Log Levels', () => {
        beforeEach(() => {
            loggerInstance = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.INFO,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should respect log level filtering', () => {
            loggerInstance.debug('debug message'); // Should be filtered
            loggerInstance.info('info message'); // Should pass
            loggerInstance.warn('warn message'); // Should pass
            loggerInstance.error('error message'); // Should pass
            const logs = secureLogger_1.logger.getLogs();
            expect(logs.length).toBe(3); // debug filtered out
            expect(logs[0].level).toBe(secureLogger_1.LogLevel.INFO);
            expect(logs[1].level).toBe(secureLogger_1.LogLevel.WARN);
            expect(logs[2].level).toBe(secureLogger_1.LogLevel.ERROR);
        });
        it('should log to appropriate console methods', () => {
            const debugSpy = jest.spyOn(console, 'debug').mockImplementation();
            const infoSpy = jest.spyOn(console, 'info').mockImplementation();
            const warnSpy = jest.spyOn(console, 'warn').mockImplementation();
            const errorSpy = jest.spyOn(console, 'error').mockImplementation();
            secureLogger_1.logger.setLevel(secureLogger_1.LogLevel.DEBUG);
            loggerInstance.debug('debug');
            loggerInstance.info('info');
            loggerInstance.warn('warn');
            loggerInstance.error('error');
            secureLogger_1.logger.fatal('fatal');
            expect(debugSpy).toHaveBeenCalled();
            expect(infoSpy).toHaveBeenCalled();
            expect(warnSpy).toHaveBeenCalled();
            expect(errorSpy).toHaveBeenCalledTimes(2); // error + fatal
        });
    });
    describe('Log Storage', () => {
        beforeEach(() => {
            loggerInstance = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: false,
                enableStorage: true,
                maxStorageEntries: 3,
            });
        });
        it('should store logs with proper structure', () => {
            loggerInstance.info('test message', { name: 'value' }, 'TestContext');
            const logs = secureLogger_1.logger.getLogs();
            const log = logs[0];
            expect(log.timestamp).toBeGreaterThan(0);
            expect(log.level).toBe(secureLogger_1.LogLevel.INFO);
            expect(log.message).toBe('test message');
            expect(log.data).toEqual({ name: 'value' });
            expect(log.context).toBe('TestContext');
            expect(log.sanitized).toBe(true);
        });
        it('should limit stored entries', () => {
            loggerInstance.info('message 1');
            loggerInstance.info('message 2');
            loggerInstance.info('message 3');
            loggerInstance.info('message 4'); // Should cause oldest to be removed
            const logs = secureLogger_1.logger.getLogs();
            expect(logs.length).toBe(3);
            expect(logs[0].message).toBe('message 2');
            expect(logs[2].message).toBe('message 4');
        });
        it('should filter logs by level when retrieving', () => {
            loggerInstance.debug('debug');
            loggerInstance.info('info');
            loggerInstance.warn('warn');
            loggerInstance.error('error');
            const errorLogs = secureLogger_1.logger.getLogs(secureLogger_1.LogLevel.ERROR);
            expect(errorLogs.length).toBe(1);
            expect(errorLogs[0].level).toBe(secureLogger_1.LogLevel.ERROR);
            const warnAndAbove = secureLogger_1.logger.getLogs(secureLogger_1.LogLevel.WARN);
            expect(warnAndAbove.length).toBe(2);
        });
    });
    describe('Production Mode', () => {
        beforeEach(() => {
            // Mock production environment
            Object.defineProperty(process, 'env', {
                value: { NODE_ENV: 'production' },
                writable: true,
            });
            // Mock Chrome extension environment
            Object.defineProperty(global, 'chrome', {
                value: {
                    runtime: {
                        getManifest: () => ({ name: 'test' }),
                    },
                },
                writable: true,
            });
        });
        afterEach(() => {
            delete global.chrome;
        });
        it('should disable console in production by default', () => {
            loggerInstance = secureLogger_1.SecureLogger.getInstance();
            loggerInstance.info('production message');
            expect(consoleSpy).not.toHaveBeenCalled();
            const logs = secureLogger_1.logger.getLogs();
            expect(logs.length).toBe(1); // Still stored
        });
    });
    describe('Utility Methods', () => {
        beforeEach(() => {
            loggerInstance = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should change log level dynamically', () => {
            secureLogger_1.logger.setLevel(secureLogger_1.LogLevel.WARN);
            loggerInstance.debug('debug'); // Should be filtered
            loggerInstance.info('info'); // Should be filtered
            loggerInstance.warn('warn'); // Should pass
            const logs = secureLogger_1.logger.getLogs();
            expect(logs.length).toBe(1);
            expect(logs[0].level).toBe(secureLogger_1.LogLevel.WARN);
        });
        it('should enable/disable console dynamically', () => {
            secureLogger_1.logger.enableConsole(false);
            loggerInstance.info('test');
            expect(consoleSpy).not.toHaveBeenCalled();
            secureLogger_1.logger.enableConsole(true);
            loggerInstance.info('test2');
            expect(consoleSpy).toHaveBeenCalled();
        });
        it('should clear logs', () => {
            loggerInstance.info('message 1');
            loggerInstance.info('message 2');
            expect(secureLogger_1.logger.getLogs().length).toBe(2);
            secureLogger_1.logger.clearLogs();
            expect(secureLogger_1.logger.getLogs().length).toBe(0);
        });
        it('should export logs as JSON', () => {
            loggerInstance.info('message 1', { data: 'test' });
            loggerInstance.warn('message 2');
            const exported = secureLogger_1.logger.exportLogs();
            const parsed = JSON.parse(exported);
            expect(Array.isArray(parsed)).toBe(true);
            expect(parsed.length).toBe(2);
            expect(parsed[0].message).toBe('message 1');
            expect(parsed[1].message).toBe('message 2');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,