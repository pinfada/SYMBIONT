{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/secureRandom.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/secureRandom.test.ts"],"sourcesContent":["/**\n * Tests pour les utilitaires de génération sécurisée de nombres aléatoires\n */\n\nimport { SecureRandom } from '../../src/shared/utils/secureRandom';\n\n// Mock crypto.getRandomValues pour les tests\nconst mockGetRandomValues = jest.fn();\nObject.defineProperty(global, 'crypto', {\n  value: {\n    getRandomValues: mockGetRandomValues,\n  },\n  writable: true,\n});\n\ndescribe('SecureRandom', () => {\n  beforeEach(() => {\n    mockGetRandomValues.mockClear();\n  });\n\n  describe('random()', () => {\n    it('should return a number between 0 and 1', () => {\n      // Mock crypto.getRandomValues to return a known value\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x80000000; // Half of MAX_UINT32\n        return array;\n      });\n\n      const result = SecureRandom.random();\n      expect(result).toBeGreaterThanOrEqual(0);\n      expect(result).toBeLessThan(1);\n      expect(typeof result).toBe('number');\n    });\n\n    it('should use crypto.getRandomValues when available', () => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x12345678;\n        return array;\n      });\n\n      SecureRandom.random();\n      expect(mockGetRandomValues).toHaveBeenCalledWith(expect.any(Uint32Array));\n    });\n\n    it('should fall back to Math.random when crypto is not available', () => {\n      // Temporarily remove crypto\n      const originalCrypto = global.crypto;\n      delete (global as any).crypto;\n\n      const mathRandomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.5);\n      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\n\n      const result = SecureRandom.random();\n\n      expect(result).toBe(0.5);\n      expect(mathRandomSpy).toHaveBeenCalled();\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\n        'SecureRandom: crypto.getRandomValues non disponible, utilisation de Math.random()'\n      );\n\n      // Restore\n      global.crypto = originalCrypto;\n      mathRandomSpy.mockRestore();\n      consoleWarnSpy.mockRestore();\n    });\n  });\n\n  describe('randomInt()', () => {\n    beforeEach(() => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x40000000; // Quarter of MAX_UINT32\n        return array;\n      });\n    });\n\n    it('should return integer within specified range', () => {\n      const result = SecureRandom.randomInt(5, 15);\n      expect(Number.isInteger(result)).toBe(true);\n      expect(result).toBeGreaterThanOrEqual(5);\n      expect(result).toBeLessThan(15);\n    });\n\n    it('should throw error if min >= max', () => {\n      expect(() => SecureRandom.randomInt(10, 5)).toThrow(\n        'SecureRandom: min doit être inférieur à max'\n      );\n      expect(() => SecureRandom.randomInt(5, 5)).toThrow(\n        'SecureRandom: min doit être inférieur à max'\n      );\n    });\n  });\n\n  describe('randomFloat()', () => {\n    beforeEach(() => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x40000000; // Quarter of MAX_UINT32 (0.25)\n        return array;\n      });\n    });\n\n    it('should return float within specified range', () => {\n      const result = SecureRandom.randomFloat(1.0, 3.0);\n      expect(typeof result).toBe('number');\n      expect(result).toBeGreaterThanOrEqual(1.0);\n      expect(result).toBeLessThan(3.0);\n    });\n\n    it('should throw error if min >= max', () => {\n      expect(() => SecureRandom.randomFloat(3.0, 1.0)).toThrow(\n        'SecureRandom: min doit être inférieur à max'\n      );\n    });\n  });\n\n  describe('randomBytes()', () => {\n    it('should return Uint8Array of specified length', () => {\n      mockGetRandomValues.mockImplementation((array) => {\n        for (let i = 0; i < array.length; i++) {\n          array[i] = i % 256;\n        }\n        return array;\n      });\n\n      const result = SecureRandom.randomBytes(10);\n      expect(result).toBeInstanceOf(Uint8Array);\n      expect(result.length).toBe(10);\n      expect(mockGetRandomValues).toHaveBeenCalledWith(expect.any(Uint8Array));\n    });\n\n    it('should fall back when crypto is not available', () => {\n      const originalCrypto = global.crypto;\n      delete (global as any).crypto;\n\n      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const mathRandomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.5);\n\n      const result = SecureRandom.randomBytes(5);\n      \n      expect(result).toBeInstanceOf(Uint8Array);\n      expect(result.length).toBe(5);\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\n        'SecureRandom: crypto.getRandomValues non disponible, génération fallback'\n      );\n\n      // Restore\n      global.crypto = originalCrypto;\n      consoleWarnSpy.mockRestore();\n      mathRandomSpy.mockRestore();\n    });\n  });\n\n  describe('choice()', () => {\n    beforeEach(() => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x40000000; // Should select index 1 of 4 elements\n        return array;\n      });\n    });\n\n    it('should return an element from the array', () => {\n      const array = ['a', 'b', 'c', 'd'];\n      const result = SecureRandom.choice(array);\n      expect(array).toContain(result);\n    });\n\n    it('should throw error for empty array', () => {\n      expect(() => SecureRandom.choice([])).toThrow(\n        'SecureRandom: Le tableau ne peut pas être vide'\n      );\n    });\n  });\n\n  describe('uuid()', () => {\n    it('should return valid UUID v4 format', () => {\n      mockGetRandomValues.mockImplementation((array) => {\n        for (let i = 0; i < array.length; i++) {\n          array[i] = i + 0x10;\n        }\n        return array;\n      });\n\n      const result = SecureRandom.uuid();\n      expect(typeof result).toBe('string');\n      expect(result).toMatch(\n        /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n      );\n    });\n\n    it('should fall back to Math.random when crypto is not available', () => {\n      const originalCrypto = global.crypto;\n      delete (global as any).crypto;\n\n      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const mathRandomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.5);\n\n      const result = SecureRandom.uuid();\n      \n      expect(typeof result).toBe('string');\n      expect(result).toMatch(\n        /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n      );\n      expect(consoleWarnSpy).toHaveBeenCalledWith(\n        'SecureRandom: crypto.getRandomValues non disponible, UUID fallback'\n      );\n\n      // Restore\n      global.crypto = originalCrypto;\n      consoleWarnSpy.mockRestore();\n      mathRandomSpy.mockRestore();\n    });\n  });\n\n  describe('randomString()', () => {\n    beforeEach(() => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x10000000; // Should select predictable characters\n        return array;\n      });\n    });\n\n    it('should return string of specified length', () => {\n      const result = SecureRandom.randomString(10);\n      expect(typeof result).toBe('string');\n      expect(result.length).toBe(10);\n    });\n\n    it('should use custom charset', () => {\n      const charset = 'ABC';\n      const result = SecureRandom.randomString(5, charset);\n      expect(result.length).toBe(5);\n      for (const char of result) {\n        expect(charset).toContain(char);\n      }\n    });\n  });\n\n  describe('randomId()', () => {\n    beforeEach(() => {\n      mockGetRandomValues.mockImplementation((array) => {\n        array[0] = 0x10000000;\n        return array;\n      });\n    });\n\n    it('should return ID with prefix', () => {\n      const result = SecureRandom.randomId('test', 6);\n      expect(result).toMatch(/^test_[A-Za-z0-9]{6}$/);\n    });\n\n    it('should return ID without prefix', () => {\n      const result = SecureRandom.randomId('', 8);\n      expect(result).toMatch(/^[A-Za-z0-9]{8}$/);\n    });\n\n    it('should use default length', () => {\n      const result = SecureRandom.randomId('prefix');\n      expect(result).toMatch(/^prefix_[A-Za-z0-9]{8}$/);\n    });\n  });\n});"],"version":3}