d006084df5f0ba50a79bb2e8a4163f64
"use strict";

/* istanbul ignore next */
function cov_1i1d7yr2o2() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/GeneticMutator.ts";
  var hash = "02de749208a72eb03a3d5cc343e3e6fc5c473608";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/GeneticMutator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 55
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 59
        }
      },
      "6": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 72
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "8": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "10": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "12": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 72
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "16": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 87
        }
      },
      "17": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 105
        }
      },
      "18": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 42
        }
      },
      "19": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 130
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 72
        }
      },
      "22": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "23": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 44,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 90
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 27
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 16
          },
          end: {
            line: 6,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 42
          }
        }],
        line: 6
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 44
          },
          end: {
            line: 6,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 6,
            column: 59
          },
          end: {
            line: 6,
            column: 61
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 6,
            column: 63
          },
          end: {
            line: 6,
            column: 88
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 6,
            column: 87
          },
          end: {
            line: 6,
            column: 88
          }
        }],
        line: 6
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 16,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 16,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 18,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 46
          }
        }, {
          start: {
            line: 24,
            column: 50
          },
          end: {
            line: 24,
            column: 59
          }
        }],
        line: 24
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: 35,
            column: 13
          },
          end: {
            line: 38,
            column: 9
          }
        }],
        line: 28
      },
      "7": {
        loc: {
          start: {
            line: 37,
            column: 71
          },
          end: {
            line: 37,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 71
          },
          end: {
            line: 37,
            column: 102
          }
        }, {
          start: {
            line: 37,
            column: 106
          },
          end: {
            line: 37,
            column: 109
          }
        }],
        line: 37
      },
      "8": {
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 39,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 39,
            column: 47
          }
        }, {
          start: {
            line: 39,
            column: 51
          },
          end: {
            line: 39,
            column: 53
          }
        }],
        line: 39
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/GeneticMutator.ts",
      mappings: ";;;AACA,+DAA4D;AAE5D,MAAa,cAAc;IAMzB,YAAY,mBAAmB,GAAG,IAAI,EAAE,eAAuC,EAAE,EAAE,qBAAqB,GAAG,CAAC;QAC1G,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACrD,CAAC;IAED,yDAAyD;IACzD,4BAA4B,CAAC,QAAuB;QAClD,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QACjE,6DAA6D;QAC7D,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG;YAAE,IAAI,IAAI,GAAG,CAAC;QACjD,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG;YAAE,IAAI,IAAI,GAAG,CAAC;QAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,6CAA6C;IAC7C,gBAAgB,CAAC,KAAa,EAAE,OAAa;QAC3C,MAAM,KAAK,GAAG,CAAC,2BAAY,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,yBAAyB;QAC5E,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,IAAI,SAAS,EAAE,CAAC;IACxD,CAAC;IAED,kDAAkD;IAClD,aAAa,CAAC,QAAuB,EAAE,QAAkB;QACvD,IAAI,QAAQ,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;YAC7B,0DAA0D;YAC1D,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,2BAAY,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAC7D,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,2BAAY,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YAC9E,QAAQ,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,sBAAsB;YACtB,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACxH,CAAC;QACD,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;QAC9C,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAChE,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AA3CD,wCA2CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/GeneticMutator.ts"],
      sourcesContent: ["import { OrganismState, Mutation } from '../shared/types/organism'\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nexport class GeneticMutator {\r\n  private mutationProbability: number;\r\n  // @ts-expect-error Poids r\xE9serv\xE9s pour usage futur\r\n  private traitWeights: Record<string, number>;\r\n  private environmentalPressure: number;\r\n\r\n  constructor(mutationProbability = 0.05, traitWeights: Record<string, number> = {}, environmentalPressure = 1) {\r\n    this.mutationProbability = mutationProbability;\r\n    this.traitWeights = traitWeights;\r\n    this.environmentalPressure = environmentalPressure;\r\n  }\r\n\r\n  // Calcule la probabilit\xE9 de mutation (peut \xEAtre enrichi)\r\n  calculateMutationProbability(organism: OrganismState): number {\r\n    let base = this.mutationProbability * this.environmentalPressure;\r\n    // Influence des traits (ex : curiosit\xE9 favorise la mutation)\r\n    if (organism.traits.curiosity > 0.7) base *= 1.2;\r\n    if (organism.traits.focus < 0.3) base *= 0.8;\r\n    return Math.min(1, Math.max(0, base));\r\n  }\r\n\r\n  // G\xE9n\xE8re une mutation sur un trait ou le DNA\r\n  generateMutation(trait: string, trigger?: any): Mutation {\r\n    const delta = (SecureRandom.random() - 0.5) * 0.2; // variation [-0.1, +0.1]\r\n    return { trait, delta, reason: trigger || 'genetic' };\r\n  }\r\n\r\n  // Applique la mutation \xE0 l'organisme et historise\r\n  applyMutation(organism: OrganismState, mutation: Mutation): OrganismState {\r\n    if (mutation.trait === 'dna') {\r\n      // Mutation du DNA (remplacement al\xE9atoire d'un caract\xE8re)\r\n      const chars = organism.dna.split('');\r\n      const idx = Math.floor(SecureRandom.random() * chars.length);\r\n      chars[idx] = String.fromCharCode(33 + Math.floor(SecureRandom.random() * 94));\r\n      organism.dna = chars.join('');\r\n    } else {\r\n      // Mutation d'un trait\r\n      organism.traits[mutation.trait] = Math.max(0, Math.min(1, (organism.traits[mutation.trait] ?? 0.5) + mutation.delta));\r\n    }\r\n    organism.mutations = organism.mutations || [];\r\n    organism.mutations.push({ ...mutation, timestamp: Date.now() });\r\n    return organism;\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "02de749208a72eb03a3d5cc343e3e6fc5c473608"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1i1d7yr2o2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1i1d7yr2o2();
cov_1i1d7yr2o2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1i1d7yr2o2().s[1]++;
exports.GeneticMutator = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_1i1d7yr2o2().s[2]++, require("../shared/utils/secureRandom"));
class GeneticMutator {
  constructor(mutationProbability =
  /* istanbul ignore next */
  (cov_1i1d7yr2o2().b[0][0]++, 0.05), traitWeights =
  /* istanbul ignore next */
  (cov_1i1d7yr2o2().b[1][0]++, {}), environmentalPressure =
  /* istanbul ignore next */
  (cov_1i1d7yr2o2().b[2][0]++, 1)) {
    /* istanbul ignore next */
    cov_1i1d7yr2o2().f[0]++;
    cov_1i1d7yr2o2().s[3]++;
    this.mutationProbability = mutationProbability;
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[4]++;
    this.traitWeights = traitWeights;
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[5]++;
    this.environmentalPressure = environmentalPressure;
  }
  // Calcule la probabilité de mutation (peut être enrichi)
  calculateMutationProbability(organism) {
    /* istanbul ignore next */
    cov_1i1d7yr2o2().f[1]++;
    let base =
    /* istanbul ignore next */
    (cov_1i1d7yr2o2().s[6]++, this.mutationProbability * this.environmentalPressure);
    // Influence des traits (ex : curiosité favorise la mutation)
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[7]++;
    if (organism.traits.curiosity > 0.7) {
      /* istanbul ignore next */
      cov_1i1d7yr2o2().b[3][0]++;
      cov_1i1d7yr2o2().s[8]++;
      base *= 1.2;
    } else
    /* istanbul ignore next */
    {
      cov_1i1d7yr2o2().b[3][1]++;
    }
    cov_1i1d7yr2o2().s[9]++;
    if (organism.traits.focus < 0.3) {
      /* istanbul ignore next */
      cov_1i1d7yr2o2().b[4][0]++;
      cov_1i1d7yr2o2().s[10]++;
      base *= 0.8;
    } else
    /* istanbul ignore next */
    {
      cov_1i1d7yr2o2().b[4][1]++;
    }
    cov_1i1d7yr2o2().s[11]++;
    return Math.min(1, Math.max(0, base));
  }
  // Génère une mutation sur un trait ou le DNA
  generateMutation(trait, trigger) {
    /* istanbul ignore next */
    cov_1i1d7yr2o2().f[2]++;
    const delta =
    /* istanbul ignore next */
    (cov_1i1d7yr2o2().s[12]++, (secureRandom_1.SecureRandom.random() - 0.5) * 0.2); // variation [-0.1, +0.1]
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[13]++;
    return {
      trait,
      delta,
      reason:
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().b[5][0]++, trigger) ||
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().b[5][1]++, 'genetic')
    };
  }
  // Applique la mutation à l'organisme et historise
  applyMutation(organism, mutation) {
    /* istanbul ignore next */
    cov_1i1d7yr2o2().f[3]++;
    cov_1i1d7yr2o2().s[14]++;
    if (mutation.trait === 'dna') {
      /* istanbul ignore next */
      cov_1i1d7yr2o2().b[6][0]++;
      // Mutation du DNA (remplacement aléatoire d'un caractère)
      const chars =
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().s[15]++, organism.dna.split(''));
      const idx =
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().s[16]++, Math.floor(secureRandom_1.SecureRandom.random() * chars.length));
      /* istanbul ignore next */
      cov_1i1d7yr2o2().s[17]++;
      chars[idx] = String.fromCharCode(33 + Math.floor(secureRandom_1.SecureRandom.random() * 94));
      /* istanbul ignore next */
      cov_1i1d7yr2o2().s[18]++;
      organism.dna = chars.join('');
    } else {
      /* istanbul ignore next */
      cov_1i1d7yr2o2().b[6][1]++;
      cov_1i1d7yr2o2().s[19]++;
      // Mutation d'un trait
      organism.traits[mutation.trait] = Math.max(0, Math.min(1, (
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().b[7][0]++, organism.traits[mutation.trait]) ??
      /* istanbul ignore next */
      (cov_1i1d7yr2o2().b[7][1]++, 0.5)) + mutation.delta));
    }
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[20]++;
    organism.mutations =
    /* istanbul ignore next */
    (cov_1i1d7yr2o2().b[8][0]++, organism.mutations) ||
    /* istanbul ignore next */
    (cov_1i1d7yr2o2().b[8][1]++, []);
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[21]++;
    organism.mutations.push({
      ...mutation,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_1i1d7yr2o2().s[22]++;
    return organism;
  }
}
/* istanbul ignore next */
cov_1i1d7yr2o2().s[23]++;
exports.GeneticMutator = GeneticMutator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,