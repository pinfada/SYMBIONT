{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/ErrorHandler.integration.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/ErrorHandler.integration.test.ts"],"sourcesContent":["import { errorHandler } from '../src/core/utils/ErrorHandler';\r\nimport { OrganismCore } from '../src/core/OrganismCore';\r\nimport { NeuralMesh } from '../src/core/NeuralMesh';\r\n\r\ndescribe('ErrorHandler Integration Tests', () => {\r\n  beforeEach(() => {\r\n    // Reset error handler state before each test\r\n    errorHandler.reset();\r\n    errorHandler.setLogLevel('debug');\r\n  });\r\n\r\n  describe('Integration with OrganismCore', () => {\r\n    it('should handle organism creation errors gracefully', async () => {\r\n      const initialMetrics = errorHandler.getMetrics();\r\n      \r\n      // Try to create organism with invalid DNA\r\n      expect(() => {\r\n        new OrganismCore('', {}, () => new NeuralMesh());\r\n      }).toThrow();\r\n\r\n      const finalMetrics = errorHandler.getMetrics();\r\n      expect(finalMetrics.errorCount).toBeGreaterThan(initialMetrics.errorCount);\r\n    });\r\n\r\n    it('should track errors across organism lifecycle', async () => {\r\n      const organism = new OrganismCore('ATCGATCGATCGATCG', {}, () => new NeuralMesh());\r\n      \r\n      await organism.boot();\r\n      \r\n      // Perform operations that might generate errors\r\n      organism.stimulate('invalid_node', 0.5);\r\n      organism.mutate(-0.1); // Invalid mutation rate\r\n      organism.setTraits({ creativity: 2.0 } as any); // Invalid trait value\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.errorCount).toBeGreaterThan(0);\r\n      \r\n      await organism.hibernate();\r\n    });\r\n\r\n    it('should provide fallback values when organism operations fail', async () => {\r\n      const organism = new OrganismCore('ATCGATCGATCGATCG');\r\n      await organism.boot();\r\n      \r\n      // This should return default metrics even if internal errors occur\r\n      const metrics = await organism.getPerformanceMetrics();\r\n      \r\n      expect(metrics).toBeDefined();\r\n      expect(metrics.cpu).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.memory).toBeGreaterThanOrEqual(0);\r\n      expect(metrics.mutationStats).toBeDefined();\r\n      \r\n      await organism.hibernate();\r\n    });\r\n  });\r\n\r\n  describe('Retry Mechanisms', () => {\r\n    it('should retry failed operations successfully', async () => {\r\n      let attemptCount = 0;\r\n      \r\n      const flakeyOperation = async (): Promise<string> => {\r\n        attemptCount++;\r\n        if (attemptCount < 3) {\r\n          throw new Error(`Attempt ${attemptCount} failed`);\r\n        }\r\n        return 'Success!';\r\n      };\r\n\r\n      const result = await errorHandler.withRetry(\r\n        flakeyOperation,\r\n        {\r\n          maxRetries: 5,\r\n          backoffMs: 10,\r\n          shouldRetry: (error, attempt) => attempt < 5\r\n        },\r\n        { component: 'Test', method: 'flakeyOperation' }\r\n      );\r\n\r\n      expect(result).toBe('Success!');\r\n      expect(attemptCount).toBe(3);\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.recoveryAttempts).toBe(3);\r\n      expect(metrics.recoverySuccesses).toBe(1);\r\n    });\r\n\r\n    it('should use fallback when all retries fail', async () => {\r\n      const alwaysFailingOperation = async (): Promise<string> => {\r\n        throw new Error('Always fails');\r\n      };\r\n\r\n      const result = await errorHandler.withRetry(\r\n        alwaysFailingOperation,\r\n        {\r\n          maxRetries: 3,\r\n          backoffMs: 1,\r\n          shouldRetry: () => true,\r\n          fallbackValue: 'Fallback used'\r\n        },\r\n        { component: 'Test', method: 'alwaysFailingOperation' }\r\n      );\r\n\r\n      expect(result).toBe('Fallback used');\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.recoveryAttempts).toBe(3);\r\n      expect(metrics.recoverySuccesses).toBe(0);\r\n    });\r\n\r\n    it('should respect shouldRetry conditions', async () => {\r\n      let attemptCount = 0;\r\n      \r\n      const selectiveFailureOperation = async (): Promise<string> => {\r\n        attemptCount++;\r\n        if (attemptCount === 1) {\r\n          throw new Error('Retryable error');\r\n        } else if (attemptCount === 2) {\r\n          throw new Error('Fatal error');\r\n        }\r\n        return 'Success';\r\n      };\r\n\r\n      try {\r\n        await errorHandler.withRetry(\r\n          selectiveFailureOperation,\r\n          {\r\n            maxRetries: 5,\r\n            backoffMs: 1,\r\n            shouldRetry: (error, attempt) => !error.message.includes('Fatal')\r\n          },\r\n          { component: 'Test', method: 'selectiveFailureOperation' }\r\n        );\r\n      } catch (error) {\r\n        expect((error as Error).message).toContain('Fatal error');\r\n      }\r\n\r\n      expect(attemptCount).toBe(2); // Should stop after fatal error\r\n    });\r\n  });\r\n\r\n  describe('Validation Integration', () => {\r\n    it('should validate complex nested objects', () => {\r\n      const complexObject = {\r\n        user: {\r\n          name: 'test',\r\n          age: 25,\r\n          preferences: {\r\n            theme: 'dark',\r\n            volume: 0.8\r\n          }\r\n        }\r\n      };\r\n\r\n      const nameValidation = errorHandler.validateType(\r\n        complexObject.user.name,\r\n        'string',\r\n        { required: true, min: 1 },\r\n        'user.name',\r\n        'TestComponent',\r\n        'validateComplexObject'\r\n      );\r\n\r\n      const ageValidation = errorHandler.validateType(\r\n        complexObject.user.age,\r\n        'number',\r\n        { required: true, min: 0, max: 120 },\r\n        'user.age',\r\n        'TestComponent',\r\n        'validateComplexObject'\r\n      );\r\n\r\n      const volumeValidation = errorHandler.validateType(\r\n        complexObject.user.preferences.volume,\r\n        'number',\r\n        { required: true, min: 0, max: 1 },\r\n        'user.preferences.volume',\r\n        'TestComponent',\r\n        'validateComplexObject'\r\n      );\r\n\r\n      expect(nameValidation.isValid).toBe(true);\r\n      expect(ageValidation.isValid).toBe(true);\r\n      expect(volumeValidation.isValid).toBe(true);\r\n    });\r\n\r\n    it('should accumulate validation errors across multiple fields', () => {\r\n      const invalidData = {\r\n        email: '', // Required but empty\r\n        age: -5,   // Invalid negative\r\n        score: 150 // Out of range\r\n      };\r\n\r\n      const emailValidation = errorHandler.validateType(\r\n        invalidData.email,\r\n        'string',\r\n        { required: true, min: 1 },\r\n        'email',\r\n        'TestComponent',\r\n        'validateUser'\r\n      );\r\n\r\n      const ageValidation = errorHandler.validateType(\r\n        invalidData.age,\r\n        'number',\r\n        { required: true, min: 0, max: 120 },\r\n        'age',\r\n        'TestComponent',\r\n        'validateUser'\r\n      );\r\n\r\n      const scoreValidation = errorHandler.validateType(\r\n        invalidData.score,\r\n        'number',\r\n        { required: true, min: 0, max: 100 },\r\n        'score',\r\n        'TestComponent',\r\n        'validateUser'\r\n      );\r\n\r\n      expect(emailValidation.isValid).toBe(false);\r\n      expect(ageValidation.isValid).toBe(false);\r\n      expect(scoreValidation.isValid).toBe(false);\r\n\r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.errorCount).toBe(3);\r\n    });\r\n  });\r\n\r\n  describe('Concurrent Error Handling', () => {\r\n    it('should handle multiple concurrent errors', async () => {\r\n      const concurrentOperations = Array.from({ length: 10 }, (_, i) => \r\n        errorHandler.safeExecuteAsync(\r\n          async () => {\r\n            if (i % 2 === 0) {\r\n              throw new Error(`Error ${i}`);\r\n            }\r\n            return `Success ${i}`;\r\n          },\r\n          `Fallback ${i}`,\r\n          { component: 'ConcurrentTest', method: `operation${i}` }\r\n        )\r\n      );\r\n\r\n      const results = await Promise.all(concurrentOperations);\r\n      \r\n      // Should have mix of successes and fallbacks\r\n      const successes = results.filter(r => r.startsWith('Success'));\r\n      const fallbacks = results.filter(r => r.startsWith('Fallback'));\r\n      \r\n      expect(successes.length).toBe(5);\r\n      expect(fallbacks.length).toBe(5);\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.errorCount).toBe(5);\r\n    });\r\n  });\r\n\r\n  describe('Memory and Performance', () => {\r\n    it('should not consume excessive memory with many errors', () => {\r\n      const initialMetrics = errorHandler.getMetrics();\r\n      \r\n      // Generate many errors\r\n      for (let i = 0; i < 2000; i++) {\r\n        errorHandler.logSimpleError(\r\n          'MemoryTest',\r\n          'generateManyErrors',\r\n          new Error(`Error ${i}`),\r\n          'warning'\r\n        );\r\n      }\r\n\r\n      const recentErrors = errorHandler.getRecentErrors(100);\r\n      expect(recentErrors.length).toBeLessThanOrEqual(100);\r\n      \r\n      const finalMetrics = errorHandler.getMetrics();\r\n      expect(finalMetrics.errorCount).toBe(initialMetrics.errorCount + 2000);\r\n    });\r\n\r\n    it('should maintain reasonable performance under load', () => {\r\n      const startTime = performance.now();\r\n      \r\n      // Perform many error operations\r\n      for (let i = 0; i < 1000; i++) {\r\n        errorHandler.safeExecute(\r\n          () => {\r\n            if (i % 10 === 0) throw new Error(`Error ${i}`);\r\n            return i;\r\n          },\r\n          0,\r\n          { component: 'PerformanceTest', method: 'highVolumeTest' }\r\n        );\r\n      }\r\n      \r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      // Should complete within reasonable time (adjust threshold as needed)\r\n      expect(duration).toBeLessThan(1000); // 1 second\r\n    });\r\n  });\r\n\r\n  describe('Error Pattern Analysis', () => {\r\n    it('should track error patterns by component', () => {\r\n      // Generate errors from different components\r\n      errorHandler.logSimpleError('ComponentA', 'method1', new Error('Error 1'));\r\n      errorHandler.logSimpleError('ComponentA', 'method2', new Error('Error 2'));\r\n      errorHandler.logSimpleError('ComponentB', 'method1', new Error('Error 3'));\r\n      errorHandler.logSimpleError('ComponentA', 'method1', new Error('Error 4'));\r\n\r\n      const metrics = errorHandler.getMetrics();\r\n      \r\n      expect(metrics.errorsByComponent.get('ComponentA')).toBe(3);\r\n      expect(metrics.errorsByComponent.get('ComponentB')).toBe(1);\r\n      expect(metrics.errorsByMethod.get('ComponentA.method1')).toBe(2);\r\n      expect(metrics.errorsByMethod.get('ComponentA.method2')).toBe(1);\r\n      expect(metrics.errorsByMethod.get('ComponentB.method1')).toBe(1);\r\n    });\r\n\r\n    it('should identify error hotspots', () => {\r\n      // Simulate error hotspot\r\n      for (let i = 0; i < 10; i++) {\r\n        errorHandler.logSimpleError('HotspotComponent', 'problematicMethod', \r\n          new Error(`Hotspot error ${i}`));\r\n      }\r\n\r\n      // Normal errors in other components\r\n      errorHandler.logSimpleError('NormalComponent', 'normalMethod', new Error('Normal error'));\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      const hotspotErrors = metrics.errorsByComponent.get('HotspotComponent') || 0;\r\n      const normalErrors = metrics.errorsByComponent.get('NormalComponent') || 0;\r\n      \r\n      expect(hotspotErrors).toBe(10);\r\n      expect(normalErrors).toBe(1);\r\n      expect(hotspotErrors / metrics.errorCount).toBeGreaterThan(0.8); // 80%+ of errors\r\n    });\r\n  });\r\n\r\n  describe('Error Recovery Scenarios', () => {\r\n    it('should handle cascading failures gracefully', async () => {\r\n      const organism = new OrganismCore('ATCGATCGATCGATCG');\r\n      \r\n      try {\r\n        await organism.boot();\r\n        \r\n        // Simulate cascading failures\r\n        organism.stimulate('invalid_input', NaN);\r\n        organism.mutate(Infinity);\r\n        organism.setTraits({ invalid: 'trait' } as any);\r\n        \r\n        // System should still be functional\r\n        const state = organism.getState();\r\n        expect(state).toBeDefined();\r\n        expect(state.health).toBeGreaterThanOrEqual(0);\r\n        expect(state.energy).toBeGreaterThanOrEqual(0);\r\n        \r\n      } finally {\r\n        await organism.hibernate();\r\n      }\r\n      \r\n      const metrics = errorHandler.getMetrics();\r\n      expect(metrics.errorCount).toBeGreaterThan(0);\r\n    });\r\n  });\r\n}); "],"version":3}