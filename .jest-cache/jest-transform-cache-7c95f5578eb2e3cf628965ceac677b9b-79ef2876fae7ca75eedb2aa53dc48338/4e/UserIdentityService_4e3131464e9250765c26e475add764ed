173a3bcdeccaa8a064b042df9358d256
"use strict";

/* istanbul ignore next */
function cov_10newgt99e() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/UserIdentityService.ts";
  var hash = "b9717f836f3d72e141d60032bddccd8c7a417a92";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/UserIdentityService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "3": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "5": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 20,
          column: 13
        }
      },
      "7": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "8": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 63
        }
      },
      "9": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 54
        }
      },
      "10": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 117
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "12": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 83
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "16": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "17": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "19": {
        start: {
          line: 39,
          column: 33
        },
        end: {
          line: 39,
          column: 51
        }
      },
      "20": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 43,
          column: 17
        }
      },
      "21": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 36
        }
      },
      "22": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 57
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 79
        }
      },
      "24": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 49
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "26": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "27": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "28": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "29": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 83
        }
      },
      "30": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "31": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 80
        }
      },
      "32": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "33": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "34": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 57
        }
      },
      "35": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "36": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 49
        }
      },
      "37": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 87
        }
      },
      "38": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 80
        }
      },
      "39": {
        start: {
          line: 99,
          column: 22
        },
        end: {
          line: 99,
          column: 60
        }
      },
      "40": {
        start: {
          line: 100,
          column: 19
        },
        end: {
          line: 100,
          column: 21
        }
      },
      "41": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "42": {
        start: {
          line: 101,
          column: 21
        },
        end: {
          line: 101,
          column: 22
        }
      },
      "43": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 102,
          column: 72
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 39
        }
      },
      "45": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 20
        }
      },
      "46": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "47": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 112,
          column: 57
        }
      },
      "48": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 68
        }
      },
      "49": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 83
        }
      },
      "50": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "51": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 43
        }
      },
      "52": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 88
        }
      },
      "53": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 49
        }
      },
      "54": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "55": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 131,
          column: 57
        }
      },
      "56": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 37
        }
      },
      "57": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 83
        }
      },
      "58": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "59": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 39
        }
      },
      "60": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 82
        }
      },
      "61": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 21
        }
      },
      "62": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "63": {
        start: {
          line: 150,
          column: 29
        },
        end: {
          line: 150,
          column: 57
        }
      },
      "64": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 34
        }
      },
      "65": {
        start: {
          line: 152,
          column: 38
        },
        end: {
          line: 152,
          column: 100
        }
      },
      "66": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 94
        }
      },
      "67": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "68": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 76
        }
      },
      "69": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "70": {
        start: {
          line: 176,
          column: 22
        },
        end: {
          line: 176,
          column: 37
        }
      },
      "71": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 32
        }
      },
      "72": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "73": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 54
        }
      },
      "74": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 60
        }
      },
      "75": {
        start: {
          line: 186,
          column: 32
        },
        end: {
          line: 186,
          column: 60
        }
      },
      "76": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "77": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 31
        }
      },
      "78": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 81
        }
      },
      "79": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 24
        }
      },
      "80": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "81": {
        start: {
          line: 203,
          column: 29
        },
        end: {
          line: 203,
          column: 57
        }
      },
      "82": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 44
        }
      },
      "83": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 77
        }
      },
      "84": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 24
        }
      },
      "85": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "86": {
        start: {
          line: 216,
          column: 29
        },
        end: {
          line: 216,
          column: 53
        }
      },
      "87": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "88": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 67
        }
      },
      "89": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "90": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 71
        }
      },
      "91": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "92": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 77
        }
      },
      "93": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 24
        }
      },
      "94": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "95": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 235,
          column: 53
        }
      },
      "96": {
        start: {
          line: 236,
          column: 0
        },
        end: {
          line: 236,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 35
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 34
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 36
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 44
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 39
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 148
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 40
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 174
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 37
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 182
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 34
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 201
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 46
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 214
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 43,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 43,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "4": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "5": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 28
          }
        }, {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 218,
            column: 56
          }
        }, {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 79
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/UserIdentityService.ts",
      mappings: ";;;AAAA,2CAA2C;AAC3C,8CAAyD;AACzD,8DAAqD;AAUrD,MAAa,mBAAmB;IAI9B;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,SAAS;QACpB,IAAI,CAAC;YACH,IAAI,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEpD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,GAAG,IAAA,yBAAkB,GAAE,CAAC;gBAC9B,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBAE/C,4BAA4B;gBAC5B,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;gBAEtC,qBAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;YACxF,CAAC;YAED,qCAAqC;YACrC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAEpC,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACxD,mCAAmC;YACnC,OAAO,IAAA,yBAAkB,GAAE,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe;QAC1B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAE5D,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,QAAQ,GAAiB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElD,gCAAgC;gBAChC,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,EAAE,CAAC;oBAC3B,OAAO,QAAQ,CAAC;gBAClB,CAAC;YACH,CAAC;YAED,4CAA4C;YAC5C,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACpD,wCAAwC;YACxC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACtC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAc;QACpD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAiB;YAC7B,EAAE,EAAE,MAAM;YACV,SAAS,EAAE,GAAG;YACd,UAAU,EAAE,GAAG;YACf,cAAc,EAAE,IAAI,CAAC,sBAAsB,EAAE;YAC7C,UAAU,EAAE,CAAC;SACd,CAAC;QAEF,IAAI,CAAC;YACH,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvE,qBAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBACpC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;gBACvC,cAAc,EAAE,QAAQ,CAAC,cAAc;aACxC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAc;QAC1C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,EAAE,CAAC;gBAC3B,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACjC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzE,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,sBAAsB;QACnC,iDAAiD;QACjD,MAAM,KAAK,GAAG,sCAAsC,CAAC;QACrD,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,wBAAwB;QACnC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACxD,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEvE,qBAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBAC1C,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;gBAC3C,OAAO,EAAE,QAAQ,CAAC,cAAc;aACjC,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,cAAc,CAAC;QACjC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,mBAAmB;QAC9B,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,QAAQ,CAAC,UAAU,IAAI,CAAC,CAAC;YACzB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEvE,qBAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBAC1C,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;gBAC3C,UAAU,EAAE,QAAQ,CAAC,UAAU;aAChC,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,UAAU,CAAC;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,YAAY;QAMvB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YACzF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAEnF,OAAO;gBACL,iBAAiB;gBACjB,UAAU;gBACV,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,cAAc,EAAE,QAAQ,CAAC,cAAc;aACxC,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YACjD,OAAO;gBACL,iBAAiB,EAAE,CAAC;gBACpB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,CAAC;gBACb,cAAc,EAAE,OAAO;aACxB,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,sBAAsB,CAAC,IAAY;QACxC,kDAAkD;QAClD,MAAM,KAAK,GAAG,eAAe,CAAC;QAC9B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,iBAAiB;QAC5B,IAAI,CAAC;YACH,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1C,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAEjD,qBAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE;gBAClC,KAAK,EAAE,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;gBAC7C,OAAO,EAAE,WAAW,CAAC,cAAc;aACpC,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc;QACzB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC9C,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,YAAoB;QAC9C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAiB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAExD,uBAAuB;YACvB,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;gBACpE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;YACrD,CAAC;YAED,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YACpD,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;YAE3D,qBAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACrC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;gBACvC,UAAU,EAAE,QAAQ,CAAC,UAAU;aAChC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,qBAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;;AAjQH,kDAkQC;AAjQyB,+BAAW,GAAG,kBAAkB,CAAC;AACjC,qCAAiB,GAAG,wBAAwB,CAAC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/UserIdentityService.ts"],
      sourcesContent: ["// src/core/services/UserIdentityService.ts\nimport { generateSecureUUID } from '@/shared/utils/uuid';\nimport { logger } from '@/shared/utils/secureLogger';\n\nexport interface UserIdentity {\n  id: string;\n  createdAt: number;\n  lastActive: number;\n  invitationCode: string;\n  generation: number;\n}\n\nexport class UserIdentityService {\n  private static readonly USER_ID_KEY = 'symbiont_user_id';\n  private static readonly USER_IDENTITY_KEY = 'symbiont_user_identity';\n\n  /**\n   * Obtient ou cr\xE9e un identifiant utilisateur unique\n   */\n  static async getUserId(): Promise<string> {\n    try {\n      let userId = localStorage.getItem(this.USER_ID_KEY);\n      \n      if (!userId) {\n        userId = generateSecureUUID();\n        localStorage.setItem(this.USER_ID_KEY, userId);\n        \n        // Cr\xE9er l'identit\xE9 compl\xE8te\n        await this.createUserIdentity(userId);\n        \n        logger.info('New user identity created:', { userId: userId.substring(0, 8) + '...' });\n      }\n      \n      // Mettre \xE0 jour la derni\xE8re activit\xE9\n      await this.updateLastActive(userId);\n      \n      return userId;\n    } catch (error) {\n      logger.error('Failed to get or create user ID:', error);\n      // Fallback avec un UUID temporaire\n      return generateSecureUUID();\n    }\n  }\n\n  /**\n   * Obtient l'identit\xE9 compl\xE8te de l'utilisateur\n   */\n  static async getUserIdentity(): Promise<UserIdentity> {\n    try {\n      const userId = await this.getUserId();\n      const stored = localStorage.getItem(this.USER_IDENTITY_KEY);\n      \n      if (stored) {\n        const identity: UserIdentity = JSON.parse(stored);\n        \n        // V\xE9rifier la coh\xE9rence de l'ID\n        if (identity.id === userId) {\n          return identity;\n        }\n      }\n      \n      // Cr\xE9er une nouvelle identit\xE9 si n\xE9cessaire\n      return await this.createUserIdentity(userId);\n    } catch (error) {\n      logger.error('Failed to get user identity:', error);\n      // Fallback avec une identit\xE9 temporaire\n      const userId = await this.getUserId();\n      return await this.createUserIdentity(userId);\n    }\n  }\n\n  /**\n   * Cr\xE9e une nouvelle identit\xE9 utilisateur\n   */\n  private static async createUserIdentity(userId: string): Promise<UserIdentity> {\n    const now = Date.now();\n    const identity: UserIdentity = {\n      id: userId,\n      createdAt: now,\n      lastActive: now,\n      invitationCode: this.generateInvitationCode(),\n      generation: 1\n    };\n\n    try {\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      logger.info('User identity created:', { \n        id: identity.id.substring(0, 8) + '...',\n        invitationCode: identity.invitationCode\n      });\n    } catch (error) {\n      logger.error('Failed to save user identity:', error);\n    }\n\n    return identity;\n  }\n\n  /**\n   * Met \xE0 jour la derni\xE8re activit\xE9 de l'utilisateur\n   */\n  static async updateLastActive(userId: string): Promise<void> {\n    try {\n      const identity = await this.getUserIdentity();\n      if (identity.id === userId) {\n        identity.lastActive = Date.now();\n        localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      }\n    } catch (error) {\n      logger.error('Failed to update last active:', error);\n    }\n  }\n\n  /**\n   * G\xE9n\xE8re un code d'invitation unique et m\xE9morable\n   */\n  private static generateInvitationCode(): string {\n    // G\xE9n\xE8re un code de 6 caract\xE8res alphanum\xE9riques\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    \n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * chars.length);\n      code += chars[randomIndex];\n    }\n    \n    return code;\n  }\n\n  /**\n   * R\xE9g\xE9n\xE8re le code d'invitation\n   */\n  static async regenerateInvitationCode(): Promise<string> {\n    try {\n      const identity = await this.getUserIdentity();\n      identity.invitationCode = this.generateInvitationCode();\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      \n      logger.info('Invitation code regenerated:', { \n        userId: identity.id.substring(0, 8) + '...',\n        newCode: identity.invitationCode \n      });\n      \n      return identity.invitationCode;\n    } catch (error) {\n      logger.error('Failed to regenerate invitation code:', error);\n      return this.generateInvitationCode();\n    }\n  }\n\n  /**\n   * Incr\xE9mente la g\xE9n\xE9ration de l'utilisateur\n   */\n  static async incrementGeneration(): Promise<number> {\n    try {\n      const identity = await this.getUserIdentity();\n      identity.generation += 1;\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      \n      logger.info('User generation incremented:', { \n        userId: identity.id.substring(0, 8) + '...',\n        generation: identity.generation \n      });\n      \n      return identity.generation;\n    } catch (error) {\n      logger.error('Failed to increment generation:', error);\n      return 1;\n    }\n  }\n\n  /**\n   * Obtient les statistiques de l'utilisateur\n   */\n  static async getUserStats(): Promise<{\n    daysSinceCreation: number;\n    daysActive: number;\n    generation: number;\n    invitationCode: string;\n  }> {\n    try {\n      const identity = await this.getUserIdentity();\n      const now = Date.now();\n      const daysSinceCreation = Math.floor((now - identity.createdAt) / (24 * 60 * 60 * 1000));\n      const daysActive = Math.floor((now - identity.lastActive) / (24 * 60 * 60 * 1000));\n      \n      return {\n        daysSinceCreation,\n        daysActive,\n        generation: identity.generation,\n        invitationCode: identity.invitationCode\n      };\n    } catch (error) {\n      logger.error('Failed to get user stats:', error);\n      return {\n        daysSinceCreation: 0,\n        daysActive: 0,\n        generation: 1,\n        invitationCode: 'ERROR'\n      };\n    }\n  }\n\n  /**\n   * Valide un code d'invitation\n   */\n  static validateInvitationCode(code: string): boolean {\n    // Valide le format : 6 caract\xE8res alphanum\xE9riques\n    const regex = /^[A-Z0-9]{6}$/;\n    return regex.test(code);\n  }\n\n  /**\n   * R\xE9initialise l'identit\xE9 utilisateur (pour debug/reset)\n   */\n  static async resetUserIdentity(): Promise<UserIdentity> {\n    try {\n      localStorage.removeItem(this.USER_ID_KEY);\n      localStorage.removeItem(this.USER_IDENTITY_KEY);\n      \n      const newIdentity = await this.getUserIdentity();\n      \n      logger.info('User identity reset:', { \n        newId: newIdentity.id.substring(0, 8) + '...',\n        newCode: newIdentity.invitationCode \n      });\n      \n      return newIdentity;\n    } catch (error) {\n      logger.error('Failed to reset user identity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exporte l'identit\xE9 pour sauvegarde/migration\n   */\n  static async exportIdentity(): Promise<string> {\n    try {\n      const identity = await this.getUserIdentity();\n      return JSON.stringify(identity);\n    } catch (error) {\n      logger.error('Failed to export identity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Importe une identit\xE9 depuis une sauvegarde\n   */\n  static async importIdentity(identityData: string): Promise<void> {\n    try {\n      const identity: UserIdentity = JSON.parse(identityData);\n      \n      // Valider la structure\n      if (!identity.id || !identity.invitationCode || !identity.createdAt) {\n        throw new Error('Invalid identity data structure');\n      }\n      \n      localStorage.setItem(this.USER_ID_KEY, identity.id);\n      localStorage.setItem(this.USER_IDENTITY_KEY, identityData);\n      \n      logger.info('User identity imported:', { \n        id: identity.id.substring(0, 8) + '...',\n        generation: identity.generation \n      });\n    } catch (error) {\n      logger.error('Failed to import identity:', error);\n      throw error;\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9717f836f3d72e141d60032bddccd8c7a417a92"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10newgt99e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10newgt99e();
cov_10newgt99e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10newgt99e().s[1]++;
exports.UserIdentityService = void 0;
// src/core/services/UserIdentityService.ts
const uuid_1 =
/* istanbul ignore next */
(cov_10newgt99e().s[2]++, require("@/shared/utils/uuid"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_10newgt99e().s[3]++, require("@/shared/utils/secureLogger"));
class UserIdentityService {
  /**
   * Obtient ou crée un identifiant utilisateur unique
   */
  static async getUserId() {
    /* istanbul ignore next */
    cov_10newgt99e().f[0]++;
    cov_10newgt99e().s[4]++;
    try {
      let userId =
      /* istanbul ignore next */
      (cov_10newgt99e().s[5]++, localStorage.getItem(this.USER_ID_KEY));
      /* istanbul ignore next */
      cov_10newgt99e().s[6]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_10newgt99e().b[0][0]++;
        cov_10newgt99e().s[7]++;
        userId = (0, uuid_1.generateSecureUUID)();
        /* istanbul ignore next */
        cov_10newgt99e().s[8]++;
        localStorage.setItem(this.USER_ID_KEY, userId);
        // Créer l'identité complète
        /* istanbul ignore next */
        cov_10newgt99e().s[9]++;
        await this.createUserIdentity(userId);
        /* istanbul ignore next */
        cov_10newgt99e().s[10]++;
        secureLogger_1.logger.info('New user identity created:', {
          userId: userId.substring(0, 8) + '...'
        });
      } else
      /* istanbul ignore next */
      {
        cov_10newgt99e().b[0][1]++;
      }
      // Mettre à jour la dernière activité
      cov_10newgt99e().s[11]++;
      await this.updateLastActive(userId);
      /* istanbul ignore next */
      cov_10newgt99e().s[12]++;
      return userId;
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[13]++;
      secureLogger_1.logger.error('Failed to get or create user ID:', error);
      // Fallback avec un UUID temporaire
      /* istanbul ignore next */
      cov_10newgt99e().s[14]++;
      return (0, uuid_1.generateSecureUUID)();
    }
  }
  /**
   * Obtient l'identité complète de l'utilisateur
   */
  static async getUserIdentity() {
    /* istanbul ignore next */
    cov_10newgt99e().f[1]++;
    cov_10newgt99e().s[15]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_10newgt99e().s[16]++, await this.getUserId());
      const stored =
      /* istanbul ignore next */
      (cov_10newgt99e().s[17]++, localStorage.getItem(this.USER_IDENTITY_KEY));
      /* istanbul ignore next */
      cov_10newgt99e().s[18]++;
      if (stored) {
        /* istanbul ignore next */
        cov_10newgt99e().b[1][0]++;
        const identity =
        /* istanbul ignore next */
        (cov_10newgt99e().s[19]++, JSON.parse(stored));
        // Vérifier la cohérence de l'ID
        /* istanbul ignore next */
        cov_10newgt99e().s[20]++;
        if (identity.id === userId) {
          /* istanbul ignore next */
          cov_10newgt99e().b[2][0]++;
          cov_10newgt99e().s[21]++;
          return identity;
        } else
        /* istanbul ignore next */
        {
          cov_10newgt99e().b[2][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_10newgt99e().b[1][1]++;
      }
      // Créer une nouvelle identité si nécessaire
      cov_10newgt99e().s[22]++;
      return await this.createUserIdentity(userId);
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[23]++;
      secureLogger_1.logger.error('Failed to get user identity:', error);
      // Fallback avec une identité temporaire
      const userId =
      /* istanbul ignore next */
      (cov_10newgt99e().s[24]++, await this.getUserId());
      /* istanbul ignore next */
      cov_10newgt99e().s[25]++;
      return await this.createUserIdentity(userId);
    }
  }
  /**
   * Crée une nouvelle identité utilisateur
   */
  static async createUserIdentity(userId) {
    /* istanbul ignore next */
    cov_10newgt99e().f[2]++;
    const now =
    /* istanbul ignore next */
    (cov_10newgt99e().s[26]++, Date.now());
    const identity =
    /* istanbul ignore next */
    (cov_10newgt99e().s[27]++, {
      id: userId,
      createdAt: now,
      lastActive: now,
      invitationCode: this.generateInvitationCode(),
      generation: 1
    });
    /* istanbul ignore next */
    cov_10newgt99e().s[28]++;
    try {
      /* istanbul ignore next */
      cov_10newgt99e().s[29]++;
      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));
      /* istanbul ignore next */
      cov_10newgt99e().s[30]++;
      secureLogger_1.logger.info('User identity created:', {
        id: identity.id.substring(0, 8) + '...',
        invitationCode: identity.invitationCode
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[31]++;
      secureLogger_1.logger.error('Failed to save user identity:', error);
    }
    /* istanbul ignore next */
    cov_10newgt99e().s[32]++;
    return identity;
  }
  /**
   * Met à jour la dernière activité de l'utilisateur
   */
  static async updateLastActive(userId) {
    /* istanbul ignore next */
    cov_10newgt99e().f[3]++;
    cov_10newgt99e().s[33]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[34]++, await this.getUserIdentity());
      /* istanbul ignore next */
      cov_10newgt99e().s[35]++;
      if (identity.id === userId) {
        /* istanbul ignore next */
        cov_10newgt99e().b[3][0]++;
        cov_10newgt99e().s[36]++;
        identity.lastActive = Date.now();
        /* istanbul ignore next */
        cov_10newgt99e().s[37]++;
        localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));
      } else
      /* istanbul ignore next */
      {
        cov_10newgt99e().b[3][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[38]++;
      secureLogger_1.logger.error('Failed to update last active:', error);
    }
  }
  /**
   * Génère un code d'invitation unique et mémorable
   */
  static generateInvitationCode() {
    /* istanbul ignore next */
    cov_10newgt99e().f[4]++;
    // Génère un code de 6 caractères alphanumériques
    const chars =
    /* istanbul ignore next */
    (cov_10newgt99e().s[39]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
    let code =
    /* istanbul ignore next */
    (cov_10newgt99e().s[40]++, '');
    /* istanbul ignore next */
    cov_10newgt99e().s[41]++;
    for (let i =
    /* istanbul ignore next */
    (cov_10newgt99e().s[42]++, 0); i < 6; i++) {
      const randomIndex =
      /* istanbul ignore next */
      (cov_10newgt99e().s[43]++, Math.floor(Math.random() * chars.length));
      /* istanbul ignore next */
      cov_10newgt99e().s[44]++;
      code += chars[randomIndex];
    }
    /* istanbul ignore next */
    cov_10newgt99e().s[45]++;
    return code;
  }
  /**
   * Régénère le code d'invitation
   */
  static async regenerateInvitationCode() {
    /* istanbul ignore next */
    cov_10newgt99e().f[5]++;
    cov_10newgt99e().s[46]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[47]++, await this.getUserIdentity());
      /* istanbul ignore next */
      cov_10newgt99e().s[48]++;
      identity.invitationCode = this.generateInvitationCode();
      /* istanbul ignore next */
      cov_10newgt99e().s[49]++;
      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));
      /* istanbul ignore next */
      cov_10newgt99e().s[50]++;
      secureLogger_1.logger.info('Invitation code regenerated:', {
        userId: identity.id.substring(0, 8) + '...',
        newCode: identity.invitationCode
      });
      /* istanbul ignore next */
      cov_10newgt99e().s[51]++;
      return identity.invitationCode;
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[52]++;
      secureLogger_1.logger.error('Failed to regenerate invitation code:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[53]++;
      return this.generateInvitationCode();
    }
  }
  /**
   * Incrémente la génération de l'utilisateur
   */
  static async incrementGeneration() {
    /* istanbul ignore next */
    cov_10newgt99e().f[6]++;
    cov_10newgt99e().s[54]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[55]++, await this.getUserIdentity());
      /* istanbul ignore next */
      cov_10newgt99e().s[56]++;
      identity.generation += 1;
      /* istanbul ignore next */
      cov_10newgt99e().s[57]++;
      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));
      /* istanbul ignore next */
      cov_10newgt99e().s[58]++;
      secureLogger_1.logger.info('User generation incremented:', {
        userId: identity.id.substring(0, 8) + '...',
        generation: identity.generation
      });
      /* istanbul ignore next */
      cov_10newgt99e().s[59]++;
      return identity.generation;
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[60]++;
      secureLogger_1.logger.error('Failed to increment generation:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[61]++;
      return 1;
    }
  }
  /**
   * Obtient les statistiques de l'utilisateur
   */
  static async getUserStats() {
    /* istanbul ignore next */
    cov_10newgt99e().f[7]++;
    cov_10newgt99e().s[62]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[63]++, await this.getUserIdentity());
      const now =
      /* istanbul ignore next */
      (cov_10newgt99e().s[64]++, Date.now());
      const daysSinceCreation =
      /* istanbul ignore next */
      (cov_10newgt99e().s[65]++, Math.floor((now - identity.createdAt) / (24 * 60 * 60 * 1000)));
      const daysActive =
      /* istanbul ignore next */
      (cov_10newgt99e().s[66]++, Math.floor((now - identity.lastActive) / (24 * 60 * 60 * 1000)));
      /* istanbul ignore next */
      cov_10newgt99e().s[67]++;
      return {
        daysSinceCreation,
        daysActive,
        generation: identity.generation,
        invitationCode: identity.invitationCode
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[68]++;
      secureLogger_1.logger.error('Failed to get user stats:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[69]++;
      return {
        daysSinceCreation: 0,
        daysActive: 0,
        generation: 1,
        invitationCode: 'ERROR'
      };
    }
  }
  /**
   * Valide un code d'invitation
   */
  static validateInvitationCode(code) {
    /* istanbul ignore next */
    cov_10newgt99e().f[8]++;
    // Valide le format : 6 caractères alphanumériques
    const regex =
    /* istanbul ignore next */
    (cov_10newgt99e().s[70]++, /^[A-Z0-9]{6}$/);
    /* istanbul ignore next */
    cov_10newgt99e().s[71]++;
    return regex.test(code);
  }
  /**
   * Réinitialise l'identité utilisateur (pour debug/reset)
   */
  static async resetUserIdentity() {
    /* istanbul ignore next */
    cov_10newgt99e().f[9]++;
    cov_10newgt99e().s[72]++;
    try {
      /* istanbul ignore next */
      cov_10newgt99e().s[73]++;
      localStorage.removeItem(this.USER_ID_KEY);
      /* istanbul ignore next */
      cov_10newgt99e().s[74]++;
      localStorage.removeItem(this.USER_IDENTITY_KEY);
      const newIdentity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[75]++, await this.getUserIdentity());
      /* istanbul ignore next */
      cov_10newgt99e().s[76]++;
      secureLogger_1.logger.info('User identity reset:', {
        newId: newIdentity.id.substring(0, 8) + '...',
        newCode: newIdentity.invitationCode
      });
      /* istanbul ignore next */
      cov_10newgt99e().s[77]++;
      return newIdentity;
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[78]++;
      secureLogger_1.logger.error('Failed to reset user identity:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[79]++;
      throw error;
    }
  }
  /**
   * Exporte l'identité pour sauvegarde/migration
   */
  static async exportIdentity() {
    /* istanbul ignore next */
    cov_10newgt99e().f[10]++;
    cov_10newgt99e().s[80]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[81]++, await this.getUserIdentity());
      /* istanbul ignore next */
      cov_10newgt99e().s[82]++;
      return JSON.stringify(identity);
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[83]++;
      secureLogger_1.logger.error('Failed to export identity:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[84]++;
      throw error;
    }
  }
  /**
   * Importe une identité depuis une sauvegarde
   */
  static async importIdentity(identityData) {
    /* istanbul ignore next */
    cov_10newgt99e().f[11]++;
    cov_10newgt99e().s[85]++;
    try {
      const identity =
      /* istanbul ignore next */
      (cov_10newgt99e().s[86]++, JSON.parse(identityData));
      // Valider la structure
      /* istanbul ignore next */
      cov_10newgt99e().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_10newgt99e().b[5][0]++, !identity.id) ||
      /* istanbul ignore next */
      (cov_10newgt99e().b[5][1]++, !identity.invitationCode) ||
      /* istanbul ignore next */
      (cov_10newgt99e().b[5][2]++, !identity.createdAt)) {
        /* istanbul ignore next */
        cov_10newgt99e().b[4][0]++;
        cov_10newgt99e().s[88]++;
        throw new Error('Invalid identity data structure');
      } else
      /* istanbul ignore next */
      {
        cov_10newgt99e().b[4][1]++;
      }
      cov_10newgt99e().s[89]++;
      localStorage.setItem(this.USER_ID_KEY, identity.id);
      /* istanbul ignore next */
      cov_10newgt99e().s[90]++;
      localStorage.setItem(this.USER_IDENTITY_KEY, identityData);
      /* istanbul ignore next */
      cov_10newgt99e().s[91]++;
      secureLogger_1.logger.info('User identity imported:', {
        id: identity.id.substring(0, 8) + '...',
        generation: identity.generation
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10newgt99e().s[92]++;
      secureLogger_1.logger.error('Failed to import identity:', error);
      /* istanbul ignore next */
      cov_10newgt99e().s[93]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_10newgt99e().s[94]++;
exports.UserIdentityService = UserIdentityService;
/* istanbul ignore next */
cov_10newgt99e().s[95]++;
UserIdentityService.USER_ID_KEY = 'symbiont_user_id';
/* istanbul ignore next */
cov_10newgt99e().s[96]++;
UserIdentityService.USER_IDENTITY_KEY = 'symbiont_user_identity';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,