54db79eca28b49e15b4b806d228414c7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalNetworkGraph = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
// Génère un réseau mocké simple
function generateMockNetwork() {
    const nodes = [];
    const links = [];
    const centerX = 200, centerY = 150, radius1 = 60, radius2 = 100;
    // Racine
    nodes.push({ id: 'ROOT', generation: 0, x: centerX, y: centerY });
    // 3 enfants
    for (let i = 0; i < 3; i++) {
        const angle = (i / 3) * 2 * Math.PI;
        const x = centerX + radius1 * Math.cos(angle);
        const y = centerY + radius1 * Math.sin(angle);
        const id = `A${i}`;
        nodes.push({ id, generation: 1, x, y });
        links.push({ source: 'ROOT', target: id });
        // 2 petits-enfants par enfant
        for (let j = 0; j < 2; j++) {
            const subAngle = angle + (j === 0 ? -0.3 : 0.3);
            const x2 = centerX + radius2 * Math.cos(subAngle);
            const y2 = centerY + radius2 * Math.sin(subAngle);
            const subId = `B${i}${j}`;
            nodes.push({ id: subId, generation: 2, x: x2, y: y2 });
            links.push({ source: id, target: subId });
        }
    }
    return { nodes, links };
}
const GlobalNetworkGraph = (props) => {
    // États principaux regroupés
    const [networkState, setNetworkState] = (0, react_1.useState)({
        network: null,
        loading: true,
        error: null
    });
    const [viewState, setViewState] = (0, react_1.useState)({
        zoom: 1,
        offset: { x: 0, y: 0 },
        hoveredNode: null,
        selectedNode: null
    });
    const svgRef = (0, react_1.useRef)(null);
    // Chargement du réseau
    (0, react_1.useEffect)(() => {
        setNetworkState(prev => ({ ...prev, loading: true, error: null }));
        // Simulation chargement puis utilisation mock
        setTimeout(() => {
            try {
                const mockNetwork = generateMockNetwork();
                setNetworkState({
                    network: mockNetwork,
                    loading: false,
                    error: null
                });
                if (props.onNodeCountChange) {
                    props.onNodeCountChange(mockNetwork.nodes.length);
                }
            }
            catch {
                setNetworkState(prev => ({
                    ...prev,
                    loading: false,
                    error: 'Erreur lors du chargement du réseau'
                }));
            }
        }, 1000);
    }, [props.onNodeCountChange]);
    // Gestion du zoom
    const handleWheel = (e) => {
        e.preventDefault();
        setViewState(prev => ({
            ...prev,
            zoom: Math.max(0.5, Math.min(3, prev.zoom - e.deltaY * 0.001))
        }));
    };
    // Gestion du survol des nœuds
    const handleNodeMouseOver = (node) => {
        setViewState(prev => ({ ...prev, hoveredNode: node }));
    };
    const handleNodeMouseOut = () => {
        setViewState(prev => ({ ...prev, hoveredNode: null }));
    };
    const handleNodeClick = (node) => {
        setViewState(prev => ({
            ...prev,
            selectedNode: prev.selectedNode?.id === node.id ? null : node
        }));
    };
    if (networkState.loading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "network-loading", children: [(0, jsx_runtime_1.jsx)("div", { className: "loading-spinner loading-spinner--medium" }), (0, jsx_runtime_1.jsx)("p", { children: "Chargement du r\u00E9seau..." })] }));
    }
    if (networkState.error || !networkState.network) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "network-error", children: [(0, jsx_runtime_1.jsx)("h3", { children: "R\u00E9seau Indisponible" }), (0, jsx_runtime_1.jsx)("p", { children: networkState.error || 'Impossible de charger le réseau' }), (0, jsx_runtime_1.jsx)("button", { onClick: () => window.location.reload(), className: "btn-retry", children: "R\u00E9essayer" })] }));
    }
    const { network } = networkState;
    const { zoom, offset, hoveredNode, selectedNode } = viewState;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "network-container", children: [(0, jsx_runtime_1.jsxs)("div", { className: "network-header", children: [(0, jsx_runtime_1.jsx)("h3", { children: "R\u00E9seau Global SYMBIONT" }), (0, jsx_runtime_1.jsxs)("div", { className: "network-stats", children: [(0, jsx_runtime_1.jsxs)("span", { className: "stat-badge", children: [network.nodes.length, " organismes"] }), (0, jsx_runtime_1.jsxs)("span", { className: "stat-badge", children: [network.links.length, " connexions"] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "network-graph-wrapper", children: [(0, jsx_runtime_1.jsx)("svg", { ref: svgRef, className: "network-svg", width: "100%", height: "300", onWheel: handleWheel, children: (0, jsx_runtime_1.jsxs)("g", { transform: `translate(${offset.x}, ${offset.y}) scale(${zoom})`, children: [(0, jsx_runtime_1.jsx)("g", { className: "links", children: network.links.map((link, i) => {
                                        const source = network.nodes.find(n => n.id === link.source);
                                        const target = network.nodes.find(n => n.id === link.target);
                                        if (!source || !target)
                                            return null;
                                        return ((0, jsx_runtime_1.jsx)("line", { x1: source.x, y1: source.y, x2: target.x, y2: target.y, stroke: "rgba(0, 224, 255, 0.4)", strokeWidth: "2", className: "network-link" }, i));
                                    }) }), (0, jsx_runtime_1.jsx)("g", { className: "nodes", children: network.nodes.map((node) => ((0, jsx_runtime_1.jsxs)("g", { children: [(0, jsx_runtime_1.jsx)("circle", { cx: node.x, cy: node.y, r: node.generation === 0 ? 12 : 8, fill: node.generation === 0 ? '#ff4b6e' : '#00e0ff', stroke: selectedNode?.id === node.id ? '#ffb700' : 'rgba(255,255,255,0.3)', strokeWidth: selectedNode?.id === node.id ? 3 : 1, className: "network-node", onMouseEnter: () => handleNodeMouseOver(node), onMouseLeave: handleNodeMouseOut, onClick: () => handleNodeClick(node), style: { cursor: 'pointer' } }), (0, jsx_runtime_1.jsx)("text", { x: node.x, y: node.y + 20, textAnchor: "middle", fontSize: "10", fill: "#ffffff", className: "node-label", children: node.id })] }, node.id))) })] }) }), hoveredNode && ((0, jsx_runtime_1.jsxs)("div", { className: "network-tooltip", children: [(0, jsx_runtime_1.jsx)("h4", { children: hoveredNode.id }), (0, jsx_runtime_1.jsxs)("p", { children: ["G\u00E9n\u00E9ration: ", hoveredNode.generation] }), (0, jsx_runtime_1.jsxs)("p", { children: ["Position: (", Math.round(hoveredNode.x), ", ", Math.round(hoveredNode.y), ")"] })] }))] }), selectedNode && ((0, jsx_runtime_1.jsxs)("div", { className: "node-details", children: [(0, jsx_runtime_1.jsxs)("h4", { children: ["D\u00E9tails de ", selectedNode.id] }), (0, jsx_runtime_1.jsxs)("div", { className: "detail-grid", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { className: "detail-label", children: "G\u00E9n\u00E9ration:" }), (0, jsx_runtime_1.jsx)("span", { className: "detail-value", children: selectedNode.generation })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { className: "detail-label", children: "Type:" }), (0, jsx_runtime_1.jsx)("span", { className: "detail-value", children: selectedNode.generation === 0 ? 'Racine' : 'Descendant' })] })] })] })), (0, jsx_runtime_1.jsxs)("div", { className: "network-controls", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => setViewState(prev => ({ ...prev, zoom: Math.min(3, prev.zoom * 1.2) })), children: "Zoom +" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setViewState(prev => ({ ...prev, zoom: Math.max(0.5, prev.zoom / 1.2) })), children: "Zoom -" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setViewState(prev => ({ ...prev, zoom: 1, offset: { x: 0, y: 0 } })), children: "Reset" })] })] }));
};
exports.GlobalNetworkGraph = GlobalNetworkGraph;
exports.default = exports.GlobalNetworkGraph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,