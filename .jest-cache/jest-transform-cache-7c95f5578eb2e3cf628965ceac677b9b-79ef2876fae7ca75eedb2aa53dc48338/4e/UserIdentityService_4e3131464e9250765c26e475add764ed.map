{"version":3,"names":["uuid_1","cov_10newgt99e","s","require","secureLogger_1","UserIdentityService","getUserId","f","userId","localStorage","getItem","USER_ID_KEY","b","generateSecureUUID","setItem","createUserIdentity","logger","info","substring","updateLastActive","error","getUserIdentity","stored","USER_IDENTITY_KEY","identity","JSON","parse","id","now","Date","createdAt","lastActive","invitationCode","generateInvitationCode","generation","stringify","chars","code","i","randomIndex","Math","floor","random","length","regenerateInvitationCode","newCode","incrementGeneration","getUserStats","daysSinceCreation","daysActive","validateInvitationCode","regex","test","resetUserIdentity","removeItem","newIdentity","newId","exportIdentity","importIdentity","identityData","Error","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/UserIdentityService.ts"],"sourcesContent":["// src/core/services/UserIdentityService.ts\nimport { generateSecureUUID } from '@/shared/utils/uuid';\nimport { logger } from '@/shared/utils/secureLogger';\n\nexport interface UserIdentity {\n  id: string;\n  createdAt: number;\n  lastActive: number;\n  invitationCode: string;\n  generation: number;\n}\n\nexport class UserIdentityService {\n  private static readonly USER_ID_KEY = 'symbiont_user_id';\n  private static readonly USER_IDENTITY_KEY = 'symbiont_user_identity';\n\n  /**\n   * Obtient ou crée un identifiant utilisateur unique\n   */\n  static async getUserId(): Promise<string> {\n    try {\n      let userId = localStorage.getItem(this.USER_ID_KEY);\n      \n      if (!userId) {\n        userId = generateSecureUUID();\n        localStorage.setItem(this.USER_ID_KEY, userId);\n        \n        // Créer l'identité complète\n        await this.createUserIdentity(userId);\n        \n        logger.info('New user identity created:', { userId: userId.substring(0, 8) + '...' });\n      }\n      \n      // Mettre à jour la dernière activité\n      await this.updateLastActive(userId);\n      \n      return userId;\n    } catch (error) {\n      logger.error('Failed to get or create user ID:', error);\n      // Fallback avec un UUID temporaire\n      return generateSecureUUID();\n    }\n  }\n\n  /**\n   * Obtient l'identité complète de l'utilisateur\n   */\n  static async getUserIdentity(): Promise<UserIdentity> {\n    try {\n      const userId = await this.getUserId();\n      const stored = localStorage.getItem(this.USER_IDENTITY_KEY);\n      \n      if (stored) {\n        const identity: UserIdentity = JSON.parse(stored);\n        \n        // Vérifier la cohérence de l'ID\n        if (identity.id === userId) {\n          return identity;\n        }\n      }\n      \n      // Créer une nouvelle identité si nécessaire\n      return await this.createUserIdentity(userId);\n    } catch (error) {\n      logger.error('Failed to get user identity:', error);\n      // Fallback avec une identité temporaire\n      const userId = await this.getUserId();\n      return await this.createUserIdentity(userId);\n    }\n  }\n\n  /**\n   * Crée une nouvelle identité utilisateur\n   */\n  private static async createUserIdentity(userId: string): Promise<UserIdentity> {\n    const now = Date.now();\n    const identity: UserIdentity = {\n      id: userId,\n      createdAt: now,\n      lastActive: now,\n      invitationCode: this.generateInvitationCode(),\n      generation: 1\n    };\n\n    try {\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      logger.info('User identity created:', { \n        id: identity.id.substring(0, 8) + '...',\n        invitationCode: identity.invitationCode\n      });\n    } catch (error) {\n      logger.error('Failed to save user identity:', error);\n    }\n\n    return identity;\n  }\n\n  /**\n   * Met à jour la dernière activité de l'utilisateur\n   */\n  static async updateLastActive(userId: string): Promise<void> {\n    try {\n      const identity = await this.getUserIdentity();\n      if (identity.id === userId) {\n        identity.lastActive = Date.now();\n        localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      }\n    } catch (error) {\n      logger.error('Failed to update last active:', error);\n    }\n  }\n\n  /**\n   * Génère un code d'invitation unique et mémorable\n   */\n  private static generateInvitationCode(): string {\n    // Génère un code de 6 caractères alphanumériques\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    \n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * chars.length);\n      code += chars[randomIndex];\n    }\n    \n    return code;\n  }\n\n  /**\n   * Régénère le code d'invitation\n   */\n  static async regenerateInvitationCode(): Promise<string> {\n    try {\n      const identity = await this.getUserIdentity();\n      identity.invitationCode = this.generateInvitationCode();\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      \n      logger.info('Invitation code regenerated:', { \n        userId: identity.id.substring(0, 8) + '...',\n        newCode: identity.invitationCode \n      });\n      \n      return identity.invitationCode;\n    } catch (error) {\n      logger.error('Failed to regenerate invitation code:', error);\n      return this.generateInvitationCode();\n    }\n  }\n\n  /**\n   * Incrémente la génération de l'utilisateur\n   */\n  static async incrementGeneration(): Promise<number> {\n    try {\n      const identity = await this.getUserIdentity();\n      identity.generation += 1;\n      localStorage.setItem(this.USER_IDENTITY_KEY, JSON.stringify(identity));\n      \n      logger.info('User generation incremented:', { \n        userId: identity.id.substring(0, 8) + '...',\n        generation: identity.generation \n      });\n      \n      return identity.generation;\n    } catch (error) {\n      logger.error('Failed to increment generation:', error);\n      return 1;\n    }\n  }\n\n  /**\n   * Obtient les statistiques de l'utilisateur\n   */\n  static async getUserStats(): Promise<{\n    daysSinceCreation: number;\n    daysActive: number;\n    generation: number;\n    invitationCode: string;\n  }> {\n    try {\n      const identity = await this.getUserIdentity();\n      const now = Date.now();\n      const daysSinceCreation = Math.floor((now - identity.createdAt) / (24 * 60 * 60 * 1000));\n      const daysActive = Math.floor((now - identity.lastActive) / (24 * 60 * 60 * 1000));\n      \n      return {\n        daysSinceCreation,\n        daysActive,\n        generation: identity.generation,\n        invitationCode: identity.invitationCode\n      };\n    } catch (error) {\n      logger.error('Failed to get user stats:', error);\n      return {\n        daysSinceCreation: 0,\n        daysActive: 0,\n        generation: 1,\n        invitationCode: 'ERROR'\n      };\n    }\n  }\n\n  /**\n   * Valide un code d'invitation\n   */\n  static validateInvitationCode(code: string): boolean {\n    // Valide le format : 6 caractères alphanumériques\n    const regex = /^[A-Z0-9]{6}$/;\n    return regex.test(code);\n  }\n\n  /**\n   * Réinitialise l'identité utilisateur (pour debug/reset)\n   */\n  static async resetUserIdentity(): Promise<UserIdentity> {\n    try {\n      localStorage.removeItem(this.USER_ID_KEY);\n      localStorage.removeItem(this.USER_IDENTITY_KEY);\n      \n      const newIdentity = await this.getUserIdentity();\n      \n      logger.info('User identity reset:', { \n        newId: newIdentity.id.substring(0, 8) + '...',\n        newCode: newIdentity.invitationCode \n      });\n      \n      return newIdentity;\n    } catch (error) {\n      logger.error('Failed to reset user identity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exporte l'identité pour sauvegarde/migration\n   */\n  static async exportIdentity(): Promise<string> {\n    try {\n      const identity = await this.getUserIdentity();\n      return JSON.stringify(identity);\n    } catch (error) {\n      logger.error('Failed to export identity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Importe une identité depuis une sauvegarde\n   */\n  static async importIdentity(identityData: string): Promise<void> {\n    try {\n      const identity: UserIdentity = JSON.parse(identityData);\n      \n      // Valider la structure\n      if (!identity.id || !identity.invitationCode || !identity.createdAt) {\n        throw new Error('Invalid identity data structure');\n      }\n      \n      localStorage.setItem(this.USER_ID_KEY, identity.id);\n      localStorage.setItem(this.USER_IDENTITY_KEY, identityData);\n      \n      logger.info('User identity imported:', { \n        id: identity.id.substring(0, 8) + '...',\n        generation: identity.generation \n      });\n    } catch (error) {\n      logger.error('Failed to import identity:', error);\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}