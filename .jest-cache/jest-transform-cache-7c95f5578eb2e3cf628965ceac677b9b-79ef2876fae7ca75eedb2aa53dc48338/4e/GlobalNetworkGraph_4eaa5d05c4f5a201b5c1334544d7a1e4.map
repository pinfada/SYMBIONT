{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/popup/components/GlobalNetworkGraph.tsx","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/popup/components/GlobalNetworkGraph.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\ninterface NetworkNode {\r\n  id: string;\r\n  generation: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface NetworkLink {\r\n  source: string;\r\n  target: string;\r\n}\r\n\r\ninterface GlobalNetworkGraphProps {\r\n  nodes?: NetworkNode[];\r\n  links?: NetworkLink[];\r\n  onNodeCountChange?: (count: number) => void;\r\n}\r\n\r\n// Génère un réseau mocké simple\r\nfunction generateMockNetwork(): { nodes: NetworkNode[]; links: NetworkLink[] } {\r\n  const nodes: NetworkNode[] = [];\r\n  const links: NetworkLink[] = [];\r\n  const centerX = 200, centerY = 150, radius1 = 60, radius2 = 100;\r\n  \r\n  // Racine\r\n  nodes.push({ id: 'ROOT', generation: 0, x: centerX, y: centerY });\r\n  \r\n  // 3 enfants\r\n  for (let i = 0; i < 3; i++) {\r\n    const angle = (i / 3) * 2 * Math.PI;\r\n    const x = centerX + radius1 * Math.cos(angle);\r\n    const y = centerY + radius1 * Math.sin(angle);\r\n    const id = `A${i}`;\r\n    nodes.push({ id, generation: 1, x, y });\r\n    links.push({ source: 'ROOT', target: id });\r\n    \r\n    // 2 petits-enfants par enfant\r\n    for (let j = 0; j < 2; j++) {\r\n      const subAngle = angle + (j === 0 ? -0.3 : 0.3);\r\n      const x2 = centerX + radius2 * Math.cos(subAngle);\r\n      const y2 = centerY + radius2 * Math.sin(subAngle);\r\n      const subId = `B${i}${j}`;\r\n      nodes.push({ id: subId, generation: 2, x: x2, y: y2 });\r\n      links.push({ source: id, target: subId });\r\n    }\r\n  }\r\n  \r\n  return { nodes, links };\r\n}\r\n\r\nexport const GlobalNetworkGraph: React.FC<GlobalNetworkGraphProps> = (props) => {\r\n  // États principaux regroupés\r\n  const [networkState, setNetworkState] = useState({\r\n    network: null as { nodes: NetworkNode[]; links: NetworkLink[] } | null,\r\n    loading: true,\r\n    error: null as string | null\r\n  });\r\n\r\n  const [viewState, setViewState] = useState({\r\n    zoom: 1,\r\n    offset: { x: 0, y: 0 },\r\n    hoveredNode: null as NetworkNode | null,\r\n    selectedNode: null as NetworkNode | null\r\n  });\r\n\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n\r\n  // Chargement du réseau\r\n  useEffect(() => {\r\n    setNetworkState(prev => ({ ...prev, loading: true, error: null }));\r\n    \r\n    // Simulation chargement puis utilisation mock\r\n    setTimeout(() => {\r\n      try {\r\n        const mockNetwork = generateMockNetwork();\r\n        setNetworkState({\r\n          network: mockNetwork,\r\n          loading: false,\r\n          error: null\r\n        });\r\n        \r\n        if (props.onNodeCountChange) {\r\n          props.onNodeCountChange(mockNetwork.nodes.length);\r\n        }\r\n      } catch {\r\n        setNetworkState(prev => ({\r\n          ...prev,\r\n          loading: false,\r\n          error: 'Erreur lors du chargement du réseau'\r\n        }));\r\n      }\r\n    }, 1000);\r\n  }, [props.onNodeCountChange]);\r\n\r\n  // Gestion du zoom\r\n  const handleWheel = (e: React.WheelEvent) => {\r\n    e.preventDefault();\r\n    setViewState(prev => ({\r\n      ...prev,\r\n      zoom: Math.max(0.5, Math.min(3, prev.zoom - e.deltaY * 0.001))\r\n    }));\r\n  };\r\n\r\n  // Gestion du survol des nœuds\r\n  const handleNodeMouseOver = (node: NetworkNode) => {\r\n    setViewState(prev => ({ ...prev, hoveredNode: node }));\r\n  };\r\n\r\n  const handleNodeMouseOut = () => {\r\n    setViewState(prev => ({ ...prev, hoveredNode: null }));\r\n  };\r\n\r\n  const handleNodeClick = (node: NetworkNode) => {\r\n    setViewState(prev => ({ \r\n      ...prev, \r\n      selectedNode: prev.selectedNode?.id === node.id ? null : node \r\n    }));\r\n  };\r\n\r\n  if (networkState.loading) {\r\n    return (\r\n      <div className=\"network-loading\">\r\n        <div className=\"loading-spinner loading-spinner--medium\"></div>\r\n        <p>Chargement du réseau...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (networkState.error || !networkState.network) {\r\n    return (\r\n      <div className=\"network-error\">\r\n        <h3>Réseau Indisponible</h3>\r\n        <p>{networkState.error || 'Impossible de charger le réseau'}</p>\r\n        <button \r\n          onClick={() => window.location.reload()}\r\n          className=\"btn-retry\"\r\n        >\r\n          Réessayer\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { network } = networkState;\r\n  const { zoom, offset, hoveredNode, selectedNode } = viewState;\r\n\r\n  return (\r\n    <div className=\"network-container\">\r\n      <div className=\"network-header\">\r\n        <h3>Réseau Global SYMBIONT</h3>\r\n        <div className=\"network-stats\">\r\n          <span className=\"stat-badge\">\r\n            {network.nodes.length} organismes\r\n          </span>\r\n          <span className=\"stat-badge\">\r\n            {network.links.length} connexions\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"network-graph-wrapper\">\r\n        <svg\r\n          ref={svgRef}\r\n          className=\"network-svg\"\r\n          width=\"100%\"\r\n          height=\"300\"\r\n          onWheel={handleWheel}\r\n        >\r\n          <g transform={`translate(${offset.x}, ${offset.y}) scale(${zoom})`}>\r\n            {/* Liens */}\r\n            <g className=\"links\">\r\n              {network.links.map((link, i) => {\r\n                const source = network.nodes.find(n => n.id === link.source);\r\n                const target = network.nodes.find(n => n.id === link.target);\r\n                if (!source || !target) return null;\r\n                \r\n                return (\r\n                  <line\r\n                    key={i}\r\n                    x1={source.x}\r\n                    y1={source.y}\r\n                    x2={target.x}\r\n                    y2={target.y}\r\n                    stroke=\"rgba(0, 224, 255, 0.4)\"\r\n                    strokeWidth=\"2\"\r\n                    className=\"network-link\"\r\n                  />\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Nœuds */}\r\n            <g className=\"nodes\">\r\n              {network.nodes.map((node) => (\r\n                <g key={node.id}>\r\n                  <circle\r\n                    cx={node.x}\r\n                    cy={node.y}\r\n                    r={node.generation === 0 ? 12 : 8}\r\n                    fill={node.generation === 0 ? '#ff4b6e' : '#00e0ff'}\r\n                    stroke={selectedNode?.id === node.id ? '#ffb700' : 'rgba(255,255,255,0.3)'}\r\n                    strokeWidth={selectedNode?.id === node.id ? 3 : 1}\r\n                    className=\"network-node\"\r\n                    onMouseEnter={() => handleNodeMouseOver(node)}\r\n                    onMouseLeave={handleNodeMouseOut}\r\n                    onClick={() => handleNodeClick(node)}\r\n                    style={{ cursor: 'pointer' }}\r\n                  />\r\n                  \r\n                  {/* Label du nœud */}\r\n                  <text\r\n                    x={node.x}\r\n                    y={node.y + 20}\r\n                    textAnchor=\"middle\"\r\n                    fontSize=\"10\"\r\n                    fill=\"#ffffff\"\r\n                    className=\"node-label\"\r\n                  >\r\n                    {node.id}\r\n                  </text>\r\n                </g>\r\n              ))}\r\n            </g>\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Tooltip */}\r\n        {hoveredNode && (\r\n          <div className=\"network-tooltip\">\r\n            <h4>{hoveredNode.id}</h4>\r\n            <p>Génération: {hoveredNode.generation}</p>\r\n            <p>Position: ({Math.round(hoveredNode.x)}, {Math.round(hoveredNode.y)})</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {selectedNode && (\r\n        <div className=\"node-details\">\r\n          <h4>Détails de {selectedNode.id}</h4>\r\n          <div className=\"detail-grid\">\r\n            <div>\r\n              <span className=\"detail-label\">Génération:</span>\r\n              <span className=\"detail-value\">{selectedNode.generation}</span>\r\n            </div>\r\n            <div>\r\n              <span className=\"detail-label\">Type:</span>\r\n              <span className=\"detail-value\">{selectedNode.generation === 0 ? 'Racine' : 'Descendant'}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"network-controls\">\r\n        <button onClick={() => setViewState(prev => ({ ...prev, zoom: Math.min(3, prev.zoom * 1.2) }))}>\r\n          Zoom +\r\n        </button>\r\n        <button onClick={() => setViewState(prev => ({ ...prev, zoom: Math.max(0.5, prev.zoom / 1.2) }))}>\r\n          Zoom -\r\n        </button>\r\n        <button onClick={() => setViewState(prev => ({ ...prev, zoom: 1, offset: { x: 0, y: 0 } }))}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlobalNetworkGraph; "],"version":3}