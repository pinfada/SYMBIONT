{"version":3,"names":["cov_15xcvd8i8t","actualCoverage","s","secureRandom_1","require","secureLogger_1","SocialResilience","constructor","f","peerId","SecureRandom","random","toString","substr","channel","BroadcastChannel","onmessage","event","handleMessage","data","requestCommunityBackup","organismId","postMessage","type","from","SecureLogger","info","restoreFromCommunity","detectMassiveFailure","launchCommunityAlert","message","msg","b","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts"],"sourcesContent":["// social/social-resilience.ts\r\n// Résilience sociale et backup communautaire (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\nimport { SecureLogger } from '@shared/utils/secureLogger';\n\r\nexport class SocialResilience {\r\n  private channel: BroadcastChannel\r\n  private peerId: string\r\n\r\n  constructor() {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    this.channel = new BroadcastChannel('symbiont_resilience')\r\n    this.channel.onmessage = (event) => this.handleMessage(event.data)\r\n  }\r\n\r\n  requestCommunityBackup(organismId: string) {\r\n    this.channel.postMessage({ type: 'backup_request', from: this.peerId, organismId })\r\n    SecureLogger.info(`[SocialResilience] Demande de backup pour ${organismId}`)\r\n  }\r\n\r\n  restoreFromCommunity(organismId: string) {\r\n    // Écoute les backups reçus et restaure si l'organismId correspond\r\n    // (La logique réelle de restauration serait ici)\r\n    SecureLogger.info(`[SocialResilience] Restauration depuis la communauté pour ${organismId}`)\r\n  }\r\n\r\n  detectMassiveFailure() {\r\n    // Simulation de détection\r\n    SecureLogger.info(`[SocialResilience] Détection de panne massive`)\r\n  }\r\n\r\n  launchCommunityAlert(message: string) {\r\n    this.channel.postMessage({ type: 'alert', from: this.peerId, message })\r\n    SecureLogger.info(`[SocialResilience] Alerte communautaire : ${message}`)\r\n  }\r\n\r\n  private handleMessage(msg: any) {\r\n    if (msg.from === this.peerId) return // Ignore self\r\n    switch (msg.type) {\r\n      case 'backup_request':\r\n        // TODO: Répondre avec un backup si on a l'organismId\r\n        SecureLogger.info(`[SocialResilience] Backup demandé par ${msg.from} pour ${msg.organismId}`)\r\n        break\r\n      case 'alert':\r\n        SecureLogger.info(`[SocialResilience] Alerte reçue : ${msg.message}`)\r\n        break\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}