{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/utils/WebGLBatcher.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/utils/WebGLBatcher.ts"],"sourcesContent":["// Système de batching WebGL pour optimiser les performances de rendu\r\n// Regroupe les appels de rendu pour réduire la charge GPU\r\n\r\nimport { errorHandler } from './ErrorHandler';\r\n\r\nexport interface WebGLDrawCall {\r\n  id: string;\r\n  type: 'triangle' | 'line' | 'point';\r\n  vertices: Float32Array;\r\n  indices?: Uint16Array;\r\n  uniforms: Record<string, number | Float32Array>;\r\n  priority: 'low' | 'normal' | 'high';\r\n  timestamp: number;\r\n}\r\n\r\nexport interface BatchedDrawCall {\r\n  vertices: Float32Array;\r\n  indices: Uint16Array;\r\n  uniforms: Record<string, number | Float32Array>;\r\n  drawCallCount: number;\r\n  type: 'triangle' | 'line' | 'point';\r\n}\r\n\r\nexport interface WebGLBatcherConfig {\r\n  maxBatchSize: number;\r\n  maxVertices: number;\r\n  frameTimeoutMs: number;\r\n  enableInstancing: boolean;\r\n}\r\n\r\nexport class WebGLBatcher {\r\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n  private config: WebGLBatcherConfig;\r\n  private pendingDrawCalls: Map<string, WebGLDrawCall[]> = new Map();\r\n  private frameId: number | null = null;\r\n  \r\n  // Buffers réutilisables\r\n  private vertexBuffer: WebGLBuffer | null = null;\r\n  private indexBuffer: WebGLBuffer | null = null;\r\n  private vertexArray: WebGLVertexArrayObject | null = null;\r\n  \r\n  // Statistiques\r\n  private stats = {\r\n    totalDrawCalls: 0,\r\n    totalBatches: 0,\r\n    verticesProcessed: 0,\r\n    lastFrameTime: 0,\r\n    averageFrameTime: 0\r\n  };\r\n\r\n  constructor(\r\n    gl: WebGLRenderingContext | WebGL2RenderingContext,\r\n    config: Partial<WebGLBatcherConfig> = {}\r\n  ) {\r\n    this.gl = gl;\r\n    this.config = {\r\n      maxBatchSize: 100,\r\n      maxVertices: 65536, // Max vertices per batch\r\n      frameTimeoutMs: 16.67, // ~60 FPS\r\n      enableInstancing: true,\r\n      ...config\r\n    };\r\n    \r\n    this.initializeBuffers();\r\n  }\r\n\r\n  /**\r\n   * Initialise les buffers WebGL réutilisables\r\n   */\r\n  private initializeBuffers(): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Vertex buffer\r\n        this.vertexBuffer = this.gl.createBuffer();\r\n        if (!this.vertexBuffer) {\r\n          throw new Error('Failed to create vertex buffer');\r\n        }\r\n\r\n        // Index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n        if (!this.indexBuffer) {\r\n          throw new Error('Failed to create index buffer');\r\n        }\r\n\r\n        // Vertex Array Object (WebGL 2 only)\r\n        if ('createVertexArray' in this.gl) {\r\n          this.vertexArray = (this.gl as WebGL2RenderingContext).createVertexArray();\r\n        }\r\n      },\r\n      undefined,\r\n      { component: 'WebGLBatcher', method: 'initializeBuffers' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Ajoute un appel de rendu au batch\r\n   */\r\n  public addDrawCall(drawCall: Omit<WebGLDrawCall, 'id' | 'timestamp'>): string {\r\n    const id = `draw_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const fullDrawCall: WebGLDrawCall = {\r\n      ...drawCall,\r\n      id,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    // Groupe par type de primitive\r\n    const typeKey = drawCall.type;\r\n    if (!this.pendingDrawCalls.has(typeKey)) {\r\n      this.pendingDrawCalls.set(typeKey, []);\r\n    }\r\n    \r\n    this.pendingDrawCalls.get(typeKey)!.push(fullDrawCall);\r\n    this.stats.totalDrawCalls++;\r\n\r\n    // Schedule frame rendering\r\n    this.scheduleFrameRender();\r\n\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Planifie le rendu du frame\r\n   */\r\n  private scheduleFrameRender(): void {\r\n    if (this.frameId !== null) {\r\n      return; // Already scheduled\r\n    }\r\n\r\n    // Check if we should render immediately\r\n    const shouldRenderImmediately = this.shouldRenderImmediately();\r\n    \r\n    if (shouldRenderImmediately) {\r\n      this.renderFrame();\r\n      return;\r\n    }\r\n\r\n    // Schedule for next animation frame\r\n    this.frameId = requestAnimationFrame(() => {\r\n      this.renderFrame();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Détermine si on doit rendre immédiatement\r\n   */\r\n  private shouldRenderImmediately(): boolean {\r\n    let totalVertices = 0;\r\n    let totalDrawCalls = 0;\r\n    let hasHighPriority = false;\r\n\r\n    for (const drawCalls of this.pendingDrawCalls.values()) {\r\n      if (!drawCalls || drawCalls.length === 0) continue; // Protection null\r\n      \r\n      totalDrawCalls += drawCalls.length;\r\n      for (const call of drawCalls) {\r\n        if (call && call.vertices) { // Protection null\r\n          totalVertices += call.vertices.length / 3; // Assuming 3 components per vertex\r\n        }\r\n        if (call && call.priority === 'high') {\r\n          hasHighPriority = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rendre immédiatement si on dépasse les seuils ou si haute priorité\r\n    const shouldRender = totalVertices >= this.config.maxVertices ||\r\n           totalDrawCalls >= this.config.maxBatchSize ||\r\n           hasHighPriority;\r\n\r\n    return shouldRender;\r\n  }\r\n\r\n  /**\r\n   * Rend le frame courant\r\n   */\r\n  private renderFrame(): void {\r\n    const startTime = performance.now();\r\n    \r\n    errorHandler.safeExecute(\r\n      () => {\r\n        this.frameId = null;\r\n\r\n        // Process each primitive type\r\n        for (const [type, drawCalls] of this.pendingDrawCalls) {\r\n          if (!drawCalls || drawCalls.length === 0) continue;\r\n\r\n          const batchedCall = this.batchDrawCalls(drawCalls as WebGLDrawCall[], type as any);\r\n          if (batchedCall.drawCallCount > 0) {\r\n            this.executeDrawCall(batchedCall);\r\n            this.stats.totalBatches++;\r\n            this.stats.verticesProcessed += batchedCall.vertices.length / 3;\r\n          }\r\n        }\r\n\r\n        // Clear pending draw calls\r\n        this.pendingDrawCalls.clear();\r\n\r\n        // Update frame timing stats\r\n        const frameTime = performance.now() - startTime;\r\n        this.updateFrameStats(frameTime);\r\n      },\r\n      undefined,\r\n      { component: 'WebGLBatcher', method: 'renderFrame' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Groupe plusieurs draw calls en un seul\r\n   */\r\n  private batchDrawCalls(\r\n    drawCalls: WebGLDrawCall[], \r\n    type: 'triangle' | 'line' | 'point'\r\n  ): BatchedDrawCall {\r\n    // Filter out null/invalid draw calls\r\n    const validDrawCalls = drawCalls.filter(call => \r\n      call && call.vertices && call.vertices.length > 0\r\n    );\r\n    \r\n    if (validDrawCalls.length === 0) {\r\n      return {\r\n        vertices: new Float32Array(0),\r\n        indices: new Uint16Array(0),\r\n        uniforms: {},\r\n        drawCallCount: 0,\r\n        type\r\n      };\r\n    }\r\n    \r\n    // Calculate total size needed\r\n    let totalVertices = 0;\r\n    let totalIndices = 0;\r\n    \r\n    validDrawCalls.forEach(call => {\r\n      totalVertices += call.vertices.length;\r\n      totalIndices += call.indices?.length || 0;\r\n    });\r\n\r\n    // Create combined arrays\r\n    const vertices = new Float32Array(totalVertices);\r\n    const indices = new Uint16Array(totalIndices);\r\n    const uniforms: Record<string, number | Float32Array> = {};\r\n\r\n    let vertexOffset = 0;\r\n    let indexOffset = 0;\r\n    let vertexIndexOffset = 0;\r\n\r\n    // Combine draw calls\r\n    validDrawCalls.forEach(call => {\r\n      // Copy vertices\r\n      vertices.set(call.vertices, vertexOffset);\r\n      \r\n      // Copy and adjust indices\r\n      if (call.indices) {\r\n        for (let i = 0; i < call.indices.length; i++) {\r\n          indices[indexOffset + i] = call.indices[i] + vertexIndexOffset;\r\n        }\r\n        indexOffset += call.indices.length;\r\n      }\r\n\r\n      // Merge uniforms (take average for conflicts)\r\n      Object.entries(call.uniforms).forEach(([key, value]) => {\r\n        if (uniforms[key] === undefined) {\r\n          uniforms[key] = value;\r\n        } else if (typeof value === 'number' && typeof uniforms[key] === 'number') {\r\n          uniforms[key] = ((uniforms[key] as number) + value) / 2;\r\n        }\r\n      });\r\n\r\n      vertexOffset += call.vertices.length;\r\n      vertexIndexOffset += call.vertices.length / 3; // Assuming 3 components per vertex\r\n    });\r\n\r\n    return {\r\n      vertices,\r\n      indices: totalIndices > 0 ? indices : new Uint16Array(0),\r\n      uniforms,\r\n      drawCallCount: validDrawCalls.length,\r\n      type\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Exécute un draw call batchéed\r\n   */\r\n  private executeDrawCall(batchedCall: BatchedDrawCall): void {\r\n    errorHandler.safeExecute(\r\n      () => {\r\n        const gl = this.gl;\r\n\r\n        // Bind vertex buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, batchedCall.vertices, gl.DYNAMIC_DRAW);\r\n\r\n        // Setup vertex attributes (assuming position + normal + uv)\r\n        const stride = 8 * Float32Array.BYTES_PER_ELEMENT; // 3 pos + 3 normal + 2 uv\r\n        \r\n        // Position attribute (location 0)\r\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n        gl.enableVertexAttribArray(0);\r\n        \r\n        // Normal attribute (location 1)\r\n        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * Float32Array.BYTES_PER_ELEMENT);\r\n        gl.enableVertexAttribArray(1);\r\n        \r\n        // UV attribute (location 2)\r\n        gl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * Float32Array.BYTES_PER_ELEMENT);\r\n        gl.enableVertexAttribArray(2);\r\n\r\n        // Draw based on type\r\n        if (batchedCall.indices.length > 0) {\r\n          // Indexed drawing\r\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, batchedCall.indices, gl.DYNAMIC_DRAW);\r\n          \r\n          const mode = this.getGLPrimitive(batchedCall.type);\r\n          gl.drawElements(mode, batchedCall.indices.length, gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n          // Array drawing\r\n          const mode = this.getGLPrimitive(batchedCall.type);\r\n          const vertexCount = batchedCall.vertices.length / 8; // 8 components per vertex\r\n          gl.drawArrays(mode, 0, vertexCount);\r\n        }\r\n      },\r\n      undefined,\r\n      { component: 'WebGLBatcher', method: 'executeDrawCall' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convertit le type de primitive en constante WebGL\r\n   */\r\n  private getGLPrimitive(type: 'triangle' | 'line' | 'point'): number {\r\n    switch (type) {\r\n      case 'triangle': return this.gl.TRIANGLES;\r\n      case 'line': return this.gl.LINES;\r\n      case 'point': return this.gl.POINTS;\r\n      default: return this.gl.TRIANGLES;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour les statistiques de frame\r\n   */\r\n  private updateFrameStats(frameTime: number): void {\r\n    this.stats.lastFrameTime = frameTime;\r\n    \r\n    // Moving average\r\n    const alpha = 0.1;\r\n    this.stats.averageFrameTime = this.stats.averageFrameTime * (1 - alpha) + frameTime * alpha;\r\n  }\r\n\r\n  /**\r\n   * Force le rendu immédiat de tous les draw calls en attente\r\n   */\r\n  public flush(): void {\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId);\r\n      this.frameId = null;\r\n    }\r\n    this.renderFrame();\r\n  }\r\n\r\n  /**\r\n   * Récupère les statistiques de performance\r\n   */\r\n  public getStats(): {\r\n    totalDrawCalls: number;\r\n    totalBatches: number;\r\n    verticesProcessed: number;\r\n    lastFrameTime: number;\r\n    averageFrameTime: number;\r\n    compressionRatio: number;\r\n    pendingDrawCalls: number;\r\n  } {\r\n    let pendingDrawCalls = 0;\r\n    for (const calls of this.pendingDrawCalls.values()) {\r\n      pendingDrawCalls += calls.length;\r\n    }\r\n\r\n    return {\r\n      ...this.stats,\r\n      compressionRatio: this.stats.totalBatches > 0 ? this.stats.totalDrawCalls / this.stats.totalBatches : 1,\r\n      pendingDrawCalls\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Nettoie les ressources WebGL\r\n   */\r\n  public dispose(): void {\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId);\r\n      this.frameId = null;\r\n    }\r\n\r\n    const gl = this.gl;\r\n    \r\n    if (this.vertexBuffer) {\r\n      gl.deleteBuffer(this.vertexBuffer);\r\n      this.vertexBuffer = null;\r\n    }\r\n    \r\n    if (this.indexBuffer) {\r\n      gl.deleteBuffer(this.indexBuffer);\r\n      this.indexBuffer = null;\r\n    }\r\n    \r\n    if (this.vertexArray && 'deleteVertexArray' in gl) {\r\n      (gl as WebGL2RenderingContext).deleteVertexArray(this.vertexArray);\r\n      this.vertexArray = null;\r\n    }\r\n\r\n    this.pendingDrawCalls.clear();\r\n  }\r\n} "],"version":3}