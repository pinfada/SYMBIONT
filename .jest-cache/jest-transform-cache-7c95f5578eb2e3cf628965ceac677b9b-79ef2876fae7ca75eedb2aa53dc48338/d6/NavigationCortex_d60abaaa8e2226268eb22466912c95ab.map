{"version":3,"names":["cov_hhsq96tcr","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","NavigationCortex","constructor","events","detectors","lastPatterns","recordEvent","event","push","addDetector","detector","getPatterns","patterns","concat","reset","toJSON","length","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NavigationCortex.ts"],"sourcesContent":["/**\r\n * NavigationCortex - Analyseur de navigation et de patterns temporels\r\n * - Enregistre les événements de navigation (URL, timestamp, action)\r\n * - Détecte patterns de routine, exploration, répétition\r\n * - Supporte l'ajout de détecteurs personnalisés\r\n */\r\n\r\nexport interface NavigationEvent {\r\n  url: string;\r\n  timestamp: number;\r\n  action: 'visit' | 'click' | 'scroll' | 'input' | 'custom';\r\n}\r\n\r\nexport interface Pattern {\r\n  type: string;\r\n  score: number;\r\n  details?: unknown;\r\n}\r\n\r\nexport type PatternDetector = (events: NavigationEvent[]) => Pattern[];\r\n\r\nexport class NavigationCortex {\r\n  private events: NavigationEvent[] = [];\r\n  private detectors: PatternDetector[] = [];\r\n  private lastPatterns: Pattern[] = [];\r\n\r\n  /**\r\n   * Enregistre un événement de navigation\r\n   */\r\n  public recordEvent(event: NavigationEvent): void {\r\n    this.events.push(event);\r\n  }\r\n\r\n  /**\r\n   * Ajoute un détecteur de pattern personnalisé\r\n   */\r\n  public addDetector(detector: PatternDetector): void {\r\n    this.detectors.push(detector);\r\n  }\r\n\r\n  /**\r\n   * Analyse les événements et retourne les patterns détectés\r\n   */\r\n  public getPatterns(): Pattern[] {\r\n    let patterns: Pattern[] = [];\r\n    for (const detector of this.detectors) {\r\n      patterns = patterns.concat(detector(this.events));\r\n    }\r\n    this.lastPatterns = patterns;\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Réinitialise l'historique de navigation\r\n   */\r\n  public reset(): void {\r\n    this.events = [];\r\n    this.lastPatterns = [];\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return {\r\n      events: this.events,\r\n      lastPatterns: this.lastPatterns,\r\n      detectors: this.detectors.length\r\n    };\r\n  }\r\n} "],"mappings":"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","ignoreList":[]}