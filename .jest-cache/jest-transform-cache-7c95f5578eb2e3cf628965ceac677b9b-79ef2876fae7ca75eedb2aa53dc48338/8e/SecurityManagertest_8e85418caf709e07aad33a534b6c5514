f68d3290783e810100011bcbaf400850
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SecurityManager_1 = require("../src/background/SecurityManager");
describe('SecurityManager', () => {
    let security;
    beforeEach(() => {
        jest.clearAllMocks();
        security = new SecurityManager_1.SecurityManager();
        // Ensure fresh mocks for each test
        global.crypto.subtle.generateKey.mockClear();
        global.crypto.subtle.encrypt.mockClear();
        global.crypto.subtle.decrypt.mockClear();
        global.crypto.subtle.digest.mockClear();
    });
    describe('Chiffrement/Déchiffrement', () => {
        it('chiffre et déchiffre correctement les données', async () => {
            const testData = { foo: 'bar', n: 42 };
            // Mock encrypt pour retourner données encodées
            const mockResult = JSON.stringify(testData);
            const mockEncoded = new TextEncoder().encode(mockResult);
            global.crypto.subtle.decrypt.mockResolvedValue(mockEncoded.buffer);
            // Test encryption
            const encrypted = await security.encryptSensitiveData(testData);
            expect(typeof encrypted).toBe('string');
            expect(global.crypto.subtle.encrypt).toHaveBeenCalled();
            // Test decryption  
            const decrypted = await security.decryptSensitiveData(encrypted);
            expect(decrypted).toEqual(testData);
            expect(global.crypto.subtle.decrypt).toHaveBeenCalled();
        });
        it('gère les erreurs de chiffrement gracieusement', async () => {
            global.crypto.subtle.encrypt.mockRejectedValue(new Error('Crypto failure'));
            await expect(security.encryptSensitiveData({})).rejects.toThrow('Échec du chiffrement des données sensibles');
        });
        it('gère les erreurs de déchiffrement gracieusement', async () => {
            global.crypto.subtle.decrypt.mockRejectedValue(new Error('Decrypt failure'));
            await expect(security.decryptSensitiveData('invalid')).rejects.toThrow('Échec du déchiffrement des données');
        });
    });
    describe('Anonymisation', () => {
        it('anonymise les données comportementales (async)', async () => {
            const pattern = {
                url: 'https://secret.com',
                interactions: 5,
                timeSpent: 10,
                scrollDepth: 0.8,
                timestamp: Date.now()
            };
            const anonymized = await security.anonymizeForSharing(pattern);
            expect(anonymized.url).toBe('anonymized');
            expect(anonymized.interactions).toBe(pattern.interactions);
            expect(anonymized.timeSpent).toBe(pattern.timeSpent);
            expect(anonymized.scrollDepth).toBe(pattern.scrollDepth);
        });
        it('anonymise les données comportementales (sync)', () => {
            const pattern = {
                url: 'https://secret.com',
                userId: 'user123',
                interactions: 5,
                timeSpent: 10,
                scrollDepth: 0.8,
                timestamp: Date.now()
            };
            const anonymized = security.anonymizeForSharingSync(pattern);
            expect(anonymized.url).toBe('anonymized');
            expect(anonymized.userId).not.toBe('user123'); // Hashé
            expect(typeof anonymized.userId).toBe('string');
        });
        it('supprime les champs sensibles', async () => {
            const pattern = {
                url: 'https://secret.com',
                email: 'test@example.com',
                name: 'John Doe',
                phone: '123456789',
                interactions: 5
            };
            const anonymized = await security.anonymizeForSharing(pattern);
            expect(anonymized.email).toBeUndefined();
            expect(anonymized.name).toBeUndefined();
            expect(anonymized.phone).toBeUndefined();
            expect(anonymized.interactions).toBe(5);
        });
    });
    describe('Contrôle d\'accès', () => {
        it('valide l\'accès utilisateur basique', () => {
            const request = { userId: 'user123', resource: 'organisms' };
            expect(security.validateDataAccess(request)).toBe(true);
        });
        it('rejette l\'accès admin sans rôle admin', () => {
            const request = { userId: 'user123', resource: 'admin', role: 'user' };
            expect(security.validateDataAccess(request, 'admin')).toBe(false);
        });
        it('accepte l\'accès admin avec rôle admin', () => {
            const request = { userId: 'admin123', resource: 'admin', role: 'admin' };
            expect(security.validateDataAccess(request, 'admin')).toBe(true);
        });
        it('rejette les requêtes invalides', () => {
            expect(security.validateDataAccess({ userId: '', resource: 'test' })).toBe(false);
            expect(security.validateDataAccess({ userId: 'user', resource: '' })).toBe(false);
        });
    });
    describe('Hashage', () => {
        it('hash des chaînes avec SHA-256', async () => {
            const testString = 'test-string';
            const hash = await security.hash(testString);
            expect(typeof hash).toBe('string');
            expect(hash.length).toBeGreaterThan(0);
            expect(global.crypto.subtle.digest).toHaveBeenCalledWith('SHA-256', expect.any(Uint8Array));
        });
        it('produit des hashs cohérents', async () => {
            const testString = 'consistent-test';
            const hash1 = await security.hash(testString);
            const hash2 = await security.hash(testString);
            expect(hash1).toBe(hash2);
        });
        it('hash sync fonctionne comme fallback', () => {
            const testString = 'sync-test';
            const hash = security.hashSync(testString);
            expect(typeof hash).toBe('string');
            expect(hash.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,