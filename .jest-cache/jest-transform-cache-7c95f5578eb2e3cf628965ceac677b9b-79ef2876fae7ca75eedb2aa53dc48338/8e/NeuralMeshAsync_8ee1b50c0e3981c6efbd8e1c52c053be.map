{"version":3,"names":["cov_1ws59xrqcx","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","ErrorHandler_1","require","secureRandom_1","secureLogger_1","NeuralMeshAsync","constructor","config","nodes","Map","connections","activations","learningRate","worker","workerReady","pendingOperations","lastPropagationTime","averageProcessingTime","operationCount","useWorker","fallbackToMainThread","maxRetries","timeoutMs","networkId","Date","now","SecureRandom","random","toString","substr","initializeWorker","chrome","runtime","workerUrl","getURL","Worker","onmessage","handleWorkerMessage","bind","onerror","handleWorkerError","error","errorHandler","logSimpleError","event","id","payload","processingTime","data","operation","get","clearTimeout","timeout","delete","updatePerformanceMetrics","resolve","reject","Error","message","forEach","clear","sendWorkerMessage","Promise","setTimeout","set","postMessage","weight","addNode","bias","node","activation","addConnection","fromId","toId","has","connection","from","to","active","push","stimulate","nodeId","value","propagate","startTime","performance","safeExecute","Object","fromEntries","catch","propagateSync","component","method","fromActivation","currentActivation","newActivation","sigmoid","x","Math","exp","getActivation","mutate","rate","syncNetworkFromWorker","mutateSync","values","max","min","getNeuralActivity","totalActivity","nodeCount","abs","getNeuralActivityAsync","result","activity","getConnectionStrength","totalWeight","connectionCount","toJSON","Array","flat","initialize","size","setupDefaultNetwork","suspend","terminate","logger","info","getCPUUsage","baseLoad","getMemoryUsage","localMemory","length","workerMemory","_error","totalMemory","getPerformanceMetrics","saveState","entries","map","key","loadState","state","reset","healthCheck","issues","connectedNodes","Set","add","orphanedNodes","keys","filter","join","healthy","cleanup","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMeshAsync.ts"],"sourcesContent":["// Version asynchrone de NeuralMesh utilisant Web Workers\r\n// Décharge les calculs intensifs vers un thread séparé\r\n\r\nimport { INeuralMesh } from './interfaces/INeuralMesh';\r\nimport { WorkerMessage, WorkerResponse } from '../workers/NeuralWorker';\r\nimport { errorHandler } from './utils/ErrorHandler';\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\r\nimport { logger } from '@shared/utils/secureLogger';\r\n\r\ninterface NeuralNode {\r\n  id: string;\r\n  type: 'input' | 'hidden' | 'output';\r\n  activation: number;\r\n  bias: number;\r\n}\r\n\r\ninterface NeuralConnection {\r\n  from: string;\r\n  to: string;\r\n  weight: number;\r\n  active: boolean;\r\n}\r\n\r\ninterface NeuralMeshAsyncConfig {\r\n  useWorker?: boolean;\r\n  fallbackToMainThread?: boolean;\r\n  maxRetries?: number;\r\n  timeoutMs?: number;\r\n}\r\n\r\nexport class NeuralMeshAsync implements INeuralMesh {\r\n  private nodes: Map<string, NeuralNode> = new Map();\r\n  private connections: Map<string, NeuralConnection[]> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux réservé pour usage futur\r\n  private learningRate: number = 0.01;\r\n  \r\n  // Worker management\r\n  private worker: Worker | null = null;\r\n  private networkId: string;\r\n  private workerReady = false;\r\n  private pendingOperations = new Map<string, {\r\n    resolve: (value: unknown) => void;\r\n    reject: (error: Error) => void;\r\n    timeout: NodeJS.Timeout;\r\n  }>();\r\n\r\n  // Performance tracking\r\n  private lastPropagationTime = 0;\r\n  private averageProcessingTime = 0;\r\n  private operationCount = 0;\r\n\r\n  // @ts-expect-error Configuration réservée pour usage futur\r\n  private config: Record<string, unknown>;\r\n\r\n  constructor(config: NeuralMeshAsyncConfig = {}) {\r\n    this.config = {\r\n      useWorker: true,\r\n      fallbackToMainThread: true,\r\n      maxRetries: 3,\r\n      timeoutMs: 5000,\r\n      ...config\r\n    };\r\n    this.networkId = `network_${Date.now()}_${SecureRandom.random().toString(36).substr(2, 9)}`;\r\n    this.initializeWorker();\r\n  }\r\n\r\n  /**\r\n   * Initialise le Web Worker\r\n   */\r\n  private initializeWorker(): void {\r\n    try {\r\n      // For Chrome extension environment, try to use the built worker directly\r\n      if (typeof chrome !== 'undefined' && chrome.runtime) {\r\n        // In Chrome extension context, use the pre-built worker\r\n        const workerUrl = chrome.runtime.getURL('neural-worker.js');\r\n        this.worker = new Worker(workerUrl);\r\n      } else {\r\n        // Fallback for non-extension environments\r\n        this.worker = new Worker('./neural-worker.js');\r\n      }\r\n      \r\n      this.worker.onmessage = this.handleWorkerMessage.bind(this);\r\n      this.worker.onerror = this.handleWorkerError.bind(this);\r\n      \r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralMeshAsync', 'initializeWorker', error, 'warning');\r\n      // Fallback : mode synchrone\r\n      this.worker = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gère les messages du worker\r\n   */\r\n  private handleWorkerMessage(event: MessageEvent<WorkerResponse>): void {\r\n    const { type, id, payload, processingTime } = event.data;\r\n    \r\n    const operation = this.pendingOperations.get(id);\r\n    if (!operation) {\r\n      errorHandler.logSimpleError('NeuralMeshAsync', 'handleWorkerMessage', \r\n        `Unknown operation ID: ${id}`, 'warning');\r\n      return;\r\n    }\r\n\r\n    // Clear timeout et remove operation\r\n    clearTimeout(operation.timeout);\r\n    this.pendingOperations.delete(id);\r\n\r\n    // Update performance metrics\r\n    this.updatePerformanceMetrics(processingTime);\r\n\r\n    if (type === 'NEURAL_RESULT') {\r\n      operation.resolve(payload);\r\n    } else if (type === 'NEURAL_ERROR') {\r\n      operation.reject(new Error((payload as { message: string }).message));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gère les erreurs du worker\r\n   */\r\n  private handleWorkerError(event: ErrorEvent): void {\r\n    errorHandler.logSimpleError('NeuralMeshAsync', 'handleWorkerError', \r\n      `Worker error: ${event.message}`, 'error');\r\n    \r\n    // Reject all pending operations\r\n    this.pendingOperations.forEach(({ reject, timeout }) => {\r\n      clearTimeout(timeout);\r\n      reject(new Error('Worker error occurred'));\r\n    });\r\n    this.pendingOperations.clear();\r\n  }\r\n\r\n  /**\r\n   * Envoie un message au worker avec timeout\r\n   */\r\n  private sendWorkerMessage<T>(\r\n    type: WorkerMessage['type'], \r\n    payload: any, \r\n    timeoutMs: number = 5000\r\n  ): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.worker) {\r\n        reject(new Error('Worker not available, using fallback'));\r\n        return;\r\n      }\r\n\r\n      const id = `${type}_${Date.now()}_${SecureRandom.random().toString(36).substr(2, 9)}`;\r\n      \r\n      const timeout = setTimeout(() => {\r\n        this.pendingOperations.delete(id);\r\n        reject(new Error(`Worker operation timeout: ${type}`));\r\n      }, timeoutMs);\r\n\r\n      this.pendingOperations.set(id, { \r\n        resolve: resolve as (value: unknown) => void, \r\n        reject, \r\n        timeout \r\n      });\r\n\r\n      const message: WorkerMessage = { type, id, payload };\r\n      this.worker.postMessage(message);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Met à jour les métriques de performance\r\n   */\r\n  private updatePerformanceMetrics(processingTime: number): void {\r\n    this.operationCount++;\r\n    this.lastPropagationTime = processingTime;\r\n    \r\n    // Moving average\r\n    const weight = 0.1;\r\n    this.averageProcessingTime = this.averageProcessingTime * (1 - weight) + processingTime * weight;\r\n  }\r\n\r\n  /**\r\n   * Ajoute un nœud au réseau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: NeuralNode = { id, type, activation: 0, bias };\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux nœuds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    const connection: NeuralConnection = { from: fromId, to: toId, weight, active: true };\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, []);\r\n    }\r\n    this.connections.get(fromId)!.push(connection);\r\n  }\r\n\r\n  /**\r\n   * Stimule un nœud d'entrée\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      errorHandler.logSimpleError('NeuralMeshAsync', 'stimulate', \r\n        `Cannot stimulate non-input node: ${nodeId}`, 'warning');\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propagation des signaux dans le réseau\r\n   */\r\n  async propagate(): Promise<void> {\r\n    const startTime = performance.now();\r\n    \r\n    errorHandler.safeExecute(\r\n      () => {\r\n        // Increment operation count\r\n        this.operationCount++;\r\n        \r\n        // Try worker first if available\r\n        if (this.worker && this.workerReady) {\r\n          this.sendWorkerMessage('NEURAL_PROPAGATE', {\r\n            networkId: this.networkId,\r\n            activations: Object.fromEntries(this.activations)\r\n          }).catch(error => {\r\n            errorHandler.logSimpleError('NeuralMeshAsync', 'propagate', error, 'warning');\r\n            // Fallback to sync\r\n            this.propagateSync();\r\n          });\r\n        } else {\r\n          // Fallback to synchronous propagation\r\n          this.propagateSync();\r\n        }\r\n        \r\n        // Update performance metrics\r\n        const processingTime = performance.now() - startTime;\r\n        this.updatePerformanceMetrics(processingTime);\r\n      },\r\n      undefined,\r\n      { component: 'NeuralMeshAsync', method: 'propagate' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Propagation synchrone (fallback)\r\n   */\r\n  private propagateSync(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const connection of connections) {\r\n        if (!connection.active) continue;\r\n        \r\n        const currentActivation = this.activations.get(connection.to) || 0;\r\n        const newActivation = currentActivation + (fromActivation * connection.weight);\r\n        this.activations.set(connection.to, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmoïde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Récupère l'activation d'un nœud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation aléatoire au réseau (version async)\r\n   */\r\n  async mutate(rate: number = 0.05): Promise<void> {\r\n    try {\r\n      if (this.worker && this.workerReady) {\r\n        await this.sendWorkerMessage('NEURAL_MUTATE', {\r\n          networkId: this.networkId,\r\n          rate\r\n        });\r\n        \r\n        // Sync back the mutations to local state\r\n        await this.syncNetworkFromWorker();\r\n      } else {\r\n        this.mutateSync(rate);\r\n      }\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralMeshAsync', 'mutate', error, 'warning');\r\n      this.mutateSync(rate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mutation synchrone (fallback)\r\n   */\r\n  private mutateSync(rate: number): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const connection of connections) {\r\n        if (SecureRandom.random() < rate) {\r\n          connection.weight += (SecureRandom.random() - 0.5) * 0.2;\r\n          connection.weight = Math.max(-2, Math.min(2, connection.weight));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronise l'état du réseau depuis le worker\r\n   */\r\n  private async syncNetworkFromWorker(): Promise<void> {\r\n    // Implementation would sync worker state back to local state\r\n    // For now, we'll skip this complex synchronization\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activité neurale globale - implémentation unifiée\r\n   */\r\n  getNeuralActivity(): number {\r\n    // Synchronous fallback implementation\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Version asynchrone de getNeuralActivity pour calculs avancés\r\n   */\r\n  async getNeuralActivityAsync(): Promise<number> {\r\n    try {\r\n      if (this.worker && this.workerReady) {\r\n        const result = await this.sendWorkerMessage<{\r\n          activity: number;\r\n          connectionStrength: number;\r\n          nodeCount: number;\r\n          connectionCount: number;\r\n        }>('NEURAL_ACTIVITY', { networkId: this.networkId });\r\n        \r\n        return result.activity;\r\n      }\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralMeshAsync', 'getNeuralActivityAsync', error, 'warning');\r\n    }\r\n\r\n    // Fallback synchrone\r\n    return this.getNeuralActivity();\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const connection of connections) {\r\n        if (connection.active) {\r\n          totalWeight += Math.abs(connection.weight);\r\n          connectionCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).flat(),\r\n      activations: Object.fromEntries(this.activations),\r\n      performance: {\r\n        lastPropagationTime: this.lastPropagationTime,\r\n        averageProcessingTime: this.averageProcessingTime,\r\n        operationCount: this.operationCount,\r\n        workerReady: this.workerReady\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le réseau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n\r\n    // Initialize worker network\r\n    if (this.worker) {\r\n      try {\r\n        await this.sendWorkerMessage('NEURAL_INIT', {\r\n          networkId: this.networkId,\r\n          nodes: Array.from(this.nodes.values()),\r\n          connections: Array.from(this.connections.values()).flat()\r\n        });\r\n        this.workerReady = true;\r\n      } catch (error) {\r\n        errorHandler.logSimpleError('NeuralMeshAsync', 'initialize', error, 'warning');\r\n        this.workerReady = false;\r\n      }\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    await this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un réseau par défaut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    \r\n    // Terminate worker if needed\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n      this.workerReady = false;\r\n    }\r\n    \r\n    logger.info('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Calculate based on processing time and operation frequency\r\n    const baseLoad = this.averageProcessingTime / 16.67; // Compare to 60fps frame time\r\n    return Math.min(1, baseLoad);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    const localMemory = (this.nodes.size + Array.from(this.connections.values()).length) * 64;\r\n    \r\n    // Add worker memory if available\r\n    let workerMemory = 0;\r\n    if (this.worker && this.workerReady) {\r\n      try {\r\n        // Would get actual worker stats, simplified for now\r\n        workerMemory = localMemory; // Estimate\r\n      } catch (_error) {\r\n        // Ignore worker memory calculation error\r\n      }\r\n    }\r\n    \r\n    const totalMemory = localMemory + workerMemory;\r\n    return Math.min(1, totalMemory / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  getPerformanceMetrics(): {\r\n    lastPropagationTime: number;\r\n    averageProcessingTime: number;\r\n    operationCount: number;\r\n    workerReady: boolean;\r\n  } {\r\n    return {\r\n      lastPropagationTime: this.lastPropagationTime,\r\n      averageProcessingTime: this.averageProcessingTime,\r\n      operationCount: this.operationCount,\r\n      workerReady: this.workerReady\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save current state for persistence\r\n   */\r\n  saveState(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.entries()),\r\n      connections: Array.from(this.connections.entries()).map(([key, connections]) => [\r\n        key,\r\n        connections\r\n      ]),\r\n      activations: Object.fromEntries(this.activations),\r\n      performance: this.getPerformanceMetrics()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load state from saved data\r\n   */\r\n  loadState(state: any): void {\r\n    if (state.nodes) {\r\n      this.nodes.clear();\r\n      for (const [id, node] of state.nodes) {\r\n        this.nodes.set(id, node as NeuralNode);\r\n      }\r\n    }\r\n    \r\n    if (state.connections) {\r\n      this.connections.clear();\r\n      for (const [fromId, connections] of state.connections) {\r\n        this.connections.set(fromId, connections as NeuralConnection[]);\r\n      }\r\n    }\r\n    \r\n    if (state.activations) {\r\n      this.activations.clear();\r\n      for (const [id, activation] of Object.entries(state.activations)) {\r\n        this.activations.set(id, activation as number);\r\n      }\r\n    }\r\n\r\n    if (state.performance) {\r\n      this.lastPropagationTime = state.performance.lastPropagationTime || 0;\r\n      this.averageProcessingTime = state.performance.averageProcessingTime || 0;\r\n      this.operationCount = state.performance.operationCount || 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset neural mesh to initial state\r\n   */\r\n  reset(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.lastPropagationTime = 0;\r\n    this.averageProcessingTime = 0;\r\n    this.operationCount = 0;\r\n    this.setupDefaultNetwork();\r\n  }\r\n\r\n  /**\r\n   * Health check for neural mesh\r\n   */\r\n  healthCheck(): { healthy: boolean; issues: string[] } {\r\n    const issues: string[] = [];\r\n    \r\n    if (this.nodes.size === 0) {\r\n      issues.push('No nodes in neural mesh');\r\n    }\r\n    \r\n    if (this.connections.size === 0) {\r\n      issues.push('No connections in neural mesh');\r\n    }\r\n\r\n    if (this.pendingOperations.size > 10) {\r\n      issues.push(`Too many pending operations: ${this.pendingOperations.size}`);\r\n    }\r\n\r\n    if (this.worker && !this.workerReady) {\r\n      issues.push('Worker is not ready');\r\n    }\r\n    \r\n    // Check for orphaned nodes\r\n    const connectedNodes = new Set<string>();\r\n    for (const [fromId, connections] of this.connections) {\r\n      connectedNodes.add(fromId);\r\n      for (const connection of connections) {\r\n        connectedNodes.add(connection.to);\r\n      }\r\n    }\r\n    \r\n    const orphanedNodes = Array.from(this.nodes.keys()).filter(\r\n      nodeId => !connectedNodes.has(nodeId)\r\n    );\r\n    \r\n    if (orphanedNodes.length > 0) {\r\n      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);\r\n    }\r\n    \r\n    return {\r\n      healthy: issues.length === 0,\r\n      issues\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  cleanup(): void {\r\n    // Clean up pending operations\r\n    this.pendingOperations.forEach(({ timeout }) => {\r\n      clearTimeout(timeout);\r\n    });\r\n    this.pendingOperations.clear();\r\n\r\n    // Terminate worker\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n\r\n    // Clear all data\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.workerReady = false;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]}