{"version":3,"names":["cov_26ru8yacl8","actualCoverage","s","exports","sanitizeOrganismState","sanitizeMessage","secureLogger_1","require","state","f","b","id","String","generation","Number","health","energy","traits","sanitizeTraits","visualDNA","dna","lastMutation","Date","now","mutations","sanitizeMutations","createdAt","birthTime","socialConnections","sanitizeSocialConnections","memoryFragments","sanitizeMemoryFragments","_error","logger","error","curiosity","focus","rhythm","empathy","creativity","sanitized","key","value","Object","entries","isNaN","Math","max","min","Array","isArray","filter","m","map","type","trigger","magnitude","timestamp","slice","connections","c","strength","fragments","content","message","deepCleanForSerialization","obj","seen","WeakSet","undefined","toISOString","Error","name","stack","WebGLRenderingContext","WebGL2RenderingContext","HTMLElement","HTMLCanvasElement","CanvasRenderingContext2D","WebGLProgram","WebGLBuffer","WebGLTexture","$$typeof","__reactFiber","_owner","constructor","includes","tagName","width","height","className","has","add","item","cleaned","hasOwnProperty"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/serialization.ts"],"sourcesContent":["import { logger } from '@shared/utils/secureLogger';\r\n// Utilitaires de sérialisation pour SYMBIONT\r\n// Gère la sérialisation sécurisée des objets complexes\r\n\r\nexport interface SerializableOrganismState {\r\n  id: string;\r\n  generation: number;\r\n  health: number;\r\n  energy: number;\r\n  traits: Record<string, number>;\r\n  visualDNA: string;\r\n  lastMutation: number;\r\n  mutations: Array<{\r\n    type: string;\r\n    trigger: string;\r\n    magnitude: number;\r\n    timestamp: number;\r\n  }>;\r\n  createdAt: number;\r\n  dna: string;\r\n  birthTime: number;\r\n  socialConnections: Array<{\r\n    id: string;\r\n    type: string;\r\n    strength: number;\r\n  }>;\r\n  memoryFragments: Array<{\r\n    id: string;\r\n    content: string;\r\n    timestamp: number;\r\n  }>;\r\n}\r\n\r\nexport function sanitizeOrganismState(state: any): SerializableOrganismState | null {\r\n  if (!state) return null;\r\n  \r\n  try {\r\n    return {\r\n      id: String(state.id || ''),\r\n      generation: Number(state.generation || 1),\r\n      health: Number(state.health || 100),\r\n      energy: Number(state.energy || 100),\r\n      traits: sanitizeTraits(state.traits),\r\n      visualDNA: String(state.visualDNA || state.dna || ''),\r\n      lastMutation: Number(state.lastMutation || Date.now()),\r\n      mutations: sanitizeMutations(state.mutations),\r\n      createdAt: Number(state.createdAt || Date.now()),\r\n      dna: String(state.dna || state.visualDNA || ''),\r\n      birthTime: Number(state.birthTime || state.createdAt || Date.now()),\r\n      socialConnections: sanitizeSocialConnections(state.socialConnections),\r\n      memoryFragments: sanitizeMemoryFragments(state.memoryFragments)\r\n    };\r\n  } catch (_error) {\r\n    logger.error('Failed to sanitize organism state:', _error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction sanitizeTraits(traits: any): Record<string, number> {\r\n  if (!traits || typeof traits !== 'object') {\r\n    return {\r\n      curiosity: 50,\r\n      focus: 50,\r\n      rhythm: 50,\r\n      empathy: 50,\r\n      creativity: 50\r\n    };\r\n  }\r\n  \r\n  const sanitized: Record<string, number> = {};\r\n  for (const [key, value] of Object.entries(traits)) {\r\n    if (typeof key === 'string' && typeof value === 'number' && !isNaN(value)) {\r\n      sanitized[key] = Math.max(0, Math.min(100, value));\r\n    }\r\n  }\r\n  \r\n  return sanitized;\r\n}\r\n\r\nfunction sanitizeMutations(mutations: any): Array<{type: string; trigger: string; magnitude: number; timestamp: number}> {\r\n  if (!Array.isArray(mutations)) return [];\r\n  \r\n  return mutations\r\n    .filter(m => m && typeof m === 'object')\r\n    .map(m => ({\r\n      type: String(m.type || 'unknown'),\r\n      trigger: String(m.trigger || 'unknown'),\r\n      magnitude: Number(m.magnitude || 0),\r\n      timestamp: Number(m.timestamp || Date.now())\r\n    }))\r\n    .slice(-10); // Garde seulement les 10 dernières mutations\r\n}\r\n\r\nfunction sanitizeSocialConnections(connections: any): Array<{id: string; type: string; strength: number}> {\r\n  if (!Array.isArray(connections)) return [];\r\n  \r\n  return connections\r\n    .filter(c => c && typeof c === 'object')\r\n    .map(c => ({\r\n      id: String(c.id || ''),\r\n      type: String(c.type || 'unknown'),\r\n      strength: Number(c.strength || 0)\r\n    }))\r\n    .slice(-20); // Limite à 20 connexions\r\n}\r\n\r\nfunction sanitizeMemoryFragments(fragments: any): Array<{id: string; content: string; timestamp: number}> {\r\n  if (!Array.isArray(fragments)) return [];\r\n  \r\n  return fragments\r\n    .filter(f => f && typeof f === 'object')\r\n    .map(f => ({\r\n      id: String(f.id || ''),\r\n      content: String(f.content || '').slice(0, 500), // Limite la taille du contenu\r\n      timestamp: Number(f.timestamp || Date.now())\r\n    }))\r\n    .slice(-50); // Garde seulement les 50 derniers fragments\r\n}\r\n\r\nexport function sanitizeMessage(message: MessageEvent | unknown): any {\r\n  if (!message || typeof message !== 'object') {\r\n    return message;\r\n  }\r\n  \r\n  // Copie profonde pour éviter les mutations et nettoyer récursivement\r\n  return deepCleanForSerialization(message);\r\n}\r\n\r\nfunction deepCleanForSerialization(obj: unknown, seen = new WeakSet()): unknown {\r\n  if (obj === null || obj === undefined) {\r\n    return obj;\r\n  }\r\n  \r\n  if (typeof obj === 'function') {\r\n    return '[Function]';\r\n  }\r\n  \r\n  if (obj instanceof Date) {\r\n    return obj.toISOString();\r\n  }\r\n  \r\n  if (obj instanceof Error) {\r\n    return {\r\n      name: obj.name,\r\n      message: obj.message,\r\n      stack: obj.stack\r\n    };\r\n  }\r\n\r\n  // Objets WebGL, DOM, React non-sérialisables\r\n  if (obj instanceof WebGLRenderingContext || \r\n      obj instanceof WebGL2RenderingContext ||\r\n      obj instanceof HTMLElement ||\r\n      obj instanceof HTMLCanvasElement ||\r\n      obj instanceof CanvasRenderingContext2D ||\r\n      obj instanceof WebGLProgram ||\r\n      obj instanceof WebGLBuffer ||\r\n      obj instanceof WebGLTexture ||\r\n      (obj && (obj as any).$$typeof) || // React elements\r\n      (obj && (obj as any).__reactFiber) || // React fiber\r\n      (obj && (obj as any)._owner) || // React internal\r\n      (obj && typeof obj === 'object' && obj.constructor && obj.constructor.name && obj.constructor.name.includes('Fiber')) // React Fiber variants\r\n  ) {\r\n    // Pour les canvas, on extrait juste les propriétés utiles\r\n    if (obj instanceof HTMLCanvasElement) {\r\n      return {\r\n        tagName: 'CANVAS',\r\n        width: obj.width,\r\n        height: obj.height,\r\n        className: obj.className,\r\n        id: obj.id\r\n      };\r\n    }\r\n    return '[Non-serializable Object]';\r\n  }\r\n  \r\n  if (typeof obj !== 'object') {\r\n    return obj; // Primitives sont OK\r\n  }\r\n  \r\n  // Vérification des références circulaires AVANT la récursion\r\n  if (seen.has(obj as object)) {\r\n    return '[Circular Reference]';\r\n  }\r\n  seen.add(obj as object);\r\n  \r\n  if (Array.isArray(obj)) {\r\n    return obj.map(item => deepCleanForSerialization(item, seen));\r\n  }\r\n  \r\n  // Pour les objets, on nettoie récursivement\r\n  const cleaned: Record<string, unknown> = {};\r\n  \r\n  for (const key in (obj as Record<string, unknown>)) {\r\n    if ((obj as Record<string, unknown>).hasOwnProperty(key)) {\r\n      try {\r\n        cleaned[key] = deepCleanForSerialization((obj as Record<string, unknown>)[key], seen);\r\n      } catch (_error) {\r\n        cleaned[key] = '[Non-serializable]';\r\n      }\r\n    }\r\n  }\r\n  \r\n  return cleaned;\r\n} "],"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","ignoreList":[]}