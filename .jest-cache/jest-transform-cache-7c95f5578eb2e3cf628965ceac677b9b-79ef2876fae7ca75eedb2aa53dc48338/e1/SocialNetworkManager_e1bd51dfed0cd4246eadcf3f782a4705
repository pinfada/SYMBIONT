19829abf55fbaab626b316bd15826a37
"use strict";

/* istanbul ignore next */
function cov_r5dhot8zr() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/SocialNetworkManager.ts";
  var hash = "0fbe72eb0caa2b4f06bf1362a9f43a3121b3ac69";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/SocialNetworkManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 63
        }
      },
      "5": {
        start: {
          line: 7,
          column: 69
        },
        end: {
          line: 7,
          column: 100
        }
      },
      "6": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "11": {
        start: {
          line: 21,
          column: 34
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 33
        }
      },
      "13": {
        start: {
          line: 26,
          column: 27
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 42
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 20
        }
      },
      "16": {
        start: {
          line: 38,
          column: 25
        },
        end: {
          line: 38,
          column: 74
        }
      },
      "17": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 74
        }
      },
      "18": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 39
        }
      },
      "19": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 39
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "22": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 47
        }
      },
      "23": {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 20
        }
      },
      "24": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "25": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 84
        }
      },
      "26": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 54
        }
      },
      "27": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 31
        }
      },
      "28": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "29": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "30": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 84
        }
      },
      "31": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "32": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 57
        }
      },
      "33": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "34": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "35": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "36": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 35
        }
      },
      "37": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 28
        }
      },
      "38": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "39": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "40": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "41": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 41
        }
      },
      "42": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "43": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "44": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "45": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 55
        }
      },
      "46": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 20
        }
      },
      "47": {
        start: {
          line: 97,
          column: 22
        },
        end: {
          line: 97,
          column: 24
        }
      },
      "48": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "49": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 33
        }
      },
      "50": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 21
        }
      },
      "51": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "52": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "53": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 41
        }
      },
      "54": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "55": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "56": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "57": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 72
        }
      },
      "58": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 65
        }
      },
      "59": {
        start: {
          line: 118,
          column: 21
        },
        end: {
          line: 118,
          column: 61
        }
      },
      "60": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 120,
          column: 77
        }
      },
      "61": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 77
        }
      },
      "62": {
        start: {
          line: 121,
          column: 28
        },
        end: {
          line: 121,
          column: 58
        }
      },
      "63": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 86
        }
      },
      "64": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "65": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 130,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "randomUUID",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 19
          }
        },
        loc: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 67
          },
          end: {
            line: 6,
            column: 68
          }
        },
        loc: {
          start: {
            line: 6,
            column: 80
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 38
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 12
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 49
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 51
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 23
          },
          end: {
            line: 50,
            column: 24
          }
        },
        loc: {
          start: {
            line: 50,
            column: 32
          },
          end: {
            line: 52,
            column: 9
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 56,
            column: 24
          }
        },
        loc: {
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 56
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 30
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 84
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 47
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 104
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 50
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 117
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 69
          },
          end: {
            line: 7,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 81
          },
          end: {
            line: 7,
            column: 82
          }
        }, {
          start: {
            line: 7,
            column: 86
          },
          end: {
            line: 7,
            column: 99
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 26
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 48
          }
        }, {
          start: {
            line: 51,
            column: 52
          },
          end: {
            line: 51,
            column: 53
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 58
          },
          end: {
            line: 51,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 58
          },
          end: {
            line: 51,
            column: 76
          }
        }, {
          start: {
            line: 51,
            column: 80
          },
          end: {
            line: 51,
            column: 81
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 44
          }
        }, {
          start: {
            line: 93,
            column: 48
          },
          end: {
            line: 93,
            column: 49
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 109,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 109,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 58
          }
        }, {
          start: {
            line: 111,
            column: 62
          },
          end: {
            line: 111,
            column: 65
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 120,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 120,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/SocialNetworkManager.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/SocialNetworkManager.ts"],
      sourcesContent: ["import { InvitationContext, InvitationCode, SharedMutationResult, CollectiveTrigger, WakeResult } from '../shared/types/social'\r\nimport { BehaviorPattern } from '../shared/types/organism'\r\nimport { OrganismMemoryBank } from '../background/OrganismMemoryBank'\r\nimport { SecurityManager } from '../background/SecurityManager'\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nfunction randomUUID(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    const r = SecureRandom.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8)\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\ninterface Invitation {\r\n  code: string\r\n  context: InvitationContext\r\n  expirationTime: number\r\n  createdBy: string\r\n  createdAt: number\r\n}\r\n\r\nexport class SocialNetworkManager {\r\n  private invitations: Invitation[] = []\r\n  private memoryBank: OrganismMemoryBank\r\n  private security: SecurityManager\r\n  // @ts-expect-error Sessions r\xE9serv\xE9es pour usage futur\r\n  private _collectiveSessions: Map<string, { participants: string[], traits: Record<string, number> }> = new Map()\r\n\r\n  constructor(memoryBank: OrganismMemoryBank, security: SecurityManager) {\r\n    this.memoryBank = memoryBank\r\n    this.security = security\r\n  }\r\n\r\n  async generateInvitation(inviterId: string, context: InvitationContext): Promise<InvitationCode> {\r\n    // Anonymisation du contexte comportemental\r\n    const anonymizedContext = {\r\n      ...context,\r\n      behaviorPattern: this.security.anonymizeForSharing(context.behaviorPattern as BehaviorPattern)\r\n    }\r\n    const code = randomUUID()\r\n    const invitation: Invitation = {\r\n      code,\r\n      context: anonymizedContext,\r\n      expirationTime: Date.now() + 24 * 60 * 60 * 1000, // 24h\r\n      createdBy: inviterId,\r\n      createdAt: Date.now()\r\n    }\r\n    this.invitations.push(invitation)\r\n    return code\r\n  }\r\n\r\n  async facilitateSharedMutation(source: string, target: string): Promise<SharedMutationResult> {\r\n    // Chargement des organismes depuis la m\xE9moire centrale\r\n    const history1 = await this.memoryBank.loadOrganismHistory(source)\r\n    const history2 = await this.memoryBank.loadOrganismHistory(target)\r\n    const org1 = history1.states[0]\r\n    const org2 = history2.states[0]\r\n    if (!org1 || !org2) {\r\n      return {\r\n        id: '', traitChanges: {}, compatibility: 0, timestamp: Date.now(), mutationType: 'social_exchange'\r\n      }\r\n    }\r\n    // Calcul compatibilit\xE9\r\n    const traits = Object.keys(org1.traits)\r\n    let diff = 0\r\n    traits.forEach(trait => {\r\n      diff += Math.abs((org1.traits[trait] || 0) - (org2.traits[trait] || 0))\r\n    })\r\n    const compatibility = 1 - diff / traits.length\r\n    // S\xE9lection de traits \xE0 partager\r\n    const traitChanges: Record<string, number> = {}\r\n    traits.forEach(trait => {\r\n      if (SecureRandom.random() < 0.5) {\r\n        traitChanges[trait] = (org1.traits[trait] + org2.traits[trait]) / 2\r\n        // Application de la mutation sur les deux organismes\r\n        org1.traits[trait] = traitChanges[trait]\r\n        org2.traits[trait] = traitChanges[trait]\r\n      }\r\n    })\r\n    // Anonymisation des donn\xE9es comportementales \xE9chang\xE9es (exemple)\r\n    // (\xC0 adapter selon le format r\xE9el des \xE9changes)\r\n    // const anonymizedData = this.security.anonymizeForSharing(...)\r\n    // Sauvegarde des organismes modifi\xE9s\r\n    await this.memoryBank.saveOrganismState(source, org1)\r\n    await this.memoryBank.saveOrganismState(target, org2)\r\n    return {\r\n      id: randomUUID(),\r\n      traitChanges,\r\n      compatibility,\r\n      timestamp: Date.now(),\r\n      mutationType: 'social_exchange'\r\n    }\r\n  }\r\n\r\n  // D\xE9tecte une synchronisation collective (plusieurs utilisateurs)\r\n  async detectCollectiveSync(userIds: string[]): Promise<boolean> {\r\n    // Si >3 utilisateurs actifs en m\xEAme temps, on consid\xE8re une synchro\r\n    return userIds.length >= 3\r\n  }\r\n\r\n  // Fusionne les traits de plusieurs organismes (moyenne)\r\n  async fuseTraits(userIds: string[]): Promise<Record<string, number>> {\r\n    const traitSums: Record<string, number> = {}\r\n    let count = 0\r\n    for (const userId of userIds) {\r\n      const history = await this.memoryBank.loadOrganismHistory(userId)\r\n      const org = history.states[0]\r\n      if (!org) continue\r\n      for (const [k, v] of Object.entries(org.traits)) {\r\n        traitSums[k] = (traitSums[k] ?? 0) + (v as number)\r\n      }\r\n      count++\r\n    }\r\n    const fused: Record<string, number> = {}\r\n    for (const [k, v] of Object.entries(traitSums)) {\r\n      fused[k] = v / count\r\n    }\r\n    return fused\r\n  }\r\n\r\n  // Applique un effet collectif (bonus)\r\n  async applyCollectiveBonus(userIds: string[], bonus: Record<string, number>) {\r\n    for (const userId of userIds) {\r\n      const history = await this.memoryBank.loadOrganismHistory(userId)\r\n      const org = history.states[0]\r\n      if (!org) continue\r\n      for (const [k, v] of Object.entries(bonus)) {\r\n        org.traits[k] = Math.min(1, (org.traits[k] ?? 0.5) + (v as number))\r\n      }\r\n      await this.memoryBank.saveOrganismState(userId, org)\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  async triggerCollectiveWake(trigger: CollectiveTrigger, userIds: string[]): Promise<WakeResult> {\r\n    const sync = await this.detectCollectiveSync(userIds)\r\n    if (!sync) return { success: false, details: 'Pas assez de participants.' }\r\n    const fusedTraits = await this.fuseTraits(userIds)\r\n    // Bonus collectif\u202F: +0.05 sur l'empathie et la cr\xE9ativit\xE9\r\n    await this.applyCollectiveBonus(userIds, { empathy: 0.05, creativity: 0.05 })\r\n    return {\r\n      success: true,\r\n      details: `R\xE9veil collectif r\xE9ussi pour ${userIds.length} participants. Traits fusionn\xE9s\u202F: ${JSON.stringify(fusedTraits)}`\r\n    }\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0fbe72eb0caa2b4f06bf1362a9f43a3121b3ac69"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r5dhot8zr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r5dhot8zr();
cov_r5dhot8zr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_r5dhot8zr().s[1]++;
exports.SocialNetworkManager = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_r5dhot8zr().s[2]++, require("../shared/utils/secureRandom"));
function randomUUID() {
  /* istanbul ignore next */
  cov_r5dhot8zr().f[0]++;
  cov_r5dhot8zr().s[3]++;
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[1]++;
    const r =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[4]++, secureRandom_1.SecureRandom.random() * 16 | 0),
      v =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[5]++, c === 'x' ?
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[0][0]++, r) :
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[0][1]++, r & 0x3 | 0x8));
    /* istanbul ignore next */
    cov_r5dhot8zr().s[6]++;
    return v.toString(16);
  });
}
class SocialNetworkManager {
  constructor(memoryBank, security) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[2]++;
    cov_r5dhot8zr().s[7]++;
    this.invitations = [];
    // @ts-expect-error Sessions réservées pour usage futur
    /* istanbul ignore next */
    cov_r5dhot8zr().s[8]++;
    this._collectiveSessions = new Map();
    /* istanbul ignore next */
    cov_r5dhot8zr().s[9]++;
    this.memoryBank = memoryBank;
    /* istanbul ignore next */
    cov_r5dhot8zr().s[10]++;
    this.security = security;
  }
  async generateInvitation(inviterId, context) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[3]++;
    // Anonymisation du contexte comportemental
    const anonymizedContext =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[11]++, {
      ...context,
      behaviorPattern: this.security.anonymizeForSharing(context.behaviorPattern)
    });
    const code =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[12]++, randomUUID());
    const invitation =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[13]++, {
      code,
      context: anonymizedContext,
      expirationTime: Date.now() + 24 * 60 * 60 * 1000,
      // 24h
      createdBy: inviterId,
      createdAt: Date.now()
    });
    /* istanbul ignore next */
    cov_r5dhot8zr().s[14]++;
    this.invitations.push(invitation);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[15]++;
    return code;
  }
  async facilitateSharedMutation(source, target) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[4]++;
    // Chargement des organismes depuis la mémoire centrale
    const history1 =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[16]++, await this.memoryBank.loadOrganismHistory(source));
    const history2 =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[17]++, await this.memoryBank.loadOrganismHistory(target));
    const org1 =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[18]++, history1.states[0]);
    const org2 =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[19]++, history2.states[0]);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_r5dhot8zr().b[2][0]++, !org1) ||
    /* istanbul ignore next */
    (cov_r5dhot8zr().b[2][1]++, !org2)) {
      /* istanbul ignore next */
      cov_r5dhot8zr().b[1][0]++;
      cov_r5dhot8zr().s[21]++;
      return {
        id: '',
        traitChanges: {},
        compatibility: 0,
        timestamp: Date.now(),
        mutationType: 'social_exchange'
      };
    } else
    /* istanbul ignore next */
    {
      cov_r5dhot8zr().b[1][1]++;
    }
    // Calcul compatibilité
    const traits =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[22]++, Object.keys(org1.traits));
    let diff =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[23]++, 0);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[24]++;
    traits.forEach(trait => {
      /* istanbul ignore next */
      cov_r5dhot8zr().f[5]++;
      cov_r5dhot8zr().s[25]++;
      diff += Math.abs((
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[3][0]++, org1.traits[trait]) ||
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[3][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[4][0]++, org2.traits[trait]) ||
      /* istanbul ignore next */
      (cov_r5dhot8zr().b[4][1]++, 0)));
    });
    const compatibility =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[26]++, 1 - diff / traits.length);
    // Sélection de traits à partager
    const traitChanges =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[27]++, {});
    /* istanbul ignore next */
    cov_r5dhot8zr().s[28]++;
    traits.forEach(trait => {
      /* istanbul ignore next */
      cov_r5dhot8zr().f[6]++;
      cov_r5dhot8zr().s[29]++;
      if (secureRandom_1.SecureRandom.random() < 0.5) {
        /* istanbul ignore next */
        cov_r5dhot8zr().b[5][0]++;
        cov_r5dhot8zr().s[30]++;
        traitChanges[trait] = (org1.traits[trait] + org2.traits[trait]) / 2;
        // Application de la mutation sur les deux organismes
        /* istanbul ignore next */
        cov_r5dhot8zr().s[31]++;
        org1.traits[trait] = traitChanges[trait];
        /* istanbul ignore next */
        cov_r5dhot8zr().s[32]++;
        org2.traits[trait] = traitChanges[trait];
      } else
      /* istanbul ignore next */
      {
        cov_r5dhot8zr().b[5][1]++;
      }
    });
    // Anonymisation des données comportementales échangées (exemple)
    // (À adapter selon le format réel des échanges)
    // const anonymizedData = this.security.anonymizeForSharing(...)
    // Sauvegarde des organismes modifiés
    /* istanbul ignore next */
    cov_r5dhot8zr().s[33]++;
    await this.memoryBank.saveOrganismState(source, org1);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[34]++;
    await this.memoryBank.saveOrganismState(target, org2);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[35]++;
    return {
      id: randomUUID(),
      traitChanges,
      compatibility,
      timestamp: Date.now(),
      mutationType: 'social_exchange'
    };
  }
  // Détecte une synchronisation collective (plusieurs utilisateurs)
  async detectCollectiveSync(userIds) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[7]++;
    cov_r5dhot8zr().s[36]++;
    // Si >3 utilisateurs actifs en même temps, on considère une synchro
    return userIds.length >= 3;
  }
  // Fusionne les traits de plusieurs organismes (moyenne)
  async fuseTraits(userIds) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[8]++;
    const traitSums =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[37]++, {});
    let count =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[38]++, 0);
    /* istanbul ignore next */
    cov_r5dhot8zr().s[39]++;
    for (const userId of userIds) {
      const history =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[40]++, await this.memoryBank.loadOrganismHistory(userId));
      const org =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[41]++, history.states[0]);
      /* istanbul ignore next */
      cov_r5dhot8zr().s[42]++;
      if (!org) {
        /* istanbul ignore next */
        cov_r5dhot8zr().b[6][0]++;
        cov_r5dhot8zr().s[43]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_r5dhot8zr().b[6][1]++;
      }
      cov_r5dhot8zr().s[44]++;
      for (const [k, v] of Object.entries(org.traits)) {
        /* istanbul ignore next */
        cov_r5dhot8zr().s[45]++;
        traitSums[k] = (
        /* istanbul ignore next */
        (cov_r5dhot8zr().b[7][0]++, traitSums[k]) ??
        /* istanbul ignore next */
        (cov_r5dhot8zr().b[7][1]++, 0)) + v;
      }
      /* istanbul ignore next */
      cov_r5dhot8zr().s[46]++;
      count++;
    }
    const fused =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[47]++, {});
    /* istanbul ignore next */
    cov_r5dhot8zr().s[48]++;
    for (const [k, v] of Object.entries(traitSums)) {
      /* istanbul ignore next */
      cov_r5dhot8zr().s[49]++;
      fused[k] = v / count;
    }
    /* istanbul ignore next */
    cov_r5dhot8zr().s[50]++;
    return fused;
  }
  // Applique un effet collectif (bonus)
  async applyCollectiveBonus(userIds, bonus) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[9]++;
    cov_r5dhot8zr().s[51]++;
    for (const userId of userIds) {
      const history =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[52]++, await this.memoryBank.loadOrganismHistory(userId));
      const org =
      /* istanbul ignore next */
      (cov_r5dhot8zr().s[53]++, history.states[0]);
      /* istanbul ignore next */
      cov_r5dhot8zr().s[54]++;
      if (!org) {
        /* istanbul ignore next */
        cov_r5dhot8zr().b[8][0]++;
        cov_r5dhot8zr().s[55]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_r5dhot8zr().b[8][1]++;
      }
      cov_r5dhot8zr().s[56]++;
      for (const [k, v] of Object.entries(bonus)) {
        /* istanbul ignore next */
        cov_r5dhot8zr().s[57]++;
        org.traits[k] = Math.min(1, (
        /* istanbul ignore next */
        (cov_r5dhot8zr().b[9][0]++, org.traits[k]) ??
        /* istanbul ignore next */
        (cov_r5dhot8zr().b[9][1]++, 0.5)) + v);
      }
      /* istanbul ignore next */
      cov_r5dhot8zr().s[58]++;
      await this.memoryBank.saveOrganismState(userId, org);
    }
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  async triggerCollectiveWake(trigger, userIds) {
    /* istanbul ignore next */
    cov_r5dhot8zr().f[10]++;
    const sync =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[59]++, await this.detectCollectiveSync(userIds));
    /* istanbul ignore next */
    cov_r5dhot8zr().s[60]++;
    if (!sync) {
      /* istanbul ignore next */
      cov_r5dhot8zr().b[10][0]++;
      cov_r5dhot8zr().s[61]++;
      return {
        success: false,
        details: 'Pas assez de participants.'
      };
    } else
    /* istanbul ignore next */
    {
      cov_r5dhot8zr().b[10][1]++;
    }
    const fusedTraits =
    /* istanbul ignore next */
    (cov_r5dhot8zr().s[62]++, await this.fuseTraits(userIds));
    // Bonus collectif : +0.05 sur l'empathie et la créativité
    /* istanbul ignore next */
    cov_r5dhot8zr().s[63]++;
    await this.applyCollectiveBonus(userIds, {
      empathy: 0.05,
      creativity: 0.05
    });
    /* istanbul ignore next */
    cov_r5dhot8zr().s[64]++;
    return {
      success: true,
      details: `Réveil collectif réussi pour ${userIds.length} participants. Traits fusionnés : ${JSON.stringify(fusedTraits)}`
    };
  }
}
/* istanbul ignore next */
cov_r5dhot8zr().s[65]++;
exports.SocialNetworkManager = SocialNetworkManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,