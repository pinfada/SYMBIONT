83edcc29277c58bf544fe06d26240861
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Jest setup file for SYMBIONT tests
require("@testing-library/jest-dom");
// Mock global objects that might not be available in test environment
global.performance = global.performance || {};
global.performance.now = jest.fn(() => Date.now());
global.performance.mark = jest.fn();
global.performance.measure = jest.fn();
global.performance.clearMarks = jest.fn();
global.performance.clearMeasures = jest.fn();
global.performance.getEntries = jest.fn(() => []);
global.performance.getEntriesByName = jest.fn(() => []);
global.performance.getEntriesByType = jest.fn(() => []);
// Mock PerformanceObserver
global.PerformanceObserver = jest.fn().mockImplementation((callback) => ({
    observe: jest.fn(),
    disconnect: jest.fn(),
    takeRecords: jest.fn(() => [])
}));
// Mock TextEncoder/TextDecoder for Node.js
const { TextEncoder, TextDecoder } = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;
// Mock btoa/atob for Node.js
global.btoa = global.btoa || ((str) => Buffer.from(str, 'binary').toString('base64'));
global.atob = global.atob || ((str) => Buffer.from(str, 'base64').toString('binary'));
// Mock crypto for WebCrypto
const mockCryptoKey = {
    type: 'secret',
    extractable: false,
    algorithm: { name: 'AES-GCM', length: 256 },
    usages: ['encrypt', 'decrypt']
};
// Create realistic mock data
const createMockEncryptionResult = (plaintext) => {
    const encoder = new TextEncoder();
    const data = encoder.encode(plaintext);
    const mockEncrypted = new Uint8Array(data.length + 16); // +16 for auth tag
    data.forEach((byte, i) => {
        mockEncrypted[i] = byte ^ 0xAA; // Simple XOR for mock encryption
    });
    return mockEncrypted.buffer;
};
const createMockDecryptionResult = (encryptedData) => {
    const data = new Uint8Array(encryptedData);
    const decrypted = new Uint8Array(data.length - 16); // -16 for auth tag
    for (let i = 0; i < decrypted.length; i++) {
        decrypted[i] = data[i] ^ 0xAA; // Reverse XOR
    }
    return decrypted.buffer;
};
global.crypto = global.crypto || {};
global.crypto.subtle = global.crypto.subtle || {
    generateKey: jest.fn().mockResolvedValue(mockCryptoKey),
    importKey: jest.fn().mockResolvedValue(mockCryptoKey),
    exportKey: jest.fn().mockResolvedValue(new ArrayBuffer(32)),
    encrypt: jest.fn().mockImplementation(async (algorithm, key, data) => {
        const decoder = new TextDecoder();
        const plaintext = decoder.decode(data);
        return createMockEncryptionResult(plaintext);
    }),
    decrypt: jest.fn().mockImplementation(async (algorithm, key, data) => {
        return createMockDecryptionResult(data);
    }),
    digest: jest.fn().mockImplementation(async (algorithm, data) => {
        // Mock SHA-256 hash
        const input = data instanceof ArrayBuffer ? new Uint8Array(data) : data;
        const hash = new Uint8Array(32);
        for (let i = 0; i < 32; i++) {
            hash[i] = (input[i % input.length] + i) % 256;
        }
        return hash.buffer;
    })
};
global.crypto.getRandomValues = jest.fn((arr) => {
    for (let i = 0; i < arr.length; i++) {
        arr[i] = Math.floor(Math.random() * 256);
    }
    return arr;
});
// Mock requestAnimationFrame and cancelAnimationFrame
global.requestAnimationFrame = jest.fn((callback) => {
    return setTimeout(callback, 16); // ~60fps
});
global.cancelAnimationFrame = jest.fn((id) => {
    clearTimeout(id);
});
// Mock URL.createObjectURL for Web Workers
global.URL = global.URL || {};
global.URL.createObjectURL = jest.fn(() => 'blob:mock-url');
global.URL.revokeObjectURL = jest.fn();
// Mock Worker constructor
global.Worker = jest.fn().mockImplementation(() => ({
    postMessage: jest.fn(),
    terminate: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    onmessage: null,
    onerror: null
}));
// Mock WebGL context
const createMockWebGLContext = () => ({
    // WebGL constants
    TRIANGLES: 4,
    LINES: 1,
    POINTS: 0,
    ARRAY_BUFFER: 34962,
    ELEMENT_ARRAY_BUFFER: 34963,
    DYNAMIC_DRAW: 35048,
    STATIC_DRAW: 35044,
    FLOAT: 5126,
    UNSIGNED_SHORT: 5123,
    // Buffer methods
    createBuffer: jest.fn(() => ({ id: Math.random() })),
    deleteBuffer: jest.fn(),
    bindBuffer: jest.fn(),
    bufferData: jest.fn(),
    // Vertex attributes
    vertexAttribPointer: jest.fn(),
    enableVertexAttribArray: jest.fn(),
    disableVertexAttribArray: jest.fn(),
    // Drawing
    drawArrays: jest.fn(),
    drawElements: jest.fn(),
    // Shaders (for future tests)
    createShader: jest.fn(() => ({ id: Math.random() })),
    createProgram: jest.fn(() => ({ id: Math.random() })),
    compileShader: jest.fn(),
    linkProgram: jest.fn(),
    useProgram: jest.fn(),
    // State
    viewport: jest.fn(),
    clear: jest.fn(),
    clearColor: jest.fn(),
    enable: jest.fn(),
    disable: jest.fn(),
    // Error checking
    getError: jest.fn(() => 0), // GL_NO_ERROR
    // Extensions
    getExtension: jest.fn(),
    getSupportedExtensions: jest.fn(() => [])
});
// Mock canvas and WebGL
HTMLCanvasElement.prototype.getContext = jest.fn((contextType) => {
    if (contextType === 'webgl' || contextType === 'experimental-webgl') {
        return createMockWebGLContext();
    }
    if (contextType === 'webgl2') {
        return {
            ...createMockWebGLContext(),
            createVertexArray: jest.fn(() => ({ id: Math.random() })),
            deleteVertexArray: jest.fn(),
            bindVertexArray: jest.fn()
        };
    }
    return null;
});
// Mock Chrome APIs for extension testing
const mockStorageData = {};
global.chrome = {
    runtime: {
        onMessage: {
            addListener: jest.fn(),
            removeListener: jest.fn()
        },
        sendMessage: jest.fn(),
        getURL: jest.fn((path) => `chrome-extension://mock-id/${path}`)
    },
    tabs: {
        query: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
    },
    storage: {
        local: {
            get: jest.fn().mockImplementation((keys, callback) => {
                const result = {};
                if (typeof keys === 'string') {
                    if (mockStorageData[keys] !== undefined) {
                        result[keys] = mockStorageData[keys];
                    }
                }
                else if (Array.isArray(keys)) {
                    keys.forEach(key => {
                        if (mockStorageData[key] !== undefined) {
                            result[key] = mockStorageData[key];
                        }
                    });
                }
                else {
                    Object.assign(result, mockStorageData);
                }
                if (callback)
                    callback(result);
                return Promise.resolve(result);
            }),
            set: jest.fn().mockImplementation((items, callback) => {
                Object.assign(mockStorageData, items);
                if (callback)
                    callback();
                return Promise.resolve();
            }),
            remove: jest.fn().mockImplementation((keys, callback) => {
                const keysArray = Array.isArray(keys) ? keys : [keys];
                keysArray.forEach(key => delete mockStorageData[key]);
                if (callback)
                    callback();
                return Promise.resolve();
            }),
            clear: jest.fn().mockImplementation((callback) => {
                Object.keys(mockStorageData).forEach(key => delete mockStorageData[key]);
                if (callback)
                    callback();
                return Promise.resolve();
            })
        },
        sync: {
            get: jest.fn().mockResolvedValue({}),
            set: jest.fn().mockResolvedValue(undefined),
            remove: jest.fn().mockResolvedValue(undefined),
            clear: jest.fn().mockResolvedValue(undefined)
        }
    }
};
// Console override for test cleanup
const originalConsole = global.console;
global.console = {
    ...originalConsole,
    // Suppress console.log in tests unless explicitly needed
    log: process.env.JEST_VERBOSE === 'true' ? originalConsole.log : jest.fn(),
    info: process.env.JEST_VERBOSE === 'true' ? originalConsole.info : jest.fn(),
    warn: originalConsole.warn,
    error: originalConsole.error,
    debug: process.env.JEST_VERBOSE === 'true' ? originalConsole.debug : jest.fn()
};
// Increase timeout for integration tests
jest.setTimeout(10000);
// Global test utilities
global.testUtils = {
    // Helper to wait for async operations
    waitFor: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
    // Helper to create mock DNA sequences
    createMockDNA: (length = 16) => {
        const bases = ['A', 'T', 'C', 'G'];
        return Array.from({ length }, () => bases[Math.floor(Math.random() * bases.length)]).join('');
    },
    // Helper to create valid organism traits
    createMockTraits: () => ({
        curiosity: Math.random(),
        focus: Math.random(),
        rhythm: Math.random(),
        empathy: Math.random(),
        creativity: Math.random(),
        resilience: Math.random(),
        adaptability: Math.random(),
        memory: Math.random(),
        intuition: Math.random() * 0.2 // Intuition is typically lower
    }),
    // Helper to suppress console output during tests
    suppressConsole: () => {
        const spy = {
            log: jest.spyOn(console, 'log').mockImplementation(() => { }),
            info: jest.spyOn(console, 'info').mockImplementation(() => { }),
            warn: jest.spyOn(console, 'warn').mockImplementation(() => { }),
            error: jest.spyOn(console, 'error').mockImplementation(() => { }),
            debug: jest.spyOn(console, 'debug').mockImplementation(() => { })
        };
        return () => {
            Object.values(spy).forEach(s => s.mockRestore());
        };
    }
};
// Clean up after each test
afterEach(() => {
    jest.clearAllMocks();
    jest.clearAllTimers();
    // Clear mock storage data
    Object.keys(mockStorageData).forEach(key => delete mockStorageData[key]);
    // Reset performance mock if it exists and is a Jest mock
    if (global.performance.now && typeof global.performance.now.mockClear === 'function') {
        global.performance.now.mockClear();
    }
    // Reset RAF mocks if they exist and are Jest mocks
    if (global.requestAnimationFrame && typeof global.requestAnimationFrame.mockClear === 'function') {
        global.requestAnimationFrame.mockClear();
    }
    if (global.cancelAnimationFrame && typeof global.cancelAnimationFrame.mockClear === 'function') {
        global.cancelAnimationFrame.mockClear();
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLHFDQUFtQztBQUVuQyxzRUFBc0U7QUFDdEUsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUM5QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNwQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDdkMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFeEQsMkJBQTJCO0FBQzNCLE1BQU0sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkUsT0FBTyxF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LElBQUksTUFBTSxDQUFDLHFCQUFxQixJQUFJLE9BQVEsTUFBTSxDQUFDLHFCQUE2QixDQUFDLFNBQVMsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUN6RyxNQUFNLENBQUMscUJBQW1DLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUNELElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLE9BQVEsTUFBTSxDQUFDLG9CQUE0QixDQUFDLFNBQVMsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUN2RyxNQUFNLENBQUMsb0JBQWtDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDekQsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy9tX29saS9Qcm9qZXRzL1NZTUJJT05UL19fdGVzdHNfXy9zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKZXN0IHNldHVwIGZpbGUgZm9yIFNZTUJJT05UIHRlc3RzXHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XHJcblxyXG4vLyBNb2NrIGdsb2JhbCBvYmplY3RzIHRoYXQgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBpbiB0ZXN0IGVudmlyb25tZW50XHJcbmdsb2JhbC5wZXJmb3JtYW5jZSA9IGdsb2JhbC5wZXJmb3JtYW5jZSB8fCB7fTtcclxuZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdyA9IGplc3QuZm4oKCkgPT4gRGF0ZS5ub3coKSk7XHJcbmdsb2JhbC5wZXJmb3JtYW5jZS5tYXJrID0gamVzdC5mbigpO1xyXG5nbG9iYWwucGVyZm9ybWFuY2UubWVhc3VyZSA9IGplc3QuZm4oKTtcclxuZ2xvYmFsLnBlcmZvcm1hbmNlLmNsZWFyTWFya3MgPSBqZXN0LmZuKCk7XHJcbmdsb2JhbC5wZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzID0gamVzdC5mbigpO1xyXG5nbG9iYWwucGVyZm9ybWFuY2UuZ2V0RW50cmllcyA9IGplc3QuZm4oKCkgPT4gW10pO1xyXG5nbG9iYWwucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSA9IGplc3QuZm4oKCkgPT4gW10pO1xyXG5nbG9iYWwucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSA9IGplc3QuZm4oKCkgPT4gW10pO1xyXG5cclxuLy8gTW9jayBQZXJmb3JtYW5jZU9ic2VydmVyXHJcbmdsb2JhbC5QZXJmb3JtYW5jZU9ic2VydmVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoY2FsbGJhY2spID0+ICh7XHJcbiAgb2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxuICB0YWtlUmVjb3JkczogamVzdC5mbigoKSA9PiBbXSlcclxufSkpO1xyXG5cclxuLy8gTW9jayBUZXh0RW5jb2Rlci9UZXh0RGVjb2RlciBmb3IgTm9kZS5qc1xyXG5jb25zdCB7IFRleHRFbmNvZGVyLCBUZXh0RGVjb2RlciB9ID0gcmVxdWlyZSgndXRpbCcpO1xyXG5nbG9iYWwuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlcjtcclxuZ2xvYmFsLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7XHJcblxyXG4vLyBNb2NrIGJ0b2EvYXRvYiBmb3IgTm9kZS5qc1xyXG5nbG9iYWwuYnRvYSA9IGdsb2JhbC5idG9hIHx8ICgoc3RyOiBzdHJpbmcpID0+IEJ1ZmZlci5mcm9tKHN0ciwgJ2JpbmFyeScpLnRvU3RyaW5nKCdiYXNlNjQnKSk7XHJcbmdsb2JhbC5hdG9iID0gZ2xvYmFsLmF0b2IgfHwgKChzdHI6IHN0cmluZykgPT4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpKTtcclxuXHJcbi8vIE1vY2sgY3J5cHRvIGZvciBXZWJDcnlwdG9cclxuY29uc3QgbW9ja0NyeXB0b0tleSA9IHtcclxuICB0eXBlOiAnc2VjcmV0JyxcclxuICBleHRyYWN0YWJsZTogZmFsc2UsXHJcbiAgYWxnb3JpdGhtOiB7IG5hbWU6ICdBRVMtR0NNJywgbGVuZ3RoOiAyNTYgfSxcclxuICB1c2FnZXM6IFsnZW5jcnlwdCcsICdkZWNyeXB0J11cclxufSBhcyBDcnlwdG9LZXk7XHJcblxyXG4vLyBDcmVhdGUgcmVhbGlzdGljIG1vY2sgZGF0YVxyXG5jb25zdCBjcmVhdGVNb2NrRW5jcnlwdGlvblJlc3VsdCA9IChwbGFpbnRleHQ6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUocGxhaW50ZXh0KTtcclxuICBjb25zdCBtb2NrRW5jcnlwdGVkID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGggKyAxNik7IC8vICsxNiBmb3IgYXV0aCB0YWdcclxuICBkYXRhLmZvckVhY2goKGJ5dGUsIGkpID0+IHtcclxuICAgIG1vY2tFbmNyeXB0ZWRbaV0gPSBieXRlIF4gMHhBQTsgLy8gU2ltcGxlIFhPUiBmb3IgbW9jayBlbmNyeXB0aW9uXHJcbiAgfSk7XHJcbiAgcmV0dXJuIG1vY2tFbmNyeXB0ZWQuYnVmZmVyO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlTW9ja0RlY3J5cHRpb25SZXN1bHQgPSAoZW5jcnlwdGVkRGF0YTogQXJyYXlCdWZmZXIpID0+IHtcclxuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkRGF0YSk7XHJcbiAgY29uc3QgZGVjcnlwdGVkID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGggLSAxNik7IC8vIC0xNiBmb3IgYXV0aCB0YWdcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlY3J5cHRlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgZGVjcnlwdGVkW2ldID0gZGF0YVtpXSBeIDB4QUE7IC8vIFJldmVyc2UgWE9SXHJcbiAgfVxyXG4gIHJldHVybiBkZWNyeXB0ZWQuYnVmZmVyO1xyXG59O1xyXG5cclxuZ2xvYmFsLmNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwge307XHJcbmdsb2JhbC5jcnlwdG8uc3VidGxlID0gZ2xvYmFsLmNyeXB0by5zdWJ0bGUgfHwge1xyXG4gIGdlbmVyYXRlS2V5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NyeXB0b0tleSksXHJcbiAgaW1wb3J0S2V5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NyeXB0b0tleSksXHJcbiAgZXhwb3J0S2V5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobmV3IEFycmF5QnVmZmVyKDMyKSksXHJcbiAgZW5jcnlwdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoYWxnb3JpdGhtLCBrZXksIGRhdGEpID0+IHtcclxuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcclxuICAgIGNvbnN0IHBsYWludGV4dCA9IGRlY29kZXIuZGVjb2RlKGRhdGEpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZU1vY2tFbmNyeXB0aW9uUmVzdWx0KHBsYWludGV4dCk7XHJcbiAgfSksXHJcbiAgZGVjcnlwdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoYWxnb3JpdGhtLCBrZXksIGRhdGEpID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVNb2NrRGVjcnlwdGlvblJlc3VsdChkYXRhKTtcclxuICB9KSxcclxuICBkaWdlc3Q6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKGFsZ29yaXRobSwgZGF0YSkgPT4ge1xyXG4gICAgLy8gTW9jayBTSEEtMjU2IGhhc2hcclxuICAgIGNvbnN0IGlucHV0ID0gZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoZGF0YSkgOiBkYXRhO1xyXG4gICAgY29uc3QgaGFzaCA9IG5ldyBVaW50OEFycmF5KDMyKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xyXG4gICAgICBoYXNoW2ldID0gKGlucHV0W2kgJSBpbnB1dC5sZW5ndGhdICsgaSkgJSAyNTY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFzaC5idWZmZXI7XHJcbiAgfSlcclxufTtcclxuZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPSBqZXN0LmZuKChhcnIpID0+IHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgYXJyW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KTtcclxuICB9XHJcbiAgcmV0dXJuIGFycjtcclxufSk7XHJcblxyXG4vLyBNb2NrIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhbmQgY2FuY2VsQW5pbWF0aW9uRnJhbWVcclxuZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XHJcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDE2KTsgLy8gfjYwZnBzXHJcbn0pO1xyXG5cclxuZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gamVzdC5mbigoaWQpID0+IHtcclxuICBjbGVhclRpbWVvdXQoaWQpO1xyXG59KTtcclxuXHJcbi8vIE1vY2sgVVJMLmNyZWF0ZU9iamVjdFVSTCBmb3IgV2ViIFdvcmtlcnNcclxuZ2xvYmFsLlVSTCA9IGdsb2JhbC5VUkwgfHwge307XHJcbmdsb2JhbC5VUkwuY3JlYXRlT2JqZWN0VVJMID0gamVzdC5mbigoKSA9PiAnYmxvYjptb2NrLXVybCcpO1xyXG5nbG9iYWwuVVJMLnJldm9rZU9iamVjdFVSTCA9IGplc3QuZm4oKTtcclxuXHJcbi8vIE1vY2sgV29ya2VyIGNvbnN0cnVjdG9yXHJcbmdsb2JhbC5Xb3JrZXIgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgcG9zdE1lc3NhZ2U6IGplc3QuZm4oKSxcclxuICB0ZXJtaW5hdGU6IGplc3QuZm4oKSxcclxuICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gIG9ubWVzc2FnZTogbnVsbCxcclxuICBvbmVycm9yOiBudWxsXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgV2ViR0wgY29udGV4dFxyXG5jb25zdCBjcmVhdGVNb2NrV2ViR0xDb250ZXh0ID0gKCkgPT4gKHtcclxuICAvLyBXZWJHTCBjb25zdGFudHNcclxuICBUUklBTkdMRVM6IDQsXHJcbiAgTElORVM6IDEsXHJcbiAgUE9JTlRTOiAwLFxyXG4gIEFSUkFZX0JVRkZFUjogMzQ5NjIsXHJcbiAgRUxFTUVOVF9BUlJBWV9CVUZGRVI6IDM0OTYzLFxyXG4gIERZTkFNSUNfRFJBVzogMzUwNDgsXHJcbiAgU1RBVElDX0RSQVc6IDM1MDQ0LFxyXG4gIEZMT0FUOiA1MTI2LFxyXG4gIFVOU0lHTkVEX1NIT1JUOiA1MTIzLFxyXG4gIFxyXG4gIC8vIEJ1ZmZlciBtZXRob2RzXHJcbiAgY3JlYXRlQnVmZmVyOiBqZXN0LmZuKCgpID0+ICh7IGlkOiBNYXRoLnJhbmRvbSgpIH0pKSxcclxuICBkZWxldGVCdWZmZXI6IGplc3QuZm4oKSxcclxuICBiaW5kQnVmZmVyOiBqZXN0LmZuKCksXHJcbiAgYnVmZmVyRGF0YTogamVzdC5mbigpLFxyXG4gIFxyXG4gIC8vIFZlcnRleCBhdHRyaWJ1dGVzXHJcbiAgdmVydGV4QXR0cmliUG9pbnRlcjogamVzdC5mbigpLFxyXG4gIGVuYWJsZVZlcnRleEF0dHJpYkFycmF5OiBqZXN0LmZuKCksXHJcbiAgZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5OiBqZXN0LmZuKCksXHJcbiAgXHJcbiAgLy8gRHJhd2luZ1xyXG4gIGRyYXdBcnJheXM6IGplc3QuZm4oKSxcclxuICBkcmF3RWxlbWVudHM6IGplc3QuZm4oKSxcclxuICBcclxuICAvLyBTaGFkZXJzIChmb3IgZnV0dXJlIHRlc3RzKVxyXG4gIGNyZWF0ZVNoYWRlcjogamVzdC5mbigoKSA9PiAoeyBpZDogTWF0aC5yYW5kb20oKSB9KSksXHJcbiAgY3JlYXRlUHJvZ3JhbTogamVzdC5mbigoKSA9PiAoeyBpZDogTWF0aC5yYW5kb20oKSB9KSksXHJcbiAgY29tcGlsZVNoYWRlcjogamVzdC5mbigpLFxyXG4gIGxpbmtQcm9ncmFtOiBqZXN0LmZuKCksXHJcbiAgdXNlUHJvZ3JhbTogamVzdC5mbigpLFxyXG4gIFxyXG4gIC8vIFN0YXRlXHJcbiAgdmlld3BvcnQ6IGplc3QuZm4oKSxcclxuICBjbGVhcjogamVzdC5mbigpLFxyXG4gIGNsZWFyQ29sb3I6IGplc3QuZm4oKSxcclxuICBlbmFibGU6IGplc3QuZm4oKSxcclxuICBkaXNhYmxlOiBqZXN0LmZuKCksXHJcbiAgXHJcbiAgLy8gRXJyb3IgY2hlY2tpbmdcclxuICBnZXRFcnJvcjogamVzdC5mbigoKSA9PiAwKSwgLy8gR0xfTk9fRVJST1JcclxuICBcclxuICAvLyBFeHRlbnNpb25zXHJcbiAgZ2V0RXh0ZW5zaW9uOiBqZXN0LmZuKCksXHJcbiAgZ2V0U3VwcG9ydGVkRXh0ZW5zaW9uczogamVzdC5mbigoKSA9PiBbXSlcclxufSk7XHJcblxyXG4vLyBNb2NrIGNhbnZhcyBhbmQgV2ViR0xcclxuKEhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS5nZXRDb250ZXh0IGFzIGplc3QuTW9jaykgPSBqZXN0LmZuKChjb250ZXh0VHlwZSkgPT4ge1xyXG4gIGlmIChjb250ZXh0VHlwZSA9PT0gJ3dlYmdsJyB8fCBjb250ZXh0VHlwZSA9PT0gJ2V4cGVyaW1lbnRhbC13ZWJnbCcpIHtcclxuICAgIHJldHVybiBjcmVhdGVNb2NrV2ViR0xDb250ZXh0KCkgYXMgdW5rbm93biBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgfVxyXG4gIGlmIChjb250ZXh0VHlwZSA9PT0gJ3dlYmdsMicpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLmNyZWF0ZU1vY2tXZWJHTENvbnRleHQoKSxcclxuICAgICAgY3JlYXRlVmVydGV4QXJyYXk6IGplc3QuZm4oKCkgPT4gKHsgaWQ6IE1hdGgucmFuZG9tKCkgfSkpLFxyXG4gICAgICBkZWxldGVWZXJ0ZXhBcnJheTogamVzdC5mbigpLFxyXG4gICAgICBiaW5kVmVydGV4QXJyYXk6IGplc3QuZm4oKVxyXG4gICAgfSBhcyB1bmtub3duIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59KTtcclxuXHJcbi8vIE1vY2sgQ2hyb21lIEFQSXMgZm9yIGV4dGVuc2lvbiB0ZXN0aW5nXHJcbmNvbnN0IG1vY2tTdG9yYWdlRGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xyXG5cclxuKGdsb2JhbCBhcyBhbnkpLmNocm9tZSA9IHtcclxuICBydW50aW1lOiB7XHJcbiAgICBvbk1lc3NhZ2U6IHtcclxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKVxyXG4gICAgfSBhcyBQYXJ0aWFsPGNocm9tZS5ldmVudHMuRXZlbnQ8YW55Pj4sXHJcbiAgICBzZW5kTWVzc2FnZTogamVzdC5mbigpLFxyXG4gICAgZ2V0VVJMOiBqZXN0LmZuKChwYXRoOiBzdHJpbmcpID0+IGBjaHJvbWUtZXh0ZW5zaW9uOi8vbW9jay1pZC8ke3BhdGh9YClcclxuICB9IGFzIFBhcnRpYWw8dHlwZW9mIGNocm9tZS5ydW50aW1lPixcclxuICB0YWJzOiB7XHJcbiAgICBxdWVyeTogamVzdC5mbigpLFxyXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXHJcbiAgICB1cGRhdGU6IGplc3QuZm4oKVxyXG4gIH0gYXMgUGFydGlhbDx0eXBlb2YgY2hyb21lLnRhYnM+LFxyXG4gIHN0b3JhZ2U6IHtcclxuICAgIGxvY2FsOiB7XHJcbiAgICAgIGdldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5cz86IHN0cmluZyB8IHN0cmluZ1tdIHwgbnVsbCwgY2FsbGJhY2s/OiAocmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgaWYgKG1vY2tTdG9yYWdlRGF0YVtrZXlzXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtrZXlzXSA9IG1vY2tTdG9yYWdlRGF0YVtrZXlzXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoa2V5cykpIHtcclxuICAgICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAobW9ja1N0b3JhZ2VEYXRhW2tleV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gbW9ja1N0b3JhZ2VEYXRhW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwgbW9ja1N0b3JhZ2VEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhyZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSksXHJcbiAgICAgIHNldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoaXRlbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24obW9ja1N0b3JhZ2VEYXRhLCBpdGVtcyk7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgfSksXHJcbiAgICAgIHJlbW92ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5czogc3RyaW5nIHwgc3RyaW5nW10sIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGtleXNBcnJheSA9IEFycmF5LmlzQXJyYXkoa2V5cykgPyBrZXlzIDogW2tleXNdO1xyXG4gICAgICAgIGtleXNBcnJheS5mb3JFYWNoKGtleSA9PiBkZWxldGUgbW9ja1N0b3JhZ2VEYXRhW2tleV0pO1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBjbGVhcjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoY2FsbGJhY2s/OiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMobW9ja1N0b3JhZ2VEYXRhKS5mb3JFYWNoKGtleSA9PiBkZWxldGUgbW9ja1N0b3JhZ2VEYXRhW2tleV0pO1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgIH0pXHJcbiAgICB9IGFzIFBhcnRpYWw8Y2hyb21lLnN0b3JhZ2UuTG9jYWxTdG9yYWdlQXJlYT4sXHJcbiAgICBzeW5jOiB7XHJcbiAgICAgIGdldDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcclxuICAgICAgc2V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcclxuICAgICAgcmVtb3ZlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcclxuICAgICAgY2xlYXI6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpXHJcbiAgICB9IGFzIFBhcnRpYWw8Y2hyb21lLnN0b3JhZ2UuU3luY1N0b3JhZ2VBcmVhPlxyXG4gIH0gYXMgUGFydGlhbDx0eXBlb2YgY2hyb21lLnN0b3JhZ2U+XHJcbn07XHJcblxyXG4vLyBDb25zb2xlIG92ZXJyaWRlIGZvciB0ZXN0IGNsZWFudXBcclxuY29uc3Qgb3JpZ2luYWxDb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XHJcbmdsb2JhbC5jb25zb2xlID0ge1xyXG4gIC4uLm9yaWdpbmFsQ29uc29sZSxcclxuICAvLyBTdXBwcmVzcyBjb25zb2xlLmxvZyBpbiB0ZXN0cyB1bmxlc3MgZXhwbGljaXRseSBuZWVkZWRcclxuICBsb2c6IHByb2Nlc3MuZW52LkpFU1RfVkVSQk9TRSA9PT0gJ3RydWUnID8gb3JpZ2luYWxDb25zb2xlLmxvZyA6IGplc3QuZm4oKSxcclxuICBpbmZvOiBwcm9jZXNzLmVudi5KRVNUX1ZFUkJPU0UgPT09ICd0cnVlJyA/IG9yaWdpbmFsQ29uc29sZS5pbmZvIDogamVzdC5mbigpLFxyXG4gIHdhcm46IG9yaWdpbmFsQ29uc29sZS53YXJuLFxyXG4gIGVycm9yOiBvcmlnaW5hbENvbnNvbGUuZXJyb3IsXHJcbiAgZGVidWc6IHByb2Nlc3MuZW52LkpFU1RfVkVSQk9TRSA9PT0gJ3RydWUnID8gb3JpZ2luYWxDb25zb2xlLmRlYnVnIDogamVzdC5mbigpXHJcbn07XHJcblxyXG4vLyBJbmNyZWFzZSB0aW1lb3V0IGZvciBpbnRlZ3JhdGlvbiB0ZXN0c1xyXG5qZXN0LnNldFRpbWVvdXQoMTAwMDApO1xyXG5cclxuLy8gR2xvYmFsIHRlc3QgdXRpbGl0aWVzXHJcbmdsb2JhbC50ZXN0VXRpbHMgPSB7XHJcbiAgLy8gSGVscGVyIHRvIHdhaXQgZm9yIGFzeW5jIG9wZXJhdGlvbnNcclxuICB3YWl0Rm9yOiAobXM6IG51bWJlcikgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSksXHJcbiAgXHJcbiAgLy8gSGVscGVyIHRvIGNyZWF0ZSBtb2NrIEROQSBzZXF1ZW5jZXNcclxuICBjcmVhdGVNb2NrRE5BOiAobGVuZ3RoOiBudW1iZXIgPSAxNikgPT4ge1xyXG4gICAgY29uc3QgYmFzZXMgPSBbJ0EnLCAnVCcsICdDJywgJ0cnXTtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoIH0sICgpID0+IGJhc2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJhc2VzLmxlbmd0aCldKS5qb2luKCcnKTtcclxuICB9LFxyXG4gIFxyXG4gIC8vIEhlbHBlciB0byBjcmVhdGUgdmFsaWQgb3JnYW5pc20gdHJhaXRzXHJcbiAgY3JlYXRlTW9ja1RyYWl0czogKCkgPT4gKHtcclxuICAgIGN1cmlvc2l0eTogTWF0aC5yYW5kb20oKSxcclxuICAgIGZvY3VzOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgcmh5dGhtOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgZW1wYXRoeTogTWF0aC5yYW5kb20oKSxcclxuICAgIGNyZWF0aXZpdHk6IE1hdGgucmFuZG9tKCksXHJcbiAgICByZXNpbGllbmNlOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgYWRhcHRhYmlsaXR5OiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgbWVtb3J5OiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgaW50dWl0aW9uOiBNYXRoLnJhbmRvbSgpICogMC4yIC8vIEludHVpdGlvbiBpcyB0eXBpY2FsbHkgbG93ZXJcclxuICB9KSxcclxuICBcclxuICAvLyBIZWxwZXIgdG8gc3VwcHJlc3MgY29uc29sZSBvdXRwdXQgZHVyaW5nIHRlc3RzXHJcbiAgc3VwcHJlc3NDb25zb2xlOiAoKSA9PiB7XHJcbiAgICBjb25zdCBzcHkgPSB7XHJcbiAgICAgIGxvZzogamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KSxcclxuICAgICAgaW5mbzogamVzdC5zcHlPbihjb25zb2xlLCAnaW5mbycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXHJcbiAgICAgIHdhcm46IGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxyXG4gICAgICBlcnJvcjogamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxyXG4gICAgICBkZWJ1ZzogamVzdC5zcHlPbihjb25zb2xlLCAnZGVidWcnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBPYmplY3QudmFsdWVzKHNweSkuZm9yRWFjaChzID0+IHMubW9ja1Jlc3RvcmUoKSk7XHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbi8vIENsZWFuIHVwIGFmdGVyIGVhY2ggdGVzdFxyXG5hZnRlckVhY2goKCkgPT4ge1xyXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIGplc3QuY2xlYXJBbGxUaW1lcnMoKTtcclxuICBcclxuICAvLyBDbGVhciBtb2NrIHN0b3JhZ2UgZGF0YVxyXG4gIE9iamVjdC5rZXlzKG1vY2tTdG9yYWdlRGF0YSkuZm9yRWFjaChrZXkgPT4gZGVsZXRlIG1vY2tTdG9yYWdlRGF0YVtrZXldKTtcclxuICBcclxuICAvLyBSZXNldCBwZXJmb3JtYW5jZSBtb2NrIGlmIGl0IGV4aXN0cyBhbmQgaXMgYSBKZXN0IG1vY2tcclxuICBpZiAoZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdyAmJiB0eXBlb2YgKGdsb2JhbC5wZXJmb3JtYW5jZS5ub3cgYXMgYW55KS5tb2NrQ2xlYXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIChnbG9iYWwucGVyZm9ybWFuY2Uubm93IGFzIGplc3QuTW9jaykubW9ja0NsZWFyKCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFJlc2V0IFJBRiBtb2NrcyBpZiB0aGV5IGV4aXN0IGFuZCBhcmUgSmVzdCBtb2Nrc1xyXG4gIGlmIChnbG9iYWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmIHR5cGVvZiAoZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSBhcyBhbnkpLm1vY2tDbGVhciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgKGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYXMgamVzdC5Nb2NrKS5tb2NrQ2xlYXIoKTtcclxuICB9XHJcbiAgaWYgKGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSAmJiB0eXBlb2YgKGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSBhcyBhbnkpLm1vY2tDbGVhciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgKGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSBhcyBqZXN0Lk1vY2spLm1vY2tDbGVhcigpO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBUeXBlU2NyaXB0IGRlY2xhcmF0aW9ucyBmb3IgZ2xvYmFsIHRlc3QgdXRpbGl0aWVzXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICB2YXIgdGVzdFV0aWxzOiB7XHJcbiAgICB3YWl0Rm9yOiAobXM6IG51bWJlcikgPT4gUHJvbWlzZTx2b2lkPjtcclxuICAgIGNyZWF0ZU1vY2tETkE6IChsZW5ndGg/OiBudW1iZXIpID0+IHN0cmluZztcclxuICAgIGNyZWF0ZU1vY2tUcmFpdHM6ICgpID0+IGFueTtcclxuICAgIHN1cHByZXNzQ29uc29sZTogKCkgPT4gKCkgPT4gdm9pZDtcclxuICB9O1xyXG59ICJdLCJ2ZXJzaW9uIjozfQ==