52e5871bd83f499c967510be5a93efb9
"use strict";
/**
 * Test de sanité pour valider les mocks de base
 * Vérifie que l'environnement de test est stable
 */
describe('Mock Validation Tests', () => {
    it('should have working crypto mocks', () => {
        expect(global.crypto).toBeDefined();
        expect(global.crypto.getRandomValues).toBeDefined();
        expect(global.crypto.subtle).toBeDefined();
        // Test basic crypto functionality
        const arr = new Uint8Array(10);
        global.crypto.getRandomValues(arr);
        expect(arr).toBeDefined();
    });
    it('should have working Worker mocks', () => {
        expect(global.Worker).toBeDefined();
        const worker = new Worker('test');
        expect(worker.postMessage).toBeDefined();
        expect(worker.terminate).toBeDefined();
        expect(worker.addEventListener).toBeDefined();
    });
    it('should have working performance mocks', () => {
        expect(global.performance).toBeDefined();
        expect(global.performance.now).toBeDefined();
        const time1 = performance.now();
        const time2 = performance.now();
        expect(typeof time1).toBe('number');
        expect(typeof time2).toBe('number');
    });
    it('should have working WebGL mocks', () => {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl');
        expect(gl).toBeDefined();
        expect(gl.createBuffer).toBeDefined();
        expect(gl.drawArrays).toBeDefined();
    });
    it('should have working Chrome extension mocks', () => {
        expect(global.chrome).toBeDefined();
        expect(global.chrome.storage).toBeDefined();
        expect(global.chrome.runtime).toBeDefined();
    });
    it('should complete within reasonable time', async () => {
        const start = Date.now();
        // Simulate async operation
        await new Promise(resolve => setTimeout(resolve, 10));
        const end = Date.now();
        expect(end - start).toBeLessThan(1000); // Should be fast
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL21vY2stdmFsaWRhdGlvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUzQyxrQ0FBa0M7UUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXBDLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1FBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFN0MsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7UUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFekIsMkJBQTJCO1FBQzNCLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCO0lBQzNELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL21vY2stdmFsaWRhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCBkZSBzYW5pdMOpIHBvdXIgdmFsaWRlciBsZXMgbW9ja3MgZGUgYmFzZVxuICogVsOpcmlmaWUgcXVlIGwnZW52aXJvbm5lbWVudCBkZSB0ZXN0IGVzdCBzdGFibGVcbiAqL1xuXG5kZXNjcmliZSgnTW9jayBWYWxpZGF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGhhdmUgd29ya2luZyBjcnlwdG8gbW9ja3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdsb2JhbC5jcnlwdG8pLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChnbG9iYWwuY3J5cHRvLnN1YnRsZSkudG9CZURlZmluZWQoKTtcbiAgICBcbiAgICAvLyBUZXN0IGJhc2ljIGNyeXB0byBmdW5jdGlvbmFsaXR5XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTApO1xuICAgIGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgZXhwZWN0KGFycikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIHdvcmtpbmcgV29ya2VyIG1vY2tzJywgKCkgPT4ge1xuICAgIGV4cGVjdChnbG9iYWwuV29ya2VyKS50b0JlRGVmaW5lZCgpO1xuICAgIFxuICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIoJ3Rlc3QnKTtcbiAgICBleHBlY3Qod29ya2VyLnBvc3RNZXNzYWdlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh3b3JrZXIudGVybWluYXRlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh3b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIHdvcmtpbmcgcGVyZm9ybWFuY2UgbW9ja3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdsb2JhbC5wZXJmb3JtYW5jZSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2xvYmFsLnBlcmZvcm1hbmNlLm5vdykudG9CZURlZmluZWQoKTtcbiAgICBcbiAgICBjb25zdCB0aW1lMSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnN0IHRpbWUyID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgZXhwZWN0KHR5cGVvZiB0aW1lMSkudG9CZSgnbnVtYmVyJyk7XG4gICAgZXhwZWN0KHR5cGVvZiB0aW1lMikudG9CZSgnbnVtYmVyJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGF2ZSB3b3JraW5nIFdlYkdMIG1vY2tzJywgKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJyk7XG4gICAgXG4gICAgZXhwZWN0KGdsKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChnbC5jcmVhdGVCdWZmZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdsLmRyYXdBcnJheXMpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGF2ZSB3b3JraW5nIENocm9tZSBleHRlbnNpb24gbW9ja3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdsb2JhbC5jaHJvbWUpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGdsb2JhbC5jaHJvbWUuc3RvcmFnZSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZ2xvYmFsLmNocm9tZS5ydW50aW1lKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNvbXBsZXRlIHdpdGhpbiByZWFzb25hYmxlIHRpbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIFxuICAgIC8vIFNpbXVsYXRlIGFzeW5jIG9wZXJhdGlvblxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMCkpO1xuICAgIFxuICAgIGNvbnN0IGVuZCA9IERhdGUubm93KCk7XG4gICAgZXhwZWN0KGVuZCAtIHN0YXJ0KS50b0JlTGVzc1RoYW4oMTAwMCk7IC8vIFNob3VsZCBiZSBmYXN0XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9