{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/mock-validation.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/mock-validation.test.ts"],"sourcesContent":["/**\n * Test de sanité pour valider les mocks de base\n * Vérifie que l'environnement de test est stable\n */\n\ndescribe('Mock Validation Tests', () => {\n  it('should have working crypto mocks', () => {\n    expect(global.crypto).toBeDefined();\n    expect(global.crypto.getRandomValues).toBeDefined();\n    expect(global.crypto.subtle).toBeDefined();\n    \n    // Test basic crypto functionality\n    const arr = new Uint8Array(10);\n    global.crypto.getRandomValues(arr);\n    expect(arr).toBeDefined();\n  });\n\n  it('should have working Worker mocks', () => {\n    expect(global.Worker).toBeDefined();\n    \n    const worker = new Worker('test');\n    expect(worker.postMessage).toBeDefined();\n    expect(worker.terminate).toBeDefined();\n    expect(worker.addEventListener).toBeDefined();\n  });\n\n  it('should have working performance mocks', () => {\n    expect(global.performance).toBeDefined();\n    expect(global.performance.now).toBeDefined();\n    \n    const time1 = performance.now();\n    const time2 = performance.now();\n    expect(typeof time1).toBe('number');\n    expect(typeof time2).toBe('number');\n  });\n\n  it('should have working WebGL mocks', () => {\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl');\n    \n    expect(gl).toBeDefined();\n    expect(gl.createBuffer).toBeDefined();\n    expect(gl.drawArrays).toBeDefined();\n  });\n\n  it('should have working Chrome extension mocks', () => {\n    expect(global.chrome).toBeDefined();\n    expect(global.chrome.storage).toBeDefined();\n    expect(global.chrome.runtime).toBeDefined();\n  });\n\n  it('should complete within reasonable time', async () => {\n    const start = Date.now();\n    \n    // Simulate async operation\n    await new Promise(resolve => setTimeout(resolve, 10));\n    \n    const end = Date.now();\n    expect(end - start).toBeLessThan(1000); // Should be fast\n  });\n});"],"version":3}