{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/EnergyService.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/EnergyService.ts"],"sourcesContent":["/**\n * EnergyService - Gestion de l'énergie et métabolisme\n * Part du refactoring d'OrganismCore selon l'architecture hexagonale\n */\n\nexport interface EnergyEvent {\n  type: 'consumption' | 'regeneration' | 'boost' | 'drain';\n  amount: number;\n  source: string;\n  timestamp: number;\n  energyBefore: number;\n  energyAfter: number;\n}\n\nexport interface MetabolismConfig {\n  baseRegenRate: number;  // Taux de régénération de base\n  maxEnergy: number;      // Énergie maximale\n  decayRate: number;      // Taux de dégradation naturelle\n  efficiencyFactor: number; // Facteur d'efficacité métabolique\n}\n\nexport class EnergyService {\n  private energy: number;\n  private maxEnergy: number;\n  private metabolismRate: number;\n  private config: MetabolismConfig;\n  private history: EnergyEvent[] = [];\n  private listeners: ((event: EnergyEvent) => void)[] = [];\n  private regenerationTimer: NodeJS.Timeout | null = null;\n\n  constructor(initialEnergy = 100, config?: Partial<MetabolismConfig>) {\n    this.config = {\n      baseRegenRate: 1,     // 1 point par seconde\n      maxEnergy: 100,       // Maximum 100\n      decayRate: 0.1,       // 0.1 point par seconde\n      efficiencyFactor: 1,  // Efficacité normale\n      ...config\n    };\n\n    this.maxEnergy = this.config.maxEnergy;\n    this.energy = Math.min(initialEnergy, this.maxEnergy);\n    this.metabolismRate = this.config.baseRegenRate;\n    \n    this.startMetabolism();\n  }\n\n  /**\n   * Démarre le processus métabolique automatique\n   */\n  private startMetabolism(): void {\n    if (this.regenerationTimer) return;\n\n    this.regenerationTimer = setInterval(() => {\n      this.passiveRegeneration();\n    }, 1000); // Toutes les secondes\n  }\n\n  /**\n   * Arrête le processus métabolique\n   */\n  stopMetabolism(): void {\n    if (this.regenerationTimer) {\n      clearInterval(this.regenerationTimer);\n      this.regenerationTimer = null;\n    }\n  }\n\n  /**\n   * Régénération passive d'énergie\n   */\n  private passiveRegeneration(): void {\n    const netRegen = this.metabolismRate * this.config.efficiencyFactor - this.config.decayRate;\n    \n    if (netRegen > 0 && this.energy < this.maxEnergy) {\n      const oldEnergy = this.energy;\n      this.energy = Math.min(this.maxEnergy, this.energy + netRegen);\n      \n      this.recordEvent({\n        type: 'regeneration',\n        amount: this.energy - oldEnergy,\n        source: 'passive_metabolism',\n        timestamp: Date.now(),\n        energyBefore: oldEnergy,\n        energyAfter: this.energy\n      });\n    } else if (netRegen < 0) {\n      const oldEnergy = this.energy;\n      this.energy = Math.max(0, this.energy + netRegen);\n      \n      this.recordEvent({\n        type: 'drain',\n        amount: Math.abs(netRegen),\n        source: 'natural_decay',\n        timestamp: Date.now(),\n        energyBefore: oldEnergy,\n        energyAfter: this.energy\n      });\n    }\n  }\n\n  /**\n   * Consomme de l'énergie\n   */\n  consumeEnergy(amount: number, source = 'unknown'): boolean {\n    if (amount <= 0) return true;\n    if (this.energy < amount) return false;\n\n    const oldEnergy = this.energy;\n    this.energy -= amount;\n\n    this.recordEvent({\n      type: 'consumption',\n      amount,\n      source,\n      timestamp: Date.now(),\n      energyBefore: oldEnergy,\n      energyAfter: this.energy\n    });\n\n    return true;\n  }\n\n  /**\n   * Tente de consommer de l'énergie (même si insuffisante)\n   */\n  forceConsumeEnergy(amount: number, source = 'forced'): number {\n    const oldEnergy = this.energy;\n    const actualConsumption = Math.min(amount, this.energy);\n    this.energy -= actualConsumption;\n\n    this.recordEvent({\n      type: 'consumption',\n      amount: actualConsumption,\n      source,\n      timestamp: Date.now(),\n      energyBefore: oldEnergy,\n      energyAfter: this.energy\n    });\n\n    return actualConsumption;\n  }\n\n  /**\n   * Ajoute de l'énergie (boost)\n   */\n  addEnergy(amount: number, source = 'boost'): void {\n    if (amount <= 0) return;\n\n    const oldEnergy = this.energy;\n    this.energy = Math.min(this.maxEnergy, this.energy + amount);\n\n    this.recordEvent({\n      type: 'boost',\n      amount: this.energy - oldEnergy,\n      source,\n      timestamp: Date.now(),\n      energyBefore: oldEnergy,\n      energyAfter: this.energy\n    });\n  }\n\n  /**\n   * Régénération manuelle d'énergie\n   */\n  regenerateEnergy(amount?: number): void {\n    const regenAmount = amount || this.metabolismRate;\n    this.addEnergy(regenAmount, 'manual_regeneration');\n  }\n\n  /**\n   * Obtient le niveau d'énergie actuel\n   */\n  getEnergyLevel(): number {\n    return this.energy;\n  }\n\n  /**\n   * Obtient le niveau d'énergie en pourcentage\n   */\n  getEnergyPercentage(): number {\n    return (this.energy / this.maxEnergy) * 100;\n  }\n\n  /**\n   * Obtient l'énergie maximale\n   */\n  getMaxEnergy(): number {\n    return this.maxEnergy;\n  }\n\n  /**\n   * Vérifie si l'organisme a assez d'énergie\n   */\n  hasEnergy(amount: number): boolean {\n    return this.energy >= amount;\n  }\n\n  /**\n   * Vérifie si l'organisme est épuisé\n   */\n  isExhausted(): boolean {\n    return this.energy === 0;\n  }\n\n  /**\n   * Vérifie si l'organisme est à pleine énergie\n   */\n  isFullEnergy(): boolean {\n    return this.energy === this.maxEnergy;\n  }\n\n  /**\n   * Met à jour le taux de métabolisme\n   */\n  setMetabolismRate(rate: number): void {\n    this.metabolismRate = Math.max(0, rate);\n  }\n\n  /**\n   * Ajuste l'efficacité métabolique\n   */\n  setEfficiency(factor: number): void {\n    this.config.efficiencyFactor = Math.max(0.1, Math.min(2, factor));\n  }\n\n  /**\n   * Augmente l'énergie maximale\n   */\n  increaseMaxEnergy(amount: number): void {\n    this.maxEnergy += amount;\n    this.config.maxEnergy = this.maxEnergy;\n  }\n\n  /**\n   * Enregistre un événement d'énergie\n   */\n  private recordEvent(event: EnergyEvent): void {\n    this.history.push(event);\n    \n    // Limite l'historique pour éviter la consommation mémoire\n    if (this.history.length > 1000) {\n      this.history.splice(0, 100); // Supprime les 100 plus anciens\n    }\n\n    // Notifie les listeners\n    this.listeners.forEach(listener => listener(event));\n  }\n\n  /**\n   * Obtient l'historique d'énergie\n   */\n  getEnergyHistory(limit = 50): EnergyEvent[] {\n    return this.history.slice(-limit);\n  }\n\n  /**\n   * Obtient les statistiques d'énergie\n   */\n  getEnergyStats(): {\n    current: number;\n    max: number;\n    percentage: number;\n    metabolismRate: number;\n    efficiency: number;\n    totalConsumed: number;\n    totalRegenerated: number;\n  } {\n    const consumptionEvents = this.history.filter(e => e.type === 'consumption');\n    const regenerationEvents = this.history.filter(e => e.type === 'regeneration' || e.type === 'boost');\n\n    const totalConsumed = consumptionEvents.reduce((sum, e) => sum + e.amount, 0);\n    const totalRegenerated = regenerationEvents.reduce((sum, e) => sum + e.amount, 0);\n\n    return {\n      current: this.energy,\n      max: this.maxEnergy,\n      percentage: this.getEnergyPercentage(),\n      metabolismRate: this.metabolismRate,\n      efficiency: this.config.efficiencyFactor,\n      totalConsumed,\n      totalRegenerated\n    };\n  }\n\n  /**\n   * Ajoute un listener pour les événements d'énergie\n   */\n  addEnergyListener(listener: (event: EnergyEvent) => void): void {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Supprime un listener\n   */\n  removeEnergyListener(listener: (event: EnergyEvent) => void): void {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Nettoyage de l'historique ancien\n   */\n  cleanup(maxAge = 24 * 60 * 60 * 1000): void {\n    const cutoff = Date.now() - maxAge;\n    this.history = this.history.filter(event => event.timestamp > cutoff);\n  }\n\n  /**\n   * Sérialisation pour sauvegarde\n   */\n  toJSON(): {\n    energy: number;\n    maxEnergy: number;\n    metabolismRate: number;\n    config: MetabolismConfig;\n    history: EnergyEvent[];\n  } {\n    return {\n      energy: this.energy,\n      maxEnergy: this.maxEnergy,\n      metabolismRate: this.metabolismRate,\n      config: { ...this.config },\n      history: [...this.history]\n    };\n  }\n\n  /**\n   * Restauration depuis JSON\n   */\n  fromJSON(data: {\n    energy: number;\n    maxEnergy: number;\n    metabolismRate: number;\n    config: MetabolismConfig;\n    history: EnergyEvent[];\n  }): void {\n    this.energy = data.energy;\n    this.maxEnergy = data.maxEnergy;\n    this.metabolismRate = data.metabolismRate;\n    this.config = { ...data.config };\n    this.history = [...data.history];\n  }\n\n  /**\n   * Nettoyage lors de la destruction\n   */\n  destroy(): void {\n    this.stopMetabolism();\n    this.listeners = [];\n    this.history = [];\n  }\n}"],"version":3}