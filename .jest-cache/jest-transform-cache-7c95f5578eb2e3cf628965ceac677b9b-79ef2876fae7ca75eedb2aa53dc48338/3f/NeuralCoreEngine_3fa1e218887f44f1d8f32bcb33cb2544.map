{"version":3,"names":["cov_1iqcwmdb4n","actualCoverage","s","HebbieanLearningSystem_1","require","BehaviorPredictor_1","GeneticMutator_1","ErrorHandler_1","secureRandom_1","NeuralCoreEngine","constructor","memoryBank","f","initialized","organisms","Map","hebbian","HebbieanLearningSystem","predictor","BehaviorPredictor","mutator","GeneticMutator","initialize","console","log","error","errorHandler","logSimpleError","createOrganism","userId","dna","generateDNA","organism","id","generation","health","energy","consciousness","traits","curiosity","SecureRandom","random","focus","rhythm","empathy","creativity","resilience","adaptability","memory","intuition","mutations","socialConnections","memoryFragments","birthTime","Date","now","lastMutation","createdAt","set","saveOrganismState","evolveOrganism","behaviorData","get","b","history","loadOrganismHistory","states","length","loadedOrganism","Error","learningResult","updateWeights","pattern","intensity","timeSpent","interactions","mutation","generateMutation","push","newPatterns","patternMutation","randomMutation","applyMutation","predictNextAction","context","prediction","enrichedPrediction","action","confidence","calculateConfidence","alternatives","generateSuggestions","reasoning","toFixed","hash","simpleHash","genes","i","Math","floor","str","char","charCodeAt","abs","trait","currentValue","newValue","max","min","delta","mutationsLength","experienceBonus","focusBonus","wisdomBonus","wisdom","suggestions","slice","getOrganism","loadOrganism","getAllOrganisms","Array","from","values","isInitialized","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/NeuralCoreEngine.ts"],"sourcesContent":["import { OrganismMemoryBank } from '../background/OrganismMemoryBank'\r\nimport { HebbieanLearningSystem } from './HebbieanLearningSystem'\r\nimport { BehaviorPredictor } from '../behavioral/core/BehaviorPredictor'\r\nimport { GeneticMutator } from './GeneticMutator'\r\nimport { OrganismState, BehaviorPattern, Mutation, PageContext, ActionPrediction } from '../shared/types/organism'\r\nimport { errorHandler } from '../core/utils/ErrorHandler'\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nexport class NeuralCoreEngine {\r\n  private organisms: Map<string, OrganismState>\r\n  private hebbian: HebbieanLearningSystem\r\n  private predictor: BehaviorPredictor\r\n  private mutator: GeneticMutator\r\n  private memoryBank: OrganismMemoryBank\r\n  private initialized: boolean = false\r\n\r\n  constructor(memoryBank: OrganismMemoryBank) {\r\n    this.memoryBank = memoryBank\r\n    this.organisms = new Map()\r\n    this.hebbian = new HebbieanLearningSystem()\r\n    this.predictor = new BehaviorPredictor()\r\n    this.mutator = new GeneticMutator()\r\n    this.initialize()\r\n  }\r\n\r\n  private async initialize(): Promise<void> {\r\n    try {\r\n      // Charger les organismes depuis la m√©moire (utiliser la m√©thode existante)\r\n      // Note: Comme retrieveOrganisms n'existe pas, on va cr√©er une logique alternative\r\n      this.initialized = true\r\n      console.log(`üß† NeuralCoreEngine initialis√©`)\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'initialize', error, 'warning')\r\n      this.initialized = true // Continue m√™me en cas d'erreur\r\n    }\r\n  }\r\n\r\n  async createOrganism(userId: string): Promise<OrganismState> {\r\n    try {\r\n      // G√©n√©rer un ADN unique bas√© sur l'ID utilisateur et un timestamp\r\n      const dna = this.generateDNA(userId)\r\n      \r\n      // Cr√©er un nouvel organisme avec des traits al√©atoires mais √©quilibr√©s\r\n      const organism: OrganismState = {\r\n        id: userId,\r\n        dna,\r\n        generation: 1,\r\n        health: 1.0,\r\n        energy: 1.0,\r\n        consciousness: 0.5,\r\n        traits: {\r\n          curiosity: 0.4 + SecureRandom.random() * 0.2,      // 0.4-0.6\r\n          focus: 0.4 + SecureRandom.random() * 0.2,          // 0.4-0.6\r\n          rhythm: 0.4 + SecureRandom.random() * 0.2,         // 0.4-0.6\r\n          empathy: 0.4 + SecureRandom.random() * 0.2,        // 0.4-0.6\r\n          creativity: 0.4 + SecureRandom.random() * 0.2,     // 0.4-0.6\r\n          resilience: 0.4 + SecureRandom.random() * 0.2,     // 0.4-0.6\r\n          adaptability: 0.4 + SecureRandom.random() * 0.2,   // 0.4-0.6\r\n          memory: 0.4 + SecureRandom.random() * 0.2,         // 0.4-0.6\r\n          intuition: 0.1 + SecureRandom.random() * 0.1       // 0.1-0.2 (plus rare)\r\n        },\r\n        mutations: [],\r\n        socialConnections: [],\r\n        memoryFragments: [],\r\n        birthTime: Date.now(),\r\n        lastMutation: null,\r\n        createdAt: Date.now()\r\n      }\r\n\r\n      // Sauvegarder dans la m√©moire (utiliser la m√©thode existante)\r\n      this.organisms.set(userId, organism)\r\n      await this.memoryBank.saveOrganismState(userId, organism)\r\n\r\n      console.log(`üå± Nouvel organisme cr√©√© pour ${userId}`)\r\n      return organism\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'createOrganism', error, 'error')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async evolveOrganism(id: string, behaviorData: BehaviorPattern[]): Promise<Mutation[]> {\r\n    try {\r\n      const organism = this.organisms.get(id)\r\n      if (!organism) {\r\n        // Essayer de charger depuis la m√©moire\r\n        const history = await this.memoryBank.loadOrganismHistory(id)\r\n        if (history.states.length > 0) {\r\n          const loadedOrganism = history.states[0]\r\n          this.organisms.set(id, loadedOrganism)\r\n          return this.evolveOrganism(id, behaviorData) // Retry\r\n        }\r\n        throw new Error(`Organisme ${id} non trouv√©`)\r\n      }\r\n\r\n      // Analyser les patterns de comportement avec le syst√®me Hebbien\r\n      const learningResult = await this.hebbian.updateWeights(behaviorData)\r\n      const mutations: Mutation[] = []\r\n      \r\n      // Mutation de traits bas√©e sur l'activit√©\r\n      for (const pattern of behaviorData) {\r\n        // Analyser l'intensit√© d'interaction (timeSpent + interactions)\r\n        const intensity = (pattern.timeSpent / 60000) + (pattern.interactions * 0.1) // Normaliser\r\n        if (intensity > 0.7) { // Pattern intense\r\n          const mutation = this.mutator.generateMutation('curiosity', 'high_activity')\r\n          if (mutation) {\r\n            mutations.push(mutation)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Mutation bas√©e sur l'apprentissage Hebbien\r\n      if (learningResult.newPatterns.length > 0) {\r\n        const patternMutation = this.mutator.generateMutation('focus', 'pattern_learning')\r\n        if (patternMutation) {\r\n          mutations.push(patternMutation)\r\n        }\r\n      }\r\n\r\n      // Mutation al√©atoire occasionnelle (1% de chance)\r\n      if (SecureRandom.random() < 0.01) {\r\n        const randomMutation = this.mutator.generateMutation('energy', 'random')\r\n        if (randomMutation) {\r\n          mutations.push(randomMutation)\r\n        }\r\n      }\r\n\r\n      // Appliquer les mutations √† l'organisme\r\n      for (const mutation of mutations) {\r\n        this.applyMutation(organism, mutation)\r\n      }\r\n\r\n      // Mettre √† jour l'organisme\r\n      organism.lastMutation = Date.now()\r\n      if (!organism.mutations) {\r\n        organism.mutations = [];\r\n      }\r\n      organism.mutations.push(...mutations)\r\n      this.organisms.set(id, organism)\r\n      \r\n      // Sauvegarder\r\n      await this.memoryBank.saveOrganismState(id, organism)\r\n\r\n      console.log(`üß¨ ${mutations.length} mutations appliqu√©es √† l'organisme ${id}`)\r\n      return mutations\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'evolveOrganism', error, 'error')\r\n      return []\r\n    }\r\n  }\r\n\r\n  async predictNextAction(id: string, context: PageContext): Promise<ActionPrediction> {\r\n    try {\r\n      const organism = this.organisms.get(id)\r\n      if (!organism) {\r\n        throw new Error(`Organisme ${id} non trouv√©`)\r\n      }\r\n\r\n      // Utiliser le pr√©dicteur comportemental (m√©thode existante)\r\n      const prediction = this.predictor.predictNextAction(organism, context)\r\n      \r\n      // Enrichir avec les traits de l'organisme\r\n      const enrichedPrediction: ActionPrediction = {\r\n        action: prediction.action || 'browse',\r\n        confidence: this.calculateConfidence(organism, context),\r\n        alternatives: this.generateSuggestions(organism, context),\r\n        reasoning: `Bas√© sur les traits: curiosit√©=${organism.traits.curiosity.toFixed(2)}, focus=${organism.traits.focus.toFixed(2)}`\r\n      }\r\n\r\n      console.log(`üîÆ Pr√©diction g√©n√©r√©e pour ${id}: ${enrichedPrediction.action}`)\r\n      return enrichedPrediction\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'predictNextAction', error, 'error')\r\n      \r\n      // Pr√©diction fallback\r\n      return {\r\n        action: 'browse',\r\n        confidence: 0.3,\r\n        alternatives: ['browse', 'search'],\r\n        reasoning: 'Fallback prediction due to error'\r\n      }\r\n    }\r\n  }\r\n\r\n  // M√©thodes utilitaires priv√©es\r\n  private generateDNA(userId: string): string {\r\n    let hash = this.simpleHash(userId + Date.now())\r\n    const genes = ['A', 'T', 'G', 'C']\r\n    let dna = 'SYM'\r\n    \r\n    for (let i = 0; i < 16; i++) {\r\n      dna += genes[hash % 4]\r\n      hash = Math.floor(hash / 4)\r\n    }\r\n    \r\n    return dna\r\n  }\r\n\r\n  private simpleHash(str: string): number {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash)\r\n  }\r\n\r\n  private applyMutation(organism: OrganismState, mutation: Mutation): void {\r\n    // Appliquer la mutation bas√©e sur le trait\r\n    if (organism.traits[mutation.trait]) {\r\n      const currentValue = organism.traits[mutation.trait]\r\n      const newValue = Math.max(0, Math.min(1, currentValue + mutation.delta))\r\n      organism.traits[mutation.trait] = newValue\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Param√®tre r√©serv√© pour usage futur\r\n  private calculateConfidence(organism: OrganismState, context: PageContext): number {\r\n    // Base confidence sur l'exp√©rience (nombre de mutations = exp√©rience)\r\n    const mutationsLength = organism.mutations ? organism.mutations.length : 0;\r\n    const experienceBonus = Math.min(0.3, mutationsLength * 0.01)\r\n    \r\n    // Bonus pour les traits pertinents\r\n    const focusBonus = organism.traits.focus * 0.2\r\n    const wisdomBonus = (organism.traits.wisdom || 0.1) * 0.3\r\n    \r\n    return Math.min(0.95, 0.4 + experienceBonus + focusBonus + wisdomBonus)\r\n  }\r\n\r\n  // @ts-expect-error Param√®tre r√©serv√© pour usage futur\r\n  private generateSuggestions(organism: OrganismState, context: PageContext): string[] {\r\n    const suggestions = ['browse']\r\n    \r\n    if (organism.traits.curiosity > 0.6) {\r\n      suggestions.push('explore', 'discover')\r\n    }\r\n    if (organism.traits.focus > 0.7) {\r\n      suggestions.push('focus', 'deep_read')\r\n    }\r\n    if (organism.traits.creativity > 0.6) {\r\n      suggestions.push('create', 'imagine')\r\n    }\r\n    \r\n    return suggestions.slice(0, 3) // Limiter √† 3 suggestions\r\n  }\r\n\r\n  // M√©thodes publiques pour l'acc√®s aux organismes\r\n  getOrganism(id: string): OrganismState | undefined {\r\n    return this.organisms.get(id)\r\n  }\r\n\r\n  async loadOrganism(id: string): Promise<OrganismState | null> {\r\n    try {\r\n      const history = await this.memoryBank.loadOrganismHistory(id)\r\n      if (history.states.length > 0) {\r\n        const organism = history.states[0]\r\n        this.organisms.set(id, organism)\r\n        return organism\r\n      }\r\n      return null\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'loadOrganism', error, 'error')\r\n      return null\r\n    }\r\n  }\r\n\r\n  getAllOrganisms(): OrganismState[] {\r\n    return Array.from(this.organisms.values())\r\n  }\r\n\r\n  async isInitialized(): Promise<boolean> {\r\n    return this.initialized\r\n  }\r\n} "],"mappingsqBQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AApBR,MAAAC,wBAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,mBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,gBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA,MAAAG,cAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAI,cAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA,MAAaK,gBAAgB;EAQ3BC,YAAYC,UAA8B;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAFlC,KAAAW,WAAW,GAAY,KAAK;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAGlC,IAAI,CAACS,UAAU,GAAGA,UAAU;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAC5B,IAAI,CAACY,SAAS,GAAG,IAAIC,GAAG,EAAE;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACc,OAAO,GAAG,IAAIb,wBAAA,CAAAc,sBAAsB,EAAE;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC3C,IAAI,CAACgB,SAAS,GAAG,IAAIb,mBAAA,CAAAc,iBAAiB,EAAE;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACxC,IAAI,CAACkB,OAAO,GAAG,IAAId,gBAAA,CAAAe,cAAc,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACnC,IAAI,CAACoB,UAAU,EAAE;EACnB;EAEQ,MAAMA,UAAUA,CAAA;IAAA;IAAAtB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACtB,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA;MACA,IAAI,CAACW,WAAW,GAAG,IAAI;MAAA;MAAAb,cAAA,GAAAE,CAAA;MACvBqB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACdK,cAAA,CAAAmB,YAAY,CAACC,cAAc,CAAC,kBAAkB,EAAE,YAAY,EAAEF,KAAK,EAAE,SAAS,CAAC;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC/E,IAAI,CAACW,WAAW,GAAG,IAAI,EAAC;IAC1B;EACF;EAEA,MAAMe,cAAcA,CAACC,MAAc;IAAA;IAAA7B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACjC,IAAI;MACF;MACA,MAAM4B,GAAG;MAAA;MAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC6B,WAAW,CAACF,MAAM,CAAC;MAEpC;MACA,MAAMG,QAAQ;MAAA;MAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAkB;QAC9B+B,EAAE,EAAEJ,MAAM;QACVC,GAAG;QACHI,UAAU,EAAE,CAAC;QACbC,MAAM,EAAE,GAAG;QACXC,MAAM,EAAE,GAAG;QACXC,aAAa,EAAE,GAAG;QAClBC,MAAM,EAAE;UACNC,SAAS,EAAE,GAAG,GAAG/B,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAO;UACnDC,KAAK,EAAE,GAAG,GAAGlC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAW;UACnDE,MAAM,EAAE,GAAG,GAAGnC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAU;UACnDG,OAAO,EAAE,GAAG,GAAGpC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAS;UACnDI,UAAU,EAAE,GAAG,GAAGrC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAM;UACnDK,UAAU,EAAE,GAAG,GAAGtC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAM;UACnDM,YAAY,EAAE,GAAG,GAAGvC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAI;UACnDO,MAAM,EAAE,GAAG,GAAGxC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG;UAAU;UACnDQ,SAAS,EAAE,GAAG,GAAGzC,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,GAAG,CAAO;SACpD;QACDS,SAAS,EAAE,EAAE;QACbC,iBAAiB,EAAE,EAAE;QACrBC,eAAe,EAAE,EAAE;QACnBC,SAAS,EAAEC,IAAI,CAACC,GAAG,EAAE;QACrBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAEH,IAAI,CAACC,GAAG;OACpB;MAED;MAAA;MAAAvD,cAAA,GAAAE,CAAA;MACA,IAAI,CAACY,SAAS,CAAC4C,GAAG,CAAC7B,MAAM,EAAEG,QAAQ,CAAC;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MACpC,MAAM,IAAI,CAACS,UAAU,CAACgD,iBAAiB,CAAC9B,MAAM,EAAEG,QAAQ,CAAC;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MAEzDqB,OAAO,CAACC,GAAG,CAAC,iCAAiCK,MAAM,EAAE,CAAC;MAAA;MAAA7B,cAAA,GAAAE,CAAA;MACtD,OAAO8B,QAAQ;IACjB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACdK,cAAA,CAAAmB,YAAY,CAACC,cAAc,CAAC,kBAAkB,EAAE,gBAAgB,EAAEF,KAAK,EAAE,OAAO,CAAC;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACjF,MAAMuB,KAAK;IACb;EACF;EAEA,MAAMmC,cAAcA,CAAC3B,EAAU,EAAE4B,YAA+B;IAAA;IAAA7D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC9D,IAAI;MACF,MAAM8B,QAAQ;MAAA;MAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACY,SAAS,CAACgD,GAAG,CAAC7B,EAAE,CAAC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MACvC,IAAI,CAAC8B,QAAQ,EAAE;QAAA;QAAAhC,cAAA,GAAA+D,CAAA;QACb;QACA,MAAMC,OAAO;QAAA;QAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACS,UAAU,CAACsD,mBAAmB,CAAChC,EAAE,CAAC;QAAA;QAAAjC,cAAA,GAAAE,CAAA;QAC7D,IAAI8D,OAAO,CAACE,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAnE,cAAA,GAAA+D,CAAA;UAC7B,MAAMK,cAAc;UAAA;UAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG8D,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC;UAAA;UAAAlE,cAAA,GAAAE,CAAA;UACxC,IAAI,CAACY,SAAS,CAAC4C,GAAG,CAACzB,EAAE,EAAEmC,cAAc,CAAC;UAAA;UAAApE,cAAA,GAAAE,CAAA;UACtC,OAAO,IAAI,CAAC0D,cAAc,CAAC3B,EAAE,EAAE4B,YAAY,CAAC,EAAC;QAC/C,CAAC;QAAA;QAAA;UAAA7D,cAAA,GAAA+D,CAAA;QAAA;QAAA/D,cAAA,GAAAE,CAAA;QACD,MAAM,IAAImE,KAAK,CAAC,aAAapC,EAAE,aAAa,CAAC;MAC/C,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA+D,CAAA;MAAA;MAED;MACA,MAAMO,cAAc;MAAA;MAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACc,OAAO,CAACuD,aAAa,CAACV,YAAY,CAAC;MACrE,MAAMX,SAAS;MAAA;MAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAe,EAAE;MAEhC;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACA,KAAK,MAAMsE,OAAO,IAAIX,YAAY,EAAE;QAClC;QACA,MAAMY,SAAS;QAAA;QAAA,CAAAzE,cAAA,GAAAE,CAAA,QAAIsE,OAAO,CAACE,SAAS,GAAG,KAAK,GAAKF,OAAO,CAACG,YAAY,GAAG,GAAI,GAAC;QAAA;QAAA3E,cAAA,GAAAE,CAAA;QAC7E,IAAIuE,SAAS,GAAG,GAAG,EAAE;UAAA;UAAAzE,cAAA,GAAA+D,CAAA;UAAE;UACrB,MAAMa,QAAQ;UAAA;UAAA,CAAA5E,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACkB,OAAO,CAACyD,gBAAgB,CAAC,WAAW,EAAE,eAAe,CAAC;UAAA;UAAA7E,cAAA,GAAAE,CAAA;UAC5E,IAAI0E,QAAQ,EAAE;YAAA;YAAA5E,cAAA,GAAA+D,CAAA;YAAA/D,cAAA,GAAAE,CAAA;YACZgD,SAAS,CAAC4B,IAAI,CAACF,QAAQ,CAAC;UAC1B,CAAC;UAAA;UAAA;YAAA5E,cAAA,GAAA+D,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAA/D,cAAA,GAAA+D,CAAA;QAAA;MACH;MAEA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MACA,IAAIoE,cAAc,CAACS,WAAW,CAACZ,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAnE,cAAA,GAAA+D,CAAA;QACzC,MAAMiB,eAAe;QAAA;QAAA,CAAAhF,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACkB,OAAO,CAACyD,gBAAgB,CAAC,OAAO,EAAE,kBAAkB,CAAC;QAAA;QAAA7E,cAAA,GAAAE,CAAA;QAClF,IAAI8E,eAAe,EAAE;UAAA;UAAAhF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UACnBgD,SAAS,CAAC4B,IAAI,CAACE,eAAe,CAAC;QACjC,CAAC;QAAA;QAAA;UAAAhF,cAAA,GAAA+D,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAA/D,cAAA,GAAA+D,CAAA;MAAA;MAED;MAAA/D,cAAA,GAAAE,CAAA;MACA,IAAIM,cAAA,CAAAgC,YAAY,CAACC,MAAM,EAAE,GAAG,IAAI,EAAE;QAAA;QAAAzC,cAAA,GAAA+D,CAAA;QAChC,MAAMkB,cAAc;QAAA;QAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACkB,OAAO,CAACyD,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAAA;QAAA7E,cAAA,GAAAE,CAAA;QACxE,IAAI+E,cAAc,EAAE;UAAA;UAAAjF,cAAA,GAAA+D,CAAA;UAAA/D,cAAA,GAAAE,CAAA;UAClBgD,SAAS,CAAC4B,IAAI,CAACG,cAAc,CAAC;QAChC,CAAC;QAAA;QAAA;UAAAjF,cAAA,GAAA+D,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAA/D,cAAA,GAAA+D,CAAA;MAAA;MAED;MAAA/D,cAAA,GAAAE,CAAA;MACA,KAAK,MAAM0E,QAAQ,IAAI1B,SAAS,EAAE;QAAA;QAAAlD,cAAA,GAAAE,CAAA;QAChC,IAAI,CAACgF,aAAa,CAAClD,QAAQ,EAAE4C,QAAQ,CAAC;MACxC;MAEA;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MACA8B,QAAQ,CAACwB,YAAY,GAAGF,IAAI,CAACC,GAAG,EAAE;MAAA;MAAAvD,cAAA,GAAAE,CAAA;MAClC,IAAI,CAAC8B,QAAQ,CAACkB,SAAS,EAAE;QAAA;QAAAlD,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QACvB8B,QAAQ,CAACkB,SAAS,GAAG,EAAE;MACzB,CAAC;MAAA;MAAA;QAAAlD,cAAA,GAAA+D,CAAA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MACD8B,QAAQ,CAACkB,SAAS,CAAC4B,IAAI,CAAC,GAAG5B,SAAS,CAAC;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MACrC,IAAI,CAACY,SAAS,CAAC4C,GAAG,CAACzB,EAAE,EAAED,QAAQ,CAAC;MAEhC;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI,CAACS,UAAU,CAACgD,iBAAiB,CAAC1B,EAAE,EAAED,QAAQ,CAAC;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MAErDqB,OAAO,CAACC,GAAG,CAAC,MAAM0B,SAAS,CAACiB,MAAM,uCAAuClC,EAAE,EAAE,CAAC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAC9E,OAAOgD,SAAS;IAClB,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACdK,cAAA,CAAAmB,YAAY,CAACC,cAAc,CAAC,kBAAkB,EAAE,gBAAgB,EAAEF,KAAK,EAAE,OAAO,CAAC;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACjF,OAAO,EAAE;IACX;EACF;EAEA,MAAMiF,iBAAiBA,CAAClD,EAAU,EAAEmD,OAAoB;IAAA;IAAApF,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACtD,IAAI;MACF,MAAM8B,QAAQ;MAAA;MAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACY,SAAS,CAACgD,GAAG,CAAC7B,EAAE,CAAC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MACvC,IAAI,CAAC8B,QAAQ,EAAE;QAAA;QAAAhC,cAAA,GAAA+D,CAAA;QAAA/D,cAAA,GAAAE,CAAA;QACb,MAAM,IAAImE,KAAK,CAAC,aAAapC,EAAE,aAAa,CAAC;MAC/C,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA+D,CAAA;MAAA;MAED;MACA,MAAMsB,UAAU;MAAA;MAAA,CAAArF,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACgB,SAAS,CAACiE,iBAAiB,CAACnD,QAAQ,EAAEoD,OAAO,CAAC;MAEtE;MACA,MAAME,kBAAkB;MAAA;MAAA,CAAAtF,cAAA,GAAAE,CAAA,QAAqB;QAC3CqF,MAAM;QAAE;QAAA,CAAAvF,cAAA,GAAA+D,CAAA,WAAAsB,UAAU,CAACE,MAAM;QAAA;QAAA,CAAAvF,cAAA,GAAA+D,CAAA,WAAI,QAAQ;QACrCyB,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAACzD,QAAQ,EAAEoD,OAAO,CAAC;QACvDM,YAAY,EAAE,IAAI,CAACC,mBAAmB,CAAC3D,QAAQ,EAAEoD,OAAO,CAAC;QACzDQ,SAAS,EAAE,kCAAkC5D,QAAQ,CAACM,MAAM,CAACC,SAAS,CAACsD,OAAO,CAAC,CAAC,CAAC,WAAW7D,QAAQ,CAACM,MAAM,CAACI,KAAK,CAACmD,OAAO,CAAC,CAAC,CAAC;OAC7H;MAAA;MAAA7F,cAAA,GAAAE,CAAA;MAEDqB,OAAO,CAACC,GAAG,CAAC,8BAA8BS,EAAE,KAAKqD,kBAAkB,CAACC,MAAM,EAAE,CAAC;MAAA;MAAAvF,cAAA,GAAAE,CAAA;MAC7E,OAAOoF,kBAAkB;IAC3B,CAAC,CAAC,OAAO7D,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACdK,cAAA,CAAAmB,YAAY,CAACC,cAAc,CAAC,kBAAkB,EAAE,mBAAmB,EAAEF,KAAK,EAAE,OAAO,CAAC;MAEpF;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACA,OAAO;QACLqF,MAAM,EAAE,QAAQ;QAChBC,UAAU,EAAE,GAAG;QACfE,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAClCE,SAAS,EAAE;OACZ;IACH;EACF;EAEA;EACQ7D,WAAWA,CAACF,MAAc;IAAA;IAAA7B,cAAA,GAAAY,CAAA;IAChC,IAAIkF,IAAI;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC6F,UAAU,CAAClE,MAAM,GAAGyB,IAAI,CAACC,GAAG,EAAE,CAAC;IAC/C,MAAMyC,KAAK;IAAA;IAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAClC,IAAI4B,GAAG;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAG,KAAK;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEf,KAAK,IAAI+F,CAAC;IAAA;IAAA,CAAAjG,cAAA,GAAAE,CAAA,QAAG,CAAC,GAAE+F,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAAA;MAAAjG,cAAA,GAAAE,CAAA;MAC3B4B,GAAG,IAAIkE,KAAK,CAACF,IAAI,GAAG,CAAC,CAAC;MAAA;MAAA9F,cAAA,GAAAE,CAAA;MACtB4F,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,GAAG,CAAC,CAAC;IAC7B;IAAC;IAAA9F,cAAA,GAAAE,CAAA;IAED,OAAO4B,GAAG;EACZ;EAEQiE,UAAUA,CAACK,GAAW;IAAA;IAAApG,cAAA,GAAAY,CAAA;IAC5B,IAAIkF,IAAI;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAG,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACZ,KAAK,IAAI+F,CAAC;IAAA;IAAA,CAAAjG,cAAA,GAAAE,CAAA,QAAG,CAAC,GAAE+F,CAAC,GAAGG,GAAG,CAACjC,MAAM,EAAE8B,CAAC,EAAE,EAAE;MACnC,MAAMI,IAAI;MAAA;MAAA,CAAArG,cAAA,GAAAE,CAAA,QAAGkG,GAAG,CAACE,UAAU,CAACL,CAAC,CAAC;MAAA;MAAAjG,cAAA,GAAAE,CAAA;MAC9B4F,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAIO,IAAI;MAAA;MAAArG,cAAA,GAAAE,CAAA;MAClC4F,IAAI,GAAGA,IAAI,GAAGA,IAAI,EAAC;IACrB;IAAC;IAAA9F,cAAA,GAAAE,CAAA;IACD,OAAOgG,IAAI,CAACK,GAAG,CAACT,IAAI,CAAC;EACvB;EAEQZ,aAAaA,CAAClD,QAAuB,EAAE4C,QAAkB;IAAA;IAAA5E,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC/D;IACA,IAAI8B,QAAQ,CAACM,MAAM,CAACsC,QAAQ,CAAC4B,KAAK,CAAC,EAAE;MAAA;MAAAxG,cAAA,GAAA+D,CAAA;MACnC,MAAM0C,YAAY;MAAA;MAAA,CAAAzG,cAAA,GAAAE,CAAA,QAAG8B,QAAQ,CAACM,MAAM,CAACsC,QAAQ,CAAC4B,KAAK,CAAC;MACpD,MAAME,QAAQ;MAAA;MAAA,CAAA1G,cAAA,GAAAE,CAAA,QAAGgG,IAAI,CAACS,GAAG,CAAC,CAAC,EAAET,IAAI,CAACU,GAAG,CAAC,CAAC,EAAEH,YAAY,GAAG7B,QAAQ,CAACiC,KAAK,CAAC,CAAC;MAAA;MAAA7G,cAAA,GAAAE,CAAA;MACxE8B,QAAQ,CAACM,MAAM,CAACsC,QAAQ,CAAC4B,KAAK,CAAC,GAAGE,QAAQ;IAC5C,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAA+D,CAAA;IAAA;EACH;EAEA;EACQ0B,mBAAmBA,CAACzD,QAAuB,EAAEoD,OAAoB;IAAA;IAAApF,cAAA,GAAAY,CAAA;IACvE;IACA,MAAMkG,eAAe;IAAA;IAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAG8B,QAAQ,CAACkB,SAAS;IAAA;IAAA,CAAAlD,cAAA,GAAA+D,CAAA,WAAG/B,QAAQ,CAACkB,SAAS,CAACiB,MAAM;IAAA;IAAA,CAAAnE,cAAA,GAAA+D,CAAA,WAAG,CAAC;IAC1E,MAAMgD,eAAe;IAAA;IAAA,CAAA/G,cAAA,GAAAE,CAAA,QAAGgG,IAAI,CAACU,GAAG,CAAC,GAAG,EAAEE,eAAe,GAAG,IAAI,CAAC;IAE7D;IACA,MAAME,UAAU;IAAA;IAAA,CAAAhH,cAAA,GAAAE,CAAA,QAAG8B,QAAQ,CAACM,MAAM,CAACI,KAAK,GAAG,GAAG;IAC9C,MAAMuE,WAAW;IAAA;IAAA,CAAAjH,cAAA,GAAAE,CAAA,QAAG;IAAC;IAAA,CAAAF,cAAA,GAAA+D,CAAA,WAAA/B,QAAQ,CAACM,MAAM,CAAC4E,MAAM;IAAA;IAAA,CAAAlH,cAAA,GAAA+D,CAAA,WAAI,GAAG,KAAI,GAAG;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IAEzD,OAAOgG,IAAI,CAACU,GAAG,CAAC,IAAI,EAAE,GAAG,GAAGG,eAAe,GAAGC,UAAU,GAAGC,WAAW,CAAC;EACzE;EAEA;EACQtB,mBAAmBA,CAAC3D,QAAuB,EAAEoD,OAAoB;IAAA;IAAApF,cAAA,GAAAY,CAAA;IACvE,MAAMuG,WAAW;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAG,CAAC,QAAQ,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE9B,IAAI8B,QAAQ,CAACM,MAAM,CAACC,SAAS,GAAG,GAAG,EAAE;MAAA;MAAAvC,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MACnCiH,WAAW,CAACrC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC;IACzC,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAA+D,CAAA;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IACD,IAAI8B,QAAQ,CAACM,MAAM,CAACI,KAAK,GAAG,GAAG,EAAE;MAAA;MAAA1C,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MAC/BiH,WAAW,CAACrC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;IACxC,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAA+D,CAAA;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IACD,IAAI8B,QAAQ,CAACM,MAAM,CAACO,UAAU,GAAG,GAAG,EAAE;MAAA;MAAA7C,cAAA,GAAA+D,CAAA;MAAA/D,cAAA,GAAAE,CAAA;MACpCiH,WAAW,CAACrC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC;IACvC,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAA+D,CAAA;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IAED,OAAOiH,WAAW,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;EACjC;EAEA;EACAC,WAAWA,CAACpF,EAAU;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACpB,OAAO,IAAI,CAACY,SAAS,CAACgD,GAAG,CAAC7B,EAAE,CAAC;EAC/B;EAEA,MAAMqF,YAAYA,CAACrF,EAAU;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC3B,IAAI;MACF,MAAM8D,OAAO;MAAA;MAAA,CAAAhE,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAACS,UAAU,CAACsD,mBAAmB,CAAChC,EAAE,CAAC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAC7D,IAAI8D,OAAO,CAACE,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAnE,cAAA,GAAA+D,CAAA;QAC7B,MAAM/B,QAAQ;QAAA;QAAA,CAAAhC,cAAA,GAAAE,CAAA,SAAG8D,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC;QAAA;QAAAlE,cAAA,GAAAE,CAAA;QAClC,IAAI,CAACY,SAAS,CAAC4C,GAAG,CAACzB,EAAE,EAAED,QAAQ,CAAC;QAAA;QAAAhC,cAAA,GAAAE,CAAA;QAChC,OAAO8B,QAAQ;MACjB,CAAC;MAAA;MAAA;QAAAhC,cAAA,GAAA+D,CAAA;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MACD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOuB,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACdK,cAAA,CAAAmB,YAAY,CAACC,cAAc,CAAC,kBAAkB,EAAE,cAAc,EAAEF,KAAK,EAAE,OAAO,CAAC;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC/E,OAAO,IAAI;IACb;EACF;EAEAqH,eAAeA,CAAA;IAAA;IAAAvH,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACb,OAAOsH,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC3G,SAAS,CAAC4G,MAAM,EAAE,CAAC;EAC5C;EAEA,MAAMC,aAAaA,CAAA;IAAA;IAAA3H,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACjB,OAAO,IAAI,CAACW,WAAW;EACzB;;AACD;AAAAb,cAAA,GAAAE,CAAA;AA1QD0H,OAAA,CAAAnH,gBAAA,GAAAA,gBAAA","ignoreList":[]}