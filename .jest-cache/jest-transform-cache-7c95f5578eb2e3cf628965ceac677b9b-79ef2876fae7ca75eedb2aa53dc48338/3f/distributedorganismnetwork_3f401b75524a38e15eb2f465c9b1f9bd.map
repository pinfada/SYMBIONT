{"version":3,"names":["cov_2p5vbppycy","actualCoverage","s","secureRandom_1","require","secureLogger_1","DistributedOrganismNetwork","constructor","f","peers","Set","organismState","peerId","SecureRandom","random","toString","substr","channel","BroadcastChannel","onmessage","event","handleMessage","data","announce","postMessage","type","joinNetwork","add","SecureLogger","info","leaveNetwork","delete","broadcastMutation","mutation","from","size","receiveMutation","fromPeer","performCommunityBackup","state","msg","b","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/distributed-organism-network.ts"],"sourcesContent":["// social/distributed-organism-network.ts\r\n// Réseau distribué d'organismes (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\nimport { SecureLogger } from '@shared/utils/secureLogger';\n\r\nexport class DistributedOrganismNetwork {\r\n  private peers: Set<string> = new Set()\r\n  // @ts-expect-error État d'organisme réservé pour usage futur\r\n  private organismState: any = null\r\n  private channel: BroadcastChannel\r\n  private peerId: string\r\n\r\n  constructor() {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    this.channel = new BroadcastChannel('symbiont_network')\r\n    this.channel.onmessage = (event) => this.handleMessage(event.data)\r\n    // S'annonce à la création\r\n    this.announce()\r\n  }\r\n\r\n  private announce() {\r\n    this.channel.postMessage({ type: 'announce', peerId: this.peerId })\r\n  }\r\n\r\n  joinNetwork(peerId: string) {\r\n    this.peers.add(peerId)\r\n    this.channel.postMessage({ type: 'join', peerId: this.peerId })\r\n    SecureLogger.info(`[Network] Pair rejoint : ${peerId}`)\r\n  }\r\n\r\n  leaveNetwork(peerId: string) {\r\n    this.peers.delete(peerId)\r\n    this.channel.postMessage({ type: 'leave', peerId: this.peerId })\r\n    SecureLogger.info(`[Network] Pair quitté : ${peerId}`)\r\n  }\r\n\r\n  broadcastMutation(mutation: any) {\r\n    this.channel.postMessage({ type: 'mutation', from: this.peerId, mutation })\r\n    SecureLogger.info(`[Network] Diffusion mutation à ${this.peers.size} pairs`)\r\n  }\r\n\r\n  receiveMutation(mutation: any, fromPeer: string) {\r\n    // Appliquer la mutation reçue (log pour l'instant)\r\n    SecureLogger.info(`[Network] Mutation reçue de ${fromPeer}`, mutation)\r\n  }\r\n\r\n  performCommunityBackup(state: any) {\r\n    this.channel.postMessage({ type: 'backup', from: this.peerId, state })\r\n    SecureLogger.info(`[Network] Backup communautaire lancé`)\r\n  }\r\n\r\n  private handleMessage(msg: any) {\r\n    if (msg.peerId === this.peerId) return // Ignore self\r\n    switch (msg.type) {\r\n      case 'announce':\r\n        this.peers.add(msg.peerId)\r\n        break\r\n      case 'join':\r\n        this.peers.add(msg.peerId)\r\n        break\r\n      case 'leave':\r\n        this.peers.delete(msg.peerId)\r\n        break\r\n      case 'mutation':\r\n        this.receiveMutation(msg.mutation, msg.from)\r\n        break\r\n      case 'backup':\r\n        // Pour l'instant, log seulement\r\n        SecureLogger.info(`[Network] Backup reçu de ${msg.from}`, msg.state)\r\n        break\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}