d1be09de44408fb2662344210cad38b5
"use strict";

/* istanbul ignore next */
function cov_1iqcwmdb4n() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/NeuralCoreEngine.ts";
  var hash = "7dba2c816cb4e9aa9d1a205f85b1c12a6db305e3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/NeuralCoreEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 33
        },
        end: {
          line: 4,
          column: 68
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 75
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "6": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 77
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 61
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 26
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "15": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "16": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 58
        }
      },
      "17": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 107
        }
      },
      "18": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "19": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "20": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "21": {
        start: {
          line: 36,
          column: 29
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 49
        }
      },
      "23": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 70
        }
      },
      "24": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 67
        }
      },
      "25": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 28
        }
      },
      "26": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 109
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "28": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "29": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 51
        }
      },
      "30": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "31": {
        start: {
          line: 77,
          column: 32
        },
        end: {
          line: 77,
          column: 77
        }
      },
      "32": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "33": {
        start: {
          line: 79,
          column: 43
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "34": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 59
        }
      },
      "35": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 65
        }
      },
      "36": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 62
        }
      },
      "37": {
        start: {
          line: 86,
          column: 35
        },
        end: {
          line: 86,
          column: 81
        }
      },
      "38": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 87,
          column: 32
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "40": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 91,
          column: 92
        }
      },
      "41": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "42": {
        start: {
          line: 93,
          column: 37
        },
        end: {
          line: 93,
          column: 96
        }
      },
      "43": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 96,
          column: 21
        }
      },
      "44": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "45": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "46": {
        start: {
          line: 101,
          column: 40
        },
        end: {
          line: 101,
          column: 98
        }
      },
      "47": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 104,
          column: 17
        }
      },
      "48": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "49": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "50": {
        start: {
          line: 108,
          column: 39
        },
        end: {
          line: 108,
          column: 88
        }
      },
      "51": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "52": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 51
        }
      },
      "53": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "54": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 55
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 47
        }
      },
      "56": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "57": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 40
        }
      },
      "58": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 50
        }
      },
      "59": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 45
        }
      },
      "60": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 66
        }
      },
      "61": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 91
        }
      },
      "62": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 29
        }
      },
      "63": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 109
        }
      },
      "64": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 22
        }
      },
      "65": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "66": {
        start: {
          line: 136,
          column: 29
        },
        end: {
          line: 136,
          column: 51
        }
      },
      "67": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "68": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 62
        }
      },
      "69": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 141,
          column: 82
        }
      },
      "70": {
        start: {
          line: 143,
          column: 39
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "71": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 90
        }
      },
      "72": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 38
        }
      },
      "73": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 112
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "75": {
        start: {
          line: 165,
          column: 19
        },
        end: {
          line: 165,
          column: 55
        }
      },
      "76": {
        start: {
          line: 166,
          column: 22
        },
        end: {
          line: 166,
          column: 42
        }
      },
      "77": {
        start: {
          line: 167,
          column: 18
        },
        end: {
          line: 167,
          column: 23
        }
      },
      "78": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "79": {
        start: {
          line: 168,
          column: 21
        },
        end: {
          line: 168,
          column: 22
        }
      },
      "80": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 35
        }
      },
      "81": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 40
        }
      },
      "82": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 19
        }
      },
      "83": {
        start: {
          line: 175,
          column: 19
        },
        end: {
          line: 175,
          column: 20
        }
      },
      "84": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "85": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "86": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 177,
          column: 42
        }
      },
      "87": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 47
        }
      },
      "88": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 31
        }
      },
      "89": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 30
        }
      },
      "90": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "91": {
        start: {
          line: 186,
          column: 33
        },
        end: {
          line: 186,
          column: 64
        }
      },
      "92": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 84
        }
      },
      "93": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 55
        }
      },
      "94": {
        start: {
          line: 194,
          column: 32
        },
        end: {
          line: 194,
          column: 82
        }
      },
      "95": {
        start: {
          line: 195,
          column: 32
        },
        end: {
          line: 195,
          column: 69
        }
      },
      "96": {
        start: {
          line: 197,
          column: 27
        },
        end: {
          line: 197,
          column: 54
        }
      },
      "97": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 198,
          column: 65
        }
      },
      "98": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 80
        }
      },
      "99": {
        start: {
          line: 203,
          column: 28
        },
        end: {
          line: 203,
          column: 38
        }
      },
      "100": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "101": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 52
        }
      },
      "102": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "103": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 51
        }
      },
      "104": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "105": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 50
        }
      },
      "106": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 39
        }
      },
      "107": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 38
        }
      },
      "108": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "109": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 221,
          column: 73
        }
      },
      "110": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 226,
          column: 13
        }
      },
      "111": {
        start: {
          line: 223,
          column: 33
        },
        end: {
          line: 223,
          column: 50
        }
      },
      "112": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 49
        }
      },
      "113": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 32
        }
      },
      "114": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 24
        }
      },
      "115": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 107
        }
      },
      "116": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "117": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 51
        }
      },
      "118": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 32
        }
      },
      "119": {
        start: {
          line: 241,
          column: 0
        },
        end: {
          line: 241,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 28
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 43
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 41
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 164
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 174
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 183
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 43
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 192
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 43
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 202
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 216
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 219
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 22
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 234
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 26
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "1": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 96,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 96,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "10": {
        loc: {
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 144,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 144,
            column: 41
          }
        }, {
          start: {
            line: 144,
            column: 45
          },
          end: {
            line: 144,
            column: 53
          }
        }],
        line: 144
      },
      "11": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "12": {
        loc: {
          start: {
            line: 194,
            column: 32
          },
          end: {
            line: 194,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 53
          },
          end: {
            line: 194,
            column: 78
          }
        }, {
          start: {
            line: 194,
            column: 81
          },
          end: {
            line: 194,
            column: 82
          }
        }],
        line: 194
      },
      "13": {
        loc: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 51
          }
        }, {
          start: {
            line: 198,
            column: 55
          },
          end: {
            line: 198,
            column: 58
          }
        }],
        line: 198
      },
      "14": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "15": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "16": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "17": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/NeuralCoreEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/NeuralCoreEngine.ts"],
      sourcesContent: ["import { OrganismMemoryBank } from '../background/OrganismMemoryBank'\r\nimport { HebbieanLearningSystem } from './HebbieanLearningSystem'\r\nimport { BehaviorPredictor } from '../behavioral/core/BehaviorPredictor'\r\nimport { GeneticMutator } from './GeneticMutator'\r\nimport { OrganismState, BehaviorPattern, Mutation, PageContext, ActionPrediction } from '../shared/types/organism'\r\nimport { errorHandler } from '../core/utils/ErrorHandler'\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nexport class NeuralCoreEngine {\r\n  private organisms: Map<string, OrganismState>\r\n  private hebbian: HebbieanLearningSystem\r\n  private predictor: BehaviorPredictor\r\n  private mutator: GeneticMutator\r\n  private memoryBank: OrganismMemoryBank\r\n  private initialized: boolean = false\r\n\r\n  constructor(memoryBank: OrganismMemoryBank) {\r\n    this.memoryBank = memoryBank\r\n    this.organisms = new Map()\r\n    this.hebbian = new HebbieanLearningSystem()\r\n    this.predictor = new BehaviorPredictor()\r\n    this.mutator = new GeneticMutator()\r\n    this.initialize()\r\n  }\r\n\r\n  private async initialize(): Promise<void> {\r\n    try {\r\n      // Charger les organismes depuis la m\xE9moire (utiliser la m\xE9thode existante)\r\n      // Note: Comme retrieveOrganisms n'existe pas, on va cr\xE9er une logique alternative\r\n      this.initialized = true\r\n      console.log(`\uD83E\uDDE0 NeuralCoreEngine initialis\xE9`)\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'initialize', error, 'warning')\r\n      this.initialized = true // Continue m\xEAme en cas d'erreur\r\n    }\r\n  }\r\n\r\n  async createOrganism(userId: string): Promise<OrganismState> {\r\n    try {\r\n      // G\xE9n\xE9rer un ADN unique bas\xE9 sur l'ID utilisateur et un timestamp\r\n      const dna = this.generateDNA(userId)\r\n      \r\n      // Cr\xE9er un nouvel organisme avec des traits al\xE9atoires mais \xE9quilibr\xE9s\r\n      const organism: OrganismState = {\r\n        id: userId,\r\n        dna,\r\n        generation: 1,\r\n        health: 1.0,\r\n        energy: 1.0,\r\n        consciousness: 0.5,\r\n        traits: {\r\n          curiosity: 0.4 + SecureRandom.random() * 0.2,      // 0.4-0.6\r\n          focus: 0.4 + SecureRandom.random() * 0.2,          // 0.4-0.6\r\n          rhythm: 0.4 + SecureRandom.random() * 0.2,         // 0.4-0.6\r\n          empathy: 0.4 + SecureRandom.random() * 0.2,        // 0.4-0.6\r\n          creativity: 0.4 + SecureRandom.random() * 0.2,     // 0.4-0.6\r\n          resilience: 0.4 + SecureRandom.random() * 0.2,     // 0.4-0.6\r\n          adaptability: 0.4 + SecureRandom.random() * 0.2,   // 0.4-0.6\r\n          memory: 0.4 + SecureRandom.random() * 0.2,         // 0.4-0.6\r\n          intuition: 0.1 + SecureRandom.random() * 0.1       // 0.1-0.2 (plus rare)\r\n        },\r\n        mutations: [],\r\n        socialConnections: [],\r\n        memoryFragments: [],\r\n        birthTime: Date.now(),\r\n        lastMutation: null,\r\n        createdAt: Date.now()\r\n      }\r\n\r\n      // Sauvegarder dans la m\xE9moire (utiliser la m\xE9thode existante)\r\n      this.organisms.set(userId, organism)\r\n      await this.memoryBank.saveOrganismState(userId, organism)\r\n\r\n      console.log(`\uD83C\uDF31 Nouvel organisme cr\xE9\xE9 pour ${userId}`)\r\n      return organism\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'createOrganism', error, 'error')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async evolveOrganism(id: string, behaviorData: BehaviorPattern[]): Promise<Mutation[]> {\r\n    try {\r\n      const organism = this.organisms.get(id)\r\n      if (!organism) {\r\n        // Essayer de charger depuis la m\xE9moire\r\n        const history = await this.memoryBank.loadOrganismHistory(id)\r\n        if (history.states.length > 0) {\r\n          const loadedOrganism = history.states[0]\r\n          this.organisms.set(id, loadedOrganism)\r\n          return this.evolveOrganism(id, behaviorData) // Retry\r\n        }\r\n        throw new Error(`Organisme ${id} non trouv\xE9`)\r\n      }\r\n\r\n      // Analyser les patterns de comportement avec le syst\xE8me Hebbien\r\n      const learningResult = await this.hebbian.updateWeights(behaviorData)\r\n      const mutations: Mutation[] = []\r\n      \r\n      // Mutation de traits bas\xE9e sur l'activit\xE9\r\n      for (const pattern of behaviorData) {\r\n        // Analyser l'intensit\xE9 d'interaction (timeSpent + interactions)\r\n        const intensity = (pattern.timeSpent / 60000) + (pattern.interactions * 0.1) // Normaliser\r\n        if (intensity > 0.7) { // Pattern intense\r\n          const mutation = this.mutator.generateMutation('curiosity', 'high_activity')\r\n          if (mutation) {\r\n            mutations.push(mutation)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Mutation bas\xE9e sur l'apprentissage Hebbien\r\n      if (learningResult.newPatterns.length > 0) {\r\n        const patternMutation = this.mutator.generateMutation('focus', 'pattern_learning')\r\n        if (patternMutation) {\r\n          mutations.push(patternMutation)\r\n        }\r\n      }\r\n\r\n      // Mutation al\xE9atoire occasionnelle (1% de chance)\r\n      if (SecureRandom.random() < 0.01) {\r\n        const randomMutation = this.mutator.generateMutation('energy', 'random')\r\n        if (randomMutation) {\r\n          mutations.push(randomMutation)\r\n        }\r\n      }\r\n\r\n      // Appliquer les mutations \xE0 l'organisme\r\n      for (const mutation of mutations) {\r\n        this.applyMutation(organism, mutation)\r\n      }\r\n\r\n      // Mettre \xE0 jour l'organisme\r\n      organism.lastMutation = Date.now()\r\n      if (!organism.mutations) {\r\n        organism.mutations = [];\r\n      }\r\n      organism.mutations.push(...mutations)\r\n      this.organisms.set(id, organism)\r\n      \r\n      // Sauvegarder\r\n      await this.memoryBank.saveOrganismState(id, organism)\r\n\r\n      console.log(`\uD83E\uDDEC ${mutations.length} mutations appliqu\xE9es \xE0 l'organisme ${id}`)\r\n      return mutations\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'evolveOrganism', error, 'error')\r\n      return []\r\n    }\r\n  }\r\n\r\n  async predictNextAction(id: string, context: PageContext): Promise<ActionPrediction> {\r\n    try {\r\n      const organism = this.organisms.get(id)\r\n      if (!organism) {\r\n        throw new Error(`Organisme ${id} non trouv\xE9`)\r\n      }\r\n\r\n      // Utiliser le pr\xE9dicteur comportemental (m\xE9thode existante)\r\n      const prediction = this.predictor.predictNextAction(organism, context)\r\n      \r\n      // Enrichir avec les traits de l'organisme\r\n      const enrichedPrediction: ActionPrediction = {\r\n        action: prediction.action || 'browse',\r\n        confidence: this.calculateConfidence(organism, context),\r\n        alternatives: this.generateSuggestions(organism, context),\r\n        reasoning: `Bas\xE9 sur les traits: curiosit\xE9=${organism.traits.curiosity.toFixed(2)}, focus=${organism.traits.focus.toFixed(2)}`\r\n      }\r\n\r\n      console.log(`\uD83D\uDD2E Pr\xE9diction g\xE9n\xE9r\xE9e pour ${id}: ${enrichedPrediction.action}`)\r\n      return enrichedPrediction\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'predictNextAction', error, 'error')\r\n      \r\n      // Pr\xE9diction fallback\r\n      return {\r\n        action: 'browse',\r\n        confidence: 0.3,\r\n        alternatives: ['browse', 'search'],\r\n        reasoning: 'Fallback prediction due to error'\r\n      }\r\n    }\r\n  }\r\n\r\n  // M\xE9thodes utilitaires priv\xE9es\r\n  private generateDNA(userId: string): string {\r\n    let hash = this.simpleHash(userId + Date.now())\r\n    const genes = ['A', 'T', 'G', 'C']\r\n    let dna = 'SYM'\r\n    \r\n    for (let i = 0; i < 16; i++) {\r\n      dna += genes[hash % 4]\r\n      hash = Math.floor(hash / 4)\r\n    }\r\n    \r\n    return dna\r\n  }\r\n\r\n  private simpleHash(str: string): number {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash)\r\n  }\r\n\r\n  private applyMutation(organism: OrganismState, mutation: Mutation): void {\r\n    // Appliquer la mutation bas\xE9e sur le trait\r\n    if (organism.traits[mutation.trait]) {\r\n      const currentValue = organism.traits[mutation.trait]\r\n      const newValue = Math.max(0, Math.min(1, currentValue + mutation.delta))\r\n      organism.traits[mutation.trait] = newValue\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  private calculateConfidence(organism: OrganismState, context: PageContext): number {\r\n    // Base confidence sur l'exp\xE9rience (nombre de mutations = exp\xE9rience)\r\n    const mutationsLength = organism.mutations ? organism.mutations.length : 0;\r\n    const experienceBonus = Math.min(0.3, mutationsLength * 0.01)\r\n    \r\n    // Bonus pour les traits pertinents\r\n    const focusBonus = organism.traits.focus * 0.2\r\n    const wisdomBonus = (organism.traits.wisdom || 0.1) * 0.3\r\n    \r\n    return Math.min(0.95, 0.4 + experienceBonus + focusBonus + wisdomBonus)\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  private generateSuggestions(organism: OrganismState, context: PageContext): string[] {\r\n    const suggestions = ['browse']\r\n    \r\n    if (organism.traits.curiosity > 0.6) {\r\n      suggestions.push('explore', 'discover')\r\n    }\r\n    if (organism.traits.focus > 0.7) {\r\n      suggestions.push('focus', 'deep_read')\r\n    }\r\n    if (organism.traits.creativity > 0.6) {\r\n      suggestions.push('create', 'imagine')\r\n    }\r\n    \r\n    return suggestions.slice(0, 3) // Limiter \xE0 3 suggestions\r\n  }\r\n\r\n  // M\xE9thodes publiques pour l'acc\xE8s aux organismes\r\n  getOrganism(id: string): OrganismState | undefined {\r\n    return this.organisms.get(id)\r\n  }\r\n\r\n  async loadOrganism(id: string): Promise<OrganismState | null> {\r\n    try {\r\n      const history = await this.memoryBank.loadOrganismHistory(id)\r\n      if (history.states.length > 0) {\r\n        const organism = history.states[0]\r\n        this.organisms.set(id, organism)\r\n        return organism\r\n      }\r\n      return null\r\n    } catch (error) {\r\n      errorHandler.logSimpleError('NeuralCoreEngine', 'loadOrganism', error, 'error')\r\n      return null\r\n    }\r\n  }\r\n\r\n  getAllOrganisms(): OrganismState[] {\r\n    return Array.from(this.organisms.values())\r\n  }\r\n\r\n  async isInitialized(): Promise<boolean> {\r\n    return this.initialized\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7dba2c816cb4e9aa9d1a205f85b1c12a6db305e3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1iqcwmdb4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1iqcwmdb4n();
cov_1iqcwmdb4n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1iqcwmdb4n().s[1]++;
exports.NeuralCoreEngine = void 0;
const HebbieanLearningSystem_1 =
/* istanbul ignore next */
(cov_1iqcwmdb4n().s[2]++, require("./HebbieanLearningSystem"));
const BehaviorPredictor_1 =
/* istanbul ignore next */
(cov_1iqcwmdb4n().s[3]++, require("../behavioral/core/BehaviorPredictor"));
const GeneticMutator_1 =
/* istanbul ignore next */
(cov_1iqcwmdb4n().s[4]++, require("./GeneticMutator"));
const ErrorHandler_1 =
/* istanbul ignore next */
(cov_1iqcwmdb4n().s[5]++, require("../core/utils/ErrorHandler"));
const secureRandom_1 =
/* istanbul ignore next */
(cov_1iqcwmdb4n().s[6]++, require("../shared/utils/secureRandom"));
class NeuralCoreEngine {
  constructor(memoryBank) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[0]++;
    cov_1iqcwmdb4n().s[7]++;
    this.initialized = false;
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[8]++;
    this.memoryBank = memoryBank;
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[9]++;
    this.organisms = new Map();
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[10]++;
    this.hebbian = new HebbieanLearningSystem_1.HebbieanLearningSystem();
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[11]++;
    this.predictor = new BehaviorPredictor_1.BehaviorPredictor();
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[12]++;
    this.mutator = new GeneticMutator_1.GeneticMutator();
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[13]++;
    this.initialize();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[1]++;
    cov_1iqcwmdb4n().s[14]++;
    try {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[15]++;
      // Charger les organismes depuis la mémoire (utiliser la méthode existante)
      // Note: Comme retrieveOrganisms n'existe pas, on va créer une logique alternative
      this.initialized = true;
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[16]++;
      console.log(`🧠 NeuralCoreEngine initialisé`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[17]++;
      ErrorHandler_1.errorHandler.logSimpleError('NeuralCoreEngine', 'initialize', error, 'warning');
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[18]++;
      this.initialized = true; // Continue même en cas d'erreur
    }
  }
  async createOrganism(userId) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[2]++;
    cov_1iqcwmdb4n().s[19]++;
    try {
      // Générer un ADN unique basé sur l'ID utilisateur et un timestamp
      const dna =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[20]++, this.generateDNA(userId));
      // Créer un nouvel organisme avec des traits aléatoires mais équilibrés
      const organism =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[21]++, {
        id: userId,
        dna,
        generation: 1,
        health: 1.0,
        energy: 1.0,
        consciousness: 0.5,
        traits: {
          curiosity: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          focus: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          rhythm: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          empathy: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          creativity: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          resilience: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          adaptability: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          memory: 0.4 + secureRandom_1.SecureRandom.random() * 0.2,
          // 0.4-0.6
          intuition: 0.1 + secureRandom_1.SecureRandom.random() * 0.1 // 0.1-0.2 (plus rare)
        },
        mutations: [],
        socialConnections: [],
        memoryFragments: [],
        birthTime: Date.now(),
        lastMutation: null,
        createdAt: Date.now()
      });
      // Sauvegarder dans la mémoire (utiliser la méthode existante)
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[22]++;
      this.organisms.set(userId, organism);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[23]++;
      await this.memoryBank.saveOrganismState(userId, organism);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[24]++;
      console.log(`🌱 Nouvel organisme créé pour ${userId}`);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[25]++;
      return organism;
    } catch (error) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[26]++;
      ErrorHandler_1.errorHandler.logSimpleError('NeuralCoreEngine', 'createOrganism', error, 'error');
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[27]++;
      throw error;
    }
  }
  async evolveOrganism(id, behaviorData) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[3]++;
    cov_1iqcwmdb4n().s[28]++;
    try {
      const organism =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[29]++, this.organisms.get(id));
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[30]++;
      if (!organism) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[0][0]++;
        // Essayer de charger depuis la mémoire
        const history =
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().s[31]++, await this.memoryBank.loadOrganismHistory(id));
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[32]++;
        if (history.states.length > 0) {
          /* istanbul ignore next */
          cov_1iqcwmdb4n().b[1][0]++;
          const loadedOrganism =
          /* istanbul ignore next */
          (cov_1iqcwmdb4n().s[33]++, history.states[0]);
          /* istanbul ignore next */
          cov_1iqcwmdb4n().s[34]++;
          this.organisms.set(id, loadedOrganism);
          /* istanbul ignore next */
          cov_1iqcwmdb4n().s[35]++;
          return this.evolveOrganism(id, behaviorData); // Retry
        } else
        /* istanbul ignore next */
        {
          cov_1iqcwmdb4n().b[1][1]++;
        }
        cov_1iqcwmdb4n().s[36]++;
        throw new Error(`Organisme ${id} non trouvé`);
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[0][1]++;
      }
      // Analyser les patterns de comportement avec le système Hebbien
      const learningResult =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[37]++, await this.hebbian.updateWeights(behaviorData));
      const mutations =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[38]++, []);
      // Mutation de traits basée sur l'activité
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[39]++;
      for (const pattern of behaviorData) {
        // Analyser l'intensité d'interaction (timeSpent + interactions)
        const intensity =
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().s[40]++, pattern.timeSpent / 60000 + pattern.interactions * 0.1); // Normaliser
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[41]++;
        if (intensity > 0.7) {
          /* istanbul ignore next */
          cov_1iqcwmdb4n().b[2][0]++;
          // Pattern intense
          const mutation =
          /* istanbul ignore next */
          (cov_1iqcwmdb4n().s[42]++, this.mutator.generateMutation('curiosity', 'high_activity'));
          /* istanbul ignore next */
          cov_1iqcwmdb4n().s[43]++;
          if (mutation) {
            /* istanbul ignore next */
            cov_1iqcwmdb4n().b[3][0]++;
            cov_1iqcwmdb4n().s[44]++;
            mutations.push(mutation);
          } else
          /* istanbul ignore next */
          {
            cov_1iqcwmdb4n().b[3][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1iqcwmdb4n().b[2][1]++;
        }
      }
      // Mutation basée sur l'apprentissage Hebbien
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[45]++;
      if (learningResult.newPatterns.length > 0) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[4][0]++;
        const patternMutation =
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().s[46]++, this.mutator.generateMutation('focus', 'pattern_learning'));
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[47]++;
        if (patternMutation) {
          /* istanbul ignore next */
          cov_1iqcwmdb4n().b[5][0]++;
          cov_1iqcwmdb4n().s[48]++;
          mutations.push(patternMutation);
        } else
        /* istanbul ignore next */
        {
          cov_1iqcwmdb4n().b[5][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[4][1]++;
      }
      // Mutation aléatoire occasionnelle (1% de chance)
      cov_1iqcwmdb4n().s[49]++;
      if (secureRandom_1.SecureRandom.random() < 0.01) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[6][0]++;
        const randomMutation =
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().s[50]++, this.mutator.generateMutation('energy', 'random'));
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[51]++;
        if (randomMutation) {
          /* istanbul ignore next */
          cov_1iqcwmdb4n().b[7][0]++;
          cov_1iqcwmdb4n().s[52]++;
          mutations.push(randomMutation);
        } else
        /* istanbul ignore next */
        {
          cov_1iqcwmdb4n().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[6][1]++;
      }
      // Appliquer les mutations à l'organisme
      cov_1iqcwmdb4n().s[53]++;
      for (const mutation of mutations) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[54]++;
        this.applyMutation(organism, mutation);
      }
      // Mettre à jour l'organisme
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[55]++;
      organism.lastMutation = Date.now();
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[56]++;
      if (!organism.mutations) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[8][0]++;
        cov_1iqcwmdb4n().s[57]++;
        organism.mutations = [];
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[8][1]++;
      }
      cov_1iqcwmdb4n().s[58]++;
      organism.mutations.push(...mutations);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[59]++;
      this.organisms.set(id, organism);
      // Sauvegarder
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[60]++;
      await this.memoryBank.saveOrganismState(id, organism);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[61]++;
      console.log(`🧬 ${mutations.length} mutations appliquées à l'organisme ${id}`);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[62]++;
      return mutations;
    } catch (error) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[63]++;
      ErrorHandler_1.errorHandler.logSimpleError('NeuralCoreEngine', 'evolveOrganism', error, 'error');
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[64]++;
      return [];
    }
  }
  async predictNextAction(id, context) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[4]++;
    cov_1iqcwmdb4n().s[65]++;
    try {
      const organism =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[66]++, this.organisms.get(id));
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[67]++;
      if (!organism) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[9][0]++;
        cov_1iqcwmdb4n().s[68]++;
        throw new Error(`Organisme ${id} non trouvé`);
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[9][1]++;
      }
      // Utiliser le prédicteur comportemental (méthode existante)
      const prediction =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[69]++, this.predictor.predictNextAction(organism, context));
      // Enrichir avec les traits de l'organisme
      const enrichedPrediction =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[70]++, {
        action:
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().b[10][0]++, prediction.action) ||
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().b[10][1]++, 'browse'),
        confidence: this.calculateConfidence(organism, context),
        alternatives: this.generateSuggestions(organism, context),
        reasoning: `Basé sur les traits: curiosité=${organism.traits.curiosity.toFixed(2)}, focus=${organism.traits.focus.toFixed(2)}`
      });
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[71]++;
      console.log(`🔮 Prédiction générée pour ${id}: ${enrichedPrediction.action}`);
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[72]++;
      return enrichedPrediction;
    } catch (error) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[73]++;
      ErrorHandler_1.errorHandler.logSimpleError('NeuralCoreEngine', 'predictNextAction', error, 'error');
      // Prédiction fallback
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[74]++;
      return {
        action: 'browse',
        confidence: 0.3,
        alternatives: ['browse', 'search'],
        reasoning: 'Fallback prediction due to error'
      };
    }
  }
  // Méthodes utilitaires privées
  generateDNA(userId) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[5]++;
    let hash =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[75]++, this.simpleHash(userId + Date.now()));
    const genes =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[76]++, ['A', 'T', 'G', 'C']);
    let dna =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[77]++, 'SYM');
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[78]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[79]++, 0); i < 16; i++) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[80]++;
      dna += genes[hash % 4];
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[81]++;
      hash = Math.floor(hash / 4);
    }
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[82]++;
    return dna;
  }
  simpleHash(str) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[6]++;
    let hash =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[83]++, 0);
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[84]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[85]++, 0); i < str.length; i++) {
      const char =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[86]++, str.charCodeAt(i));
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[87]++;
      hash = (hash << 5) - hash + char;
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[88]++;
      hash = hash & hash; // Convert to 32-bit integer
    }
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[89]++;
    return Math.abs(hash);
  }
  applyMutation(organism, mutation) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[7]++;
    cov_1iqcwmdb4n().s[90]++;
    // Appliquer la mutation basée sur le trait
    if (organism.traits[mutation.trait]) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().b[11][0]++;
      const currentValue =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[91]++, organism.traits[mutation.trait]);
      const newValue =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[92]++, Math.max(0, Math.min(1, currentValue + mutation.delta)));
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[93]++;
      organism.traits[mutation.trait] = newValue;
    } else
    /* istanbul ignore next */
    {
      cov_1iqcwmdb4n().b[11][1]++;
    }
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  calculateConfidence(organism, context) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[8]++;
    // Base confidence sur l'expérience (nombre de mutations = expérience)
    const mutationsLength =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[94]++, organism.mutations ?
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().b[12][0]++, organism.mutations.length) :
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().b[12][1]++, 0));
    const experienceBonus =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[95]++, Math.min(0.3, mutationsLength * 0.01));
    // Bonus pour les traits pertinents
    const focusBonus =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[96]++, organism.traits.focus * 0.2);
    const wisdomBonus =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[97]++, (
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().b[13][0]++, organism.traits.wisdom) ||
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().b[13][1]++, 0.1)) * 0.3);
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[98]++;
    return Math.min(0.95, 0.4 + experienceBonus + focusBonus + wisdomBonus);
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  generateSuggestions(organism, context) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[9]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_1iqcwmdb4n().s[99]++, ['browse']);
    /* istanbul ignore next */
    cov_1iqcwmdb4n().s[100]++;
    if (organism.traits.curiosity > 0.6) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().b[14][0]++;
      cov_1iqcwmdb4n().s[101]++;
      suggestions.push('explore', 'discover');
    } else
    /* istanbul ignore next */
    {
      cov_1iqcwmdb4n().b[14][1]++;
    }
    cov_1iqcwmdb4n().s[102]++;
    if (organism.traits.focus > 0.7) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().b[15][0]++;
      cov_1iqcwmdb4n().s[103]++;
      suggestions.push('focus', 'deep_read');
    } else
    /* istanbul ignore next */
    {
      cov_1iqcwmdb4n().b[15][1]++;
    }
    cov_1iqcwmdb4n().s[104]++;
    if (organism.traits.creativity > 0.6) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().b[16][0]++;
      cov_1iqcwmdb4n().s[105]++;
      suggestions.push('create', 'imagine');
    } else
    /* istanbul ignore next */
    {
      cov_1iqcwmdb4n().b[16][1]++;
    }
    cov_1iqcwmdb4n().s[106]++;
    return suggestions.slice(0, 3); // Limiter à 3 suggestions
  }
  // Méthodes publiques pour l'accès aux organismes
  getOrganism(id) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[10]++;
    cov_1iqcwmdb4n().s[107]++;
    return this.organisms.get(id);
  }
  async loadOrganism(id) {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[11]++;
    cov_1iqcwmdb4n().s[108]++;
    try {
      const history =
      /* istanbul ignore next */
      (cov_1iqcwmdb4n().s[109]++, await this.memoryBank.loadOrganismHistory(id));
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[110]++;
      if (history.states.length > 0) {
        /* istanbul ignore next */
        cov_1iqcwmdb4n().b[17][0]++;
        const organism =
        /* istanbul ignore next */
        (cov_1iqcwmdb4n().s[111]++, history.states[0]);
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[112]++;
        this.organisms.set(id, organism);
        /* istanbul ignore next */
        cov_1iqcwmdb4n().s[113]++;
        return organism;
      } else
      /* istanbul ignore next */
      {
        cov_1iqcwmdb4n().b[17][1]++;
      }
      cov_1iqcwmdb4n().s[114]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[115]++;
      ErrorHandler_1.errorHandler.logSimpleError('NeuralCoreEngine', 'loadOrganism', error, 'error');
      /* istanbul ignore next */
      cov_1iqcwmdb4n().s[116]++;
      return null;
    }
  }
  getAllOrganisms() {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[12]++;
    cov_1iqcwmdb4n().s[117]++;
    return Array.from(this.organisms.values());
  }
  async isInitialized() {
    /* istanbul ignore next */
    cov_1iqcwmdb4n().f[13]++;
    cov_1iqcwmdb4n().s[118]++;
    return this.initialized;
  }
}
/* istanbul ignore next */
cov_1iqcwmdb4n().s[119]++;
exports.NeuralCoreEngine = NeuralCoreEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,