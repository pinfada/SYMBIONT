{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/webgl.performance.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/webgl.performance.test.ts"],"sourcesContent":["/**\n * Tests de performance WebGL\n */\n\n// Mock WebGL context\nconst createMockWebGLContext = () => ({\n  createShader: jest.fn().mockReturnValue({}),\n  shaderSource: jest.fn(),\n  compileShader: jest.fn(),\n  getShaderParameter: jest.fn().mockReturnValue(true),\n  createProgram: jest.fn().mockReturnValue({}),\n  attachShader: jest.fn(),\n  linkProgram: jest.fn(),\n  getProgramParameter: jest.fn().mockReturnValue(true),\n  useProgram: jest.fn(),\n  createBuffer: jest.fn().mockReturnValue({}),\n  bindBuffer: jest.fn(),\n  bufferData: jest.fn(),\n  getAttribLocation: jest.fn().mockReturnValue(0),\n  enableVertexAttribArray: jest.fn(),\n  vertexAttribPointer: jest.fn(),\n  getUniformLocation: jest.fn().mockReturnValue({}),\n  uniform1f: jest.fn(),\n  uniform2f: jest.fn(),\n  uniform3f: jest.fn(),\n  uniform4f: jest.fn(),\n  uniformMatrix4fv: jest.fn(),\n  viewport: jest.fn(),\n  clearColor: jest.fn(),\n  clear: jest.fn(),\n  drawArrays: jest.fn(),\n  drawElements: jest.fn(),\n  canvas: {\n    width: 800,\n    height: 600,\n    getContext: jest.fn()\n  },\n  // WebGL constants\n  VERTEX_SHADER: 35633,\n  FRAGMENT_SHADER: 35632,\n  ARRAY_BUFFER: 34962,\n  ELEMENT_ARRAY_BUFFER: 34963,\n  STATIC_DRAW: 35044,\n  FLOAT: 5126,\n  TRIANGLES: 4,\n  COLOR_BUFFER_BIT: 16384,\n  DEPTH_BUFFER_BIT: 256,\n  DEPTH_TEST: 2929\n});\n\n// Mock HTMLCanvasElement\nglobal.HTMLCanvasElement.prototype.getContext = jest.fn().mockImplementation((contextType) => {\n  if (contextType === 'webgl' || contextType === 'webgl2') {\n    return createMockWebGLContext();\n  }\n  return null;\n});\n\ndescribe('Tests de Performance WebGL', () => {\n  let canvas: HTMLCanvasElement;\n  let gl: any;\n\n  beforeEach(() => {\n    canvas = document.createElement('canvas');\n    canvas.width = 800;\n    canvas.height = 600;\n    gl = canvas.getContext('webgl');\n  });\n\n  describe('Initialisation WebGL', () => {\n    it('initialise le contexte WebGL rapidement', () => {\n      const start = performance.now();\n      \n      const testCanvas = document.createElement('canvas');\n      testCanvas.width = 1920;\n      testCanvas.height = 1080;\n      const testGl = testCanvas.getContext('webgl2') || testCanvas.getContext('webgl');\n      \n      const duration = performance.now() - start;\n      \n      expect(testGl).toBeTruthy();\n      expect(duration).toBeLessThan(50); // Moins de 50ms\n    });\n\n    it('gère gracieusement l\\'échec d\\'initialisation WebGL', () => {\n      // Mock failed context creation\n      const failCanvas = document.createElement('canvas');\n      jest.spyOn(failCanvas, 'getContext').mockReturnValue(null);\n      \n      const context = failCanvas.getContext('webgl');\n      expect(context).toBeNull();\n    });\n  });\n\n  describe('Compilation de Shaders', () => {\n    it('compile les shaders en moins de 100ms', () => {\n      const vertexShaderSource = `\n        attribute vec4 a_position;\n        uniform mat4 u_matrix;\n        void main() {\n          gl_Position = u_matrix * a_position;\n        }\n      `;\n      \n      const fragmentShaderSource = `\n        precision mediump float;\n        uniform vec4 u_color;\n        void main() {\n          gl_Color = u_color;\n        }\n      `;\n      \n      const start = performance.now();\n      \n      // Mock shader compilation\n      const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      gl.shaderSource(vertexShader, vertexShaderSource);\n      gl.compileShader(vertexShader);\n      \n      const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      gl.shaderSource(fragmentShader, fragmentShaderSource);\n      gl.compileShader(fragmentShader);\n      \n      const program = gl.createProgram();\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      \n      const duration = performance.now() - start;\n      \n      expect(gl.getProgramParameter(program, gl.LINK_STATUS)).toBe(true);\n      expect(duration).toBeLessThan(100);\n    });\n\n    it('détecte les erreurs de compilation rapidement', () => {\n      const invalidShader = `\n        invalid shader code\n        this should fail\n      `;\n      \n      const start = performance.now();\n      \n      const shader = gl.createShader(gl.VERTEX_SHADER);\n      gl.shaderSource(shader, invalidShader);\n      gl.compileShader(shader);\n      \n      // Simulate compilation check\n      const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(50);\n      expect(typeof success).toBe('boolean');\n    });\n  });\n\n  describe('Opérations de rendu', () => {\n    it('maintient 60 FPS pour des scènes simples', () => {\n      const frameCount = 60;\n      const targetFPS = 60;\n      const maxFrameTime = 1000 / targetFPS; // 16.67ms\n      \n      const frameTimes: number[] = [];\n      \n      for (let i = 0; i < frameCount; i++) {\n        const frameStart = performance.now();\n        \n        // Simuler un frame de rendu\n        gl.viewport(0, 0, canvas.width, canvas.height);\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        \n        // Simuler le dessin de quelques triangles\n        for (let j = 0; j < 10; j++) {\n          gl.drawArrays(gl.TRIANGLES, 0, 3);\n        }\n        \n        const frameTime = performance.now() - frameStart;\n        frameTimes.push(frameTime);\n      }\n      \n      const averageFrameTime = frameTimes.reduce((a, b) => a + b, 0) / frameCount;\n      const maxFrameTimeActual = Math.max(...frameTimes);\n      \n      expect(averageFrameTime).toBeLessThan(maxFrameTime);\n      expect(maxFrameTimeActual).toBeLessThan(maxFrameTime * 2); // Tolérance pour les pics\n    });\n\n    it('gère efficacement les textures multiples', () => {\n      const textureCount = 16;\n      const textures: any[] = [];\n      \n      const start = performance.now();\n      \n      // Simuler la création de textures\n      for (let i = 0; i < textureCount; i++) {\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        \n        // Simuler l'upload de données de texture\n        const pixels = new Uint8Array(256 * 256 * 4); // RGBA 256x256\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n        \n        textures.push(texture);\n      }\n      \n      const duration = performance.now() - start;\n      \n      expect(textures).toHaveLength(textureCount);\n      expect(duration).toBeLessThan(500); // Moins de 500ms pour 16 textures\n    });\n  });\n\n  describe('Gestion mémoire', () => {\n    it('libère correctement les ressources WebGL', () => {\n      const resources = {\n        buffers: [],\n        textures: [],\n        programs: [],\n        shaders: []\n      };\n      \n      // Créer des ressources\n      for (let i = 0; i < 10; i++) {\n        const buffer = gl.createBuffer();\n        const texture = gl.createTexture();\n        const program = gl.createProgram();\n        const shader = gl.createShader(gl.VERTEX_SHADER);\n        \n        resources.buffers.push(buffer);\n        resources.textures.push(texture);\n        resources.programs.push(program);\n        resources.shaders.push(shader);\n      }\n      \n      // Libérer les ressources\n      const start = performance.now();\n      \n      resources.buffers.forEach(buffer => gl.deleteBuffer(buffer));\n      resources.textures.forEach(texture => gl.deleteTexture(texture));\n      resources.programs.forEach(program => gl.deleteProgram(program));\n      resources.shaders.forEach(shader => gl.deleteShader(shader));\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(100);\n    });\n\n    it('détecte les fuites mémoire potentielles', () => {\n      const initialMemory = performance.memory ? performance.memory.usedJSHeapSize : 0;\n      \n      // Créer beaucoup de ressources sans les libérer\n      const leakyResources = [];\n      for (let i = 0; i < 1000; i++) {\n        leakyResources.push({\n          buffer: gl.createBuffer(),\n          texture: gl.createTexture(),\n          data: new Float32Array(1000) // 4KB each\n        });\n      }\n      \n      const afterCreation = performance.memory ? performance.memory.usedJSHeapSize : 0;\n      \n      // Libérer les ressources\n      leakyResources.forEach(resource => {\n        gl.deleteBuffer(resource.buffer);\n        gl.deleteTexture(resource.texture);\n      });\n      leakyResources.length = 0;\n      \n      const afterCleanup = performance.memory ? performance.memory.usedJSHeapSize : 0;\n      \n      if (performance.memory) {\n        const memoryIncrease = afterCreation - initialMemory;\n        const memoryAfterCleanup = afterCleanup - initialMemory;\n        \n        expect(memoryIncrease).toBeGreaterThan(0); // Memory should increase\n        expect(memoryAfterCleanup).toBeLessThan(memoryIncrease * 0.5); // Should clean up most memory\n      }\n      \n      expect(leakyResources).toHaveLength(0);\n    });\n  });\n\n  describe('Performance en conditions stressantes', () => {\n    it('maintient les performances avec beaucoup de draw calls', () => {\n      const drawCallCount = 1000;\n      \n      const start = performance.now();\n      \n      gl.viewport(0, 0, canvas.width, canvas.height);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      \n      for (let i = 0; i < drawCallCount; i++) {\n        // Simuler des changements d'état coûteux\n        gl.useProgram(gl.createProgram());\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n      }\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(1000); // Moins d'1 seconde pour 1000 draw calls\n    });\n\n    it('gère les changements de viewport fréquents', () => {\n      const viewportChanges = 100;\n      \n      const start = performance.now();\n      \n      for (let i = 0; i < viewportChanges; i++) {\n        const width = 100 + (i * 10);\n        const height = 100 + (i * 10);\n        gl.viewport(0, 0, width, height);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n      }\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(500);\n    });\n  });\n\n  describe('Validation des performances par fonctionnalité', () => {\n    it('WebGL Batch operations performance', () => {\n      // Simuler un système de batch comme WebGLBatcher\n      const batchSize = 100;\n      const batches = 10;\n      \n      const start = performance.now();\n      \n      for (let batch = 0; batch < batches; batch++) {\n        // Préparer un batch\n        const vertices = new Float32Array(batchSize * 3 * 3); // 100 triangles\n        for (let i = 0; i < vertices.length; i++) {\n          vertices[i] = Math.random();\n        }\n        \n        // Upload et rendu du batch\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.drawArrays(gl.TRIANGLES, 0, batchSize * 3);\n        \n        gl.deleteBuffer(buffer);\n      }\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(200); // Batching doit être efficace\n    });\n\n    it('Organism rendering performance', () => {\n      // Simuler le rendu d'un organisme complexe\n      const organismComplexity = 50; // Nombre de composants\n      \n      const start = performance.now();\n      \n      gl.viewport(0, 0, canvas.width, canvas.height);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      \n      for (let component = 0; component < organismComplexity; component++) {\n        // Simuler le rendu d'un composant d'organisme\n        gl.useProgram(gl.createProgram());\n        \n        // Matrices de transformation\n        gl.uniformMatrix4fv(gl.getUniformLocation(null, 'u_matrix'), false, new Float32Array(16));\n        \n        // Couleur du composant\n        gl.uniform4f(gl.getUniformLocation(null, 'u_color'), Math.random(), Math.random(), Math.random(), 1.0);\n        \n        // Géométrie du composant\n        gl.drawArrays(gl.TRIANGLES, 0, 6); // Quad = 2 triangles\n      }\n      \n      const duration = performance.now() - start;\n      \n      expect(duration).toBeLessThan(16); // 60 FPS = 16.67ms par frame\n    });\n  });\n});"],"version":3}