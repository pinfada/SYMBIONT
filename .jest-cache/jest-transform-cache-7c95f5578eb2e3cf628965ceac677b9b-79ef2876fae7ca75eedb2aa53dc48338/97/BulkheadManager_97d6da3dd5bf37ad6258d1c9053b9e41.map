{"version":3,"names":["cov_1db4bjoc6d","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","secureLogger_1","require","BulkheadManager","constructor","bulkheads","Map","metrics","createBulkhead","config","has","get","bulkhead","Bulkhead","set","activeRequests","totalRequests","successfulRequests","failedRequests","averageResponseTime","logger","info","execute","bulkheadName","operation","_context","Error","startTime","Date","now","updateMetrics","result","duration","error","event","lastError","message","String","lastErrorTime","getMetrics","Array","from","values","getBulkheadMetrics","getHealthStatus","status","failureRate","exports","circuitBreakerOpen","lastFailureTime","circuitBreakerTimeout","maxConcurrentRequests","fallbackStrategy","waitForSlot","executeWithTimeout","handleFailure","Promise","resolve","reject","timer","setTimeout","timeout","then","clearTimeout","catch","maxWaitTime","warn","bulkheadManager"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/patterns/BulkheadManager.ts"],"sourcesContent":["/**\r\n * Implémentation du pattern Bulkhead pour l'isolation des ressources\r\n * Évite qu'une défaillance dans un composant affecte les autres\r\n */\r\n\r\nimport { logger } from '@/shared/utils/secureLogger';\r\n\r\nexport interface BulkheadConfig {\r\n  name: string;\r\n  maxConcurrentRequests: number;\r\n  timeout: number;\r\n  fallbackStrategy: 'circuit-breaker' | 'fail-fast' | 'retry';\r\n  retryAttempts?: number;\r\n}\r\n\r\nexport interface BulkheadMetrics {\r\n  name: string;\r\n  activeRequests: number;\r\n  totalRequests: number;\r\n  successfulRequests: number;\r\n  failedRequests: number;\r\n  averageResponseTime: number;\r\n  lastError?: string;\r\n  lastErrorTime?: number;\r\n}\r\n\r\n/**\r\n * Gestionnaire de bulkheads pour l'isolation des services\r\n */\r\nexport class BulkheadManager {\r\n  private bulkheads = new Map<string, Bulkhead>();\r\n  private metrics = new Map<string, BulkheadMetrics>();\r\n\r\n  /**\r\n   * Crée ou récupère un bulkhead pour un service\r\n   */\r\n  createBulkhead(config: BulkheadConfig): Bulkhead {\r\n    if (this.bulkheads.has(config.name)) {\r\n      return this.bulkheads.get(config.name)!;\r\n    }\r\n\r\n    const bulkhead = new Bulkhead(config);\r\n    this.bulkheads.set(config.name, bulkhead);\r\n    \r\n    // Initialise les métriques\r\n    this.metrics.set(config.name, {\r\n      name: config.name,\r\n      activeRequests: 0,\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n    });\r\n\r\n    logger.info(`Bulkhead créé: ${config.name}`, config);\r\n    return bulkhead;\r\n  }\r\n\r\n  /**\r\n   * Exécute une fonction dans un bulkhead isolé\r\n   */\r\n  async execute<T>(\r\n    bulkheadName: string, \r\n    operation: () => Promise<T>,\r\n    _context?: string\r\n  ): Promise<T> {\r\n    const bulkhead = this.bulkheads.get(bulkheadName);\r\n    if (!bulkhead) {\r\n      throw new Error(`Bulkhead non trouvé: ${bulkheadName}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    this.updateMetrics(bulkheadName, 'start');\r\n\r\n    try {\r\n      const result = await bulkhead.execute(operation);\r\n      const duration = Date.now() - startTime;\r\n      this.updateMetrics(bulkheadName, 'success', duration);\r\n      return result;\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      this.updateMetrics(bulkheadName, 'error', duration, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour les métriques d'un bulkhead\r\n   */\r\n  private updateMetrics(\r\n    name: string, \r\n    event: 'start' | 'success' | 'error', \r\n    duration?: number,\r\n    error?: unknown\r\n  ): void {\r\n    const metrics = this.metrics.get(name);\r\n    if (!metrics) return;\r\n\r\n    switch (event) {\r\n      case 'start':\r\n        metrics.activeRequests++;\r\n        metrics.totalRequests++;\r\n        break;\r\n      case 'success':\r\n        metrics.activeRequests--;\r\n        metrics.successfulRequests++;\r\n        if (duration) {\r\n          metrics.averageResponseTime = \r\n            (metrics.averageResponseTime * (metrics.successfulRequests - 1) + duration) / \r\n            metrics.successfulRequests;\r\n        }\r\n        break;\r\n      case 'error':\r\n        metrics.activeRequests--;\r\n        metrics.failedRequests++;\r\n        if (error) {\r\n          metrics.lastError = error instanceof Error ? error.message : String(error);\r\n          metrics.lastErrorTime = Date.now();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les métriques de tous les bulkheads\r\n   */\r\n  getMetrics(): BulkheadMetrics[] {\r\n    return Array.from(this.metrics.values());\r\n  }\r\n\r\n  /**\r\n   * Récupère les métriques d'un bulkhead spécifique\r\n   */\r\n  getBulkheadMetrics(name: string): BulkheadMetrics | null {\r\n    return this.metrics.get(name) || null;\r\n  }\r\n\r\n  /**\r\n   * Vérifie la santé de tous les bulkheads\r\n   */\r\n  getHealthStatus(): Record<string, 'healthy' | 'degraded' | 'failed'> {\r\n    const status: Record<string, 'healthy' | 'degraded' | 'failed'> = {};\r\n\r\n    for (const [name, metrics] of this.metrics) {\r\n      const failureRate = metrics.totalRequests > 0 ? \r\n        metrics.failedRequests / metrics.totalRequests : 0;\r\n      \r\n      if (failureRate > 0.5) {\r\n        status[name] = 'failed';\r\n      } else if (failureRate > 0.2 || metrics.averageResponseTime > 5000) {\r\n        status[name] = 'degraded';\r\n      } else {\r\n        status[name] = 'healthy';\r\n      }\r\n    }\r\n\r\n    return status;\r\n  }\r\n}\r\n\r\n/**\r\n * Implémentation d'un bulkhead individuel\r\n */\r\nclass Bulkhead {\r\n  private config: BulkheadConfig;\r\n  private activeRequests = 0;\r\n  private circuitBreakerOpen = false;\r\n  private lastFailureTime = 0;\r\n  private readonly circuitBreakerTimeout = 30000; // 30 secondes\r\n\r\n  constructor(config: BulkheadConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\r\n    // Vérification du circuit breaker\r\n    if (this.circuitBreakerOpen) {\r\n      const now = Date.now();\r\n      if (now - this.lastFailureTime < this.circuitBreakerTimeout) {\r\n        throw new Error(`Circuit breaker ouvert pour ${this.config.name}`);\r\n      } else {\r\n        this.circuitBreakerOpen = false;\r\n        logger.info(`Circuit breaker fermé pour ${this.config.name}`);\r\n      }\r\n    }\r\n\r\n    // Vérification de la limite de requêtes concurrentes\r\n    if (this.activeRequests >= this.config.maxConcurrentRequests) {\r\n      if (this.config.fallbackStrategy === 'fail-fast') {\r\n        throw new Error(`Bulkhead saturé: ${this.config.name}`);\r\n      }\r\n      // Attendre qu'une place se libère (avec timeout)\r\n      await this.waitForSlot();\r\n    }\r\n\r\n    this.activeRequests++;\r\n\r\n    try {\r\n      // Exécuter l'opération avec timeout\r\n      const result = await this.executeWithTimeout(operation);\r\n      return result;\r\n    } catch (error) {\r\n      this.handleFailure(error);\r\n      throw error;\r\n    } finally {\r\n      this.activeRequests--;\r\n    }\r\n  }\r\n\r\n  private async executeWithTimeout<T>(operation: () => Promise<T>): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const timer = setTimeout(() => {\r\n        reject(new Error(`Timeout dans bulkhead ${this.config.name}`));\r\n      }, this.config.timeout);\r\n\r\n      operation()\r\n        .then(result => {\r\n          clearTimeout(timer);\r\n          resolve(result);\r\n        })\r\n        .catch(error => {\r\n          clearTimeout(timer);\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  private async waitForSlot(): Promise<void> {\r\n    const maxWaitTime = this.config.timeout;\r\n    const startTime = Date.now();\r\n\r\n    while (this.activeRequests >= this.config.maxConcurrentRequests) {\r\n      if (Date.now() - startTime > maxWaitTime) {\r\n        throw new Error(`Timeout d'attente pour bulkhead ${this.config.name}`);\r\n      }\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n    }\r\n  }\r\n\r\n  private handleFailure(error: unknown): void {\r\n    if (this.config.fallbackStrategy === 'circuit-breaker') {\r\n      this.circuitBreakerOpen = true;\r\n      this.lastFailureTime = Date.now();\r\n      logger.warn(`Circuit breaker ouvert pour ${this.config.name}:`, error);\r\n    }\r\n  }\r\n}\r\n\r\n// Instance globale du gestionnaire de bulkheads\r\nexport const bulkheadManager = new BulkheadManager();"],"mappings":"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","ignoreList":[]}