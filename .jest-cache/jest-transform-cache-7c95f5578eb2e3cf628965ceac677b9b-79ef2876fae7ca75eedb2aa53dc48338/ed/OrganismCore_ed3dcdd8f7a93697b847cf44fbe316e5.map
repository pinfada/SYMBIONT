{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/OrganismCore.ts"],"sourcesContent":["/**\n * OrganismCore refactorisé - Architecture hexagonale\n * Version simplifiée utilisant des services spécialisés\n */\n\nimport { OrganismState, OrganismTraits } from '../shared/types/organism';\nimport { IOrganismCore, OrganismJSON, ShaderParameters } from './interfaces/IOrganismCore';\nimport { errorHandler } from './utils/ErrorHandler';\nimport { TraitService, TraitUpdateEvent } from './services/TraitService';\nimport { EnergyService, EnergyEvent } from './services/EnergyService';\nimport { NeuralService, NeuralProcessingResult } from './services/NeuralService';\nimport { INeuralMesh } from './interfaces/INeuralMesh';\nimport RealMetricsService from './services/RealMetricsService';\nimport FeatureFlagService from './services/FeatureFlagService';\nimport { generateSecureUUID } from '../shared/utils/uuid';\n\nexport interface OrganismDependencies {\n  neuralMesh: INeuralMesh;\n  logger?: { debug: Function; info: Function; error: Function };\n}\n\nexport class OrganismCore implements IOrganismCore {\n  private readonly id: string;\n  private readonly dna: string;\n  private health: number = 100;\n  private lastMutation: number = Date.now();\n  \n  // Services spécialisés (injection de dépendances)\n  private readonly traitService: TraitService;\n  private readonly energyService: EnergyService;\n  private readonly neuralService: NeuralService;\n  private readonly metricsService: RealMetricsService;\n  // @ts-expect-error Service réservé pour usage futur\n  private readonly featureFlags: FeatureFlagService;\n  private readonly logger: { debug: Function; info: Function; error: Function } | undefined;\n\n  constructor(\n    dna: string, \n    initialTraits?: Partial<OrganismTraits>,\n    dependencies?: OrganismDependencies\n  ) {\n    // Validation d'entrée\n    const validation = this.validateInput(dna, initialTraits);\n    if (!validation.isValid) {\n      throw new Error(`OrganismCore creation failed: ${validation.errors.join(', ')}`);\n    }\n\n    this.id = generateSecureUUID();\n    this.dna = dna;\n    this.logger = dependencies?.logger;\n\n    // Initialisation des services de base\n    this.metricsService = RealMetricsService.getInstance();\n    this.featureFlags = FeatureFlagService.getInstance();\n    \n    // Initialisation des services métier\n    this.traitService = new TraitService(initialTraits);\n    this.energyService = new EnergyService(100);\n    \n    // Service neural nécessite une dépendance externe\n    if (dependencies?.neuralMesh) {\n      this.neuralService = new NeuralService(dependencies.neuralMesh);\n    } else {\n      // Fallback pour compatibilité\n      const { NeuralMesh } = require('./NeuralMesh');\n      this.neuralService = new NeuralService(new NeuralMesh());\n    }\n\n    this.setupServiceListeners();\n    this.logger?.debug('OrganismCore initialized', { id: this.id, dna: this.dna });\n  }\n\n  /**\n   * Configuration des listeners entre services\n   */\n  private setupServiceListeners(): void {\n    // Écoute les changements de traits pour ajuster l'énergie\n    this.traitService.addTraitChangeListener((event: TraitUpdateEvent) => {\n      this.onTraitChanged(event);\n    });\n\n    // Écoute les événements d'énergie pour log\n    this.energyService.addEnergyListener((event: EnergyEvent) => {\n      if (event.type === 'consumption' && event.energyAfter < 10) {\n        this.logger?.debug('Low energy warning', { energy: event.energyAfter });\n      }\n    });\n  }\n\n  /**\n   * Gestionnaire de changement de traits\n   */\n  private onTraitChanged(event: TraitUpdateEvent): void {\n    // Ajuste l'efficacité métabolique basée sur les traits\n    const traits = this.traitService.getAllTraits();\n    const efficiencyFactor = (traits.resilience + traits.adaptability) / 2;\n    this.energyService.setEfficiency(efficiencyFactor);\n\n    this.logger?.debug('Trait changed, metabolism adjusted', { \n      trait: event.traitName, \n      newValue: event.newValue,\n      efficiency: efficiencyFactor \n    });\n  }\n\n  /**\n   * Validation des entrées\n   */\n  private validateInput(dna: string, traits?: Partial<OrganismTraits>): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!dna || typeof dna !== 'string') {\n      errors.push('DNA must be a non-empty string');\n    }\n\n    if (dna && dna.length < 10) {\n      errors.push('DNA must be at least 10 characters long');\n    }\n\n    if (traits) {\n      Object.entries(traits).forEach(([key, value]) => {\n        if (typeof value !== 'number' || value < 0 || value > 1) {\n          errors.push(`Trait ${key} must be a number between 0 and 1`);\n        }\n      });\n    }\n\n    return { isValid: errors.length === 0, errors };\n  }\n\n  /**\n   * Génère un ID unique\n   */\n  // generateId() supprimé - utilise generateSecureUUID() maintenant\n\n  // =============================================================================\n  // API PUBLIQUE - Interface IOrganismCore\n  // =============================================================================\n\n  getId(): string {\n    return this.id;\n  }\n\n  getDNA(): string {\n    return this.dna;\n  }\n\n  getTraits(): OrganismTraits {\n    return this.traitService.getAllTraits();\n  }\n\n  updateTrait(name: keyof OrganismTraits, value: number): void {\n    if (!this.energyService.consumeEnergy(1, `trait_update_${name}`)) {\n      throw new Error('Insufficient energy to update trait');\n    }\n\n    this.traitService.updateTrait(name, value, 'manual_update');\n    this.logger?.debug('Trait updated', { trait: name, value });\n  }\n\n  getEnergyLevel(): number {\n    return this.energyService.getEnergyLevel();\n  }\n\n  getHealth(): number {\n    return this.health;\n  }\n\n  /**\n   * Évolution de l'organisme basée sur un stimulus\n   */\n  async evolve(stimulus: any): Promise<void> {\n    const energyCost = 5;\n    if (!this.energyService.consumeEnergy(energyCost, 'evolution')) {\n      this.logger?.debug('Evolution skipped: insufficient energy');\n      return;\n    }\n\n    try {\n      const currentTraits = this.traitService.getAllTraits();\n      const result: NeuralProcessingResult = await this.neuralService.processStimulus(stimulus, currentTraits);\n\n      if (result.success && Object.keys(result.adaptations).length > 0) {\n        this.traitService.updateTraits(result.adaptations, 'evolution');\n        this.lastMutation = Date.now();\n        \n        this.logger?.debug('Evolution successful', { \n          adaptations: result.adaptations,\n          confidence: result.confidence \n        });\n      }\n    } catch (error) {\n      this.logger?.error('Evolution failed', error);\n      errorHandler.logSimpleError('OrganismCore', 'evolve', error, 'error');\n    }\n  }\n\n  /**\n   * Apprentissage à partir de données comportementales\n   */\n  async learn(behaviorData: any): Promise<void> {\n    const energyCost = 2;\n    if (!this.energyService.consumeEnergy(energyCost, 'learning')) {\n      return;\n    }\n\n    const success = await this.neuralService.learn(behaviorData);\n    if (success) {\n      // Améliore légèrement la mémoire lors de l'apprentissage\n      const currentMemory = this.traitService.getTrait('memory');\n      this.traitService.updateTrait('memory', currentMemory + 0.01, 'learning');\n    }\n\n    this.logger?.debug('Learning completed', { success, data: behaviorData });\n  }\n\n  /**\n   * Traitement d'un stimulus simple\n   */\n  processStimulus(stimulus: any): void {\n    const energyCost = 1;\n    if (!this.energyService.consumeEnergy(energyCost, 'stimulus_processing')) {\n      return;\n    }\n\n    // Traitement simplifié en arrière-plan\n    this.neuralService.queuePattern({\n      id: `pattern_${Date.now()}`,\n      type: 'behavioral',\n      data: stimulus,\n      timestamp: Date.now(),\n      confidence: 0.8\n    });\n\n    this.logger?.debug('Stimulus processed', { stimulus });\n  }\n\n  /**\n   * Obtient l'état complet de l'organisme\n   */\n  getState(): OrganismState {\n    const traits = this.traitService.getAllTraits();\n    const energyStats = this.energyService.getEnergyStats();\n\n    return {\n      id: this.id,\n      traits,\n      energy: energyStats.current,\n      maxEnergy: energyStats.max,\n      health: this.health,\n      dna: this.dna,\n      lastMutation: this.lastMutation,\n      balance: this.traitService.calculateBalance(),\n      metabolismRate: energyStats.metabolismRate,\n      age: Date.now() - parseInt(this.id.split('_')[1]) // Approximation basée sur l'ID\n    };\n  }\n\n  /**\n   * Génère les paramètres de shader pour le rendu visuel\n   */\n  generateShaderParameters(): ShaderParameters {\n    const traits = this.traitService.getAllTraits();\n    \n    return {\n      energy: this.energyService.getEnergyPercentage() / 100,\n      health: this.health / 100,\n      neuralActivity: this.neuralService.getNeuralActivity(),\n      creativity: traits.creativity,\n      focus: traits.focus,\n      time: Date.now() / 1000,\n      colorPrimary: [traits.creativity, traits.empathy, traits.intuition],\n      colorSecondary: [traits.focus, traits.resilience, traits.adaptability],\n      morphology: traits.adaptability,\n      complexity: traits.creativity * traits.memory\n    };\n  }\n\n  /**\n   * Sérialisation pour sauvegarde\n   */\n  toJSON(): OrganismJSON {\n    return {\n      mesh: {},\n      dna: this.dna,\n      health: this.health,\n      lastMutation: this.lastMutation,\n      traits: this.traitService.toJSON(),\n      energy: this.energyService.toJSON(),\n      neural: this.neuralService.saveState(),\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Restauration depuis JSON\n   */\n  fromJSON(data: OrganismJSON): void {\n    if (data.traits) {\n      this.traitService.fromJSON(data.traits);\n    }\n    \n    if (data.energy) {\n      this.energyService.fromJSON(data.energy);\n    }\n    \n    if (data.neural) {\n      this.neuralService.loadState(data.neural);\n    }\n\n    this.health = data.health || 100;\n    this.lastMutation = data.lastMutation || Date.now();\n\n    this.logger?.debug('State restored from JSON', { id: this.id });\n  }\n\n  /**\n   * Nettoyage et libération des ressources\n   */\n  cleanup(): void {\n    this.energyService.destroy();\n    this.traitService.cleanup();\n    this.neuralService.cleanup();\n    \n    this.logger?.debug('OrganismCore cleaned up', { id: this.id });\n  }\n\n  /**\n   * Vérification de l'état de santé\n   */\n  healthCheck(): { healthy: boolean; issues: string[] } {\n    const issues: string[] = [];\n\n    if (this.health < 20) {\n      issues.push('Low health');\n    }\n\n    if (this.energyService.getEnergyLevel() < 10) {\n      issues.push('Low energy');\n    }\n\n    const neuralHealth = this.neuralService.healthCheck();\n    if (!neuralHealth.healthy) {\n      issues.push(...neuralHealth.issues);\n    }\n\n    return {\n      healthy: issues.length === 0,\n      issues\n    };\n  }\n\n  // =============================================================================\n  // MÉTHODES MANQUANTES POUR IOrganismCore\n  // =============================================================================\n\n  /**\n   * Boot the organism\n   */\n  async boot(): Promise<void> {\n    // Initialize neural mesh if needed\n    try {\n      await this.neuralService.initialize();\n      this.logger?.debug('Organism booted successfully', { id: this.id });\n    } catch (error) {\n      this.logger?.error('Failed to boot organism', { id: this.id, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Hibernate the organism\n   */\n  async hibernate(): Promise<void> {\n    try {\n      this.energyService.setEfficiency(0.1); // Reduce energy consumption\n      await this.neuralService.suspend();\n      this.logger?.debug('Organism hibernated', { id: this.id });\n    } catch (error) {\n      this.logger?.error('Failed to hibernate organism', { id: this.id, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Update organism with delta time\n   */\n  update(deltaTime: number = 16.67): void {\n    // Standard frame time processing\n    const timeFactor = deltaTime / 16.67; // Normalize to 60fps\n    \n    // Update energy decay\n    this.energyService.consumeEnergy(0.1 * timeFactor, 'metabolism');\n    \n    // Update neural processing\n    this.neuralService.update(deltaTime);\n    \n    // Health regeneration if high energy\n    if (this.energyService.getEnergyLevel() > 80) {\n      this.health = Math.min(100, this.health + (0.1 * timeFactor));\n    }\n  }\n\n  /**\n   * Stimulate organism input\n   */\n  stimulate(inputId: string, value: number): void {\n    this.neuralService.stimulate(inputId, value);\n    \n    // Consume energy for processing\n    this.energyService.consumeEnergy(0.5, `stimulation_${inputId}`);\n  }\n\n  /**\n   * Mutate organism with given rate\n   */\n  mutate(rate: number = 0.01): void {\n    const traits = this.traitService.getAllTraits();\n    const mutations: { [key: string]: number } = {};\n    \n    // Mutate each trait based on rate\n    Object.keys(traits).forEach(traitName => {\n      if (Math.random() < rate) {\n        const currentValue = traits[traitName as keyof OrganismTraits];\n        const mutation = (Math.random() - 0.5) * 0.1; // ±5% mutation\n        const newValue = Math.max(0, Math.min(1, currentValue + mutation));\n        mutations[traitName] = newValue;\n      }\n    });\n    \n    // Apply mutations\n    if (Object.keys(mutations).length > 0) {\n      this.traitService.updateTraits(mutations as Partial<OrganismTraits>, 'mutation');\n      this.lastMutation = Date.now();\n      this.logger?.debug('Mutation applied', { id: this.id, mutations });\n    }\n  }\n\n  /**\n   * Feed organism with energy\n   */\n  feed(amount: number = 10): void {\n    this.energyService.addEnergy(amount);\n    this.logger?.debug('Organism fed', { id: this.id, amount });\n  }\n\n  /**\n   * Set traits (partial update)\n   */\n  setTraits(traits: Partial<OrganismTraits>): void {\n    this.traitService.updateTraits(traits, 'external_update');\n  }\n\n  /**\n   * Get performance metrics\n   */\n  async getPerformanceMetrics() {\n    const neuralMetrics = this.neuralService.getPerformanceMetrics();\n    \n    return {\n      cpu: await this.metricsService.getCPUUsage(),\n      memory: await this.metricsService.getMemoryUsage(),\n      neuralActivity: neuralMetrics?.neuralActivity || 0,\n      connectionStrength: neuralMetrics?.connectionStrength || 0\n    };\n  }\n\n  /**\n   * Get shader parameters for WebGL rendering\n   */\n  getShaderParameters(): ShaderParameters {\n    const traits = this.getTraits();\n    const energy = this.energyService.getEnergyLevel();\n    \n    return {\n      energy: energy / 100,\n      health: this.health / 100,\n      neuralActivity: this.neuralService.getNeuralActivity() || 0,\n      creativity: traits.creativity,\n      focus: traits.focus,\n      time: Date.now() / 1000\n    };\n  }\n}"],"version":3}