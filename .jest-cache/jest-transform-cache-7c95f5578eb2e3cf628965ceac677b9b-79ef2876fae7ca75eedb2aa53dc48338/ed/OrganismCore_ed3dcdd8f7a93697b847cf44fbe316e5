6bdf3331c9b94c9d290474738bc60134
"use strict";
/**
 * OrganismCore refactorisé - Architecture hexagonale
 * Version simplifiée utilisant des services spécialisés
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganismCore = void 0;
const ErrorHandler_1 = require("./utils/ErrorHandler");
const TraitService_1 = require("./services/TraitService");
const EnergyService_1 = require("./services/EnergyService");
const NeuralService_1 = require("./services/NeuralService");
const RealMetricsService_1 = __importDefault(require("./services/RealMetricsService"));
const FeatureFlagService_1 = __importDefault(require("./services/FeatureFlagService"));
const uuid_1 = require("../shared/utils/uuid");
class OrganismCore {
    constructor(dna, initialTraits, dependencies) {
        this.health = 100;
        this.lastMutation = Date.now();
        // Validation d'entrée
        const validation = this.validateInput(dna, initialTraits);
        if (!validation.isValid) {
            throw new Error(`OrganismCore creation failed: ${validation.errors.join(', ')}`);
        }
        this.id = (0, uuid_1.generateSecureUUID)();
        this.dna = dna;
        this.logger = dependencies?.logger;
        // Initialisation des services de base
        this.metricsService = RealMetricsService_1.default.getInstance();
        this.featureFlags = FeatureFlagService_1.default.getInstance();
        // Initialisation des services métier
        this.traitService = new TraitService_1.TraitService(initialTraits);
        this.energyService = new EnergyService_1.EnergyService(100);
        // Service neural nécessite une dépendance externe
        if (dependencies?.neuralMesh) {
            this.neuralService = new NeuralService_1.NeuralService(dependencies.neuralMesh);
        }
        else {
            // Fallback pour compatibilité
            const { NeuralMesh } = require('./NeuralMesh');
            this.neuralService = new NeuralService_1.NeuralService(new NeuralMesh());
        }
        this.setupServiceListeners();
        this.logger?.debug('OrganismCore initialized', { id: this.id, dna: this.dna });
    }
    /**
     * Configuration des listeners entre services
     */
    setupServiceListeners() {
        // Écoute les changements de traits pour ajuster l'énergie
        this.traitService.addTraitChangeListener((event) => {
            this.onTraitChanged(event);
        });
        // Écoute les événements d'énergie pour log
        this.energyService.addEnergyListener((event) => {
            if (event.type === 'consumption' && event.energyAfter < 10) {
                this.logger?.debug('Low energy warning', { energy: event.energyAfter });
            }
        });
    }
    /**
     * Gestionnaire de changement de traits
     */
    onTraitChanged(event) {
        // Ajuste l'efficacité métabolique basée sur les traits
        const traits = this.traitService.getAllTraits();
        const efficiencyFactor = (traits.resilience + traits.adaptability) / 2;
        this.energyService.setEfficiency(efficiencyFactor);
        this.logger?.debug('Trait changed, metabolism adjusted', {
            trait: event.traitName,
            newValue: event.newValue,
            efficiency: efficiencyFactor
        });
    }
    /**
     * Validation des entrées
     */
    validateInput(dna, traits) {
        const errors = [];
        if (!dna || typeof dna !== 'string') {
            errors.push('DNA must be a non-empty string');
        }
        if (dna && dna.length < 10) {
            errors.push('DNA must be at least 10 characters long');
        }
        if (traits) {
            Object.entries(traits).forEach(([key, value]) => {
                if (typeof value !== 'number' || value < 0 || value > 1) {
                    errors.push(`Trait ${key} must be a number between 0 and 1`);
                }
            });
        }
        return { isValid: errors.length === 0, errors };
    }
    /**
     * Génère un ID unique
     */
    // generateId() supprimé - utilise generateSecureUUID() maintenant
    // =============================================================================
    // API PUBLIQUE - Interface IOrganismCore
    // =============================================================================
    getId() {
        return this.id;
    }
    getDNA() {
        return this.dna;
    }
    getTraits() {
        return this.traitService.getAllTraits();
    }
    updateTrait(name, value) {
        if (!this.energyService.consumeEnergy(1, `trait_update_${name}`)) {
            throw new Error('Insufficient energy to update trait');
        }
        this.traitService.updateTrait(name, value, 'manual_update');
        this.logger?.debug('Trait updated', { trait: name, value });
    }
    getEnergyLevel() {
        return this.energyService.getEnergyLevel();
    }
    getHealth() {
        return this.health;
    }
    /**
     * Évolution de l'organisme basée sur un stimulus
     */
    async evolve(stimulus) {
        const energyCost = 5;
        if (!this.energyService.consumeEnergy(energyCost, 'evolution')) {
            this.logger?.debug('Evolution skipped: insufficient energy');
            return;
        }
        try {
            const currentTraits = this.traitService.getAllTraits();
            const result = await this.neuralService.processStimulus(stimulus, currentTraits);
            if (result.success && Object.keys(result.adaptations).length > 0) {
                this.traitService.updateTraits(result.adaptations, 'evolution');
                this.lastMutation = Date.now();
                this.logger?.debug('Evolution successful', {
                    adaptations: result.adaptations,
                    confidence: result.confidence
                });
            }
        }
        catch (error) {
            this.logger?.error('Evolution failed', error);
            ErrorHandler_1.errorHandler.logSimpleError('OrganismCore', 'evolve', error, 'error');
        }
    }
    /**
     * Apprentissage à partir de données comportementales
     */
    async learn(behaviorData) {
        const energyCost = 2;
        if (!this.energyService.consumeEnergy(energyCost, 'learning')) {
            return;
        }
        const success = await this.neuralService.learn(behaviorData);
        if (success) {
            // Améliore légèrement la mémoire lors de l'apprentissage
            const currentMemory = this.traitService.getTrait('memory');
            this.traitService.updateTrait('memory', currentMemory + 0.01, 'learning');
        }
        this.logger?.debug('Learning completed', { success, data: behaviorData });
    }
    /**
     * Traitement d'un stimulus simple
     */
    processStimulus(stimulus) {
        const energyCost = 1;
        if (!this.energyService.consumeEnergy(energyCost, 'stimulus_processing')) {
            return;
        }
        // Traitement simplifié en arrière-plan
        this.neuralService.queuePattern({
            id: `pattern_${Date.now()}`,
            type: 'behavioral',
            data: stimulus,
            timestamp: Date.now(),
            confidence: 0.8
        });
        this.logger?.debug('Stimulus processed', { stimulus });
    }
    /**
     * Obtient l'état complet de l'organisme
     */
    getState() {
        const traits = this.traitService.getAllTraits();
        const energyStats = this.energyService.getEnergyStats();
        return {
            id: this.id,
            traits,
            energy: energyStats.current,
            maxEnergy: energyStats.max,
            health: this.health,
            dna: this.dna,
            lastMutation: this.lastMutation,
            balance: this.traitService.calculateBalance(),
            metabolismRate: energyStats.metabolismRate,
            age: Date.now() - parseInt(this.id.split('_')[1]) // Approximation basée sur l'ID
        };
    }
    /**
     * Génère les paramètres de shader pour le rendu visuel
     */
    generateShaderParameters() {
        const traits = this.traitService.getAllTraits();
        return {
            energy: this.energyService.getEnergyPercentage() / 100,
            health: this.health / 100,
            neuralActivity: this.neuralService.getNeuralActivity(),
            creativity: traits.creativity,
            focus: traits.focus,
            time: Date.now() / 1000,
            colorPrimary: [traits.creativity, traits.empathy, traits.intuition],
            colorSecondary: [traits.focus, traits.resilience, traits.adaptability],
            morphology: traits.adaptability,
            complexity: traits.creativity * traits.memory
        };
    }
    /**
     * Sérialisation pour sauvegarde
     */
    toJSON() {
        return {
            mesh: {},
            dna: this.dna,
            health: this.health,
            lastMutation: this.lastMutation,
            traits: this.traitService.toJSON(),
            energy: this.energyService.toJSON(),
            neural: this.neuralService.saveState(),
            timestamp: Date.now()
        };
    }
    /**
     * Restauration depuis JSON
     */
    fromJSON(data) {
        if (data.traits) {
            this.traitService.fromJSON(data.traits);
        }
        if (data.energy) {
            this.energyService.fromJSON(data.energy);
        }
        if (data.neural) {
            this.neuralService.loadState(data.neural);
        }
        this.health = data.health || 100;
        this.lastMutation = data.lastMutation || Date.now();
        this.logger?.debug('State restored from JSON', { id: this.id });
    }
    /**
     * Nettoyage et libération des ressources
     */
    cleanup() {
        this.energyService.destroy();
        this.traitService.cleanup();
        this.neuralService.cleanup();
        this.logger?.debug('OrganismCore cleaned up', { id: this.id });
    }
    /**
     * Vérification de l'état de santé
     */
    healthCheck() {
        const issues = [];
        if (this.health < 20) {
            issues.push('Low health');
        }
        if (this.energyService.getEnergyLevel() < 10) {
            issues.push('Low energy');
        }
        const neuralHealth = this.neuralService.healthCheck();
        if (!neuralHealth.healthy) {
            issues.push(...neuralHealth.issues);
        }
        return {
            healthy: issues.length === 0,
            issues
        };
    }
    // =============================================================================
    // MÉTHODES MANQUANTES POUR IOrganismCore
    // =============================================================================
    /**
     * Boot the organism
     */
    async boot() {
        // Initialize neural mesh if needed
        try {
            await this.neuralService.initialize();
            this.logger?.debug('Organism booted successfully', { id: this.id });
        }
        catch (error) {
            this.logger?.error('Failed to boot organism', { id: this.id, error });
            throw error;
        }
    }
    /**
     * Hibernate the organism
     */
    async hibernate() {
        try {
            this.energyService.setEfficiency(0.1); // Reduce energy consumption
            await this.neuralService.suspend();
            this.logger?.debug('Organism hibernated', { id: this.id });
        }
        catch (error) {
            this.logger?.error('Failed to hibernate organism', { id: this.id, error });
            throw error;
        }
    }
    /**
     * Update organism with delta time
     */
    update(deltaTime = 16.67) {
        // Standard frame time processing
        const timeFactor = deltaTime / 16.67; // Normalize to 60fps
        // Update energy decay
        this.energyService.consumeEnergy(0.1 * timeFactor, 'metabolism');
        // Update neural processing
        this.neuralService.update(deltaTime);
        // Health regeneration if high energy
        if (this.energyService.getEnergyLevel() > 80) {
            this.health = Math.min(100, this.health + (0.1 * timeFactor));
        }
    }
    /**
     * Stimulate organism input
     */
    stimulate(inputId, value) {
        this.neuralService.stimulate(inputId, value);
        // Consume energy for processing
        this.energyService.consumeEnergy(0.5, `stimulation_${inputId}`);
    }
    /**
     * Mutate organism with given rate
     */
    mutate(rate = 0.01) {
        const traits = this.traitService.getAllTraits();
        const mutations = {};
        // Mutate each trait based on rate
        Object.keys(traits).forEach(traitName => {
            if (Math.random() < rate) {
                const currentValue = traits[traitName];
                const mutation = (Math.random() - 0.5) * 0.1; // ±5% mutation
                const newValue = Math.max(0, Math.min(1, currentValue + mutation));
                mutations[traitName] = newValue;
            }
        });
        // Apply mutations
        if (Object.keys(mutations).length > 0) {
            this.traitService.updateTraits(mutations, 'mutation');
            this.lastMutation = Date.now();
            this.logger?.debug('Mutation applied', { id: this.id, mutations });
        }
    }
    /**
     * Feed organism with energy
     */
    feed(amount = 10) {
        this.energyService.addEnergy(amount);
        this.logger?.debug('Organism fed', { id: this.id, amount });
    }
    /**
     * Set traits (partial update)
     */
    setTraits(traits) {
        this.traitService.updateTraits(traits, 'external_update');
    }
    /**
     * Get performance metrics
     */
    async getPerformanceMetrics() {
        const neuralMetrics = this.neuralService.getPerformanceMetrics();
        return {
            cpu: await this.metricsService.getCPUUsage(),
            memory: await this.metricsService.getMemoryUsage(),
            neuralActivity: neuralMetrics?.neuralActivity || 0,
            connectionStrength: neuralMetrics?.connectionStrength || 0
        };
    }
    /**
     * Get shader parameters for WebGL rendering
     */
    getShaderParameters() {
        const traits = this.getTraits();
        const energy = this.energyService.getEnergyLevel();
        return {
            energy: energy / 100,
            health: this.health / 100,
            neuralActivity: this.neuralService.getNeuralActivity() || 0,
            creativity: traits.creativity,
            focus: traits.focus,
            time: Date.now() / 1000
        };
    }
}
exports.OrganismCore = OrganismCore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,