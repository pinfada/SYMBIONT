c4c057b3e5ebb8891b07e1afcab2d067
"use strict";

/* istanbul ignore next */
function cov_23ublqqmk2() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/SynapticRouter.ts";
  var hash = "12f28c4b4bd83157a77f5180c0e20d0d141e3c6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/SynapticRouter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "3": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 16
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "10": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "12": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "13": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 50
        }
      },
      "14": {
        start: {
          line: 30,
          column: 31
        },
        end: {
          line: 30,
          column: 67
        }
      },
      "15": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 81
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "18": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 36,
          column: 82
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 24
        }
      },
      "21": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 37
        }
      },
      "22": {
        start: {
          line: 45,
          column: 38
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "23": {
        start: {
          line: 47,
          column: 43
        },
        end: {
          line: 47,
          column: 53
        }
      },
      "24": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 20
        }
      },
      "25": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "26": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 20
        }
      },
      "27": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 21
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 27
          }
        },
        line: 41
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 39
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 36
          },
          end: {
            line: 45,
            column: 50
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 41
          },
          end: {
            line: 47,
            column: 55
          }
        },
        line: 47
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 48
          },
          end: {
            line: 49,
            column: 51
          }
        },
        line: 49
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 51
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 28
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 54
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 58
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/SynapticRouter.ts",
      mappings: ";;;AAAA,qDAAkD;AAClD,6DAAoD;AAEpD,wCAAwC;AACxC,MAAM,YAAY;IAChB,gBAAe,CAAC;CACjB;AAMD,MAAa,cAAe,SAAQ,YAAY;IAU9C;QACE,KAAK,EAAE,CAAC;QAPV,0DAA0D;QAClD,gBAAW,GAA+B,IAAI,GAAG,EAAE,CAAC;QAC5D,kDAAkD;QAC1C,UAAK,GAAgC,IAAI,GAAG,EAAE,CAAC;QAC/C,WAAM,GAAqB,IAAI,GAAG,EAAE,CAAC;QAI3C,IAAI,CAAC,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;QACnC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;YAC7B,cAAc,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QACjD,CAAC;QACD,OAAO,cAAc,CAAC,QAAQ,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAsB;QAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAE3C,uBAAuB;QACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE5D,IAAK,cAAwC,EAAE,SAAS,EAAE,CAAC;YACzD,qBAAM,CAAC,IAAI,CAAC,0BAA0B,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YACtD,OAAQ,cAAgD,EAAE,iBAAiB,CAAC;QAC9E,CAAC;QAED,iBAAiB;QACjB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAG,cAAmC,EAAE,KAAK,CAAC,CAAC;QAEjG,gBAAgB;QAChB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAG,cAAmC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEvF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,iBAAiB,KAAU,CAAC;IACpC,sDAAsD;IAC9C,WAAW,CAAC,OAAsB,IAAY,OAAO,EAAE,CAAA,CAAC,CAAC;IACjE,sDAAsD;IAC9C,KAAK,CAAC,gBAAgB,CAAC,OAAsB,IAAiF,OAAO,EAAE,CAAC,CAAC,CAAC;IAClJ,wDAAwD;IAChD,KAAK,CAAC,cAAc,CAAC,OAAsB,EAAE,KAAU,IAAsB,OAAO,EAAE,CAAC,CAAC,CAAC;IACjG,wDAAwD;IAChD,gBAAgB,CAAC,QAAgB,EAAE,KAAU,EAAE,QAAa,IAAS,CAAC;IAE9E,wDAAwD;IACxD,KAAK,CAAC,IAAY,EAAE,MAAc;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,OAAY;QACjC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,sDAAsD;IACtD,cAAc,CAAC,OAAY;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;CAGF;AApED,wCAoEC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/SynapticRouter.ts"],
      sourcesContent: ["import { NeuralMesh } from '../neural/NeuralMesh';\r\nimport { logger } from '@shared/utils/secureLogger';\r\n\r\n// Types minimaux pour lever les erreurs\r\nclass EventEmitter {\r\n  constructor() {}\r\n}\r\n\r\ninterface RoutePrection { predicted?: any; predictedResponse?: any; route?: any; }\r\ninterface CachedResponse { response: any; timestamp: number; }\r\ninterface NeuralImpulse { type: string; [key: string]: any; }\r\n\r\nexport class SynapticRouter extends EventEmitter {\r\n  private static instance: SynapticRouter;\r\n  // @ts-expect-error Mesh r\xE9serv\xE9 pour usage futur\r\n  private neuralMesh: NeuralMesh;\r\n  // @ts-expect-error Pr\xE9dictions r\xE9serv\xE9es pour usage futur\r\n  private predictions: Map<string, RoutePrection> = new Map();\r\n  // @ts-expect-error Cache r\xE9serv\xE9 pour usage futur\r\n  private cache: Map<string, CachedResponse> = new Map();\r\n  private routes: Map<string, any> = new Map();\r\n  \r\n  private constructor() {\r\n    super();\r\n    this.neuralMesh = new NeuralMesh();\r\n    this.setupLearningLoop();\r\n  }\r\n\r\n  public static getInstance(): SynapticRouter {\r\n    if (!SynapticRouter.instance) {\r\n      SynapticRouter.instance = new SynapticRouter();\r\n    }\r\n    return SynapticRouter.instance;\r\n  }\r\n\r\n  public async routeImpulse(impulse: NeuralImpulse): Promise<unknown> {\r\n    const routeKey = this.getRouteKey(impulse);\r\n    \r\n    // Tentative pr\xE9dictive\r\n    const optimizedRoute = await this.findOptimalRoute(impulse);\r\n    \r\n    if ((optimizedRoute as {predicted?: boolean})?.predicted) {\r\n      logger.info(`\uD83E\uDDE0 Predicted route for ${impulse.type}`);\r\n      return (optimizedRoute as {predictedResponse?: unknown})?.predictedResponse;\r\n    }\r\n\r\n    // Route standard\r\n    const response = await this.performRouting(impulse, (optimizedRoute as {route?: string})?.route);\r\n    \r\n    // Apprentissage\r\n    this.learnFromRouting(routeKey, (optimizedRoute as {route?: string})?.route, response);\r\n    \r\n    return response;\r\n  }\r\n\r\n  private setupLearningLoop(): void {}\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  private getRouteKey(impulse: NeuralImpulse): string { return '' }\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  private async findOptimalRoute(impulse: NeuralImpulse): Promise<{predicted?: boolean; predictedResponse?: unknown; route?: string}> { return {}; }\r\n  // @ts-expect-error Param\xE8tres r\xE9serv\xE9s pour usage futur\r\n  private async performRouting(impulse: NeuralImpulse, route: any): Promise<unknown> { return {}; }\r\n  // @ts-expect-error Param\xE8tres r\xE9serv\xE9s pour usage futur\r\n  private learnFromRouting(routeKey: string, route: any, response: any): void {}\r\n\r\n  // @ts-expect-error Param\xE8tres r\xE9serv\xE9s pour usage futur\r\n  route(type: string, target: string): any {\r\n    return null;\r\n  }\r\n\r\n  addRoute(type: string, handler: any): void {\r\n    this.routes.set(type, handler);\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  processImpulse(impulse: any): any {\r\n    return null;\r\n  }\r\n\r\n  // Suite de l'impl\xE9mentation...\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "12f28c4b4bd83157a77f5180c0e20d0d141e3c6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23ublqqmk2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23ublqqmk2();
cov_23ublqqmk2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23ublqqmk2().s[1]++;
exports.SynapticRouter = void 0;
const NeuralMesh_1 =
/* istanbul ignore next */
(cov_23ublqqmk2().s[2]++, require("../neural/NeuralMesh"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_23ublqqmk2().s[3]++, require("@shared/utils/secureLogger"));
// Types minimaux pour lever les erreurs
class EventEmitter {
  constructor() {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[0]++;
  }
}
class SynapticRouter extends EventEmitter {
  constructor() {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[1]++;
    cov_23ublqqmk2().s[4]++;
    super();
    // @ts-expect-error Prédictions réservées pour usage futur
    /* istanbul ignore next */
    cov_23ublqqmk2().s[5]++;
    this.predictions = new Map();
    // @ts-expect-error Cache réservé pour usage futur
    /* istanbul ignore next */
    cov_23ublqqmk2().s[6]++;
    this.cache = new Map();
    /* istanbul ignore next */
    cov_23ublqqmk2().s[7]++;
    this.routes = new Map();
    /* istanbul ignore next */
    cov_23ublqqmk2().s[8]++;
    this.neuralMesh = new NeuralMesh_1.NeuralMesh();
    /* istanbul ignore next */
    cov_23ublqqmk2().s[9]++;
    this.setupLearningLoop();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[2]++;
    cov_23ublqqmk2().s[10]++;
    if (!SynapticRouter.instance) {
      /* istanbul ignore next */
      cov_23ublqqmk2().b[0][0]++;
      cov_23ublqqmk2().s[11]++;
      SynapticRouter.instance = new SynapticRouter();
    } else
    /* istanbul ignore next */
    {
      cov_23ublqqmk2().b[0][1]++;
    }
    cov_23ublqqmk2().s[12]++;
    return SynapticRouter.instance;
  }
  async routeImpulse(impulse) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[3]++;
    const routeKey =
    /* istanbul ignore next */
    (cov_23ublqqmk2().s[13]++, this.getRouteKey(impulse));
    // Tentative prédictive
    const optimizedRoute =
    /* istanbul ignore next */
    (cov_23ublqqmk2().s[14]++, await this.findOptimalRoute(impulse));
    /* istanbul ignore next */
    cov_23ublqqmk2().s[15]++;
    if (optimizedRoute?.predicted) {
      /* istanbul ignore next */
      cov_23ublqqmk2().b[1][0]++;
      cov_23ublqqmk2().s[16]++;
      secureLogger_1.logger.info(`🧠 Predicted route for ${impulse.type}`);
      /* istanbul ignore next */
      cov_23ublqqmk2().s[17]++;
      return optimizedRoute?.predictedResponse;
    } else
    /* istanbul ignore next */
    {
      cov_23ublqqmk2().b[1][1]++;
    }
    // Route standard
    const response =
    /* istanbul ignore next */
    (cov_23ublqqmk2().s[18]++, await this.performRouting(impulse, optimizedRoute?.route));
    // Apprentissage
    /* istanbul ignore next */
    cov_23ublqqmk2().s[19]++;
    this.learnFromRouting(routeKey, optimizedRoute?.route, response);
    /* istanbul ignore next */
    cov_23ublqqmk2().s[20]++;
    return response;
  }
  setupLearningLoop() {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[4]++;
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  getRouteKey(impulse) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[5]++;
    cov_23ublqqmk2().s[21]++;
    return '';
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  async findOptimalRoute(impulse) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[6]++;
    cov_23ublqqmk2().s[22]++;
    return {};
  }
  // @ts-expect-error Paramètres réservés pour usage futur
  async performRouting(impulse, route) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[7]++;
    cov_23ublqqmk2().s[23]++;
    return {};
  }
  // @ts-expect-error Paramètres réservés pour usage futur
  learnFromRouting(routeKey, route, response) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[8]++;
  }
  // @ts-expect-error Paramètres réservés pour usage futur
  route(type, target) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[9]++;
    cov_23ublqqmk2().s[24]++;
    return null;
  }
  addRoute(type, handler) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[10]++;
    cov_23ublqqmk2().s[25]++;
    this.routes.set(type, handler);
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  processImpulse(impulse) {
    /* istanbul ignore next */
    cov_23ublqqmk2().f[11]++;
    cov_23ublqqmk2().s[26]++;
    return null;
  }
}
/* istanbul ignore next */
cov_23ublqqmk2().s[27]++;
exports.SynapticRouter = SynapticRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjN1YmxxcW1rMiIsImFjdHVhbENvdmVyYWdlIiwicyIsIk5ldXJhbE1lc2hfMSIsInJlcXVpcmUiLCJzZWN1cmVMb2dnZXJfMSIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiZiIsIlN5bmFwdGljUm91dGVyIiwicHJlZGljdGlvbnMiLCJNYXAiLCJjYWNoZSIsInJvdXRlcyIsIm5ldXJhbE1lc2giLCJOZXVyYWxNZXNoIiwic2V0dXBMZWFybmluZ0xvb3AiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwiYiIsInJvdXRlSW1wdWxzZSIsImltcHVsc2UiLCJyb3V0ZUtleSIsImdldFJvdXRlS2V5Iiwib3B0aW1pemVkUm91dGUiLCJmaW5kT3B0aW1hbFJvdXRlIiwicHJlZGljdGVkIiwibG9nZ2VyIiwiaW5mbyIsInR5cGUiLCJwcmVkaWN0ZWRSZXNwb25zZSIsInJlc3BvbnNlIiwicGVyZm9ybVJvdXRpbmciLCJyb3V0ZSIsImxlYXJuRnJvbVJvdXRpbmciLCJ0YXJnZXQiLCJhZGRSb3V0ZSIsImhhbmRsZXIiLCJzZXQiLCJwcm9jZXNzSW1wdWxzZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvbW50L2MvVXNlcnMvbV9vbGkvUHJvamV0cy9TWU1CSU9OVC9zcmMvY29yZS9tZXNzYWdpbmcvU3luYXB0aWNSb3V0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV1cmFsTWVzaCB9IGZyb20gJy4uL25ldXJhbC9OZXVyYWxNZXNoJztcclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNoYXJlZC91dGlscy9zZWN1cmVMb2dnZXInO1xyXG5cclxuLy8gVHlwZXMgbWluaW1hdXggcG91ciBsZXZlciBsZXMgZXJyZXVyc1xyXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxufVxyXG5cclxuaW50ZXJmYWNlIFJvdXRlUHJlY3Rpb24geyBwcmVkaWN0ZWQ/OiBhbnk7IHByZWRpY3RlZFJlc3BvbnNlPzogYW55OyByb3V0ZT86IGFueTsgfVxyXG5pbnRlcmZhY2UgQ2FjaGVkUmVzcG9uc2UgeyByZXNwb25zZTogYW55OyB0aW1lc3RhbXA6IG51bWJlcjsgfVxyXG5pbnRlcmZhY2UgTmV1cmFsSW1wdWxzZSB7IHR5cGU6IHN0cmluZzsgW2tleTogc3RyaW5nXTogYW55OyB9XHJcblxyXG5leHBvcnQgY2xhc3MgU3luYXB0aWNSb3V0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBTeW5hcHRpY1JvdXRlcjtcclxuICAvLyBAdHMtZXhwZWN0LWVycm9yIE1lc2ggcsOpc2VydsOpIHBvdXIgdXNhZ2UgZnV0dXJcclxuICBwcml2YXRlIG5ldXJhbE1lc2g6IE5ldXJhbE1lc2g7XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcsOpZGljdGlvbnMgcsOpc2VydsOpZXMgcG91ciB1c2FnZSBmdXR1clxyXG4gIHByaXZhdGUgcHJlZGljdGlvbnM6IE1hcDxzdHJpbmcsIFJvdXRlUHJlY3Rpb24+ID0gbmV3IE1hcCgpO1xyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgQ2FjaGUgcsOpc2VydsOpIHBvdXIgdXNhZ2UgZnV0dXJcclxuICBwcml2YXRlIGNhY2hlOiBNYXA8c3RyaW5nLCBDYWNoZWRSZXNwb25zZT4gPSBuZXcgTWFwKCk7XHJcbiAgcHJpdmF0ZSByb3V0ZXM6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XHJcbiAgXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5ldXJhbE1lc2ggPSBuZXcgTmV1cmFsTWVzaCgpO1xyXG4gICAgdGhpcy5zZXR1cExlYXJuaW5nTG9vcCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBTeW5hcHRpY1JvdXRlciB7XHJcbiAgICBpZiAoIVN5bmFwdGljUm91dGVyLmluc3RhbmNlKSB7XHJcbiAgICAgIFN5bmFwdGljUm91dGVyLmluc3RhbmNlID0gbmV3IFN5bmFwdGljUm91dGVyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3luYXB0aWNSb3V0ZXIuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgcm91dGVJbXB1bHNlKGltcHVsc2U6IE5ldXJhbEltcHVsc2UpOiBQcm9taXNlPHVua25vd24+IHtcclxuICAgIGNvbnN0IHJvdXRlS2V5ID0gdGhpcy5nZXRSb3V0ZUtleShpbXB1bHNlKTtcclxuICAgIFxyXG4gICAgLy8gVGVudGF0aXZlIHByw6lkaWN0aXZlXHJcbiAgICBjb25zdCBvcHRpbWl6ZWRSb3V0ZSA9IGF3YWl0IHRoaXMuZmluZE9wdGltYWxSb3V0ZShpbXB1bHNlKTtcclxuICAgIFxyXG4gICAgaWYgKChvcHRpbWl6ZWRSb3V0ZSBhcyB7cHJlZGljdGVkPzogYm9vbGVhbn0pPy5wcmVkaWN0ZWQpIHtcclxuICAgICAgbG9nZ2VyLmluZm8oYPCfp6AgUHJlZGljdGVkIHJvdXRlIGZvciAke2ltcHVsc2UudHlwZX1gKTtcclxuICAgICAgcmV0dXJuIChvcHRpbWl6ZWRSb3V0ZSBhcyB7cHJlZGljdGVkUmVzcG9uc2U/OiB1bmtub3dufSk/LnByZWRpY3RlZFJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJvdXRlIHN0YW5kYXJkXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucGVyZm9ybVJvdXRpbmcoaW1wdWxzZSwgKG9wdGltaXplZFJvdXRlIGFzIHtyb3V0ZT86IHN0cmluZ30pPy5yb3V0ZSk7XHJcbiAgICBcclxuICAgIC8vIEFwcHJlbnRpc3NhZ2VcclxuICAgIHRoaXMubGVhcm5Gcm9tUm91dGluZyhyb3V0ZUtleSwgKG9wdGltaXplZFJvdXRlIGFzIHtyb3V0ZT86IHN0cmluZ30pPy5yb3V0ZSwgcmVzcG9uc2UpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldHVwTGVhcm5pbmdMb29wKCk6IHZvaWQge31cclxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhcmFtw6h0cmUgcsOpc2VydsOpIHBvdXIgdXNhZ2UgZnV0dXJcclxuICBwcml2YXRlIGdldFJvdXRlS2V5KGltcHVsc2U6IE5ldXJhbEltcHVsc2UpOiBzdHJpbmcgeyByZXR1cm4gJycgfVxyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUGFyYW3DqHRyZSByw6lzZXJ2w6kgcG91ciB1c2FnZSBmdXR1clxyXG4gIHByaXZhdGUgYXN5bmMgZmluZE9wdGltYWxSb3V0ZShpbXB1bHNlOiBOZXVyYWxJbXB1bHNlKTogUHJvbWlzZTx7cHJlZGljdGVkPzogYm9vbGVhbjsgcHJlZGljdGVkUmVzcG9uc2U/OiB1bmtub3duOyByb3V0ZT86IHN0cmluZ30+IHsgcmV0dXJuIHt9OyB9XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXJhbcOodHJlcyByw6lzZXJ2w6lzIHBvdXIgdXNhZ2UgZnV0dXJcclxuICBwcml2YXRlIGFzeW5jIHBlcmZvcm1Sb3V0aW5nKGltcHVsc2U6IE5ldXJhbEltcHVsc2UsIHJvdXRlOiBhbnkpOiBQcm9taXNlPHVua25vd24+IHsgcmV0dXJuIHt9OyB9XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXJhbcOodHJlcyByw6lzZXJ2w6lzIHBvdXIgdXNhZ2UgZnV0dXJcclxuICBwcml2YXRlIGxlYXJuRnJvbVJvdXRpbmcocm91dGVLZXk6IHN0cmluZywgcm91dGU6IGFueSwgcmVzcG9uc2U6IGFueSk6IHZvaWQge31cclxuXHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXJhbcOodHJlcyByw6lzZXJ2w6lzIHBvdXIgdXNhZ2UgZnV0dXJcclxuICByb3V0ZSh0eXBlOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgYWRkUm91dGUodHlwZTogc3RyaW5nLCBoYW5kbGVyOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMucm91dGVzLnNldCh0eXBlLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUGFyYW3DqHRyZSByw6lzZXJ2w6kgcG91ciB1c2FnZSBmdXR1clxyXG4gIHByb2Nlc3NJbXB1bHNlKGltcHVsc2U6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIFN1aXRlIGRlIGwnaW1wbMOpbWVudGF0aW9uLi4uXHJcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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