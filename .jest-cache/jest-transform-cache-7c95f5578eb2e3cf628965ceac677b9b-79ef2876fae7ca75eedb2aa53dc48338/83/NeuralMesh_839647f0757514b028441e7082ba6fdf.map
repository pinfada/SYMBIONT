{"version":3,"names":["cov_1p0tt5b731","actualCoverage","s","NeuralMesh","constructor","f","nodes","Map","connections","activations","learningRate","addNode","id","type","bias","b","node","activation","set","addConnection","fromId","toId","weight","has","Error","get","stimulate","nodeId","value","console","warn","propagate","fromActivation","currentActivation","newActivation","sigmoid","x","Math","exp","getActivation","mutate","rate","values","random","max","min","getNeuralActivity","totalActivity","nodeCount","abs","getConnectionStrength","totalWeight","connectionCount","toJSON","Array","from","map","entries","Object","fromEntries","initialize","size","setupDefaultNetwork","suspend","clear","log","getCPUUsage","complexity","getMemoryUsage","memorySize","saveState","key","loadState","state","reset","healthCheck","issues","push","connectedNodes","Set","add","keys","orphanedNodes","filter","length","join","healthy","cleanup","processPattern","pattern","inputNodes","forEach","index","outputNodes","learn","data","feedback","getPerformanceMetrics","reduce","sum","neuralActivity","connectionStrength","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts"],"sourcesContent":["import { INeuralMesh } from './interfaces/INeuralMesh';\r\n\r\nexport class NeuralMesh implements INeuralMesh {\r\n  private nodes: Map<string, { type: string; activation: number; bias: number }> = new Map();\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux réservé pour usage futur\r\n  private learningRate: number = 0.01;\r\n\r\n  constructor() {\r\n    // Initialize empty network\r\n  }\r\n\r\n  /**\r\n   * Ajoute un nœud au réseau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: { type: string; activation: number; bias: number } = {\r\n      type,\r\n      activation: 0,\r\n      bias\r\n    };\r\n\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux nœuds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, new Map());\r\n    }\r\n    this.connections.get(fromId)!.set(toId, weight);\r\n  }\r\n\r\n  /**\r\n   * Stimule un nœud d'entrée\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      console.warn(`Cannot stimulate non-input node: ${nodeId}`);\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation à travers le réseau\r\n   */\r\n  propagate(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const [toId, weight] of connections) {\r\n        const currentActivation = this.activations.get(toId) || 0;\r\n        const newActivation = currentActivation + (fromActivation * weight);\r\n        this.activations.set(toId, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmoïde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Récupère l'activation d'un nœud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation aléatoire au réseau\r\n   */\r\n  mutate(rate: number = 0.05): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const [toId, weight] of connections) {\r\n        if (Math.random() < rate) {\r\n          connections.set(toId, weight + (Math.random() - 0.5) * 0.2);\r\n          connections.set(toId, Math.max(-2, Math.min(2, connections.get(toId) || 0)));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (Math.random() < rate) {\r\n        node.bias += (Math.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activité neurale globale\r\n   */\r\n  getNeuralActivity(): number {\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const weight of connections.values()) {\r\n        totalWeight += Math.abs(weight);\r\n        connectionCount++;\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).map(connections => Array.from(connections.entries())),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le réseau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un réseau par défaut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    console.log('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual computation time\r\n    const complexity = this.nodes.size * this.connections.size;\r\n    return Math.min(1, complexity / 1000);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual memory footprint\r\n    const memorySize = (this.nodes.size + this.connections.size) * 64; // bytes approximation\r\n    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n\r\n  /**\r\n   * Save current state for persistence\r\n   */\r\n  saveState(): any {\r\n    return {\r\n      nodes: Object.fromEntries(this.nodes),\r\n      connections: Object.fromEntries(\r\n        Array.from(this.connections.entries()).map(([key, map]) => [\r\n          key,\r\n          Object.fromEntries(map)\r\n        ])\r\n      ),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load state from saved data\r\n   */\r\n  loadState(state: any): void {\r\n    if (state.nodes) {\r\n      this.nodes.clear();\r\n      for (const [id, node] of Object.entries(state.nodes)) {\r\n        this.nodes.set(id, node as any);\r\n      }\r\n    }\r\n    \r\n    if (state.connections) {\r\n      this.connections.clear();\r\n      for (const [fromId, connections] of Object.entries(state.connections)) {\r\n        this.connections.set(fromId, new Map(Object.entries(connections as any)));\r\n      }\r\n    }\r\n    \r\n    if (state.activations) {\r\n      this.activations.clear();\r\n      for (const [id, activation] of Object.entries(state.activations)) {\r\n        this.activations.set(id, activation as number);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset neural mesh to initial state\r\n   */\r\n  reset(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.setupDefaultNetwork();\r\n  }\r\n\r\n  /**\r\n   * Health check for neural mesh\r\n   */\r\n  healthCheck(): { healthy: boolean; issues: string[] } {\r\n    const issues: string[] = [];\r\n    \r\n    if (this.nodes.size === 0) {\r\n      issues.push('No nodes in neural mesh');\r\n    }\r\n    \r\n    if (this.connections.size === 0) {\r\n      issues.push('No connections in neural mesh');\r\n    }\r\n    \r\n    // Check for orphaned nodes\r\n    const connectedNodes = new Set<string>();\r\n    for (const [fromId, connections] of this.connections) {\r\n      connectedNodes.add(fromId);\r\n      for (const toId of connections.keys()) {\r\n        connectedNodes.add(toId);\r\n      }\r\n    }\r\n    \r\n    const orphanedNodes = Array.from(this.nodes.keys()).filter(\r\n      nodeId => !connectedNodes.has(nodeId)\r\n    );\r\n    \r\n    if (orphanedNodes.length > 0) {\r\n      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);\r\n    }\r\n    \r\n    return {\r\n      healthy: issues.length === 0,\r\n      issues\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  cleanup(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n  }\r\n\r\n  /**\r\n   * Process a pattern through the neural mesh (optional)\r\n   */\r\n  async processPattern(pattern: any): Promise<any> {\r\n    // Simple pattern processing - stimulate input nodes with pattern data\r\n    if (pattern && typeof pattern === 'object') {\r\n      const inputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'input')\r\n        .map(([id]) => id);\r\n\r\n      // Stimulate input nodes with pattern values\r\n      Object.entries(pattern).forEach(([, value], index) => {\r\n        if (index < inputNodes.length && typeof value === 'number') {\r\n          this.stimulate(inputNodes[index], value);\r\n        }\r\n      });\r\n\r\n      // Propagate and return output activations\r\n      this.propagate();\r\n      \r\n      const outputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'output');\r\n      \r\n      return Object.fromEntries(\r\n        outputNodes.map(([id]) => [id, this.getActivation(id)])\r\n      );\r\n    }\r\n    \r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Learn from data (optional)\r\n   */\r\n  async learn(data: any): Promise<void> {\r\n    // Simple learning implementation - adjust based on data\r\n    if (data && typeof data === 'object' && data.feedback) {\r\n      // Apply small mutations based on feedback\r\n      const learningRate = Math.abs(data.feedback) * 0.01;\r\n      this.mutate(learningRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics (optional)\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return {\r\n      nodeCount: this.nodes.size,\r\n      connectionCount: Array.from(this.connections.values()).reduce(\r\n        (sum, connections) => sum + connections.size, 0\r\n      ),\r\n      neuralActivity: this.getNeuralActivity(),\r\n      connectionStrength: this.getConnectionStrength()\r\n    };\r\n  }\r\n}"],"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","ignoreList":[]}