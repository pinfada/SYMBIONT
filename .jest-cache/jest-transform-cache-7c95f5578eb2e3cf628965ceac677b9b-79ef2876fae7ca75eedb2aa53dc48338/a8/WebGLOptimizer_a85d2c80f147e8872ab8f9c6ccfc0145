a2f3e5270531fedc01312bb6611e2890
"use strict";

/* istanbul ignore next */
function cov_1l8hvq95px() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/WebGLOptimizer.ts";
  var hash = "3f53851e2f1adb941990bf3ef88a8871553ab5f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/WebGLOptimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 21
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "5": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "6": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "7": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 36
        }
      },
      "8": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 43,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 36
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 38
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 11,
            column: 34
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 25,
            column: 9
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/WebGLOptimizer.ts",
      mappings: ";;;AAAA;;;;;GAKG;AACH,MAAa,cAAc;IAIzB,YAAY,EAAkD,EAAE,SAAS,GAAG,EAAE;QAC5E,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,UAAkB;QAC/B,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,EAAE,EAAE,CAAC;YACrC,8BAA8B;YAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;QACxB,CAAC;aAAM,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,EAAE,EAAE,CAAC;YAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QACzB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,4CAA4C;QAC5C,oDAAoD;IACtD,CAAC;IAED;;OAEG;IACH,sDAAsD;IACtD,UAAU,CAAC,KAAgC;QACzC,oCAAoC;QACpC,4DAA4D;IAC9D,CAAC;CACF;AArCD,wCAqCC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/optimizers/WebGLOptimizer.ts"],
      sourcesContent: ["/**\r\n * WebGLOptimizer - Optimisation du rendu WebGL\r\n * - Adaptation du frame rate\r\n * - Nettoyage des buffers/textures\r\n * - Adaptation dynamique de la qualit\xE9\r\n */\r\nexport class WebGLOptimizer {\r\n  // @ts-expect-error Contexte r\xE9serv\xE9 pour usage futur\r\n  private gl: WebGLRenderingContext | WebGL2RenderingContext\r\n  private targetFPS: number\r\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext, targetFPS = 60) {\r\n    this.gl = gl\r\n    this.targetFPS = targetFPS\r\n  }\r\n\r\n  /**\r\n   * Adapte le frame rate en fonction de la charge\r\n   */\r\n  adaptFrameRate(currentFPS: number) {\r\n    if (currentFPS < this.targetFPS - 10) {\r\n      // Baisse la qualit\xE9 (exemple)\r\n      this.setQuality('low')\r\n    } else if (currentFPS > this.targetFPS + 10) {\r\n      this.setQuality('high')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Nettoie les buffers et textures inutilis\xE9s\r\n   */\r\n  cleanupResources() {\r\n    // \xC0 compl\xE9ter selon l'impl\xE9mentation r\xE9elle\r\n    // Exemple : gl.deleteBuffer, gl.deleteTexture, etc.\r\n  }\r\n\r\n  /**\r\n   * Change dynamiquement la qualit\xE9 de rendu\r\n   */\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  setQuality(level: 'low' | 'medium' | 'high') {\r\n    // \xC0 brancher sur le moteur de rendu\r\n    // Ex : r\xE9duire la r\xE9solution, simplifier la g\xE9om\xE9trie, etc.\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3f53851e2f1adb941990bf3ef88a8871553ab5f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1l8hvq95px = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1l8hvq95px();
cov_1l8hvq95px().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1l8hvq95px().s[1]++;
exports.WebGLOptimizer = void 0;
/**
 * WebGLOptimizer - Optimisation du rendu WebGL
 * - Adaptation du frame rate
 * - Nettoyage des buffers/textures
 * - Adaptation dynamique de la qualité
 */
class WebGLOptimizer {
  constructor(gl, targetFPS =
  /* istanbul ignore next */
  (cov_1l8hvq95px().b[0][0]++, 60)) {
    /* istanbul ignore next */
    cov_1l8hvq95px().f[0]++;
    cov_1l8hvq95px().s[2]++;
    this.gl = gl;
    /* istanbul ignore next */
    cov_1l8hvq95px().s[3]++;
    this.targetFPS = targetFPS;
  }
  /**
   * Adapte le frame rate en fonction de la charge
   */
  adaptFrameRate(currentFPS) {
    /* istanbul ignore next */
    cov_1l8hvq95px().f[1]++;
    cov_1l8hvq95px().s[4]++;
    if (currentFPS < this.targetFPS - 10) {
      /* istanbul ignore next */
      cov_1l8hvq95px().b[1][0]++;
      cov_1l8hvq95px().s[5]++;
      // Baisse la qualité (exemple)
      this.setQuality('low');
    } else {
      /* istanbul ignore next */
      cov_1l8hvq95px().b[1][1]++;
      cov_1l8hvq95px().s[6]++;
      if (currentFPS > this.targetFPS + 10) {
        /* istanbul ignore next */
        cov_1l8hvq95px().b[2][0]++;
        cov_1l8hvq95px().s[7]++;
        this.setQuality('high');
      } else
      /* istanbul ignore next */
      {
        cov_1l8hvq95px().b[2][1]++;
      }
    }
  }
  /**
   * Nettoie les buffers et textures inutilisés
   */
  cleanupResources() {
    /* istanbul ignore next */
    cov_1l8hvq95px().f[2]++;
  } // À compléter selon l'implémentation réelle
  // Exemple : gl.deleteBuffer, gl.deleteTexture, etc.
  /**
   * Change dynamiquement la qualité de rendu
   */
  // @ts-expect-error Paramètre réservé pour usage futur
  setQuality(level) {
    /* istanbul ignore next */
    cov_1l8hvq95px().f[3]++;
  } // À brancher sur le moteur de rendu
  // Ex : réduire la résolution, simplifier la géométrie, etc.
}
/* istanbul ignore next */
cov_1l8hvq95px().s[8]++;
exports.WebGLOptimizer = WebGLOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXZWJHTE9wdGltaXplciIsImNvbnN0cnVjdG9yIiwiZ2wiLCJ0YXJnZXRGUFMiLCJjb3ZfMWw4aHZxOTVweCIsImIiLCJmIiwicyIsImFkYXB0RnJhbWVSYXRlIiwiY3VycmVudEZQUyIsInNldFF1YWxpdHkiLCJjbGVhbnVwUmVzb3VyY2VzIiwibGV2ZWwiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL29wdGltaXplcnMvV2ViR0xPcHRpbWl6ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFdlYkdMT3B0aW1pemVyIC0gT3B0aW1pc2F0aW9uIGR1IHJlbmR1IFdlYkdMXHJcbiAqIC0gQWRhcHRhdGlvbiBkdSBmcmFtZSByYXRlXHJcbiAqIC0gTmV0dG95YWdlIGRlcyBidWZmZXJzL3RleHR1cmVzXHJcbiAqIC0gQWRhcHRhdGlvbiBkeW5hbWlxdWUgZGUgbGEgcXVhbGl0w6lcclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJHTE9wdGltaXplciB7XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBDb250ZXh0ZSByw6lzZXJ2w6kgcG91ciB1c2FnZSBmdXR1clxyXG4gIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHRcclxuICBwcml2YXRlIHRhcmdldEZQUzogbnVtYmVyXHJcbiAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsIHRhcmdldEZQUyA9IDYwKSB7XHJcbiAgICB0aGlzLmdsID0gZ2xcclxuICAgIHRoaXMudGFyZ2V0RlBTID0gdGFyZ2V0RlBTXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGFwdGUgbGUgZnJhbWUgcmF0ZSBlbiBmb25jdGlvbiBkZSBsYSBjaGFyZ2VcclxuICAgKi9cclxuICBhZGFwdEZyYW1lUmF0ZShjdXJyZW50RlBTOiBudW1iZXIpIHtcclxuICAgIGlmIChjdXJyZW50RlBTIDwgdGhpcy50YXJnZXRGUFMgLSAxMCkge1xyXG4gICAgICAvLyBCYWlzc2UgbGEgcXVhbGl0w6kgKGV4ZW1wbGUpXHJcbiAgICAgIHRoaXMuc2V0UXVhbGl0eSgnbG93JylcclxuICAgIH0gZWxzZSBpZiAoY3VycmVudEZQUyA+IHRoaXMudGFyZ2V0RlBTICsgMTApIHtcclxuICAgICAgdGhpcy5zZXRRdWFsaXR5KCdoaWdoJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE5ldHRvaWUgbGVzIGJ1ZmZlcnMgZXQgdGV4dHVyZXMgaW51dGlsaXPDqXNcclxuICAgKi9cclxuICBjbGVhbnVwUmVzb3VyY2VzKCkge1xyXG4gICAgLy8gw4AgY29tcGzDqXRlciBzZWxvbiBsJ2ltcGzDqW1lbnRhdGlvbiByw6llbGxlXHJcbiAgICAvLyBFeGVtcGxlIDogZ2wuZGVsZXRlQnVmZmVyLCBnbC5kZWxldGVUZXh0dXJlLCBldGMuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2UgZHluYW1pcXVlbWVudCBsYSBxdWFsaXTDqSBkZSByZW5kdVxyXG4gICAqL1xyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUGFyYW3DqHRyZSByw6lzZXJ2w6kgcG91ciB1c2FnZSBmdXR1clxyXG4gIHNldFF1YWxpdHkobGV2ZWw6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcpIHtcclxuICAgIC8vIMOAIGJyYW5jaGVyIHN1ciBsZSBtb3RldXIgZGUgcmVuZHVcclxuICAgIC8vIEV4IDogcsOpZHVpcmUgbGEgcsOpc29sdXRpb24sIHNpbXBsaWZpZXIgbGEgZ8Opb23DqXRyaWUsIGV0Yy5cclxuICB9XHJcbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztBQU1BLE1BQWFBLGNBQWM7RUFJekJDLFlBQVlDLEVBQWtELEVBQUVDLFNBQVM7RUFBQTtFQUFBLENBQUFDLGNBQUEsR0FBQUMsQ0FBQSxVQUFHLEVBQUU7SUFBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7SUFBQUYsY0FBQSxHQUFBRyxDQUFBO0lBQzVFLElBQUksQ0FBQ0wsRUFBRSxHQUFHQSxFQUFFO0lBQUE7SUFBQUUsY0FBQSxHQUFBRyxDQUFBO0lBQ1osSUFBSSxDQUFDSixTQUFTLEdBQUdBLFNBQVM7RUFDNUI7RUFFQTs7O0VBR0FLLGNBQWNBLENBQUNDLFVBQWtCO0lBQUE7SUFBQUwsY0FBQSxHQUFBRSxDQUFBO0lBQUFGLGNBQUEsR0FBQUcsQ0FBQTtJQUMvQixJQUFJRSxVQUFVLEdBQUcsSUFBSSxDQUFDTixTQUFTLEdBQUcsRUFBRSxFQUFFO01BQUE7TUFBQUMsY0FBQSxHQUFBQyxDQUFBO01BQUFELGNBQUEsR0FBQUcsQ0FBQTtNQUNwQztNQUNBLElBQUksQ0FBQ0csVUFBVSxDQUFDLEtBQUssQ0FBQztJQUN4QixDQUFDLE1BQU07TUFBQTtNQUFBTixjQUFBLEdBQUFDLENBQUE7TUFBQUQsY0FBQSxHQUFBRyxDQUFBO01BQUEsSUFBSUUsVUFBVSxHQUFHLElBQUksQ0FBQ04sU0FBUyxHQUFHLEVBQUUsRUFBRTtRQUFBO1FBQUFDLGNBQUEsR0FBQUMsQ0FBQTtRQUFBRCxjQUFBLEdBQUFHLENBQUE7UUFDM0MsSUFBSSxDQUFDRyxVQUFVLENBQUMsTUFBTSxDQUFDO01BQ3pCLENBQUM7TUFBQTtNQUFBO1FBQUFOLGNBQUEsR0FBQUMsQ0FBQTtNQUFBO0lBQUQ7RUFDRjtFQUVBOzs7RUFHQU0sZ0JBQWdCQSxDQUFBO0lBQUE7SUFBQVAsY0FBQSxHQUFBRSxDQUFBO0VBR2hCLENBQUMsQ0FGQztFQUNBO0VBR0Y7OztFQUdBO0VBQ0FJLFVBQVVBLENBQUNFLEtBQWdDO0lBQUE7SUFBQVIsY0FBQSxHQUFBRSxDQUFBO0VBRzNDLENBQUMsQ0FGQztFQUNBOztBQUVIO0FBQUFGLGNBQUEsR0FBQUcsQ0FBQTtBQXJDRE0sT0FBQSxDQUFBYixjQUFBLEdBQUFBLGNBQUEiLCJpZ25vcmVMaXN0IjpbXX0=