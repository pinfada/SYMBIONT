{"version":3,"names":["cov_2nxd9erqer","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","secureLogger_1","require","BulkheadManager_1","HealthCheckManager","constructor","checks","Map","results","intervals","isRunning","setupDefaultChecks","registerCheck","interval","timeout","retryAttempts","criticalLevel","startTime","Date","now","Promise","resolve","setTimeout","status","message","responseTime","timestamp","error","testKey","testValue","chrome","storage","reject","local","set","runtime","lastError","get","result","Error","remove","healthStatus","bulkheadManager","getHealthStatus","failedBulkheads","Object","entries","filter","length","map","join","details","cryptoAvailable","crypto","subtle","config","checkFunction","check","HealthCheck","startCheck","logger","info","warn","keys","totalChecks","size","stop","clearInterval","delete","executeCheck","setInterval","attempts","race","execute","_","fullResult","previousResult","failureResult","getSystemHealth","Array","from","values","healthyChecks","c","criticalChecks","overallStatus","lastUpdate","getCheckResult","forceCheck","exports","healthCheckManager"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/monitoring/HealthCheckManager.ts"],"sourcesContent":["/**\n * Gestionnaire de health checks automatiques pour surveiller la santé du système\n */\n\nimport { logger } from '@/shared/utils/secureLogger';\nimport { bulkheadManager } from '@/shared/patterns/BulkheadManager';\n\nexport interface HealthCheckConfig {\n  name: string;\n  interval: number; // en millisecondes\n  timeout: number;\n  retryAttempts: number;\n  criticalLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface HealthCheckResult {\n  name: string;\n  status: 'healthy' | 'warning' | 'critical' | 'unknown';\n  message: string;\n  responseTime: number;\n  timestamp: number;\n  details?: Record<string, unknown>;\n}\n\nexport interface SystemHealthStatus {\n  overallStatus: 'healthy' | 'degraded' | 'critical' | 'unknown';\n  checks: HealthCheckResult[];\n  lastUpdate: number;\n  totalChecks: number;\n  healthyChecks: number;\n  criticalChecks: number;\n}\n\n/**\n * Gestionnaire principal des health checks\n */\nexport class HealthCheckManager {\n  private checks = new Map<string, HealthCheck>();\n  private results = new Map<string, HealthCheckResult>();\n  private intervals = new Map<string, NodeJS.Timeout>();\n  private isRunning = false;\n\n  constructor() {\n    this.setupDefaultChecks();\n  }\n\n  /**\n   * Configure les health checks par défaut\n   */\n  private setupDefaultChecks(): void {\n    // Check de la messagerie\n    this.registerCheck('message-bus', {\n      name: 'message-bus',\n      interval: 30000, // 30 secondes\n      timeout: 5000,\n      retryAttempts: 2,\n      criticalLevel: 'high'\n    }, async () => {\n      // Test basique de la messagerie\n      const startTime = Date.now();\n      try {\n        // Simuler un test de message\n        await new Promise(resolve => setTimeout(resolve, 50));\n        return {\n          status: 'healthy' as const,\n          message: 'MessageBus opérationnel',\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      } catch (error) {\n        return {\n          status: 'critical' as const,\n          message: `MessageBus en erreur: ${error}`,\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      }\n    });\n\n    // Check du stockage\n    this.registerCheck('storage', {\n      name: 'storage',\n      interval: 60000, // 1 minute\n      timeout: 10000,\n      retryAttempts: 3,\n      criticalLevel: 'high'\n    }, async () => {\n      const startTime = Date.now();\n      try {\n        // Test d'écriture/lecture\n        const testKey = 'health_check_test';\n        const testValue = { timestamp: Date.now() };\n        \n        if (typeof chrome !== 'undefined' && chrome.storage) {\n          // Test d'écriture\n          await new Promise<void>((resolve, reject) => {\n            chrome.storage.local.set({ [testKey]: testValue }, () => {\n              if (chrome.runtime.lastError) reject(chrome.runtime.lastError);\n              else resolve();\n            });\n          });\n          \n          // Test de lecture pour vérifier l'écriture\n          await new Promise<void>((resolve, reject) => {\n            chrome.storage.local.get([testKey], (result) => {\n              if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n              } else if (!result || !result[testKey]) {\n                reject(new Error('Failed to read test value from storage'));\n              } else {\n                resolve();\n              }\n            });\n          });\n          \n          // Nettoyage\n          await new Promise<void>((resolve, reject) => {\n            chrome.storage.local.remove(testKey, () => {\n              if (chrome.runtime.lastError) reject(chrome.runtime.lastError);\n              else resolve();\n            });\n          });\n        }\n        \n        return {\n          status: 'healthy' as const,\n          message: 'Stockage opérationnel',\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      } catch (error) {\n        return {\n          status: 'critical' as const,\n          message: `Stockage en erreur: ${error}`,\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      }\n    });\n\n    // Check des bulkheads\n    this.registerCheck('bulkheads', {\n      name: 'bulkheads',\n      interval: 45000, // 45 secondes\n      timeout: 3000,\n      retryAttempts: 1,\n      criticalLevel: 'medium'\n    }, async () => {\n      const startTime = Date.now();\n      try {\n        const healthStatus = bulkheadManager.getHealthStatus();\n        const failedBulkheads = Object.entries(healthStatus)\n          .filter(([, status]) => status === 'failed');\n        \n        if (failedBulkheads.length > 0) {\n          return {\n            status: 'warning' as const,\n            message: `Bulkheads dégradés: ${failedBulkheads.map(([name]) => name).join(', ')}`,\n            responseTime: Date.now() - startTime,\n            timestamp: Date.now(),\n            details: { healthStatus }\n          };\n        }\n        \n        return {\n          status: 'healthy' as const,\n          message: 'Tous les bulkheads opérationnels',\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now(),\n          details: { healthStatus }\n        };\n      } catch (error) {\n        return {\n          status: 'warning' as const,\n          message: `Erreur check bulkheads: ${error}`,\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      }\n    });\n\n    // Check de la sécurité\n    this.registerCheck('security', {\n      name: 'security',\n      interval: 120000, // 2 minutes\n      timeout: 5000,\n      retryAttempts: 2,\n      criticalLevel: 'high'\n    }, async () => {\n      const startTime = Date.now();\n      try {\n        // Vérifier WebCrypto API\n        const cryptoAvailable = typeof crypto !== 'undefined' && \n                               crypto.subtle !== undefined;\n        \n        if (!cryptoAvailable) {\n          return {\n            status: 'critical' as const,\n            message: 'WebCrypto API indisponible',\n            responseTime: Date.now() - startTime,\n            timestamp: Date.now()\n          };\n        }\n        \n        return {\n          status: 'healthy' as const,\n          message: 'Sécurité opérationnelle',\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      } catch (error) {\n        return {\n          status: 'critical' as const,\n          message: `Erreur sécurité: ${error}`,\n          responseTime: Date.now() - startTime,\n          timestamp: Date.now()\n        };\n      }\n    });\n  }\n\n  /**\n   * Enregistre un nouveau health check\n   */\n  registerCheck(\n    name: string,\n    config: HealthCheckConfig,\n    checkFunction: () => Promise<Omit<HealthCheckResult, 'name'>>\n  ): void {\n    const check = new HealthCheck(config, checkFunction);\n    this.checks.set(name, check);\n    \n    if (this.isRunning) {\n      this.startCheck(name);\n    }\n    \n    logger.info(`Health check enregistré: ${name}`, config);\n  }\n\n  /**\n   * Démarre tous les health checks\n   */\n  start(): void {\n    if (this.isRunning) {\n      logger.warn('HealthCheckManager déjà démarré');\n      return;\n    }\n    \n    this.isRunning = true;\n    \n    for (const name of this.checks.keys()) {\n      this.startCheck(name);\n    }\n    \n    logger.info('HealthCheckManager démarré', {\n      totalChecks: this.checks.size\n    });\n  }\n\n  /**\n   * Arrête tous les health checks\n   */\n  stop(): void {\n    this.isRunning = false;\n    \n    for (const [name, interval] of this.intervals) {\n      clearInterval(interval);\n      this.intervals.delete(name);\n    }\n    \n    logger.info('HealthCheckManager arrêté');\n  }\n\n  /**\n   * Démarre un health check spécifique\n   */\n  private startCheck(name: string): void {\n    const check = this.checks.get(name);\n    if (!check) return;\n    \n    // Exécution immédiate\n    this.executeCheck(name);\n    \n    // Programmation des exécutions périodiques\n    const interval = setInterval(() => {\n      this.executeCheck(name);\n    }, check.config.interval);\n    \n    this.intervals.set(name, interval);\n  }\n\n  /**\n   * Exécute un health check avec gestion des erreurs et retry\n   */\n  private async executeCheck(name: string): Promise<void> {\n    const check = this.checks.get(name);\n    if (!check) return;\n    \n    let attempts = 0;\n    let lastError: unknown;\n    \n    while (attempts <= check.config.retryAttempts) {\n      try {\n        const result = await Promise.race([\n          check.execute(),\n          new Promise<never>((_, reject) => \n            setTimeout(() => reject(new Error('Timeout')), check.config.timeout)\n          )\n        ]);\n        \n        const fullResult: HealthCheckResult = {\n          name,\n          ...result\n        };\n        \n        this.results.set(name, fullResult);\n        \n        // Log seulement les changements d'état ou les erreurs\n        const previousResult = this.results.get(name);\n        if (!previousResult || previousResult.status !== result.status) {\n          logger.info(`Health check ${name}: ${result.status}`, {\n            message: result.message,\n            responseTime: result.responseTime\n          });\n        }\n        \n        return;\n      } catch (error) {\n        lastError = error;\n        attempts++;\n        \n        if (attempts <= check.config.retryAttempts) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempts));\n        }\n      }\n    }\n    \n    // Toutes les tentatives ont échoué\n    const failureResult: HealthCheckResult = {\n      name,\n      status: check.config.criticalLevel === 'high' ? 'critical' : 'warning',\n      message: `Check échoué après ${check.config.retryAttempts + 1} tentatives: ${lastError}`,\n      responseTime: check.config.timeout,\n      timestamp: Date.now()\n    };\n    \n    this.results.set(name, failureResult);\n    logger.error(`Health check ${name} échoué définitivement`, failureResult);\n  }\n\n  /**\n   * Récupère le statut global du système\n   */\n  getSystemHealth(): SystemHealthStatus {\n    const checks = Array.from(this.results.values());\n    const totalChecks = checks.length;\n    const healthyChecks = checks.filter(c => c.status === 'healthy').length;\n    const criticalChecks = checks.filter(c => c.status === 'critical').length;\n    \n    let overallStatus: SystemHealthStatus['overallStatus'] = 'unknown';\n    \n    if (totalChecks === 0) {\n      overallStatus = 'unknown';\n    } else if (criticalChecks > 0) {\n      overallStatus = 'critical';\n    } else if (healthyChecks === totalChecks) {\n      overallStatus = 'healthy';\n    } else {\n      overallStatus = 'degraded';\n    }\n    \n    return {\n      overallStatus,\n      checks,\n      lastUpdate: Date.now(),\n      totalChecks,\n      healthyChecks,\n      criticalChecks\n    };\n  }\n\n  /**\n   * Récupère le résultat d'un check spécifique\n   */\n  getCheckResult(name: string): HealthCheckResult | null {\n    return this.results.get(name) || null;\n  }\n\n  /**\n   * Force l'exécution d'un check spécifique\n   */\n  async forceCheck(name: string): Promise<HealthCheckResult | null> {\n    await this.executeCheck(name);\n    return this.getCheckResult(name);\n  }\n}\n\n/**\n * Classe représentant un health check individuel\n */\nclass HealthCheck {\n  constructor(\n    public config: HealthCheckConfig,\n    private checkFunction: () => Promise<Omit<HealthCheckResult, 'name'>>\n  ) {}\n\n  async execute(): Promise<Omit<HealthCheckResult, 'name'>> {\n    return this.checkFunction();\n  }\n}\n\n// Instance globale du gestionnaire de health checks\nexport const healthCheckManager = new HealthCheckManager();"],"mappings":"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","ignoreList":[]}