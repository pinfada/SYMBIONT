0b3b617d712c205c1a9cb60ecb99618b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MutationBatcher_1 = require("../src/core/utils/MutationBatcher");
describe('MutationBatcher', () => {
    let batcher;
    let processedBatches = [];
    const mockBatchProcessor = async (batch) => {
        processedBatches.push(batch);
        return Promise.resolve();
    };
    beforeEach(() => {
        processedBatches = [];
        batcher = new MutationBatcher_1.MutationBatcher(mockBatchProcessor, {
            debounceMs: 50,
            maxBatchSize: 3,
            maxWaitTimeMs: 200,
            combinationStrategy: 'average'
        });
    });
    afterEach(() => {
        if (batcher) {
            batcher.dispose();
        }
    });
    it('should batch multiple mutations with debouncing', async () => {
        // Add multiple mutations quickly
        batcher.addMutation(0.1, 'normal');
        batcher.addMutation(0.2, 'normal');
        batcher.addMutation(0.3, 'normal');
        // Wait for debounce to trigger
        await new Promise(resolve => setTimeout(resolve, 100));
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].requestCount).toBe(3);
        expect(processedBatches[0].combinedRate).toBeCloseTo(0.2, 1); // Average of 0.1, 0.2, 0.3
    });
    it('should process immediately when max batch size is reached', async () => {
        batcher.addMutation(0.1, 'normal');
        batcher.addMutation(0.2, 'normal');
        batcher.addMutation(0.3, 'normal'); // Should trigger immediate processing
        // Small delay to allow async processing
        await new Promise(resolve => setTimeout(resolve, 10));
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].requestCount).toBe(3);
    });
    it('should prioritize high priority mutations', async () => {
        batcher.addMutation(0.1, 'low');
        batcher.addMutation(0.5, 'high'); // Should trigger immediate processing
        await new Promise(resolve => setTimeout(resolve, 10));
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].priority).toBe('high');
        expect(processedBatches[0].requestCount).toBe(2);
    });
    it('should handle different combination strategies', async () => {
        // Test 'max' strategy
        const maxBatcher = new MutationBatcher_1.MutationBatcher(mockBatchProcessor, {
            combinationStrategy: 'max',
            debounceMs: 10
        });
        processedBatches = [];
        maxBatcher.addMutation(0.1, 'normal');
        maxBatcher.addMutation(0.3, 'normal');
        maxBatcher.addMutation(0.2, 'normal');
        await new Promise(resolve => setTimeout(resolve, 50));
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].combinedRate).toBe(0.3); // Max value
        maxBatcher.dispose();
    });
    it('should respect max wait time', async () => {
        const fastBatcher = new MutationBatcher_1.MutationBatcher(mockBatchProcessor, {
            debounceMs: 1000, // Long debounce
            maxWaitTimeMs: 50 // But short max wait
        });
        processedBatches = [];
        fastBatcher.addMutation(0.1, 'normal');
        // Should process within max wait time, not debounce time
        await new Promise(resolve => setTimeout(resolve, 100));
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].requestCount).toBe(1);
        fastBatcher.dispose();
    });
    it('should allow mutation cancellation', async () => {
        const mutationId = batcher.addMutation(0.1, 'normal');
        const cancelled = batcher.cancelMutation(mutationId);
        expect(cancelled).toBe(true);
        // Wait for potential processing
        await new Promise(resolve => setTimeout(resolve, 100));
        expect(processedBatches).toHaveLength(0);
    });
    it('should handle flush batch correctly', async () => {
        batcher.addMutation(0.1, 'normal');
        batcher.addMutation(0.2, 'normal');
        // Force flush
        await batcher.flushBatch();
        expect(processedBatches).toHaveLength(1);
        expect(processedBatches[0].requestCount).toBe(2);
    });
    it('should track statistics correctly', async () => {
        batcher.addMutation(0.1, 'normal');
        batcher.addMutation(0.2, 'normal');
        await batcher.flushBatch();
        batcher.addMutation(0.3, 'normal');
        await batcher.flushBatch();
        const stats = batcher.getStatistics();
        expect(stats.totalRequests).toBe(3);
        expect(stats.totalBatches).toBe(2);
        expect(stats.compressionRatio).toBeCloseTo(1.5, 1); // 3 requests / 2 batches
    });
    it('should handle weighted combination strategy', async () => {
        const weightedBatcher = new MutationBatcher_1.MutationBatcher(mockBatchProcessor, {
            combinationStrategy: 'weighted',
            debounceMs: 10
        });
        processedBatches = [];
        // Add mutations with different priorities
        weightedBatcher.addMutation(0.1, 'low');
        weightedBatcher.addMutation(0.2, 'normal');
        weightedBatcher.addMutation(0.3, 'high');
        await new Promise(resolve => setTimeout(resolve, 50));
        expect(processedBatches).toHaveLength(1);
        // Weighted average should favor higher priority mutations
        expect(processedBatches[0].combinedRate).toBeGreaterThan(0.2);
        expect(processedBatches[0].priority).toBe('high');
        weightedBatcher.dispose();
    });
    it('should handle error in batch processing gracefully', async () => {
        const errorBatcher = new MutationBatcher_1.MutationBatcher(async () => { throw new Error('Processing failed'); }, { debounceMs: 10 });
        errorBatcher.addMutation(0.1, 'normal');
        // Should not throw error
        await new Promise(resolve => setTimeout(resolve, 50));
        errorBatcher.dispose();
    });
    it('should validate mutation rate bounds', () => {
        // Rates should be clamped to 0-1 range
        const mutationId1 = batcher.addMutation(-0.5, 'normal'); // Should be clamped to 0
        const mutationId2 = batcher.addMutation(1.5, 'normal'); // Should be clamped to 1
        expect(mutationId1).toBeDefined();
        expect(mutationId2).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL011dGF0aW9uQmF0Y2hlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsdUVBQXFGO0FBRXJGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxPQUF3QixDQUFDO0lBQzdCLElBQUksZ0JBQWdCLEdBQXNCLEVBQUUsQ0FBQztJQUU3QyxNQUFNLGtCQUFrQixHQUFHLEtBQUssRUFBRSxLQUFzQixFQUFpQixFQUFFO1FBQ3pFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxJQUFJLGlDQUFlLENBQUMsa0JBQWtCLEVBQUU7WUFDaEQsVUFBVSxFQUFFLEVBQUU7WUFDZCxZQUFZLEVBQUUsQ0FBQztZQUNmLGFBQWEsRUFBRSxHQUFHO1lBQ2xCLG1CQUFtQixFQUFFLFNBQVM7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNaLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0QsaUNBQWlDO1FBQ2pDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRW5DLCtCQUErQjtRQUMvQixN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SUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEUsTUFBTSxZQUFZLEdBQUcsSUFBSSxpQ0FBZSxDQUN0QyxLQUFLLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDckQsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQ25CLENBQUM7UUFFRixZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV4Qyx5QkFBeUI7UUFDekIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV0RCxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQzlDLHVDQUF1QztRQUN2QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMseUJBQXlCO1FBQ2xGLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUUseUJBQXlCO1FBRWxGLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvbW50L2MvVXNlcnMvbV9vbGkvUHJvamV0cy9TWU1CSU9OVC9fX3Rlc3RzX18vTXV0YXRpb25CYXRjaGVyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTXV0YXRpb25CYXRjaGVyLCBCYXRjaGVkTXV0YXRpb24gfSBmcm9tICcuLi9zcmMvY29yZS91dGlscy9NdXRhdGlvbkJhdGNoZXInO1xyXG5cclxuZGVzY3JpYmUoJ011dGF0aW9uQmF0Y2hlcicsICgpID0+IHtcclxuICBsZXQgYmF0Y2hlcjogTXV0YXRpb25CYXRjaGVyO1xyXG4gIGxldCBwcm9jZXNzZWRCYXRjaGVzOiBCYXRjaGVkTXV0YXRpb25bXSA9IFtdO1xyXG5cclxuICBjb25zdCBtb2NrQmF0Y2hQcm9jZXNzb3IgPSBhc3luYyAoYmF0Y2g6IEJhdGNoZWRNdXRhdGlvbik6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgcHJvY2Vzc2VkQmF0Y2hlcy5wdXNoKGJhdGNoKTtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHByb2Nlc3NlZEJhdGNoZXMgPSBbXTtcclxuICAgIGJhdGNoZXIgPSBuZXcgTXV0YXRpb25CYXRjaGVyKG1vY2tCYXRjaFByb2Nlc3Nvciwge1xyXG4gICAgICBkZWJvdW5jZU1zOiA1MCxcclxuICAgICAgbWF4QmF0Y2hTaXplOiAzLFxyXG4gICAgICBtYXhXYWl0VGltZU1zOiAyMDAsXHJcbiAgICAgIGNvbWJpbmF0aW9uU3RyYXRlZ3k6ICdhdmVyYWdlJ1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBpZiAoYmF0Y2hlcikge1xyXG4gICAgICBiYXRjaGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBiYXRjaCBtdWx0aXBsZSBtdXRhdGlvbnMgd2l0aCBkZWJvdW5jaW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQWRkIG11bHRpcGxlIG11dGF0aW9ucyBxdWlja2x5XHJcbiAgICBiYXRjaGVyLmFkZE11dGF0aW9uKDAuMSwgJ25vcm1hbCcpO1xyXG4gICAgYmF0Y2hlci5hZGRNdXRhdGlvbigwLjIsICdub3JtYWwnKTtcclxuICAgIGJhdGNoZXIuYWRkTXV0YXRpb24oMC4zLCAnbm9ybWFsJyk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3IgZGVib3VuY2UgdG8gdHJpZ2dlclxyXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xyXG5cclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzKS50b0hhdmVMZW5ndGgoMSk7XHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlc1swXS5yZXF1ZXN0Q291bnQpLnRvQmUoMyk7XHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlc1swXS5jb21iaW5lZFJhdGUpLnRvQmVDbG9zZVRvKDAuMiwgMSk7IC8vIEF2ZXJhZ2Ugb2YgMC4xLCAwLjIsIDAuM1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHByb2Nlc3MgaW1tZWRpYXRlbHkgd2hlbiBtYXggYmF0Y2ggc2l6ZSBpcyByZWFjaGVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgYmF0Y2hlci5hZGRNdXRhdGlvbigwLjEsICdub3JtYWwnKTtcclxuICAgIGJhdGNoZXIuYWRkTXV0YXRpb24oMC4yLCAnbm9ybWFsJyk7XHJcbiAgICBiYXRjaGVyLmFkZE11dGF0aW9uKDAuMywgJ25vcm1hbCcpOyAvLyBTaG91bGQgdHJpZ2dlciBpbW1lZGlhdGUgcHJvY2Vzc2luZ1xyXG5cclxuICAgIC8vIFNtYWxsIGRlbGF5IHRvIGFsbG93IGFzeW5jIHByb2Nlc3NpbmdcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMCkpO1xyXG5cclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzKS50b0hhdmVMZW5ndGgoMSk7XHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlc1swXS5yZXF1ZXN0Q291bnQpLnRvQmUoMyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcHJpb3JpdGl6ZSBoaWdoIHByaW9yaXR5IG11dGF0aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIGJhdGNoZXIuYWRkTXV0YXRpb24oMC4xLCAnbG93Jyk7XHJcbiAgICBiYXRjaGVyLmFkZE11dGF0aW9uKDAuNSwgJ2hpZ2gnKTsgLy8gU2hvdWxkIHRyaWdnZXIgaW1tZWRpYXRlIHByb2Nlc3NpbmdcclxuXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcclxuXHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlcykudG9IYXZlTGVuZ3RoKDEpO1xyXG4gICAgZXhwZWN0KHByb2Nlc3NlZEJhdGNoZXNbMF0ucHJpb3JpdHkpLnRvQmUoJ2hpZ2gnKTtcclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzWzBdLnJlcXVlc3RDb3VudCkudG9CZSgyKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IGNvbWJpbmF0aW9uIHN0cmF0ZWdpZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBUZXN0ICdtYXgnIHN0cmF0ZWd5XHJcbiAgICBjb25zdCBtYXhCYXRjaGVyID0gbmV3IE11dGF0aW9uQmF0Y2hlcihtb2NrQmF0Y2hQcm9jZXNzb3IsIHtcclxuICAgICAgY29tYmluYXRpb25TdHJhdGVneTogJ21heCcsXHJcbiAgICAgIGRlYm91bmNlTXM6IDEwXHJcbiAgICB9KTtcclxuXHJcbiAgICBwcm9jZXNzZWRCYXRjaGVzID0gW107XHJcbiAgICBtYXhCYXRjaGVyLmFkZE11dGF0aW9uKDAuMSwgJ25vcm1hbCcpO1xyXG4gICAgbWF4QmF0Y2hlci5hZGRNdXRhdGlvbigwLjMsICdub3JtYWwnKTtcclxuICAgIG1heEJhdGNoZXIuYWRkTXV0YXRpb24oMC4yLCAnbm9ybWFsJyk7XHJcblxyXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XHJcblxyXG4gICAgZXhwZWN0KHByb2Nlc3NlZEJhdGNoZXMpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzWzBdLmNvbWJpbmVkUmF0ZSkudG9CZSgwLjMpOyAvLyBNYXggdmFsdWVcclxuXHJcbiAgICBtYXhCYXRjaGVyLmRpc3Bvc2UoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXNwZWN0IG1heCB3YWl0IHRpbWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBmYXN0QmF0Y2hlciA9IG5ldyBNdXRhdGlvbkJhdGNoZXIobW9ja0JhdGNoUHJvY2Vzc29yLCB7XHJcbiAgICAgIGRlYm91bmNlTXM6IDEwMDAsIC8vIExvbmcgZGVib3VuY2VcclxuICAgICAgbWF4V2FpdFRpbWVNczogNTAgIC8vIEJ1dCBzaG9ydCBtYXggd2FpdFxyXG4gICAgfSk7XHJcblxyXG4gICAgcHJvY2Vzc2VkQmF0Y2hlcyA9IFtdO1xyXG4gICAgZmFzdEJhdGNoZXIuYWRkTXV0YXRpb24oMC4xLCAnbm9ybWFsJyk7XHJcblxyXG4gICAgLy8gU2hvdWxkIHByb2Nlc3Mgd2l0aGluIG1heCB3YWl0IHRpbWUsIG5vdCBkZWJvdW5jZSB0aW1lXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XHJcblxyXG4gICAgZXhwZWN0KHByb2Nlc3NlZEJhdGNoZXMpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzWzBdLnJlcXVlc3RDb3VudCkudG9CZSgxKTtcclxuXHJcbiAgICBmYXN0QmF0Y2hlci5kaXNwb3NlKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgYWxsb3cgbXV0YXRpb24gY2FuY2VsbGF0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbXV0YXRpb25JZCA9IGJhdGNoZXIuYWRkTXV0YXRpb24oMC4xLCAnbm9ybWFsJyk7XHJcbiAgICBjb25zdCBjYW5jZWxsZWQgPSBiYXRjaGVyLmNhbmNlbE11dGF0aW9uKG11dGF0aW9uSWQpO1xyXG5cclxuICAgIGV4cGVjdChjYW5jZWxsZWQpLnRvQmUodHJ1ZSk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3IgcG90ZW50aWFsIHByb2Nlc3NpbmdcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKTtcclxuXHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlcykudG9IYXZlTGVuZ3RoKDApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBmbHVzaCBiYXRjaCBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBiYXRjaGVyLmFkZE11dGF0aW9uKDAuMSwgJ25vcm1hbCcpO1xyXG4gICAgYmF0Y2hlci5hZGRNdXRhdGlvbigwLjIsICdub3JtYWwnKTtcclxuXHJcbiAgICAvLyBGb3JjZSBmbHVzaFxyXG4gICAgYXdhaXQgYmF0Y2hlci5mbHVzaEJhdGNoKCk7XHJcblxyXG4gICAgZXhwZWN0KHByb2Nlc3NlZEJhdGNoZXMpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzWzBdLnJlcXVlc3RDb3VudCkudG9CZSgyKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB0cmFjayBzdGF0aXN0aWNzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGJhdGNoZXIuYWRkTXV0YXRpb24oMC4xLCAnbm9ybWFsJyk7XHJcbiAgICBiYXRjaGVyLmFkZE11dGF0aW9uKDAuMiwgJ25vcm1hbCcpO1xyXG4gICAgYXdhaXQgYmF0Y2hlci5mbHVzaEJhdGNoKCk7XHJcblxyXG4gICAgYmF0Y2hlci5hZGRNdXRhdGlvbigwLjMsICdub3JtYWwnKTtcclxuICAgIGF3YWl0IGJhdGNoZXIuZmx1c2hCYXRjaCgpO1xyXG5cclxuICAgIGNvbnN0IHN0YXRzID0gYmF0Y2hlci5nZXRTdGF0aXN0aWNzKCk7XHJcbiAgICBleHBlY3Qoc3RhdHMudG90YWxSZXF1ZXN0cykudG9CZSgzKTtcclxuICAgIGV4cGVjdChzdGF0cy50b3RhbEJhdGNoZXMpLnRvQmUoMik7XHJcbiAgICBleHBlY3Qoc3RhdHMuY29tcHJlc3Npb25SYXRpbykudG9CZUNsb3NlVG8oMS41LCAxKTsgLy8gMyByZXF1ZXN0cyAvIDIgYmF0Y2hlc1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSB3ZWlnaHRlZCBjb21iaW5hdGlvbiBzdHJhdGVneScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHdlaWdodGVkQmF0Y2hlciA9IG5ldyBNdXRhdGlvbkJhdGNoZXIobW9ja0JhdGNoUHJvY2Vzc29yLCB7XHJcbiAgICAgIGNvbWJpbmF0aW9uU3RyYXRlZ3k6ICd3ZWlnaHRlZCcsXHJcbiAgICAgIGRlYm91bmNlTXM6IDEwXHJcbiAgICB9KTtcclxuXHJcbiAgICBwcm9jZXNzZWRCYXRjaGVzID0gW107XHJcbiAgICBcclxuICAgIC8vIEFkZCBtdXRhdGlvbnMgd2l0aCBkaWZmZXJlbnQgcHJpb3JpdGllc1xyXG4gICAgd2VpZ2h0ZWRCYXRjaGVyLmFkZE11dGF0aW9uKDAuMSwgJ2xvdycpO1xyXG4gICAgd2VpZ2h0ZWRCYXRjaGVyLmFkZE11dGF0aW9uKDAuMiwgJ25vcm1hbCcpO1xyXG4gICAgd2VpZ2h0ZWRCYXRjaGVyLmFkZE11dGF0aW9uKDAuMywgJ2hpZ2gnKTtcclxuXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTApKTtcclxuXHJcbiAgICBleHBlY3QocHJvY2Vzc2VkQmF0Y2hlcykudG9IYXZlTGVuZ3RoKDEpO1xyXG4gICAgLy8gV2VpZ2h0ZWQgYXZlcmFnZSBzaG91bGQgZmF2b3IgaGlnaGVyIHByaW9yaXR5IG11dGF0aW9uc1xyXG4gICAgZXhwZWN0KHByb2Nlc3NlZEJhdGNoZXNbMF0uY29tYmluZWRSYXRlKS50b0JlR3JlYXRlclRoYW4oMC4yKTtcclxuICAgIGV4cGVjdChwcm9jZXNzZWRCYXRjaGVzWzBdLnByaW9yaXR5KS50b0JlKCdoaWdoJyk7XHJcblxyXG4gICAgd2VpZ2h0ZWRCYXRjaGVyLmRpc3Bvc2UoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3IgaW4gYmF0Y2ggcHJvY2Vzc2luZyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZXJyb3JCYXRjaGVyID0gbmV3IE11dGF0aW9uQmF0Y2hlcihcclxuICAgICAgYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ1Byb2Nlc3NpbmcgZmFpbGVkJyk7IH0sXHJcbiAgICAgIHsgZGVib3VuY2VNczogMTAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBlcnJvckJhdGNoZXIuYWRkTXV0YXRpb24oMC4xLCAnbm9ybWFsJyk7XHJcbiAgICBcclxuICAgIC8vIFNob3VsZCBub3QgdGhyb3cgZXJyb3JcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MCkpO1xyXG5cclxuICAgIGVycm9yQmF0Y2hlci5kaXNwb3NlKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgbXV0YXRpb24gcmF0ZSBib3VuZHMnLCAoKSA9PiB7XHJcbiAgICAvLyBSYXRlcyBzaG91bGQgYmUgY2xhbXBlZCB0byAwLTEgcmFuZ2VcclxuICAgIGNvbnN0IG11dGF0aW9uSWQxID0gYmF0Y2hlci5hZGRNdXRhdGlvbigtMC41LCAnbm9ybWFsJyk7IC8vIFNob3VsZCBiZSBjbGFtcGVkIHRvIDBcclxuICAgIGNvbnN0IG11dGF0aW9uSWQyID0gYmF0Y2hlci5hZGRNdXRhdGlvbigxLjUsICdub3JtYWwnKTsgIC8vIFNob3VsZCBiZSBjbGFtcGVkIHRvIDFcclxuXHJcbiAgICBleHBlY3QobXV0YXRpb25JZDEpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QobXV0YXRpb25JZDIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcbn0pOyAiXSwidmVyc2lvbiI6M30=