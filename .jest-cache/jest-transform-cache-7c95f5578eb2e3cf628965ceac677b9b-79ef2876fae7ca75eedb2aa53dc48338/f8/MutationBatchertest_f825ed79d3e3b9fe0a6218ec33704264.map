{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/MutationBatcher.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/MutationBatcher.test.ts"],"sourcesContent":["import { MutationBatcher, BatchedMutation } from '../src/core/utils/MutationBatcher';\r\n\r\ndescribe('MutationBatcher', () => {\r\n  let batcher: MutationBatcher;\r\n  let processedBatches: BatchedMutation[] = [];\r\n\r\n  const mockBatchProcessor = async (batch: BatchedMutation): Promise<void> => {\r\n    processedBatches.push(batch);\r\n    return Promise.resolve();\r\n  };\r\n\r\n  beforeEach(() => {\r\n    processedBatches = [];\r\n    batcher = new MutationBatcher(mockBatchProcessor, {\r\n      debounceMs: 50,\r\n      maxBatchSize: 3,\r\n      maxWaitTimeMs: 200,\r\n      combinationStrategy: 'average'\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (batcher) {\r\n      batcher.dispose();\r\n    }\r\n  });\r\n\r\n  it('should batch multiple mutations with debouncing', async () => {\r\n    // Add multiple mutations quickly\r\n    batcher.addMutation(0.1, 'normal');\r\n    batcher.addMutation(0.2, 'normal');\r\n    batcher.addMutation(0.3, 'normal');\r\n\r\n    // Wait for debounce to trigger\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].requestCount).toBe(3);\r\n    expect(processedBatches[0].combinedRate).toBeCloseTo(0.2, 1); // Average of 0.1, 0.2, 0.3\r\n  });\r\n\r\n  it('should process immediately when max batch size is reached', async () => {\r\n    batcher.addMutation(0.1, 'normal');\r\n    batcher.addMutation(0.2, 'normal');\r\n    batcher.addMutation(0.3, 'normal'); // Should trigger immediate processing\r\n\r\n    // Small delay to allow async processing\r\n    await new Promise(resolve => setTimeout(resolve, 10));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].requestCount).toBe(3);\r\n  });\r\n\r\n  it('should prioritize high priority mutations', async () => {\r\n    batcher.addMutation(0.1, 'low');\r\n    batcher.addMutation(0.5, 'high'); // Should trigger immediate processing\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 10));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].priority).toBe('high');\r\n    expect(processedBatches[0].requestCount).toBe(2);\r\n  });\r\n\r\n  it('should handle different combination strategies', async () => {\r\n    // Test 'max' strategy\r\n    const maxBatcher = new MutationBatcher(mockBatchProcessor, {\r\n      combinationStrategy: 'max',\r\n      debounceMs: 10\r\n    });\r\n\r\n    processedBatches = [];\r\n    maxBatcher.addMutation(0.1, 'normal');\r\n    maxBatcher.addMutation(0.3, 'normal');\r\n    maxBatcher.addMutation(0.2, 'normal');\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].combinedRate).toBe(0.3); // Max value\r\n\r\n    maxBatcher.dispose();\r\n  });\r\n\r\n  it('should respect max wait time', async () => {\r\n    const fastBatcher = new MutationBatcher(mockBatchProcessor, {\r\n      debounceMs: 1000, // Long debounce\r\n      maxWaitTimeMs: 50  // But short max wait\r\n    });\r\n\r\n    processedBatches = [];\r\n    fastBatcher.addMutation(0.1, 'normal');\r\n\r\n    // Should process within max wait time, not debounce time\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].requestCount).toBe(1);\r\n\r\n    fastBatcher.dispose();\r\n  });\r\n\r\n  it('should allow mutation cancellation', async () => {\r\n    const mutationId = batcher.addMutation(0.1, 'normal');\r\n    const cancelled = batcher.cancelMutation(mutationId);\r\n\r\n    expect(cancelled).toBe(true);\r\n\r\n    // Wait for potential processing\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n    expect(processedBatches).toHaveLength(0);\r\n  });\r\n\r\n  it('should handle flush batch correctly', async () => {\r\n    batcher.addMutation(0.1, 'normal');\r\n    batcher.addMutation(0.2, 'normal');\r\n\r\n    // Force flush\r\n    await batcher.flushBatch();\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    expect(processedBatches[0].requestCount).toBe(2);\r\n  });\r\n\r\n  it('should track statistics correctly', async () => {\r\n    batcher.addMutation(0.1, 'normal');\r\n    batcher.addMutation(0.2, 'normal');\r\n    await batcher.flushBatch();\r\n\r\n    batcher.addMutation(0.3, 'normal');\r\n    await batcher.flushBatch();\r\n\r\n    const stats = batcher.getStatistics();\r\n    expect(stats.totalRequests).toBe(3);\r\n    expect(stats.totalBatches).toBe(2);\r\n    expect(stats.compressionRatio).toBeCloseTo(1.5, 1); // 3 requests / 2 batches\r\n  });\r\n\r\n  it('should handle weighted combination strategy', async () => {\r\n    const weightedBatcher = new MutationBatcher(mockBatchProcessor, {\r\n      combinationStrategy: 'weighted',\r\n      debounceMs: 10\r\n    });\r\n\r\n    processedBatches = [];\r\n    \r\n    // Add mutations with different priorities\r\n    weightedBatcher.addMutation(0.1, 'low');\r\n    weightedBatcher.addMutation(0.2, 'normal');\r\n    weightedBatcher.addMutation(0.3, 'high');\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n\r\n    expect(processedBatches).toHaveLength(1);\r\n    // Weighted average should favor higher priority mutations\r\n    expect(processedBatches[0].combinedRate).toBeGreaterThan(0.2);\r\n    expect(processedBatches[0].priority).toBe('high');\r\n\r\n    weightedBatcher.dispose();\r\n  });\r\n\r\n  it('should handle error in batch processing gracefully', async () => {\r\n    const errorBatcher = new MutationBatcher(\r\n      async () => { throw new Error('Processing failed'); },\r\n      { debounceMs: 10 }\r\n    );\r\n\r\n    errorBatcher.addMutation(0.1, 'normal');\r\n    \r\n    // Should not throw error\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n\r\n    errorBatcher.dispose();\r\n  });\r\n\r\n  it('should validate mutation rate bounds', () => {\r\n    // Rates should be clamped to 0-1 range\r\n    const mutationId1 = batcher.addMutation(-0.5, 'normal'); // Should be clamped to 0\r\n    const mutationId2 = batcher.addMutation(1.5, 'normal');  // Should be clamped to 1\r\n\r\n    expect(mutationId1).toBeDefined();\r\n    expect(mutationId2).toBeDefined();\r\n  });\r\n}); "],"version":3}