{"version":3,"names":["cov_15xcvd8i8t","actualCoverage","s","secureRandom_1","require","SocialResilience","constructor","f","peerId","SecureRandom","random","toString","substr","channel","BroadcastChannel","onmessage","event","handleMessage","data","requestCommunityBackup","organismId","postMessage","type","from","console","log","restoreFromCommunity","detectMassiveFailure","launchCommunityAlert","message","msg","b","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts"],"sourcesContent":["// social/social-resilience.ts\r\n// Résilience sociale et backup communautaire (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nexport class SocialResilience {\r\n  private channel: BroadcastChannel\r\n  private peerId: string\r\n\r\n  constructor() {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    this.channel = new BroadcastChannel('symbiont_resilience')\r\n    this.channel.onmessage = (event) => this.handleMessage(event.data)\r\n  }\r\n\r\n  requestCommunityBackup(organismId: string) {\r\n    this.channel.postMessage({ type: 'backup_request', from: this.peerId, organismId })\r\n    console.log(`[SocialResilience] Demande de backup pour ${organismId}`)\r\n  }\r\n\r\n  restoreFromCommunity(organismId: string) {\r\n    // Écoute les backups reçus et restaure si l'organismId correspond\r\n    // (La logique réelle de restauration serait ici)\r\n    console.log(`[SocialResilience] Restauration depuis la communauté pour ${organismId}`)\r\n  }\r\n\r\n  detectMassiveFailure() {\r\n    // Simulation de détection\r\n    console.log(`[SocialResilience] Détection de panne massive`)\r\n  }\r\n\r\n  launchCommunityAlert(message: string) {\r\n    this.channel.postMessage({ type: 'alert', from: this.peerId, message })\r\n    console.log(`[SocialResilience] Alerte communautaire : ${message}`)\r\n  }\r\n\r\n  private handleMessage(msg: any) {\r\n    if (msg.from === this.peerId) return // Ignore self\r\n    switch (msg.type) {\r\n      case 'backup_request':\r\n        // TODO: Répondre avec un backup si on a l'organismId\r\n        console.log(`[SocialResilience] Backup demandé par ${msg.from} pour ${msg.organismId}`)\r\n        break\r\n      case 'alert':\r\n        console.log(`[SocialResilience] Alerte reçue : ${msg.message}`)\r\n        break\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}