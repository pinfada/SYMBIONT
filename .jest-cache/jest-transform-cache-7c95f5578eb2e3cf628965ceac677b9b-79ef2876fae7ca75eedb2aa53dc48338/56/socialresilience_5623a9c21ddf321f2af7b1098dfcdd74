12046eae5e9123159288f3d1f602aa34
"use strict";

/* istanbul ignore next */
function cov_15xcvd8i8t() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts";
  var hash = "86f3968a137f9167d5523a80ec256a6ff23367b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 95
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 67
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 75
        }
      },
      "6": {
        start: {
          line: 11,
          column: 44
        },
        end: {
          line: 11,
          column: 74
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 92
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 79
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 95
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 80
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "14": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 104
        }
      },
      "17": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 22
        }
      },
      "18": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 80
        }
      },
      "19": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "20": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 44,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 11,
            column: 34
          }
        },
        loc: {
          start: {
            line: 11,
            column: 44
          },
          end: {
            line: 11,
            column: 74
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 37
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 17
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 30
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 32,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 32,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 22
          }
        }, {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 22
          }
        }],
        line: 33
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts",
      mappings: ";;;AAAA,8BAA8B;AAC9B,uDAAuD;AACvD,+DAA4D;AAE5D,MAAa,gBAAgB;IAI3B;QACE,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,2BAAY,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACvE,IAAI,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAC,qBAAqB,CAAC,CAAA;QAC1D,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACpE,CAAC;IAED,sBAAsB,CAAC,UAAkB;QACvC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,CAAC,CAAA;QACnF,OAAO,CAAC,GAAG,CAAC,6CAA6C,UAAU,EAAE,CAAC,CAAA;IACxE,CAAC;IAED,oBAAoB,CAAC,UAAkB;QACrC,kEAAkE;QAClE,iDAAiD;QACjD,OAAO,CAAC,GAAG,CAAC,6DAA6D,UAAU,EAAE,CAAC,CAAA;IACxF,CAAC;IAED,oBAAoB;QAClB,0BAA0B;QAC1B,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAA;IAC9D,CAAC;IAED,oBAAoB,CAAC,OAAe;QAClC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;QACvE,OAAO,CAAC,GAAG,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAA;IACrE,CAAC;IAEO,aAAa,CAAC,GAAQ;QAC5B,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM;YAAE,OAAM,CAAC,cAAc;QACnD,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC;YACjB,KAAK,gBAAgB;gBACnB,qDAAqD;gBACrD,OAAO,CAAC,GAAG,CAAC,yCAAyC,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,UAAU,EAAE,CAAC,CAAA;gBACvF,MAAK;YACP,KAAK,OAAO;gBACV,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;gBAC/D,MAAK;QACT,CAAC;IACH,CAAC;CACF;AA3CD,4CA2CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts"],
      sourcesContent: ["// social/social-resilience.ts\r\n// R\xE9silience sociale et backup communautaire (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nexport class SocialResilience {\r\n  private channel: BroadcastChannel\r\n  private peerId: string\r\n\r\n  constructor() {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    this.channel = new BroadcastChannel('symbiont_resilience')\r\n    this.channel.onmessage = (event) => this.handleMessage(event.data)\r\n  }\r\n\r\n  requestCommunityBackup(organismId: string) {\r\n    this.channel.postMessage({ type: 'backup_request', from: this.peerId, organismId })\r\n    console.log(`[SocialResilience] Demande de backup pour ${organismId}`)\r\n  }\r\n\r\n  restoreFromCommunity(organismId: string) {\r\n    // \xC9coute les backups re\xE7us et restaure si l'organismId correspond\r\n    // (La logique r\xE9elle de restauration serait ici)\r\n    console.log(`[SocialResilience] Restauration depuis la communaut\xE9 pour ${organismId}`)\r\n  }\r\n\r\n  detectMassiveFailure() {\r\n    // Simulation de d\xE9tection\r\n    console.log(`[SocialResilience] D\xE9tection de panne massive`)\r\n  }\r\n\r\n  launchCommunityAlert(message: string) {\r\n    this.channel.postMessage({ type: 'alert', from: this.peerId, message })\r\n    console.log(`[SocialResilience] Alerte communautaire : ${message}`)\r\n  }\r\n\r\n  private handleMessage(msg: any) {\r\n    if (msg.from === this.peerId) return // Ignore self\r\n    switch (msg.type) {\r\n      case 'backup_request':\r\n        // TODO: R\xE9pondre avec un backup si on a l'organismId\r\n        console.log(`[SocialResilience] Backup demand\xE9 par ${msg.from} pour ${msg.organismId}`)\r\n        break\r\n      case 'alert':\r\n        console.log(`[SocialResilience] Alerte re\xE7ue : ${msg.message}`)\r\n        break\r\n    }\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "86f3968a137f9167d5523a80ec256a6ff23367b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15xcvd8i8t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15xcvd8i8t();
cov_15xcvd8i8t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15xcvd8i8t().s[1]++;
exports.SocialResilience = void 0;
// social/social-resilience.ts
// Résilience sociale et backup communautaire (Phase 3)
const secureRandom_1 =
/* istanbul ignore next */
(cov_15xcvd8i8t().s[2]++, require("../shared/utils/secureRandom"));
class SocialResilience {
  constructor() {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[0]++;
    cov_15xcvd8i8t().s[3]++;
    this.peerId = 'peer_' + secureRandom_1.SecureRandom.random().toString(36).substr(2, 8);
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[4]++;
    this.channel = new BroadcastChannel('symbiont_resilience');
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[5]++;
    this.channel.onmessage = event => {
      /* istanbul ignore next */
      cov_15xcvd8i8t().f[1]++;
      cov_15xcvd8i8t().s[6]++;
      return this.handleMessage(event.data);
    };
  }
  requestCommunityBackup(organismId) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[2]++;
    cov_15xcvd8i8t().s[7]++;
    this.channel.postMessage({
      type: 'backup_request',
      from: this.peerId,
      organismId
    });
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[8]++;
    console.log(`[SocialResilience] Demande de backup pour ${organismId}`);
  }
  restoreFromCommunity(organismId) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[3]++;
    cov_15xcvd8i8t().s[9]++;
    // Écoute les backups reçus et restaure si l'organismId correspond
    // (La logique réelle de restauration serait ici)
    console.log(`[SocialResilience] Restauration depuis la communauté pour ${organismId}`);
  }
  detectMassiveFailure() {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[4]++;
    cov_15xcvd8i8t().s[10]++;
    // Simulation de détection
    console.log(`[SocialResilience] Détection de panne massive`);
  }
  launchCommunityAlert(message) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[5]++;
    cov_15xcvd8i8t().s[11]++;
    this.channel.postMessage({
      type: 'alert',
      from: this.peerId,
      message
    });
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[12]++;
    console.log(`[SocialResilience] Alerte communautaire : ${message}`);
  }
  handleMessage(msg) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[6]++;
    cov_15xcvd8i8t().s[13]++;
    if (msg.from === this.peerId) {
      /* istanbul ignore next */
      cov_15xcvd8i8t().b[0][0]++;
      cov_15xcvd8i8t().s[14]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15xcvd8i8t().b[0][1]++;
    } // Ignore self
    cov_15xcvd8i8t().s[15]++;
    switch (msg.type) {
      case 'backup_request':
        /* istanbul ignore next */
        cov_15xcvd8i8t().b[1][0]++;
        cov_15xcvd8i8t().s[16]++;
        // TODO: Répondre avec un backup si on a l'organismId
        console.log(`[SocialResilience] Backup demandé par ${msg.from} pour ${msg.organismId}`);
        /* istanbul ignore next */
        cov_15xcvd8i8t().s[17]++;
        break;
      case 'alert':
        /* istanbul ignore next */
        cov_15xcvd8i8t().b[1][1]++;
        cov_15xcvd8i8t().s[18]++;
        console.log(`[SocialResilience] Alerte reçue : ${msg.message}`);
        /* istanbul ignore next */
        cov_15xcvd8i8t().s[19]++;
        break;
    }
  }
}
/* istanbul ignore next */
cov_15xcvd8i8t().s[20]++;
exports.SocialResilience = SocialResilience;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTV4Y3ZkOGk4dCIsImFjdHVhbENvdmVyYWdlIiwicyIsInNlY3VyZVJhbmRvbV8xIiwicmVxdWlyZSIsIlNvY2lhbFJlc2lsaWVuY2UiLCJjb25zdHJ1Y3RvciIsImYiLCJwZWVySWQiLCJTZWN1cmVSYW5kb20iLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsImNoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwib25tZXNzYWdlIiwiZXZlbnQiLCJoYW5kbGVNZXNzYWdlIiwiZGF0YSIsInJlcXVlc3RDb21tdW5pdHlCYWNrdXAiLCJvcmdhbmlzbUlkIiwicG9zdE1lc3NhZ2UiLCJ0eXBlIiwiZnJvbSIsImNvbnNvbGUiLCJsb2ciLCJyZXN0b3JlRnJvbUNvbW11bml0eSIsImRldGVjdE1hc3NpdmVGYWlsdXJlIiwibGF1bmNoQ29tbXVuaXR5QWxlcnQiLCJtZXNzYWdlIiwibXNnIiwiYiIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvbW50L2MvVXNlcnMvbV9vbGkvUHJvamV0cy9TWU1CSU9OVC9zcmMvc29jaWFsL3NvY2lhbC1yZXNpbGllbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNvY2lhbC9zb2NpYWwtcmVzaWxpZW5jZS50c1xyXG4vLyBSw6lzaWxpZW5jZSBzb2NpYWxlIGV0IGJhY2t1cCBjb21tdW5hdXRhaXJlIChQaGFzZSAzKVxyXG5pbXBvcnQgeyBTZWN1cmVSYW5kb20gfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMvc2VjdXJlUmFuZG9tJztcblxyXG5leHBvcnQgY2xhc3MgU29jaWFsUmVzaWxpZW5jZSB7XHJcbiAgcHJpdmF0ZSBjaGFubmVsOiBCcm9hZGNhc3RDaGFubmVsXHJcbiAgcHJpdmF0ZSBwZWVySWQ6IHN0cmluZ1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucGVlcklkID0gJ3BlZXJfJyArIFNlY3VyZVJhbmRvbS5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpXHJcbiAgICB0aGlzLmNoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCgnc3ltYmlvbnRfcmVzaWxpZW5jZScpXHJcbiAgICB0aGlzLmNoYW5uZWwub25tZXNzYWdlID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU1lc3NhZ2UoZXZlbnQuZGF0YSlcclxuICB9XHJcblxyXG4gIHJlcXVlc3RDb21tdW5pdHlCYWNrdXAob3JnYW5pc21JZDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNoYW5uZWwucG9zdE1lc3NhZ2UoeyB0eXBlOiAnYmFja3VwX3JlcXVlc3QnLCBmcm9tOiB0aGlzLnBlZXJJZCwgb3JnYW5pc21JZCB9KVxyXG4gICAgY29uc29sZS5sb2coYFtTb2NpYWxSZXNpbGllbmNlXSBEZW1hbmRlIGRlIGJhY2t1cCBwb3VyICR7b3JnYW5pc21JZH1gKVxyXG4gIH1cclxuXHJcbiAgcmVzdG9yZUZyb21Db21tdW5pdHkob3JnYW5pc21JZDogc3RyaW5nKSB7XHJcbiAgICAvLyDDiWNvdXRlIGxlcyBiYWNrdXBzIHJlw6d1cyBldCByZXN0YXVyZSBzaSBsJ29yZ2FuaXNtSWQgY29ycmVzcG9uZFxyXG4gICAgLy8gKExhIGxvZ2lxdWUgcsOpZWxsZSBkZSByZXN0YXVyYXRpb24gc2VyYWl0IGljaSlcclxuICAgIGNvbnNvbGUubG9nKGBbU29jaWFsUmVzaWxpZW5jZV0gUmVzdGF1cmF0aW9uIGRlcHVpcyBsYSBjb21tdW5hdXTDqSBwb3VyICR7b3JnYW5pc21JZH1gKVxyXG4gIH1cclxuXHJcbiAgZGV0ZWN0TWFzc2l2ZUZhaWx1cmUoKSB7XHJcbiAgICAvLyBTaW11bGF0aW9uIGRlIGTDqXRlY3Rpb25cclxuICAgIGNvbnNvbGUubG9nKGBbU29jaWFsUmVzaWxpZW5jZV0gRMOpdGVjdGlvbiBkZSBwYW5uZSBtYXNzaXZlYClcclxuICB9XHJcblxyXG4gIGxhdW5jaENvbW11bml0eUFsZXJ0KG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgdGhpcy5jaGFubmVsLnBvc3RNZXNzYWdlKHsgdHlwZTogJ2FsZXJ0JywgZnJvbTogdGhpcy5wZWVySWQsIG1lc3NhZ2UgfSlcclxuICAgIGNvbnNvbGUubG9nKGBbU29jaWFsUmVzaWxpZW5jZV0gQWxlcnRlIGNvbW11bmF1dGFpcmUgOiAke21lc3NhZ2V9YClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTWVzc2FnZShtc2c6IGFueSkge1xyXG4gICAgaWYgKG1zZy5mcm9tID09PSB0aGlzLnBlZXJJZCkgcmV0dXJuIC8vIElnbm9yZSBzZWxmXHJcbiAgICBzd2l0Y2ggKG1zZy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2JhY2t1cF9yZXF1ZXN0JzpcclxuICAgICAgICAvLyBUT0RPOiBSw6lwb25kcmUgYXZlYyB1biBiYWNrdXAgc2kgb24gYSBsJ29yZ2FuaXNtSWRcclxuICAgICAgICBjb25zb2xlLmxvZyhgW1NvY2lhbFJlc2lsaWVuY2VdIEJhY2t1cCBkZW1hbmTDqSBwYXIgJHttc2cuZnJvbX0gcG91ciAke21zZy5vcmdhbmlzbUlkfWApXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnYWxlcnQnOlxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbU29jaWFsUmVzaWxpZW5jZV0gQWxlcnRlIHJlw6d1ZSA6ICR7bXNnLm1lc3NhZ2V9YClcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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