{"version":3,"names":["cov_1n02ebmhdc","actualCoverage","s","secureRandom_1","require","secureLogger_1","RealTimePerformanceMonitor","constructor","f","performanceObserver","isMonitoring","budget","maxMemoryUsage","maxCPUUsage","maxFrameTime","maxNetworkLatency","minFrameRate","metrics","initializeMetrics","frameRateTracker","FrameRateTracker","setupPerformanceObserver","memory","used","total","limit","cpu","usage","loadAverage","network","latency","bandwidth","webgl","frameRate","frameTime","droppedFrames","timing","domContentLoaded","loadComplete","navigationStart","vitals","lcp","fid","cls","fcp","ttfb","timestamp","Date","now","PerformanceObserver","b","logger","warn","list","entry","getEntries","processPerformanceEntry","entryTypes","forEach","type","observe","_e","entryType","updateNavigationMetrics","updatePaintMetrics","startTime","processingStart","value","fetchStart","domContentLoadedEventEnd","loadEventEnd","responseStart","requestStart","name","collectMemoryMetrics","performance","memInfo","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","estimateMemoryUsage","estimate","document","querySelectorAll","length","Object","keys","window","measureCPUUsage","start","iterations","targetTime","SecureRandom","random","actualTime","efficiency","Math","max","min","measureNetworkLatency","fetch","method","cache","collectMetrics","Promise","all","then","getMetrics","checkPerformanceBudget","violations","push","toFixed","passed","startMonitoring","setInterval","budgetCheck","stopMonitoring","stop","disconnect","getCurrentMetrics","getWebVitals","exports","frameCount","lastTime","isTracking","animationFrameId","measureFrameRate","cancelAnimationFrame","requestAnimationFrame","deltaTime"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/monitoring/RealTimePerformanceMonitor.ts"],"sourcesContent":["import { SecureRandom } from '@shared/utils/secureRandom';\r\nimport { logger } from '@shared/utils/secureLogger';\r\n/**\r\n * RealTimePerformanceMonitor - Monitoring de performance en temps réel\r\n * Remplace les simulations par des métriques réelles\r\n */\r\n\r\ninterface WebVitalsMetrics {\r\n  lcp: number; // Largest Contentful Paint\r\n  fid: number; // First Input Delay\r\n  cls: number; // Cumulative Layout Shift\r\n  fcp: number; // First Contentful Paint\r\n  ttfb: number; // Time To First Byte\r\n  timestamp: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  memory: {\r\n    used: number;\r\n    total: number;\r\n    limit: number;\r\n  };\r\n  cpu: {\r\n    usage: number;\r\n    loadAverage: number[];\r\n  };\r\n  network: {\r\n    latency: number;\r\n    bandwidth: number;\r\n  };\r\n  webgl: {\r\n    frameRate: number;\r\n    frameTime: number;\r\n    droppedFrames: number;\r\n  };\r\n  timing: {\r\n    domContentLoaded: number;\r\n    loadComplete: number;\r\n    navigationStart: number;\r\n  };\r\n  vitals: WebVitalsMetrics;\r\n}\r\n\r\ninterface PerformanceBudget {\r\n  maxMemoryUsage: number; // 50MB\r\n  maxCPUUsage: number; // 10%\r\n  maxFrameTime: number; // 16.67ms (60 FPS)\r\n  maxNetworkLatency: number; // 100ms\r\n  minFrameRate: number; // 58 FPS\r\n}\r\n\r\nexport class RealTimePerformanceMonitor {\r\n  private performanceObserver: PerformanceObserver | null = null;\r\n  private metrics: PerformanceMetrics;\r\n  private budget: PerformanceBudget;\r\n  private isMonitoring = false;\r\n  private frameRateTracker: FrameRateTracker;\r\n\r\n  constructor() {\r\n    this.budget = {\r\n      maxMemoryUsage: 50 * 1024 * 1024, // 50MB\r\n      maxCPUUsage: 10, // 10%\r\n      maxFrameTime: 16.67, // 60 FPS\r\n      maxNetworkLatency: 100, // 100ms\r\n      minFrameRate: 58 // FPS\r\n    };\r\n\r\n    this.metrics = this.initializeMetrics();\r\n    this.frameRateTracker = new FrameRateTracker();\r\n    this.setupPerformanceObserver();\r\n  }\r\n\r\n  private initializeMetrics(): PerformanceMetrics {\r\n    return {\r\n      memory: { used: 0, total: 0, limit: 0 },\r\n      cpu: { usage: 0, loadAverage: [] },\r\n      network: { latency: 0, bandwidth: 0 },\r\n      webgl: { frameRate: 0, frameTime: 0, droppedFrames: 0 },\r\n      timing: { domContentLoaded: 0, loadComplete: 0, navigationStart: 0 },\r\n      vitals: { lcp: 0, fid: 0, cls: 0, fcp: 0, ttfb: 0, timestamp: Date.now() }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configuration de l'observateur de performance\r\n   */\r\n  private setupPerformanceObserver(): void {\r\n    if (typeof PerformanceObserver === 'undefined') {\r\n      logger.warn('PerformanceObserver non disponible');\r\n      return;\r\n    }\r\n\r\n    this.performanceObserver = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        this.processPerformanceEntry(entry);\r\n      }\r\n    });\r\n\r\n    // Observer les différents types d'entrées de performance\r\n    const entryTypes = [\r\n      'measure',\r\n      'navigation', \r\n      'paint',\r\n      'largest-contentful-paint',\r\n      'first-input',\r\n      'layout-shift'\r\n    ];\r\n\r\n    entryTypes.forEach(type => {\r\n      try {\r\n        this.performanceObserver!.observe({ entryTypes: [type] });\r\n      } catch (_e) {\r\n        logger.warn(`Type d'entrée ${type} non supporté:`, _e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Traitement des entrées de performance\r\n   */\r\n  private processPerformanceEntry(entry: PerformanceEntry): void {\r\n    switch (entry.entryType) {\r\n      case 'navigation':\r\n        this.updateNavigationMetrics(entry as PerformanceNavigationTiming);\r\n        break;\r\n      case 'paint':\r\n        this.updatePaintMetrics(entry as PerformancePaintTiming);\r\n        break;\r\n      case 'largest-contentful-paint':\r\n        this.metrics.vitals.lcp = entry.startTime;\r\n        break;\r\n      case 'first-input':\r\n        this.metrics.vitals.fid = (entry as any).processingStart - entry.startTime;\r\n        break;\r\n      case 'layout-shift':\r\n        this.metrics.vitals.cls += (entry as any).value || 0;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mise à jour des métriques de navigation\r\n   */\r\n  private updateNavigationMetrics(entry: PerformanceNavigationTiming): void {\r\n    this.metrics.timing = {\r\n      navigationStart: entry.fetchStart,\r\n      domContentLoaded: entry.domContentLoadedEventEnd - entry.fetchStart,\r\n      loadComplete: entry.loadEventEnd - entry.fetchStart\r\n    };\r\n\r\n    this.metrics.vitals.ttfb = entry.responseStart - entry.requestStart;\r\n  }\r\n\r\n  /**\r\n   * Mise à jour des métriques de paint\r\n   */\r\n  private updatePaintMetrics(entry: PerformancePaintTiming): void {\r\n    if (entry.name === 'first-contentful-paint') {\r\n      this.metrics.vitals.fcp = entry.startTime;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collecte des métriques mémoire réelles\r\n   */\r\n  private async collectMemoryMetrics(): Promise<void> {\r\n    if ('memory' in performance) {\r\n      const memInfo = (performance as any).memory;\r\n      this.metrics.memory = {\r\n        used: memInfo.usedJSHeapSize,\r\n        total: memInfo.totalJSHeapSize,\r\n        limit: memInfo.jsHeapSizeLimit\r\n      };\r\n    } else {\r\n      // Estimation basée sur les objets JavaScript\r\n      this.metrics.memory = {\r\n        used: this.estimateMemoryUsage(),\r\n        total: 0,\r\n        limit: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estimation de l'utilisation mémoire\r\n   */\r\n  private estimateMemoryUsage(): number {\r\n    // Estimation approximative basée sur les objets globaux\r\n    let estimate = 0;\r\n    \r\n    try {\r\n      // Taille approximative des objets DOM\r\n      estimate += document.querySelectorAll('*').length * 1000; // ~1KB par élément\r\n      \r\n      // Estimation des variables JavaScript\r\n      estimate += Object.keys(window).length * 100;\r\n      \r\n      return estimate;\r\n    } catch {\r\n      return 1024 * 1024; // 1MB par défaut\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure de l'utilisation CPU (approximative)\r\n   */\r\n  private async measureCPUUsage(): Promise<number> {\r\n    const start = performance.now();\r\n    \r\n    // Tâche intensive pour mesurer la latence CPU\r\n    let iterations = 0;\r\n    const targetTime = 10; // 10ms\r\n    \r\n    while (performance.now() - start < targetTime) {\r\n      iterations++;\r\n      SecureRandom.random(); // Opération simple\r\n    }\r\n    \r\n    const actualTime = performance.now() - start;\r\n    const efficiency = targetTime / actualTime;\r\n    \r\n    // Conversion en pourcentage d'utilisation (inverse de l'efficacité)\r\n    return Math.max(0, Math.min(100, (1 - efficiency) * 100));\r\n  }\r\n\r\n  /**\r\n   * Mesure de la latence réseau\r\n   */\r\n  private async measureNetworkLatency(): Promise<number> {\r\n    const start = performance.now();\r\n    \r\n    try {\r\n      // Ping vers une ressource locale ou API\r\n      await fetch('data:text/plain,ping', { \r\n        method: 'GET',\r\n        cache: 'no-cache'\r\n      });\r\n      \r\n      return performance.now() - start;\r\n    } catch {\r\n      return 999; // Valeur élevée en cas d'erreur\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collecte complète des métriques\r\n   */\r\n  async collectMetrics(): Promise<PerformanceMetrics> {\r\n    await Promise.all([\r\n      this.collectMemoryMetrics(),\r\n      this.measureCPUUsage().then(cpu => { this.metrics.cpu.usage = cpu; }),\r\n      this.measureNetworkLatency().then(latency => { this.metrics.network.latency = latency; })\r\n    ]);\r\n\r\n    // Mise à jour des métriques WebGL si disponibles\r\n    this.metrics.webgl = this.frameRateTracker.getMetrics();\r\n    \r\n    // Mise à jour du timestamp\r\n    this.metrics.vitals.timestamp = Date.now();\r\n    \r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * Vérification du budget de performance\r\n   */\r\n  checkPerformanceBudget(): { passed: boolean; violations: string[] } {\r\n    const violations: string[] = [];\r\n\r\n    if (this.metrics.memory.used > this.budget.maxMemoryUsage) {\r\n      violations.push(`Mémoire: ${(this.metrics.memory.used / 1024 / 1024).toFixed(1)}MB > ${this.budget.maxMemoryUsage / 1024 / 1024}MB`);\r\n    }\r\n\r\n    if (this.metrics.cpu.usage > this.budget.maxCPUUsage) {\r\n      violations.push(`CPU: ${this.metrics.cpu.usage.toFixed(1)}% > ${this.budget.maxCPUUsage}%`);\r\n    }\r\n\r\n    if (this.metrics.webgl.frameTime > this.budget.maxFrameTime) {\r\n      violations.push(`Frame Time: ${this.metrics.webgl.frameTime.toFixed(1)}ms > ${this.budget.maxFrameTime}ms`);\r\n    }\r\n\r\n    if (this.metrics.network.latency > this.budget.maxNetworkLatency) {\r\n      violations.push(`Latence: ${this.metrics.network.latency.toFixed(1)}ms > ${this.budget.maxNetworkLatency}ms`);\r\n    }\r\n\r\n    if (this.metrics.webgl.frameRate < this.budget.minFrameRate) {\r\n      violations.push(`FPS: ${this.metrics.webgl.frameRate.toFixed(1)} < ${this.budget.minFrameRate}`);\r\n    }\r\n\r\n    return {\r\n      passed: violations.length === 0,\r\n      violations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Démarrage du monitoring continu\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) return;\r\n\r\n    this.isMonitoring = true;\r\n    this.frameRateTracker.start();\r\n\r\n    // Collecte périodique des métriques\r\n    setInterval(async () => {\r\n      if (this.isMonitoring) {\r\n        await this.collectMetrics();\r\n        \r\n        // Vérification du budget\r\n        const budgetCheck = this.checkPerformanceBudget();\r\n        if (!budgetCheck.passed) {\r\n          logger.warn('Budget de performance dépassé:', budgetCheck.violations);\r\n        }\r\n      }\r\n    }, 5000); // Toutes les 5 secondes\r\n  }\r\n\r\n  /**\r\n   * Arrêt du monitoring\r\n   */\r\n  stopMonitoring(): void {\r\n    this.isMonitoring = false;\r\n    this.frameRateTracker.stop();\r\n    \r\n    if (this.performanceObserver) {\r\n      this.performanceObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtient les métriques actuelles\r\n   */\r\n  getCurrentMetrics(): PerformanceMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * Obtient les Web Vitals\r\n   */\r\n  getWebVitals(): WebVitalsMetrics {\r\n    return { ...this.metrics.vitals };\r\n  }\r\n}\r\n\r\n/**\r\n * Tracker de frame rate pour WebGL\r\n */\r\nclass FrameRateTracker {\r\n  private frameCount = 0;\r\n  private lastTime = 0;\r\n  private frameRate = 0;\r\n  private frameTime = 0;\r\n  private droppedFrames = 0;\r\n  private isTracking = false;\r\n  private animationFrameId: number | null = null;\r\n\r\n  start(): void {\r\n    if (this.isTracking) return;\r\n    \r\n    this.isTracking = true;\r\n    this.lastTime = performance.now();\r\n    this.frameCount = 0;\r\n    this.measureFrameRate();\r\n  }\r\n\r\n  stop(): void {\r\n    this.isTracking = false;\r\n    \r\n    if (this.animationFrameId) {\r\n      cancelAnimationFrame(this.animationFrameId);\r\n      this.animationFrameId = null;\r\n    }\r\n  }\r\n\r\n  private measureFrameRate(): void {\r\n    if (!this.isTracking) return;\r\n\r\n    this.animationFrameId = requestAnimationFrame((timestamp) => {\r\n      this.frameCount++;\r\n      \r\n      const deltaTime = timestamp - this.lastTime;\r\n      this.frameTime = deltaTime;\r\n      \r\n      // Calcul du frame rate toutes les secondes\r\n      if (deltaTime >= 1000) {\r\n        this.frameRate = (this.frameCount * 1000) / deltaTime;\r\n        \r\n        // Détection des frames perdues (< 58 FPS)\r\n        if (this.frameRate < 58) {\r\n          this.droppedFrames += 60 - this.frameRate;\r\n        }\r\n        \r\n        this.frameCount = 0;\r\n        this.lastTime = timestamp;\r\n      }\r\n      \r\n      this.measureFrameRate();\r\n    });\r\n  }\r\n\r\n  getMetrics(): { frameRate: number; frameTime: number; droppedFrames: number } {\r\n    return {\r\n      frameRate: this.frameRate,\r\n      frameTime: this.frameTime,\r\n      droppedFrames: this.droppedFrames\r\n    };\r\n  }\r\n}\r\n\r\nexport type { PerformanceMetrics, WebVitalsMetrics, PerformanceBudget };"],"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","ignoreList":[]}