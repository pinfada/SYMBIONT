{"version":3,"names":["cov_1zaz05x2ck","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","DEFAULT_TRAITS","curiosity","focus","social","creativity","analytical","adaptability","DNA_BASES","CATEGORIES"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/types/SymbiontTypes.ts"],"sourcesContent":["// SYMBIONT Types - Complete Type Definitions\r\n\r\nexport interface PersonalityTraits {\r\n  curiosity: number;        // 0-1: Exploration vs Exploitation\r\n  focus: number;           // 0-1: Deep vs Surface engagement\r\n  social: number;          // 0-1: Social vs Individual\r\n  creativity: number;      // 0-1: Creative vs Practical\r\n  analytical: number;      // 0-1: Data-driven vs Intuitive\r\n  adaptability: number;    // 0-1: Change-seeking vs Routine\r\n}\r\n\r\nexport interface DNAMutation {\r\n  id: string;\r\n  type: 'behavioral' | 'cognitive' | 'social' | 'emotional';\r\n  trigger: string;\r\n  magnitude: number;\r\n  description: string;\r\n  effects: PersonalityTraits;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface PredictionResult {\r\n  action: string;\r\n  probability: number;\r\n  confidence: number;\r\n  reasoning: string[];\r\n}\r\n\r\nexport interface OrganismState {\r\n  id: string;\r\n  name?: string;\r\n  dna: string;\r\n  visualDNA: string;\r\n  generation: number;\r\n  health: number;\r\n  energy: number;\r\n  consciousness: number;\r\n  traits: PersonalityTraits;\r\n  birthTime: Date;\r\n  lastMutation?: Date;\r\n}\r\n\r\nexport interface BehaviorPattern {\r\n  id: string;\r\n  pattern: string;\r\n  frequency: number;\r\n  timeSpent: number;\r\n  category: 'work' | 'social' | 'entertainment' | 'education' | 'shopping' | 'news' | 'other';\r\n  domains: string[];\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface NetworkConnection {\r\n  fromUserId: string;\r\n  toUserId: string;\r\n  strength: number;\r\n  type: 'invitation' | 'mutual' | 'following';\r\n  organism?: OrganismState;\r\n}\r\n\r\nexport interface RitualSession {\r\n  id: string;\r\n  type: 'meditation' | 'synchronization' | 'revelation' | 'evolution';\r\n  duration: number;\r\n  intensity: number;\r\n  participants: string[];\r\n  effects: any;\r\n  startedAt: Date;\r\n  completedAt?: Date;\r\n}\r\n\r\nexport interface MemoryFragment {\r\n  id: string;\r\n  content: string;\r\n  type: 'navigation' | 'interaction' | 'emotion' | 'learning';\r\n  strength: number;\r\n  context?: any;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface EmotionalState {\r\n  mood: 'excited' | 'focused' | 'stressed' | 'relaxed' | 'curious' | 'frustrated';\r\n  intensity: number;\r\n  triggers: string[];\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface NetworkEvent {\r\n  id: string;\r\n  type: 'mutation' | 'connection' | 'ritual' | 'synchronization' | 'evolution';\r\n  userId: string;\r\n  organismId: string;\r\n  data: any;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface SystemMetrics {\r\n  cpu: number;\r\n  memory: number;\r\n  latency: number;\r\n  userAgent?: string;\r\n  platform?: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface InvitationCode {\r\n  id: string;\r\n  code: string;\r\n  inviterId?: string;\r\n  inviteeId?: string;\r\n  isConsumed: boolean;\r\n  consumedAt?: Date;\r\n  createdAt: Date;\r\n  expiresAt: Date;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  bio?: string;\r\n  avatar?: string;\r\n  timezone?: string;\r\n  language: string;\r\n  preferences: any;\r\n  createdAt: Date;\r\n}\r\n\r\n// Feature Flags pour migration progressive\r\nexport interface FeatureFlags {\r\n  USE_REAL_DNA: boolean;\r\n  USE_REAL_BEHAVIOR: boolean;\r\n  USE_REAL_NETWORK: boolean;\r\n  USE_BACKEND_API: boolean;\r\n}\r\n\r\n// Configuration globale\r\nexport interface SymbiontConfig {\r\n  apiUrl: string;\r\n  wsUrl: string;\r\n  features: FeatureFlags;\r\n  version: string;\r\n  environment: 'development' | 'staging' | 'production';\r\n}\r\n\r\n// Événements temps réel\r\nexport type WebSocketEventType = \r\n  | 'network_event'\r\n  | 'mutation'\r\n  | 'ritual_invitation'\r\n  | 'sync_request'\r\n  | 'connection'\r\n  | 'disconnection';\r\n\r\nexport interface WebSocketMessage {\r\n  type: WebSocketEventType;\r\n  data: any;\r\n  timestamp: Date;\r\n}\r\n\r\n// Analytics\r\nexport interface BehaviorAnalytics {\r\n  dominantCategories: string[];\r\n  timeDistribution: Record<string, number>;\r\n  patterns: string[];\r\n  anomalies: string[];\r\n  emotionalProfile: EmotionalState[];\r\n}\r\n\r\n// Évolution & Lignée\r\nexport interface EvolutionHistory {\r\n  id: string;\r\n  organismId: string;\r\n  generation: number;\r\n  mutations: DNAMutation[];\r\n  parentId?: string;\r\n  children: string[];\r\n  milestones: {\r\n    type: string;\r\n    timestamp: Date;\r\n    description: string;\r\n  }[];\r\n}\r\n\r\n// États d'UI\r\nexport interface UIState {\r\n  currentView: 'main' | 'network' | 'evolution' | 'rituals' | 'settings';\r\n  isLoading: boolean;\r\n  error?: string;\r\n  notifications: Notification[];\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\n// API Responses\r\nexport interface APIResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  meta?: {\r\n    count?: number;\r\n    page?: number;\r\n    totalPages?: number;\r\n    timestamp?: string;\r\n  };\r\n}\r\n\r\nexport interface APIError {\r\n  error: string;\r\n  code?: string;\r\n  details?: any;\r\n}\r\n\r\n// Hooks et Context\r\nexport interface SymbiontContextType {\r\n  organism: OrganismState | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  updateOrganism: (updates: Partial<OrganismState>) => void;\r\n  applyMutation: (mutation: Omit<DNAMutation, 'id' | 'timestamp'>) => void;\r\n  refreshData: () => Promise<void>;\r\n}\r\n\r\n// Constantes\r\nexport const DEFAULT_TRAITS: PersonalityTraits = {\r\n  curiosity: 0.5,\r\n  focus: 0.5,\r\n  social: 0.5,\r\n  creativity: 0.5,\r\n  analytical: 0.5,\r\n  adaptability: 0.5\r\n};\r\n\r\nexport const DNA_BASES = ['A', 'T', 'G', 'C'] as const;\r\nexport type DNABase = typeof DNA_BASES[number];\r\n\r\nexport const CATEGORIES = [\r\n  'work',\r\n  'social', \r\n  'entertainment',\r\n  'education',\r\n  'shopping',\r\n  'news',\r\n  'other'\r\n] as const;\r\n\r\nexport type BehaviorCategory = typeof CATEGORIES[number];\r\n\r\n// Utilitaires de type\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\r\n};\r\n\r\nexport type Timestamp = string | Date; "],"mappings":";;AAAA;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA;IAsPQ;IAAAD,cAAA,YAAAA,CAAA;MAAA,OAAA0B,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAA1B,cAAA;AAAAA,cAAA,GAAAc,CAAA;;;;;;;AAdR;AAAA;AAAAd,cAAA,GAAAc,CAAA;AACaa,OAAA,CAAAC,cAAc,GAAsB;EAC/CC,SAAS,EAAE,GAAG;EACdC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,UAAU,EAAE,GAAG;EACfC,UAAU,EAAE,GAAG;EACfC,YAAY,EAAE;CACf;AAAC;AAAAlC,cAAA,GAAAc,CAAA;AAEWa,OAAA,CAAAQ,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU;AAAC;AAAAnC,cAAA,GAAAc,CAAA;AAG1Ca,OAAA,CAAAS,UAAU,GAAG,CACxB,MAAM,EACN,QAAQ,EACR,eAAe,EACf,WAAW,EACX,UAAU,EACV,MAAM,EACN,OAAO,CACC","ignoreList":[]}