19b9005618f496c2424f898477d3c9ee
"use strict";

// SYMBIONT Types - Complete Type Definitions
/* istanbul ignore next */
function cov_1zaz05x2ck() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/types/SymbiontTypes.ts";
  var hash = "147ee1169780459254012ec3aa05aaf045874a2c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/types/SymbiontTypes.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 73
        }
      },
      "2": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "4": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 23,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/types/SymbiontTypes.ts",
      mappings: ";AAAA,6CAA6C;;;AAwO7C,aAAa;AACA,QAAA,cAAc,GAAsB;IAC/C,SAAS,EAAE,GAAG;IACd,KAAK,EAAE,GAAG;IACV,MAAM,EAAE,GAAG;IACX,UAAU,EAAE,GAAG;IACf,UAAU,EAAE,GAAG;IACf,YAAY,EAAE,GAAG;CAClB,CAAC;AAEW,QAAA,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU,CAAC;AAG1C,QAAA,UAAU,GAAG;IACxB,MAAM;IACN,QAAQ;IACR,eAAe;IACf,WAAW;IACX,UAAU;IACV,MAAM;IACN,OAAO;CACC,CAAC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/types/SymbiontTypes.ts"],
      sourcesContent: ["// SYMBIONT Types - Complete Type Definitions\r\n\r\nexport interface PersonalityTraits {\r\n  curiosity: number;        // 0-1: Exploration vs Exploitation\r\n  focus: number;           // 0-1: Deep vs Surface engagement\r\n  social: number;          // 0-1: Social vs Individual\r\n  creativity: number;      // 0-1: Creative vs Practical\r\n  analytical: number;      // 0-1: Data-driven vs Intuitive\r\n  adaptability: number;    // 0-1: Change-seeking vs Routine\r\n}\r\n\r\nexport interface DNAMutation {\r\n  id: string;\r\n  type: 'behavioral' | 'cognitive' | 'social' | 'emotional';\r\n  trigger: string;\r\n  magnitude: number;\r\n  description: string;\r\n  effects: PersonalityTraits;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface PredictionResult {\r\n  action: string;\r\n  probability: number;\r\n  confidence: number;\r\n  reasoning: string[];\r\n}\r\n\r\nexport interface OrganismState {\r\n  id: string;\r\n  name?: string;\r\n  dna: string;\r\n  visualDNA: string;\r\n  generation: number;\r\n  health: number;\r\n  energy: number;\r\n  consciousness: number;\r\n  traits: PersonalityTraits;\r\n  birthTime: Date;\r\n  lastMutation?: Date;\r\n}\r\n\r\nexport interface BehaviorPattern {\r\n  id: string;\r\n  pattern: string;\r\n  frequency: number;\r\n  timeSpent: number;\r\n  category: 'work' | 'social' | 'entertainment' | 'education' | 'shopping' | 'news' | 'other';\r\n  domains: string[];\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface NetworkConnection {\r\n  fromUserId: string;\r\n  toUserId: string;\r\n  strength: number;\r\n  type: 'invitation' | 'mutual' | 'following';\r\n  organism?: OrganismState;\r\n}\r\n\r\nexport interface RitualSession {\r\n  id: string;\r\n  type: 'meditation' | 'synchronization' | 'revelation' | 'evolution';\r\n  duration: number;\r\n  intensity: number;\r\n  participants: string[];\r\n  effects: any;\r\n  startedAt: Date;\r\n  completedAt?: Date;\r\n}\r\n\r\nexport interface MemoryFragment {\r\n  id: string;\r\n  content: string;\r\n  type: 'navigation' | 'interaction' | 'emotion' | 'learning';\r\n  strength: number;\r\n  context?: any;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface EmotionalState {\r\n  mood: 'excited' | 'focused' | 'stressed' | 'relaxed' | 'curious' | 'frustrated';\r\n  intensity: number;\r\n  triggers: string[];\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface NetworkEvent {\r\n  id: string;\r\n  type: 'mutation' | 'connection' | 'ritual' | 'synchronization' | 'evolution';\r\n  userId: string;\r\n  organismId: string;\r\n  data: any;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface SystemMetrics {\r\n  cpu: number;\r\n  memory: number;\r\n  latency: number;\r\n  userAgent?: string;\r\n  platform?: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface InvitationCode {\r\n  id: string;\r\n  code: string;\r\n  inviterId?: string;\r\n  inviteeId?: string;\r\n  isConsumed: boolean;\r\n  consumedAt?: Date;\r\n  createdAt: Date;\r\n  expiresAt: Date;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  bio?: string;\r\n  avatar?: string;\r\n  timezone?: string;\r\n  language: string;\r\n  preferences: any;\r\n  createdAt: Date;\r\n}\r\n\r\n// Feature Flags pour migration progressive\r\nexport interface FeatureFlags {\r\n  USE_REAL_DNA: boolean;\r\n  USE_REAL_BEHAVIOR: boolean;\r\n  USE_REAL_NETWORK: boolean;\r\n  USE_BACKEND_API: boolean;\r\n}\r\n\r\n// Configuration globale\r\nexport interface SymbiontConfig {\r\n  apiUrl: string;\r\n  wsUrl: string;\r\n  features: FeatureFlags;\r\n  version: string;\r\n  environment: 'development' | 'staging' | 'production';\r\n}\r\n\r\n// \xC9v\xE9nements temps r\xE9el\r\nexport type WebSocketEventType = \r\n  | 'network_event'\r\n  | 'mutation'\r\n  | 'ritual_invitation'\r\n  | 'sync_request'\r\n  | 'connection'\r\n  | 'disconnection';\r\n\r\nexport interface WebSocketMessage {\r\n  type: WebSocketEventType;\r\n  data: any;\r\n  timestamp: Date;\r\n}\r\n\r\n// Analytics\r\nexport interface BehaviorAnalytics {\r\n  dominantCategories: string[];\r\n  timeDistribution: Record<string, number>;\r\n  patterns: string[];\r\n  anomalies: string[];\r\n  emotionalProfile: EmotionalState[];\r\n}\r\n\r\n// \xC9volution & Lign\xE9e\r\nexport interface EvolutionHistory {\r\n  id: string;\r\n  organismId: string;\r\n  generation: number;\r\n  mutations: DNAMutation[];\r\n  parentId?: string;\r\n  children: string[];\r\n  milestones: {\r\n    type: string;\r\n    timestamp: Date;\r\n    description: string;\r\n  }[];\r\n}\r\n\r\n// \xC9tats d'UI\r\nexport interface UIState {\r\n  currentView: 'main' | 'network' | 'evolution' | 'rituals' | 'settings';\r\n  isLoading: boolean;\r\n  error?: string;\r\n  notifications: Notification[];\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\n// API Responses\r\nexport interface APIResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  meta?: {\r\n    count?: number;\r\n    page?: number;\r\n    totalPages?: number;\r\n    timestamp?: string;\r\n  };\r\n}\r\n\r\nexport interface APIError {\r\n  error: string;\r\n  code?: string;\r\n  details?: any;\r\n}\r\n\r\n// Hooks et Context\r\nexport interface SymbiontContextType {\r\n  organism: OrganismState | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  updateOrganism: (updates: Partial<OrganismState>) => void;\r\n  applyMutation: (mutation: Omit<DNAMutation, 'id' | 'timestamp'>) => void;\r\n  refreshData: () => Promise<void>;\r\n}\r\n\r\n// Constantes\r\nexport const DEFAULT_TRAITS: PersonalityTraits = {\r\n  curiosity: 0.5,\r\n  focus: 0.5,\r\n  social: 0.5,\r\n  creativity: 0.5,\r\n  analytical: 0.5,\r\n  adaptability: 0.5\r\n};\r\n\r\nexport const DNA_BASES = ['A', 'T', 'G', 'C'] as const;\r\nexport type DNABase = typeof DNA_BASES[number];\r\n\r\nexport const CATEGORIES = [\r\n  'work',\r\n  'social', \r\n  'entertainment',\r\n  'education',\r\n  'shopping',\r\n  'news',\r\n  'other'\r\n] as const;\r\n\r\nexport type BehaviorCategory = typeof CATEGORIES[number];\r\n\r\n// Utilitaires de type\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\r\n};\r\n\r\nexport type Timestamp = string | Date; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "147ee1169780459254012ec3aa05aaf045874a2c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zaz05x2ck = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zaz05x2ck();
cov_1zaz05x2ck().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zaz05x2ck().s[1]++;
exports.CATEGORIES = exports.DNA_BASES = exports.DEFAULT_TRAITS = void 0;
// Constantes
/* istanbul ignore next */
cov_1zaz05x2ck().s[2]++;
exports.DEFAULT_TRAITS = {
  curiosity: 0.5,
  focus: 0.5,
  social: 0.5,
  creativity: 0.5,
  analytical: 0.5,
  adaptability: 0.5
};
/* istanbul ignore next */
cov_1zaz05x2ck().s[3]++;
exports.DNA_BASES = ['A', 'T', 'G', 'C'];
/* istanbul ignore next */
cov_1zaz05x2ck().s[4]++;
exports.CATEGORIES = ['work', 'social', 'entertainment', 'education', 'shopping', 'news', 'other'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,