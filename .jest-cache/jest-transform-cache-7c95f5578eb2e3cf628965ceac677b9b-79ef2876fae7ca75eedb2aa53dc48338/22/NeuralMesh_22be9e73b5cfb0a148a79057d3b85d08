1d7027054295df0c985a27f105d438c5
"use strict";

/* istanbul ignore next */
function cov_1p0tt5b731() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts";
  var hash = "b26bf9a34c1bc727bdbebbdb737e200ce1118ce5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 31
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 37
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "6": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "10": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 87
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 52
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 55
        }
      },
      "14": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 71
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 44
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "20": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "21": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 56
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "23": {
        start: {
          line: 60,
          column: 35
        },
        end: {
          line: 60,
          column: 68
        }
      },
      "24": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "25": {
        start: {
          line: 62,
          column: 42
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "26": {
        start: {
          line: 63,
          column: 38
        },
        end: {
          line: 63,
          column: 83
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 72
        }
      },
      "28": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 49
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "32": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 90,
          column: 17
        }
      },
      "33": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "34": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 97
        }
      },
      "35": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "36": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "37": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 57
        }
      },
      "38": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 65
        }
      },
      "39": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "40": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "41": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "42": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 50
        }
      },
      "43": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 24
        }
      },
      "44": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 61
        }
      },
      "45": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 117,
          column: 27
        }
      },
      "46": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 31
        }
      },
      "47": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "48": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "49": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "50": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 34
        }
      },
      "51": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 71
        }
      },
      "52": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "53": {
        start: {
          line: 133,
          column: 82
        },
        end: {
          line: 133,
          column: 115
        }
      },
      "54": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "55": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 39
        }
      },
      "56": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "57": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 47
        }
      },
      "58": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 46
        }
      },
      "59": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 52
        }
      },
      "60": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "61": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 47
        }
      },
      "62": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 49
        }
      },
      "63": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 65
        }
      },
      "64": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 64
        }
      },
      "65": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 64
        }
      },
      "66": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 66
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 64
        }
      },
      "68": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 33
        }
      },
      "69": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 45
        }
      },
      "70": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "71": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "72": {
        start: {
          line: 189,
          column: 27
        },
        end: {
          line: 189,
          column: 73
        }
      },
      "73": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "74": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 203,
          column: 10
        }
      },
      "75": {
        start: {
          line: 198,
          column: 103
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "76": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "77": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 31
        }
      },
      "78": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "79": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 41
        }
      },
      "80": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "81": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 37
        }
      },
      "82": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "83": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 83
        }
      },
      "84": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "85": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 37
        }
      },
      "86": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "87": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 53
        }
      },
      "88": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 27
        }
      },
      "89": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 33
        }
      },
      "90": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 33
        }
      },
      "91": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 35
        }
      },
      "92": {
        start: {
          line: 241,
          column: 23
        },
        end: {
          line: 241,
          column: 25
        }
      },
      "93": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "94": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 51
        }
      },
      "95": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "96": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 57
        }
      },
      "97": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 40
        }
      },
      "98": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "99": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 39
        }
      },
      "100": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "101": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 41
        }
      },
      "102": {
        start: {
          line: 256,
          column: 30
        },
        end: {
          line: 256,
          column: 105
        }
      },
      "103": {
        start: {
          line: 256,
          column: 77
        },
        end: {
          line: 256,
          column: 104
        }
      },
      "104": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "105": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 71
        }
      },
      "106": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "107": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 27
        }
      },
      "108": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 33
        }
      },
      "109": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 33
        }
      },
      "110": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "111": {
        start: {
          line: 279,
          column: 31
        },
        end: {
          line: 281,
          column: 34
        }
      },
      "112": {
        start: {
          line: 280,
          column: 38
        },
        end: {
          line: 280,
          column: 59
        }
      },
      "113": {
        start: {
          line: 281,
          column: 31
        },
        end: {
          line: 281,
          column: 33
        }
      },
      "114": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 287,
          column: 15
        }
      },
      "115": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 286,
          column: 17
        }
      },
      "116": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 285,
          column: 61
        }
      },
      "117": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 29
        }
      },
      "118": {
        start: {
          line: 290,
          column: 32
        },
        end: {
          line: 291,
          column: 61
        }
      },
      "119": {
        start: {
          line: 291,
          column: 38
        },
        end: {
          line: 291,
          column: 60
        }
      },
      "120": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 95
        }
      },
      "121": {
        start: {
          line: 292,
          column: 64
        },
        end: {
          line: 292,
          column: 92
        }
      },
      "122": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 18
        }
      },
      "123": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "124": {
        start: {
          line: 303,
          column: 33
        },
        end: {
          line: 303,
          column: 63
        }
      },
      "125": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 38
        }
      },
      "126": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 316,
          column: 10
        }
      },
      "127": {
        start: {
          line: 313,
          column: 96
        },
        end: {
          line: 313,
          column: 118
        }
      },
      "128": {
        start: {
          line: 319,
          column: 0
        },
        end: {
          line: 319,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 40
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 29
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 83
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 104
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 28
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 116
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 130
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 133,
            column: 67
          },
          end: {
            line: 133,
            column: 68
          }
        },
        loc: {
          start: {
            line: 133,
            column: 82
          },
          end: {
            line: 133,
            column: 115
          }
        },
        line: 133
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 140
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 26
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 151
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 171
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 179
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 187
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 195
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 198,
            column: 87
          },
          end: {
            line: 198,
            column: 88
          }
        },
        loc: {
          start: {
            line: 198,
            column: 103
          },
          end: {
            line: 201,
            column: 13
          }
        },
        line: 198
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 21
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 208
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 231
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 18
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 240
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 256,
            column: 67
          },
          end: {
            line: 256,
            column: 68
          }
        },
        loc: {
          start: {
            line: 256,
            column: 77
          },
          end: {
            line: 256,
            column: 104
          }
        },
        line: 256
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 14
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 268
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 34
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 276
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 280,
            column: 24
          },
          end: {
            line: 280,
            column: 25
          }
        },
        loc: {
          start: {
            line: 280,
            column: 38
          },
          end: {
            line: 280,
            column: 59
          }
        },
        line: 280
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 281,
            column: 21
          },
          end: {
            line: 281,
            column: 22
          }
        },
        loc: {
          start: {
            line: 281,
            column: 31
          },
          end: {
            line: 281,
            column: 33
          }
        },
        line: 281
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 283,
            column: 44
          },
          end: {
            line: 283,
            column: 45
          }
        },
        loc: {
          start: {
            line: 283,
            column: 66
          },
          end: {
            line: 287,
            column: 13
          }
        },
        line: 283
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 291,
            column: 24
          },
          end: {
            line: 291,
            column: 25
          }
        },
        loc: {
          start: {
            line: 291,
            column: 38
          },
          end: {
            line: 291,
            column: 60
          }
        },
        line: 291
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 292,
            column: 54
          },
          end: {
            line: 292,
            column: 55
          }
        },
        loc: {
          start: {
            line: 292,
            column: 64
          },
          end: {
            line: 292,
            column: 92
          }
        },
        line: 292
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 22
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 299
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 28
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 310
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 313,
            column: 74
          },
          end: {
            line: 313,
            column: 75
          }
        },
        loc: {
          start: {
            line: 313,
            column: 96
          },
          end: {
            line: 313,
            column: 118
          }
        },
        line: 313
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 30
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 35
          }
        }, {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 29,
            column: 60
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 42
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 60,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 60,
            column: 63
          }
        }, {
          start: {
            line: 60,
            column: 67
          },
          end: {
            line: 60,
            column: 68
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 68
          }
        }, {
          start: {
            line: 62,
            column: 72
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 43
          }
        }, {
          start: {
            line: 78,
            column: 47
          },
          end: {
            line: 78,
            column: 48
          }
        }],
        line: 78
      },
      "10": {
        loc: {
          start: {
            line: 83,
            column: 11
          },
          end: {
            line: 83,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 83,
            column: 18
          },
          end: {
            line: 83,
            column: 22
          }
        }],
        line: 83
      },
      "11": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "12": {
        loc: {
          start: {
            line: 89,
            column: 67
          },
          end: {
            line: 89,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 67
          },
          end: {
            line: 89,
            column: 88
          }
        }, {
          start: {
            line: 89,
            column: 92
          },
          end: {
            line: 89,
            column: 93
          }
        }],
        line: 89
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 111,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 111,
            column: 56
          }
        }, {
          start: {
            line: 111,
            column: 59
          },
          end: {
            line: 111,
            column: 60
          }
        }],
        line: 111
      },
      "15": {
        loc: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 37
          },
          end: {
            line: 125,
            column: 66
          }
        }, {
          start: {
            line: 125,
            column: 69
          },
          end: {
            line: 125,
            column: 70
          }
        }],
        line: 125
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "17": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "18": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "19": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "20": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "21": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "22": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "23": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "24": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 278,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 278,
            column: 19
          }
        }, {
          start: {
            line: 278,
            column: 23
          },
          end: {
            line: 278,
            column: 50
          }
        }],
        line: 278
      },
      "25": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 286,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 286,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "26": {
        loc: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 45
          }
        }, {
          start: {
            line: 284,
            column: 49
          },
          end: {
            line: 284,
            column: 74
          }
        }],
        line: 284
      },
      "27": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "28": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 16
          }
        }, {
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 44
          }
        }, {
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 61
          }
        }],
        line: 301
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts",
      mappings: ";;;AAEA,MAAa,UAAU;IAOrB;QANQ,UAAK,GAAoE,IAAI,GAAG,EAAE,CAAC;QACnF,gBAAW,GAAqC,IAAI,GAAG,EAAE,CAAC;QAC1D,gBAAW,GAAwB,IAAI,GAAG,EAAE,CAAC;QACrD,iDAAiD;QACzC,iBAAY,GAAW,IAAI,CAAC;QAGlC,2BAA2B;IAC7B,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,EAAU,EAAE,IAAmC,EAAE,OAAe,CAAC;QACvE,MAAM,IAAI,GAAuD;YAC/D,IAAI;YACJ,UAAU,EAAE,CAAC;YACb,IAAI;SACL,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,MAAc,EAAE,IAAY,EAAE,MAAc;QACxD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,sCAAsC,MAAM,OAAO,IAAI,EAAE,CAAC,CAAC;QAC7E,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,MAAc,EAAE,KAAa;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACnC,OAAO,CAAC,IAAI,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,SAAS;QACP,8BAA8B;QAC9B,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACxC,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;QAED,gCAAgC;QAChC,KAAK,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrD,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEzD,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;gBACzC,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,aAAa,GAAG,iBAAiB,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,CAAC;gBACpE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,OAAO,CAAC,CAAS;QACvB,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,MAAc;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,OAAe,IAAI;QACxB,4BAA4B;QAC5B,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YACpD,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;gBACzC,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC;oBACzB,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;oBAC5D,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,CAAC;YACH,CAAC;QACH,CAAC;QAED,qBAAqB;QACrB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YACvC,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC;gBACzB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;gBACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YACnD,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACtC,SAAS,EAAE,CAAC;QACd,CAAC;QAED,OAAO,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,qBAAqB;QACnB,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,eAAe,GAAG,CAAC,CAAC;QAExB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YACpD,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;gBAC1C,WAAW,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAChC,eAAe,EAAE,CAAC;YACpB,CAAC;QACH,CAAC;QAED,OAAO,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO;YACL,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACtC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;YACxG,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;SAClD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,iCAAiC;QACjC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC7B,CAAC;QAED,8BAA8B;QAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,mBAAmB;QACzB,kBAAkB;QAClB,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAEtC,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;QAE7C,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAEzC,sBAAsB;QACtB,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,gBAAgB,EAAE,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,uCAAuC;QACvC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW;QACf,0EAA0E;QAC1E,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAC3D,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,0EAA0E;QAC1E,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,sBAAsB;QACzF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,sBAAsB;IACxE,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO;YACL,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;YACrC,WAAW,EAAE,MAAM,CAAC,WAAW,CAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;gBACzD,GAAG;gBACH,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC;aACxB,CAAC,CACH;YACD,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;SAClD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,KAAU;QAClB,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;gBACrD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAW,CAAC,CAAC;YAClC,CAAC;QACH,CAAC;QAED,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,KAAK,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;gBACtE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,WAAkB,CAAC,CAAC,CAAC,CAAC;YAC5E,CAAC;QACH,CAAC;QAED,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,KAAK,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;gBACjE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,UAAoB,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,WAAW;QACT,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAC/C,CAAC;QAED,2BAA2B;QAC3B,MAAM,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;QACzC,KAAK,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrD,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC3B,KAAK,MAAM,IAAI,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;gBACtC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CACxD,MAAM,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CACtC,CAAC;QAEF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,mBAAmB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAC;QAED,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,MAAM;SACP,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,OAAY;QAC/B,sEAAsE;QACtE,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAC3C,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;iBAChD,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;iBAC3C,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;YAErB,4CAA4C;YAC5C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE;gBACnD,IAAI,KAAK,GAAG,UAAU,CAAC,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBAC3D,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,0CAA0C;YAC1C,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;iBACjD,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;YAEhD,OAAO,MAAM,CAAC,WAAW,CACvB,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CACxD,CAAC;QACJ,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CAAC,IAAS;QACnB,wDAAwD;QACxD,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtD,0CAA0C;YAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,qBAAqB;QACnB,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC1B,eAAe,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAC3D,CAAC,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,CAChD;YACD,cAAc,EAAE,IAAI,CAAC,iBAAiB,EAAE;YACxC,kBAAkB,EAAE,IAAI,CAAC,qBAAqB,EAAE;SACjD,CAAC;IACJ,CAAC;CACF;AApXD,gCAoXC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts"],
      sourcesContent: ["import { INeuralMesh } from './interfaces/INeuralMesh';\r\n\r\nexport class NeuralMesh implements INeuralMesh {\r\n  private nodes: Map<string, { type: string; activation: number; bias: number }> = new Map();\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux r\xE9serv\xE9 pour usage futur\r\n  private learningRate: number = 0.01;\r\n\r\n  constructor() {\r\n    // Initialize empty network\r\n  }\r\n\r\n  /**\r\n   * Ajoute un n\u0153ud au r\xE9seau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: { type: string; activation: number; bias: number } = {\r\n      type,\r\n      activation: 0,\r\n      bias\r\n    };\r\n\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux n\u0153uds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, new Map());\r\n    }\r\n    this.connections.get(fromId)!.set(toId, weight);\r\n  }\r\n\r\n  /**\r\n   * Stimule un n\u0153ud d'entr\xE9e\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      console.warn(`Cannot stimulate non-input node: ${nodeId}`);\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation \xE0 travers le r\xE9seau\r\n   */\r\n  propagate(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const [toId, weight] of connections) {\r\n        const currentActivation = this.activations.get(toId) || 0;\r\n        const newActivation = currentActivation + (fromActivation * weight);\r\n        this.activations.set(toId, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmo\xEFde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re l'activation d'un n\u0153ud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation al\xE9atoire au r\xE9seau\r\n   */\r\n  mutate(rate: number = 0.05): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const [toId, weight] of connections) {\r\n        if (Math.random() < rate) {\r\n          connections.set(toId, weight + (Math.random() - 0.5) * 0.2);\r\n          connections.set(toId, Math.max(-2, Math.min(2, connections.get(toId) || 0)));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (Math.random() < rate) {\r\n        node.bias += (Math.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activit\xE9 neurale globale\r\n   */\r\n  getNeuralActivity(): number {\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const weight of connections.values()) {\r\n        totalWeight += Math.abs(weight);\r\n        connectionCount++;\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).map(connections => Array.from(connections.entries())),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le r\xE9seau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un r\xE9seau par d\xE9faut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    console.log('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual computation time\r\n    const complexity = this.nodes.size * this.connections.size;\r\n    return Math.min(1, complexity / 1000);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual memory footprint\r\n    const memorySize = (this.nodes.size + this.connections.size) * 64; // bytes approximation\r\n    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n\r\n  /**\r\n   * Save current state for persistence\r\n   */\r\n  saveState(): any {\r\n    return {\r\n      nodes: Object.fromEntries(this.nodes),\r\n      connections: Object.fromEntries(\r\n        Array.from(this.connections.entries()).map(([key, map]) => [\r\n          key,\r\n          Object.fromEntries(map)\r\n        ])\r\n      ),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load state from saved data\r\n   */\r\n  loadState(state: any): void {\r\n    if (state.nodes) {\r\n      this.nodes.clear();\r\n      for (const [id, node] of Object.entries(state.nodes)) {\r\n        this.nodes.set(id, node as any);\r\n      }\r\n    }\r\n    \r\n    if (state.connections) {\r\n      this.connections.clear();\r\n      for (const [fromId, connections] of Object.entries(state.connections)) {\r\n        this.connections.set(fromId, new Map(Object.entries(connections as any)));\r\n      }\r\n    }\r\n    \r\n    if (state.activations) {\r\n      this.activations.clear();\r\n      for (const [id, activation] of Object.entries(state.activations)) {\r\n        this.activations.set(id, activation as number);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset neural mesh to initial state\r\n   */\r\n  reset(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.setupDefaultNetwork();\r\n  }\r\n\r\n  /**\r\n   * Health check for neural mesh\r\n   */\r\n  healthCheck(): { healthy: boolean; issues: string[] } {\r\n    const issues: string[] = [];\r\n    \r\n    if (this.nodes.size === 0) {\r\n      issues.push('No nodes in neural mesh');\r\n    }\r\n    \r\n    if (this.connections.size === 0) {\r\n      issues.push('No connections in neural mesh');\r\n    }\r\n    \r\n    // Check for orphaned nodes\r\n    const connectedNodes = new Set<string>();\r\n    for (const [fromId, connections] of this.connections) {\r\n      connectedNodes.add(fromId);\r\n      for (const toId of connections.keys()) {\r\n        connectedNodes.add(toId);\r\n      }\r\n    }\r\n    \r\n    const orphanedNodes = Array.from(this.nodes.keys()).filter(\r\n      nodeId => !connectedNodes.has(nodeId)\r\n    );\r\n    \r\n    if (orphanedNodes.length > 0) {\r\n      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);\r\n    }\r\n    \r\n    return {\r\n      healthy: issues.length === 0,\r\n      issues\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  cleanup(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n  }\r\n\r\n  /**\r\n   * Process a pattern through the neural mesh (optional)\r\n   */\r\n  async processPattern(pattern: any): Promise<any> {\r\n    // Simple pattern processing - stimulate input nodes with pattern data\r\n    if (pattern && typeof pattern === 'object') {\r\n      const inputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'input')\r\n        .map(([id]) => id);\r\n\r\n      // Stimulate input nodes with pattern values\r\n      Object.entries(pattern).forEach(([, value], index) => {\r\n        if (index < inputNodes.length && typeof value === 'number') {\r\n          this.stimulate(inputNodes[index], value);\r\n        }\r\n      });\r\n\r\n      // Propagate and return output activations\r\n      this.propagate();\r\n      \r\n      const outputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'output');\r\n      \r\n      return Object.fromEntries(\r\n        outputNodes.map(([id]) => [id, this.getActivation(id)])\r\n      );\r\n    }\r\n    \r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Learn from data (optional)\r\n   */\r\n  async learn(data: any): Promise<void> {\r\n    // Simple learning implementation - adjust based on data\r\n    if (data && typeof data === 'object' && data.feedback) {\r\n      // Apply small mutations based on feedback\r\n      const learningRate = Math.abs(data.feedback) * 0.01;\r\n      this.mutate(learningRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics (optional)\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return {\r\n      nodeCount: this.nodes.size,\r\n      connectionCount: Array.from(this.connections.values()).reduce(\r\n        (sum, connections) => sum + connections.size, 0\r\n      ),\r\n      neuralActivity: this.getNeuralActivity(),\r\n      connectionStrength: this.getConnectionStrength()\r\n    };\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b26bf9a34c1bc727bdbebbdb737e200ce1118ce5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1p0tt5b731 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1p0tt5b731();
cov_1p0tt5b731().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1p0tt5b731().s[1]++;
exports.NeuralMesh = void 0;
class NeuralMesh {
  constructor() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[0]++;
    cov_1p0tt5b731().s[2]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[3]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[4]++;
    this.activations = new Map();
    // @ts-expect-error Taux réservé pour usage futur
    /* istanbul ignore next */
    cov_1p0tt5b731().s[5]++;
    this.learningRate = 0.01;
    // Initialize empty network
  }
  /**
   * Ajoute un nœud au réseau
   */
  addNode(id, type, bias =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[0][0]++, 0)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[1]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[6]++, {
      type,
      activation: 0,
      bias
    });
    /* istanbul ignore next */
    cov_1p0tt5b731().s[7]++;
    this.nodes.set(id, node);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[8]++;
    this.activations.set(id, 0);
  }
  /**
   * Ajoute une connexion entre deux nœuds
   */
  addConnection(fromId, toId, weight) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[2]++;
    cov_1p0tt5b731().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][0]++, !this.nodes.has(fromId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[2][1]++, !this.nodes.has(toId))) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[1][0]++;
      cov_1p0tt5b731().s[10]++;
      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[1][1]++;
    }
    cov_1p0tt5b731().s[11]++;
    if (!this.connections.has(fromId)) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[3][0]++;
      cov_1p0tt5b731().s[12]++;
      this.connections.set(fromId, new Map());
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[3][1]++;
    }
    cov_1p0tt5b731().s[13]++;
    this.connections.get(fromId).set(toId, weight);
  }
  /**
   * Stimule un nœud d'entrée
   */
  stimulate(nodeId, value) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[3]++;
    const node =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[14]++, this.nodes.get(nodeId));
    /* istanbul ignore next */
    cov_1p0tt5b731().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][0]++, !node) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[5][1]++, node.type !== 'input')) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[4][0]++;
      cov_1p0tt5b731().s[16]++;
      console.warn(`Cannot stimulate non-input node: ${nodeId}`);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[4][1]++;
    }
    cov_1p0tt5b731().s[18]++;
    this.activations.set(nodeId, value);
  }
  /**
   * Propage l'activation à travers le réseau
   */
  propagate() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[4]++;
    cov_1p0tt5b731().s[19]++;
    // Reset non-input activations
    for (const [nodeId, node] of this.nodes) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[20]++;
      if (node.type !== 'input') {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[6][0]++;
        cov_1p0tt5b731().s[21]++;
        this.activations.set(nodeId, node.bias);
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[6][1]++;
      }
    }
    // Propagate through connections
    /* istanbul ignore next */
    cov_1p0tt5b731().s[22]++;
    for (const [fromId, connections] of this.connections) {
      const fromActivation =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[23]++,
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][0]++, this.activations.get(fromId)) ||
      /* istanbul ignore next */
      (cov_1p0tt5b731().b[7][1]++, 0));
      /* istanbul ignore next */
      cov_1p0tt5b731().s[24]++;
      for (const [toId, weight] of connections) {
        const currentActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[25]++,
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][0]++, this.activations.get(toId)) ||
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[8][1]++, 0));
        const newActivation =
        /* istanbul ignore next */
        (cov_1p0tt5b731().s[26]++, currentActivation + fromActivation * weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[27]++;
        this.activations.set(toId, this.sigmoid(newActivation));
      }
    }
  }
  /**
   * Fonction d'activation sigmoïde
   */
  sigmoid(x) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[5]++;
    cov_1p0tt5b731().s[28]++;
    return 1 / (1 + Math.exp(-x));
  }
  /**
   * Récupère l'activation d'un nœud
   */
  getActivation(nodeId) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[6]++;
    cov_1p0tt5b731().s[29]++;
    return /* istanbul ignore next */(cov_1p0tt5b731().b[9][0]++, this.activations.get(nodeId)) ||
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[9][1]++, 0);
  }
  /**
   * Applique une mutation aléatoire au réseau
   */
  mutate(rate =
  /* istanbul ignore next */
  (cov_1p0tt5b731().b[10][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[7]++;
    cov_1p0tt5b731().s[30]++;
    // Mutate connection weights
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[31]++;
      for (const [toId, weight] of connections) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[32]++;
        if (Math.random() < rate) {
          /* istanbul ignore next */
          cov_1p0tt5b731().b[11][0]++;
          cov_1p0tt5b731().s[33]++;
          connections.set(toId, weight + (Math.random() - 0.5) * 0.2);
          /* istanbul ignore next */
          cov_1p0tt5b731().s[34]++;
          connections.set(toId, Math.max(-2, Math.min(2,
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][0]++, connections.get(toId)) ||
          /* istanbul ignore next */
          (cov_1p0tt5b731().b[12][1]++, 0))));
        } else
        /* istanbul ignore next */
        {
          cov_1p0tt5b731().b[11][1]++;
        }
      }
    }
    // Mutate node biases
    /* istanbul ignore next */
    cov_1p0tt5b731().s[35]++;
    for (const node of this.nodes.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[36]++;
      if (Math.random() < rate) {
        /* istanbul ignore next */
        cov_1p0tt5b731().b[13][0]++;
        cov_1p0tt5b731().s[37]++;
        node.bias += (Math.random() - 0.5) * 0.1;
        /* istanbul ignore next */
        cov_1p0tt5b731().s[38]++;
        node.bias = Math.max(-1, Math.min(1, node.bias));
      } else
      /* istanbul ignore next */
      {
        cov_1p0tt5b731().b[13][1]++;
      }
    }
  }
  /**
   * Mesure l'activité neurale globale
   */
  getNeuralActivity() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[8]++;
    let totalActivity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[39]++, 0);
    let nodeCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[40]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[41]++;
    for (const activation of this.activations.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[42]++;
      totalActivity += Math.abs(activation);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[43]++;
      nodeCount++;
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[44]++;
    return nodeCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][0]++, totalActivity / nodeCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[14][1]++, 0);
  }
  /**
   * Mesure la force moyenne des connexions
   */
  getConnectionStrength() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[9]++;
    let totalWeight =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[45]++, 0);
    let connectionCount =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[46]++, 0);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[47]++;
    for (const connections of this.connections.values()) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[48]++;
      for (const weight of connections.values()) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[49]++;
        totalWeight += Math.abs(weight);
        /* istanbul ignore next */
        cov_1p0tt5b731().s[50]++;
        connectionCount++;
      }
    }
    /* istanbul ignore next */
    cov_1p0tt5b731().s[51]++;
    return connectionCount > 0 ?
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][0]++, totalWeight / connectionCount) :
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[15][1]++, 0);
  }
  /**
   * Export JSON pour debug/sauvegarde
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[10]++;
    cov_1p0tt5b731().s[52]++;
    return {
      nodes: Array.from(this.nodes.values()),
      connections: Array.from(this.connections.values()).map(connections => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[11]++;
        cov_1p0tt5b731().s[53]++;
        return Array.from(connections.entries());
      }),
      activations: Object.fromEntries(this.activations)
    };
  }
  /**
   * Initialise le réseau neuronal
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[12]++;
    cov_1p0tt5b731().s[54]++;
    // Setup default network if empty
    if (this.nodes.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[16][0]++;
      cov_1p0tt5b731().s[55]++;
      this.setupDefaultNetwork();
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[16][1]++;
    }
    // Perform initial propagation
    cov_1p0tt5b731().s[56]++;
    this.propagate();
  }
  /**
   * Configure un réseau par défaut pour les tests
   */
  setupDefaultNetwork() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[13]++;
    cov_1p0tt5b731().s[57]++;
    // Add input nodes
    this.addNode('sensory_input', 'input');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[58]++;
    this.addNode('memory_input', 'input');
    // Add hidden nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[59]++;
    this.addNode('processing_1', 'hidden', 0.1);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[60]++;
    this.addNode('processing_2', 'hidden', -0.1);
    // Add output nodes
    /* istanbul ignore next */
    cov_1p0tt5b731().s[61]++;
    this.addNode('motor_output', 'output');
    /* istanbul ignore next */
    cov_1p0tt5b731().s[62]++;
    this.addNode('emotion_output', 'output');
    // Connect the network
    /* istanbul ignore next */
    cov_1p0tt5b731().s[63]++;
    this.addConnection('sensory_input', 'processing_1', 0.8);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[64]++;
    this.addConnection('memory_input', 'processing_2', 0.6);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[65]++;
    this.addConnection('processing_1', 'motor_output', 0.9);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[66]++;
    this.addConnection('processing_2', 'emotion_output', 0.7);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[67]++;
    this.addConnection('processing_1', 'processing_2', 0.3);
  }
  /**
   * Suspend neural processing
   */
  async suspend() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[14]++;
    cov_1p0tt5b731().s[68]++;
    // Clear activations but keep structure
    this.activations.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[69]++;
    console.log('Neural mesh suspended');
  }
  /**
   * Get CPU usage estimation
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[15]++;
    // Mock implementation - in real scenario, measure actual computation time
    const complexity =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[70]++, this.nodes.size * this.connections.size);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[71]++;
    return Math.min(1, complexity / 1000);
  }
  /**
   * Get memory usage estimation
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[16]++;
    // Mock implementation - in real scenario, measure actual memory footprint
    const memorySize =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[72]++, (this.nodes.size + this.connections.size) * 64); // bytes approximation
    /* istanbul ignore next */
    cov_1p0tt5b731().s[73]++;
    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio
  }
  /**
   * Save current state for persistence
   */
  saveState() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[17]++;
    cov_1p0tt5b731().s[74]++;
    return {
      nodes: Object.fromEntries(this.nodes),
      connections: Object.fromEntries(Array.from(this.connections.entries()).map(([key, map]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[18]++;
        cov_1p0tt5b731().s[75]++;
        return [key, Object.fromEntries(map)];
      })),
      activations: Object.fromEntries(this.activations)
    };
  }
  /**
   * Load state from saved data
   */
  loadState(state) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[19]++;
    cov_1p0tt5b731().s[76]++;
    if (state.nodes) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[17][0]++;
      cov_1p0tt5b731().s[77]++;
      this.nodes.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[78]++;
      for (const [id, node] of Object.entries(state.nodes)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[79]++;
        this.nodes.set(id, node);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[17][1]++;
    }
    cov_1p0tt5b731().s[80]++;
    if (state.connections) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[18][0]++;
      cov_1p0tt5b731().s[81]++;
      this.connections.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[82]++;
      for (const [fromId, connections] of Object.entries(state.connections)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[83]++;
        this.connections.set(fromId, new Map(Object.entries(connections)));
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[18][1]++;
    }
    cov_1p0tt5b731().s[84]++;
    if (state.activations) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[19][0]++;
      cov_1p0tt5b731().s[85]++;
      this.activations.clear();
      /* istanbul ignore next */
      cov_1p0tt5b731().s[86]++;
      for (const [id, activation] of Object.entries(state.activations)) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[87]++;
        this.activations.set(id, activation);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[19][1]++;
    }
  }
  /**
   * Reset neural mesh to initial state
   */
  reset() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[20]++;
    cov_1p0tt5b731().s[88]++;
    this.nodes.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[89]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[90]++;
    this.activations.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[91]++;
    this.setupDefaultNetwork();
  }
  /**
   * Health check for neural mesh
   */
  healthCheck() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[21]++;
    const issues =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[92]++, []);
    /* istanbul ignore next */
    cov_1p0tt5b731().s[93]++;
    if (this.nodes.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[20][0]++;
      cov_1p0tt5b731().s[94]++;
      issues.push('No nodes in neural mesh');
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[20][1]++;
    }
    cov_1p0tt5b731().s[95]++;
    if (this.connections.size === 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[21][0]++;
      cov_1p0tt5b731().s[96]++;
      issues.push('No connections in neural mesh');
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[21][1]++;
    }
    // Check for orphaned nodes
    const connectedNodes =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[97]++, new Set());
    /* istanbul ignore next */
    cov_1p0tt5b731().s[98]++;
    for (const [fromId, connections] of this.connections) {
      /* istanbul ignore next */
      cov_1p0tt5b731().s[99]++;
      connectedNodes.add(fromId);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[100]++;
      for (const toId of connections.keys()) {
        /* istanbul ignore next */
        cov_1p0tt5b731().s[101]++;
        connectedNodes.add(toId);
      }
    }
    const orphanedNodes =
    /* istanbul ignore next */
    (cov_1p0tt5b731().s[102]++, Array.from(this.nodes.keys()).filter(nodeId => {
      /* istanbul ignore next */
      cov_1p0tt5b731().f[22]++;
      cov_1p0tt5b731().s[103]++;
      return !connectedNodes.has(nodeId);
    }));
    /* istanbul ignore next */
    cov_1p0tt5b731().s[104]++;
    if (orphanedNodes.length > 0) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[22][0]++;
      cov_1p0tt5b731().s[105]++;
      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[22][1]++;
    }
    cov_1p0tt5b731().s[106]++;
    return {
      healthy: issues.length === 0,
      issues
    };
  }
  /**
   * Cleanup resources
   */
  cleanup() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[23]++;
    cov_1p0tt5b731().s[107]++;
    this.nodes.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[108]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1p0tt5b731().s[109]++;
    this.activations.clear();
  }
  /**
   * Process a pattern through the neural mesh (optional)
   */
  async processPattern(pattern) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[24]++;
    cov_1p0tt5b731().s[110]++;
    // Simple pattern processing - stimulate input nodes with pattern data
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[24][0]++, pattern) &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[24][1]++, typeof pattern === 'object')) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[23][0]++;
      const inputNodes =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[111]++, Array.from(this.nodes.entries()).filter(([, node]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[25]++;
        cov_1p0tt5b731().s[112]++;
        return node.type === 'input';
      }).map(([id]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[26]++;
        cov_1p0tt5b731().s[113]++;
        return id;
      }));
      // Stimulate input nodes with pattern values
      /* istanbul ignore next */
      cov_1p0tt5b731().s[114]++;
      Object.entries(pattern).forEach(([, value], index) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[27]++;
        cov_1p0tt5b731().s[115]++;
        if (
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[26][0]++, index < inputNodes.length) &&
        /* istanbul ignore next */
        (cov_1p0tt5b731().b[26][1]++, typeof value === 'number')) {
          /* istanbul ignore next */
          cov_1p0tt5b731().b[25][0]++;
          cov_1p0tt5b731().s[116]++;
          this.stimulate(inputNodes[index], value);
        } else
        /* istanbul ignore next */
        {
          cov_1p0tt5b731().b[25][1]++;
        }
      });
      // Propagate and return output activations
      /* istanbul ignore next */
      cov_1p0tt5b731().s[117]++;
      this.propagate();
      const outputNodes =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[118]++, Array.from(this.nodes.entries()).filter(([, node]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[28]++;
        cov_1p0tt5b731().s[119]++;
        return node.type === 'output';
      }));
      /* istanbul ignore next */
      cov_1p0tt5b731().s[120]++;
      return Object.fromEntries(outputNodes.map(([id]) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[29]++;
        cov_1p0tt5b731().s[121]++;
        return [id, this.getActivation(id)];
      }));
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[23][1]++;
    }
    cov_1p0tt5b731().s[122]++;
    return {};
  }
  /**
   * Learn from data (optional)
   */
  async learn(data) {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[30]++;
    cov_1p0tt5b731().s[123]++;
    // Simple learning implementation - adjust based on data
    if (
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][0]++, data) &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][1]++, typeof data === 'object') &&
    /* istanbul ignore next */
    (cov_1p0tt5b731().b[28][2]++, data.feedback)) {
      /* istanbul ignore next */
      cov_1p0tt5b731().b[27][0]++;
      // Apply small mutations based on feedback
      const learningRate =
      /* istanbul ignore next */
      (cov_1p0tt5b731().s[124]++, Math.abs(data.feedback) * 0.01);
      /* istanbul ignore next */
      cov_1p0tt5b731().s[125]++;
      this.mutate(learningRate);
    } else
    /* istanbul ignore next */
    {
      cov_1p0tt5b731().b[27][1]++;
    }
  }
  /**
   * Get performance metrics (optional)
   */
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_1p0tt5b731().f[31]++;
    cov_1p0tt5b731().s[126]++;
    return {
      nodeCount: this.nodes.size,
      connectionCount: Array.from(this.connections.values()).reduce((sum, connections) => {
        /* istanbul ignore next */
        cov_1p0tt5b731().f[32]++;
        cov_1p0tt5b731().s[127]++;
        return sum + connections.size;
      }, 0),
      neuralActivity: this.getNeuralActivity(),
      connectionStrength: this.getConnectionStrength()
    };
  }
}
/* istanbul ignore next */
cov_1p0tt5b731().s[128]++;
exports.NeuralMesh = NeuralMesh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXAwdHQ1YjczMSIsImFjdHVhbENvdmVyYWdlIiwicyIsIk5ldXJhbE1lc2giLCJjb25zdHJ1Y3RvciIsImYiLCJub2RlcyIsIk1hcCIsImNvbm5lY3Rpb25zIiwiYWN0aXZhdGlvbnMiLCJsZWFybmluZ1JhdGUiLCJhZGROb2RlIiwiaWQiLCJ0eXBlIiwiYmlhcyIsImIiLCJub2RlIiwiYWN0aXZhdGlvbiIsInNldCIsImFkZENvbm5lY3Rpb24iLCJmcm9tSWQiLCJ0b0lkIiwid2VpZ2h0IiwiaGFzIiwiRXJyb3IiLCJnZXQiLCJzdGltdWxhdGUiLCJub2RlSWQiLCJ2YWx1ZSIsImNvbnNvbGUiLCJ3YXJuIiwicHJvcGFnYXRlIiwiZnJvbUFjdGl2YXRpb24iLCJjdXJyZW50QWN0aXZhdGlvbiIsIm5ld0FjdGl2YXRpb24iLCJzaWdtb2lkIiwieCIsIk1hdGgiLCJleHAiLCJnZXRBY3RpdmF0aW9uIiwibXV0YXRlIiwicmF0ZSIsInZhbHVlcyIsInJhbmRvbSIsIm1heCIsIm1pbiIsImdldE5ldXJhbEFjdGl2aXR5IiwidG90YWxBY3Rpdml0eSIsIm5vZGVDb3VudCIsImFicyIsImdldENvbm5lY3Rpb25TdHJlbmd0aCIsInRvdGFsV2VpZ2h0IiwiY29ubmVjdGlvbkNvdW50IiwidG9KU09OIiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiZW50cmllcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiaW5pdGlhbGl6ZSIsInNpemUiLCJzZXR1cERlZmF1bHROZXR3b3JrIiwic3VzcGVuZCIsImNsZWFyIiwibG9nIiwiZ2V0Q1BVVXNhZ2UiLCJjb21wbGV4aXR5IiwiZ2V0TWVtb3J5VXNhZ2UiLCJtZW1vcnlTaXplIiwic2F2ZVN0YXRlIiwia2V5IiwibG9hZFN0YXRlIiwic3RhdGUiLCJyZXNldCIsImhlYWx0aENoZWNrIiwiaXNzdWVzIiwicHVzaCIsImNvbm5lY3RlZE5vZGVzIiwiU2V0IiwiYWRkIiwia2V5cyIsIm9ycGhhbmVkTm9kZXMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJqb2luIiwiaGVhbHRoeSIsImNsZWFudXAiLCJwcm9jZXNzUGF0dGVybiIsInBhdHRlcm4iLCJpbnB1dE5vZGVzIiwiZm9yRWFjaCIsImluZGV4Iiwib3V0cHV0Tm9kZXMiLCJsZWFybiIsImRhdGEiLCJmZWVkYmFjayIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsInJlZHVjZSIsInN1bSIsIm5ldXJhbEFjdGl2aXR5IiwiY29ubmVjdGlvblN0cmVuZ3RoIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy9tX29saS9Qcm9qZXRzL1NZTUJJT05UL3NyYy9jb3JlL05ldXJhbE1lc2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU5ldXJhbE1lc2ggfSBmcm9tICcuL2ludGVyZmFjZXMvSU5ldXJhbE1lc2gnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5ldXJhbE1lc2ggaW1wbGVtZW50cyBJTmV1cmFsTWVzaCB7XHJcbiAgcHJpdmF0ZSBub2RlczogTWFwPHN0cmluZywgeyB0eXBlOiBzdHJpbmc7IGFjdGl2YXRpb246IG51bWJlcjsgYmlhczogbnVtYmVyIH0+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgY29ubmVjdGlvbnM6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIG51bWJlcj4+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgYWN0aXZhdGlvbnM6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBUYXV4IHLDqXNlcnbDqSBwb3VyIHVzYWdlIGZ1dHVyXHJcbiAgcHJpdmF0ZSBsZWFybmluZ1JhdGU6IG51bWJlciA9IDAuMDE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gSW5pdGlhbGl6ZSBlbXB0eSBuZXR3b3JrXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBam91dGUgdW4gbsWTdWQgYXUgcsOpc2VhdVxyXG4gICAqL1xyXG4gIGFkZE5vZGUoaWQ6IHN0cmluZywgdHlwZTogJ2lucHV0JyB8ICdoaWRkZW4nIHwgJ291dHB1dCcsIGJpYXM6IG51bWJlciA9IDApOiB2b2lkIHtcclxuICAgIGNvbnN0IG5vZGU6IHsgdHlwZTogc3RyaW5nOyBhY3RpdmF0aW9uOiBudW1iZXI7IGJpYXM6IG51bWJlciB9ID0ge1xyXG4gICAgICB0eXBlLFxyXG4gICAgICBhY3RpdmF0aW9uOiAwLFxyXG4gICAgICBiaWFzXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubm9kZXMuc2V0KGlkLCBub2RlKTtcclxuICAgIHRoaXMuYWN0aXZhdGlvbnMuc2V0KGlkLCAwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFqb3V0ZSB1bmUgY29ubmV4aW9uIGVudHJlIGRldXggbsWTdWRzXHJcbiAgICovXHJcbiAgYWRkQ29ubmVjdGlvbihmcm9tSWQ6IHN0cmluZywgdG9JZDogc3RyaW5nLCB3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLm5vZGVzLmhhcyhmcm9tSWQpIHx8ICF0aGlzLm5vZGVzLmhhcyh0b0lkKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb25uZWN0IG5vbi1leGlzdGVudCBub2RlczogJHtmcm9tSWR9IC0+ICR7dG9JZH1gKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuY29ubmVjdGlvbnMuaGFzKGZyb21JZCkpIHtcclxuICAgICAgdGhpcy5jb25uZWN0aW9ucy5zZXQoZnJvbUlkLCBuZXcgTWFwKCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb25uZWN0aW9ucy5nZXQoZnJvbUlkKSEuc2V0KHRvSWQsIHdlaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGltdWxlIHVuIG7Fk3VkIGQnZW50csOpZVxyXG4gICAqL1xyXG4gIHN0aW11bGF0ZShub2RlSWQ6IHN0cmluZywgdmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXMuZ2V0KG5vZGVJZCk7XHJcbiAgICBpZiAoIW5vZGUgfHwgbm9kZS50eXBlICE9PSAnaW5wdXQnKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgQ2Fubm90IHN0aW11bGF0ZSBub24taW5wdXQgbm9kZTogJHtub2RlSWR9YCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuYWN0aXZhdGlvbnMuc2V0KG5vZGVJZCwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvcGFnZSBsJ2FjdGl2YXRpb24gw6AgdHJhdmVycyBsZSByw6lzZWF1XHJcbiAgICovXHJcbiAgcHJvcGFnYXRlKCk6IHZvaWQge1xyXG4gICAgLy8gUmVzZXQgbm9uLWlucHV0IGFjdGl2YXRpb25zXHJcbiAgICBmb3IgKGNvbnN0IFtub2RlSWQsIG5vZGVdIG9mIHRoaXMubm9kZXMpIHtcclxuICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ2lucHV0Jykge1xyXG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbnMuc2V0KG5vZGVJZCwgbm9kZS5iaWFzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb3BhZ2F0ZSB0aHJvdWdoIGNvbm5lY3Rpb25zXHJcbiAgICBmb3IgKGNvbnN0IFtmcm9tSWQsIGNvbm5lY3Rpb25zXSBvZiB0aGlzLmNvbm5lY3Rpb25zKSB7XHJcbiAgICAgIGNvbnN0IGZyb21BY3RpdmF0aW9uID0gdGhpcy5hY3RpdmF0aW9ucy5nZXQoZnJvbUlkKSB8fCAwO1xyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCBbdG9JZCwgd2VpZ2h0XSBvZiBjb25uZWN0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBY3RpdmF0aW9uID0gdGhpcy5hY3RpdmF0aW9ucy5nZXQodG9JZCkgfHwgMDtcclxuICAgICAgICBjb25zdCBuZXdBY3RpdmF0aW9uID0gY3VycmVudEFjdGl2YXRpb24gKyAoZnJvbUFjdGl2YXRpb24gKiB3ZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbnMuc2V0KHRvSWQsIHRoaXMuc2lnbW9pZChuZXdBY3RpdmF0aW9uKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvbmN0aW9uIGQnYWN0aXZhdGlvbiBzaWdtb8OvZGVcclxuICAgKi9cclxuICBwcml2YXRlIHNpZ21vaWQoeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAxIC8gKDEgKyBNYXRoLmV4cCgteCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUsOpY3Vww6hyZSBsJ2FjdGl2YXRpb24gZCd1biBuxZN1ZFxyXG4gICAqL1xyXG4gIGdldEFjdGl2YXRpb24obm9kZUlkOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0aXZhdGlvbnMuZ2V0KG5vZGVJZCkgfHwgMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpcXVlIHVuZSBtdXRhdGlvbiBhbMOpYXRvaXJlIGF1IHLDqXNlYXVcclxuICAgKi9cclxuICBtdXRhdGUocmF0ZTogbnVtYmVyID0gMC4wNSk6IHZvaWQge1xyXG4gICAgLy8gTXV0YXRlIGNvbm5lY3Rpb24gd2VpZ2h0c1xyXG4gICAgZm9yIChjb25zdCBjb25uZWN0aW9ucyBvZiB0aGlzLmNvbm5lY3Rpb25zLnZhbHVlcygpKSB7XHJcbiAgICAgIGZvciAoY29uc3QgW3RvSWQsIHdlaWdodF0gb2YgY29ubmVjdGlvbnMpIHtcclxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IHJhdGUpIHtcclxuICAgICAgICAgIGNvbm5lY3Rpb25zLnNldCh0b0lkLCB3ZWlnaHQgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjIpO1xyXG4gICAgICAgICAgY29ubmVjdGlvbnMuc2V0KHRvSWQsIE1hdGgubWF4KC0yLCBNYXRoLm1pbigyLCBjb25uZWN0aW9ucy5nZXQodG9JZCkgfHwgMCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBNdXRhdGUgbm9kZSBiaWFzZXNcclxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm5vZGVzLnZhbHVlcygpKSB7XHJcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgcmF0ZSkge1xyXG4gICAgICAgIG5vZGUuYmlhcyArPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjE7XHJcbiAgICAgICAgbm9kZS5iaWFzID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIG5vZGUuYmlhcykpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXN1cmUgbCdhY3Rpdml0w6kgbmV1cmFsZSBnbG9iYWxlXHJcbiAgICovXHJcbiAgZ2V0TmV1cmFsQWN0aXZpdHkoKTogbnVtYmVyIHtcclxuICAgIGxldCB0b3RhbEFjdGl2aXR5ID0gMDtcclxuICAgIGxldCBub2RlQ291bnQgPSAwO1xyXG5cclxuICAgIGZvciAoY29uc3QgYWN0aXZhdGlvbiBvZiB0aGlzLmFjdGl2YXRpb25zLnZhbHVlcygpKSB7XHJcbiAgICAgIHRvdGFsQWN0aXZpdHkgKz0gTWF0aC5hYnMoYWN0aXZhdGlvbik7XHJcbiAgICAgIG5vZGVDb3VudCsrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2RlQ291bnQgPiAwID8gdG90YWxBY3Rpdml0eSAvIG5vZGVDb3VudCA6IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXN1cmUgbGEgZm9yY2UgbW95ZW5uZSBkZXMgY29ubmV4aW9uc1xyXG4gICAqL1xyXG4gIGdldENvbm5lY3Rpb25TdHJlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgbGV0IHRvdGFsV2VpZ2h0ID0gMDtcclxuICAgIGxldCBjb25uZWN0aW9uQ291bnQgPSAwO1xyXG5cclxuICAgIGZvciAoY29uc3QgY29ubmVjdGlvbnMgb2YgdGhpcy5jb25uZWN0aW9ucy52YWx1ZXMoKSkge1xyXG4gICAgICBmb3IgKGNvbnN0IHdlaWdodCBvZiBjb25uZWN0aW9ucy52YWx1ZXMoKSkge1xyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IE1hdGguYWJzKHdlaWdodCk7XHJcbiAgICAgICAgY29ubmVjdGlvbkNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29ubmVjdGlvbkNvdW50ID4gMCA/IHRvdGFsV2VpZ2h0IC8gY29ubmVjdGlvbkNvdW50IDogMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9ydCBKU09OIHBvdXIgZGVidWcvc2F1dmVnYXJkZVxyXG4gICAqL1xyXG4gIHRvSlNPTigpOiBhbnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbm9kZXM6IEFycmF5LmZyb20odGhpcy5ub2Rlcy52YWx1ZXMoKSksXHJcbiAgICAgIGNvbm5lY3Rpb25zOiBBcnJheS5mcm9tKHRoaXMuY29ubmVjdGlvbnMudmFsdWVzKCkpLm1hcChjb25uZWN0aW9ucyA9PiBBcnJheS5mcm9tKGNvbm5lY3Rpb25zLmVudHJpZXMoKSkpLFxyXG4gICAgICBhY3RpdmF0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuYWN0aXZhdGlvbnMpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGlzZSBsZSByw6lzZWF1IG5ldXJvbmFsXHJcbiAgICovXHJcbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIFNldHVwIGRlZmF1bHQgbmV0d29yayBpZiBlbXB0eVxyXG4gICAgaWYgKHRoaXMubm9kZXMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICB0aGlzLnNldHVwRGVmYXVsdE5ldHdvcmsoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gUGVyZm9ybSBpbml0aWFsIHByb3BhZ2F0aW9uXHJcbiAgICB0aGlzLnByb3BhZ2F0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29uZmlndXJlIHVuIHLDqXNlYXUgcGFyIGTDqWZhdXQgcG91ciBsZXMgdGVzdHNcclxuICAgKi9cclxuICBwcml2YXRlIHNldHVwRGVmYXVsdE5ldHdvcmsoKTogdm9pZCB7XHJcbiAgICAvLyBBZGQgaW5wdXQgbm9kZXNcclxuICAgIHRoaXMuYWRkTm9kZSgnc2Vuc29yeV9pbnB1dCcsICdpbnB1dCcpO1xyXG4gICAgdGhpcy5hZGROb2RlKCdtZW1vcnlfaW5wdXQnLCAnaW5wdXQnKTtcclxuICAgIFxyXG4gICAgLy8gQWRkIGhpZGRlbiBub2Rlc1xyXG4gICAgdGhpcy5hZGROb2RlKCdwcm9jZXNzaW5nXzEnLCAnaGlkZGVuJywgMC4xKTtcclxuICAgIHRoaXMuYWRkTm9kZSgncHJvY2Vzc2luZ18yJywgJ2hpZGRlbicsIC0wLjEpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgb3V0cHV0IG5vZGVzXHJcbiAgICB0aGlzLmFkZE5vZGUoJ21vdG9yX291dHB1dCcsICdvdXRwdXQnKTtcclxuICAgIHRoaXMuYWRkTm9kZSgnZW1vdGlvbl9vdXRwdXQnLCAnb3V0cHV0Jyk7XHJcbiAgICBcclxuICAgIC8vIENvbm5lY3QgdGhlIG5ldHdvcmtcclxuICAgIHRoaXMuYWRkQ29ubmVjdGlvbignc2Vuc29yeV9pbnB1dCcsICdwcm9jZXNzaW5nXzEnLCAwLjgpO1xyXG4gICAgdGhpcy5hZGRDb25uZWN0aW9uKCdtZW1vcnlfaW5wdXQnLCAncHJvY2Vzc2luZ18yJywgMC42KTtcclxuICAgIHRoaXMuYWRkQ29ubmVjdGlvbigncHJvY2Vzc2luZ18xJywgJ21vdG9yX291dHB1dCcsIDAuOSk7XHJcbiAgICB0aGlzLmFkZENvbm5lY3Rpb24oJ3Byb2Nlc3NpbmdfMicsICdlbW90aW9uX291dHB1dCcsIDAuNyk7XHJcbiAgICB0aGlzLmFkZENvbm5lY3Rpb24oJ3Byb2Nlc3NpbmdfMScsICdwcm9jZXNzaW5nXzInLCAwLjMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3VzcGVuZCBuZXVyYWwgcHJvY2Vzc2luZ1xyXG4gICAqL1xyXG4gIGFzeW5jIHN1c3BlbmQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBDbGVhciBhY3RpdmF0aW9ucyBidXQga2VlcCBzdHJ1Y3R1cmVcclxuICAgIHRoaXMuYWN0aXZhdGlvbnMuY2xlYXIoKTtcclxuICAgIGNvbnNvbGUubG9nKCdOZXVyYWwgbWVzaCBzdXNwZW5kZWQnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBDUFUgdXNhZ2UgZXN0aW1hdGlvblxyXG4gICAqL1xyXG4gIGFzeW5jIGdldENQVVVzYWdlKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAvLyBNb2NrIGltcGxlbWVudGF0aW9uIC0gaW4gcmVhbCBzY2VuYXJpbywgbWVhc3VyZSBhY3R1YWwgY29tcHV0YXRpb24gdGltZVxyXG4gICAgY29uc3QgY29tcGxleGl0eSA9IHRoaXMubm9kZXMuc2l6ZSAqIHRoaXMuY29ubmVjdGlvbnMuc2l6ZTtcclxuICAgIHJldHVybiBNYXRoLm1pbigxLCBjb21wbGV4aXR5IC8gMTAwMCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgbWVtb3J5IHVzYWdlIGVzdGltYXRpb25cclxuICAgKi9cclxuICBhc3luYyBnZXRNZW1vcnlVc2FnZSgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgLy8gTW9jayBpbXBsZW1lbnRhdGlvbiAtIGluIHJlYWwgc2NlbmFyaW8sIG1lYXN1cmUgYWN0dWFsIG1lbW9yeSBmb290cHJpbnRcclxuICAgIGNvbnN0IG1lbW9yeVNpemUgPSAodGhpcy5ub2Rlcy5zaXplICsgdGhpcy5jb25uZWN0aW9ucy5zaXplKSAqIDY0OyAvLyBieXRlcyBhcHByb3hpbWF0aW9uXHJcbiAgICByZXR1cm4gTWF0aC5taW4oMSwgbWVtb3J5U2l6ZSAvICgxMDI0ICogMTAyNCkpOyAvLyBDb252ZXJ0IHRvIE1CIHJhdGlvXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYXZlIGN1cnJlbnQgc3RhdGUgZm9yIHBlcnNpc3RlbmNlXHJcbiAgICovXHJcbiAgc2F2ZVN0YXRlKCk6IGFueSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBub2RlczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMubm9kZXMpLFxyXG4gICAgICBjb25uZWN0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKFxyXG4gICAgICAgIEFycmF5LmZyb20odGhpcy5jb25uZWN0aW9ucy5lbnRyaWVzKCkpLm1hcCgoW2tleSwgbWFwXSkgPT4gW1xyXG4gICAgICAgICAga2V5LFxyXG4gICAgICAgICAgT2JqZWN0LmZyb21FbnRyaWVzKG1hcClcclxuICAgICAgICBdKVxyXG4gICAgICApLFxyXG4gICAgICBhY3RpdmF0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuYWN0aXZhdGlvbnMpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBzdGF0ZSBmcm9tIHNhdmVkIGRhdGFcclxuICAgKi9cclxuICBsb2FkU3RhdGUoc3RhdGU6IGFueSk6IHZvaWQge1xyXG4gICAgaWYgKHN0YXRlLm5vZGVzKSB7XHJcbiAgICAgIHRoaXMubm9kZXMuY2xlYXIoKTtcclxuICAgICAgZm9yIChjb25zdCBbaWQsIG5vZGVdIG9mIE9iamVjdC5lbnRyaWVzKHN0YXRlLm5vZGVzKSkge1xyXG4gICAgICAgIHRoaXMubm9kZXMuc2V0KGlkLCBub2RlIGFzIGFueSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHN0YXRlLmNvbm5lY3Rpb25zKSB7XHJcbiAgICAgIHRoaXMuY29ubmVjdGlvbnMuY2xlYXIoKTtcclxuICAgICAgZm9yIChjb25zdCBbZnJvbUlkLCBjb25uZWN0aW9uc10gb2YgT2JqZWN0LmVudHJpZXMoc3RhdGUuY29ubmVjdGlvbnMpKSB7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucy5zZXQoZnJvbUlkLCBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGNvbm5lY3Rpb25zIGFzIGFueSkpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoc3RhdGUuYWN0aXZhdGlvbnMpIHtcclxuICAgICAgdGhpcy5hY3RpdmF0aW9ucy5jbGVhcigpO1xyXG4gICAgICBmb3IgKGNvbnN0IFtpZCwgYWN0aXZhdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMoc3RhdGUuYWN0aXZhdGlvbnMpKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9ucy5zZXQoaWQsIGFjdGl2YXRpb24gYXMgbnVtYmVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgbmV1cmFsIG1lc2ggdG8gaW5pdGlhbCBzdGF0ZVxyXG4gICAqL1xyXG4gIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5ub2Rlcy5jbGVhcigpO1xyXG4gICAgdGhpcy5jb25uZWN0aW9ucy5jbGVhcigpO1xyXG4gICAgdGhpcy5hY3RpdmF0aW9ucy5jbGVhcigpO1xyXG4gICAgdGhpcy5zZXR1cERlZmF1bHROZXR3b3JrKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWFsdGggY2hlY2sgZm9yIG5ldXJhbCBtZXNoXHJcbiAgICovXHJcbiAgaGVhbHRoQ2hlY2soKTogeyBoZWFsdGh5OiBib29sZWFuOyBpc3N1ZXM6IHN0cmluZ1tdIH0ge1xyXG4gICAgY29uc3QgaXNzdWVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5ub2Rlcy5zaXplID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKCdObyBub2RlcyBpbiBuZXVyYWwgbWVzaCcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy5jb25uZWN0aW9ucy5zaXplID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKCdObyBjb25uZWN0aW9ucyBpbiBuZXVyYWwgbWVzaCcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBmb3Igb3JwaGFuZWQgbm9kZXNcclxuICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgICBmb3IgKGNvbnN0IFtmcm9tSWQsIGNvbm5lY3Rpb25zXSBvZiB0aGlzLmNvbm5lY3Rpb25zKSB7XHJcbiAgICAgIGNvbm5lY3RlZE5vZGVzLmFkZChmcm9tSWQpO1xyXG4gICAgICBmb3IgKGNvbnN0IHRvSWQgb2YgY29ubmVjdGlvbnMua2V5cygpKSB7XHJcbiAgICAgICAgY29ubmVjdGVkTm9kZXMuYWRkKHRvSWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IG9ycGhhbmVkTm9kZXMgPSBBcnJheS5mcm9tKHRoaXMubm9kZXMua2V5cygpKS5maWx0ZXIoXHJcbiAgICAgIG5vZGVJZCA9PiAhY29ubmVjdGVkTm9kZXMuaGFzKG5vZGVJZClcclxuICAgICk7XHJcbiAgICBcclxuICAgIGlmIChvcnBoYW5lZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goYE9ycGhhbmVkIG5vZGVzOiAke29ycGhhbmVkTm9kZXMuam9pbignLCAnKX1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaGVhbHRoeTogaXNzdWVzLmxlbmd0aCA9PT0gMCxcclxuICAgICAgaXNzdWVzXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYW51cCByZXNvdXJjZXNcclxuICAgKi9cclxuICBjbGVhbnVwKCk6IHZvaWQge1xyXG4gICAgdGhpcy5ub2Rlcy5jbGVhcigpO1xyXG4gICAgdGhpcy5jb25uZWN0aW9ucy5jbGVhcigpO1xyXG4gICAgdGhpcy5hY3RpdmF0aW9ucy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvY2VzcyBhIHBhdHRlcm4gdGhyb3VnaCB0aGUgbmV1cmFsIG1lc2ggKG9wdGlvbmFsKVxyXG4gICAqL1xyXG4gIGFzeW5jIHByb2Nlc3NQYXR0ZXJuKHBhdHRlcm46IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAvLyBTaW1wbGUgcGF0dGVybiBwcm9jZXNzaW5nIC0gc3RpbXVsYXRlIGlucHV0IG5vZGVzIHdpdGggcGF0dGVybiBkYXRhXHJcbiAgICBpZiAocGF0dGVybiAmJiB0eXBlb2YgcGF0dGVybiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgY29uc3QgaW5wdXROb2RlcyA9IEFycmF5LmZyb20odGhpcy5ub2Rlcy5lbnRyaWVzKCkpXHJcbiAgICAgICAgLmZpbHRlcigoWywgbm9kZV0pID0+IG5vZGUudHlwZSA9PT0gJ2lucHV0JylcclxuICAgICAgICAubWFwKChbaWRdKSA9PiBpZCk7XHJcblxyXG4gICAgICAvLyBTdGltdWxhdGUgaW5wdXQgbm9kZXMgd2l0aCBwYXR0ZXJuIHZhbHVlc1xyXG4gICAgICBPYmplY3QuZW50cmllcyhwYXR0ZXJuKS5mb3JFYWNoKChbLCB2YWx1ZV0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgaW5wdXROb2Rlcy5sZW5ndGggJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgdGhpcy5zdGltdWxhdGUoaW5wdXROb2Rlc1tpbmRleF0sIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gUHJvcGFnYXRlIGFuZCByZXR1cm4gb3V0cHV0IGFjdGl2YXRpb25zXHJcbiAgICAgIHRoaXMucHJvcGFnYXRlKCk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBvdXRwdXROb2RlcyA9IEFycmF5LmZyb20odGhpcy5ub2Rlcy5lbnRyaWVzKCkpXHJcbiAgICAgICAgLmZpbHRlcigoWywgbm9kZV0pID0+IG5vZGUudHlwZSA9PT0gJ291dHB1dCcpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcclxuICAgICAgICBvdXRwdXROb2Rlcy5tYXAoKFtpZF0pID0+IFtpZCwgdGhpcy5nZXRBY3RpdmF0aW9uKGlkKV0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExlYXJuIGZyb20gZGF0YSAob3B0aW9uYWwpXHJcbiAgICovXHJcbiAgYXN5bmMgbGVhcm4oZGF0YTogYW55KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBTaW1wbGUgbGVhcm5pbmcgaW1wbGVtZW50YXRpb24gLSBhZGp1c3QgYmFzZWQgb24gZGF0YVxyXG4gICAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEuZmVlZGJhY2spIHtcclxuICAgICAgLy8gQXBwbHkgc21hbGwgbXV0YXRpb25zIGJhc2VkIG9uIGZlZWRiYWNrXHJcbiAgICAgIGNvbnN0IGxlYXJuaW5nUmF0ZSA9IE1hdGguYWJzKGRhdGEuZmVlZGJhY2spICogMC4wMTtcclxuICAgICAgdGhpcy5tdXRhdGUobGVhcm5pbmdSYXRlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBwZXJmb3JtYW5jZSBtZXRyaWNzIChvcHRpb25hbClcclxuICAgKi9cclxuICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKTogYW55IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5vZGVDb3VudDogdGhpcy5ub2Rlcy5zaXplLFxyXG4gICAgICBjb25uZWN0aW9uQ291bnQ6IEFycmF5LmZyb20odGhpcy5jb25uZWN0aW9ucy52YWx1ZXMoKSkucmVkdWNlKFxyXG4gICAgICAgIChzdW0sIGNvbm5lY3Rpb25zKSA9PiBzdW0gKyBjb25uZWN0aW9ucy5zaXplLCAwXHJcbiAgICAgICksXHJcbiAgICAgIG5ldXJhbEFjdGl2aXR5OiB0aGlzLmdldE5ldXJhbEFjdGl2aXR5KCksXHJcbiAgICAgIGNvbm5lY3Rpb25TdHJlbmd0aDogdGhpcy5nZXRDb25uZWN0aW9uU3RyZW5ndGgoKVxyXG4gICAgfTtcclxuICB9XHJcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZ0JVO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7O0FBZFYsTUFBYUMsVUFBVTtFQU9yQkMsWUFBQTtJQUFBO0lBQUFKLGNBQUEsR0FBQUssQ0FBQTtJQUFBTCxjQUFBLEdBQUFFLENBQUE7SUFOUSxLQUFBSSxLQUFLLEdBQW9FLElBQUlDLEdBQUcsRUFBRTtJQUFDO0lBQUFQLGNBQUEsR0FBQUUsQ0FBQTtJQUNuRixLQUFBTSxXQUFXLEdBQXFDLElBQUlELEdBQUcsRUFBRTtJQUFDO0lBQUFQLGNBQUEsR0FBQUUsQ0FBQTtJQUMxRCxLQUFBTyxXQUFXLEdBQXdCLElBQUlGLEdBQUcsRUFBRTtJQUNwRDtJQUFBO0lBQUFQLGNBQUEsR0FBQUUsQ0FBQTtJQUNRLEtB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