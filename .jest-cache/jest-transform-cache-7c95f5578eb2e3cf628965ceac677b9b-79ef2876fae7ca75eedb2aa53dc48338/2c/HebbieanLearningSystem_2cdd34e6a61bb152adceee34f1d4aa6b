cc365b9307d8b154609b9a221da9e8f3
"use strict";

/* istanbul ignore next */
function cov_1xcirmc3k6() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/HebbieanLearningSystem.ts";
  var hash = "94589bd07e2ab3f53ae6e4706ee0cd1f9ed4182f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/HebbieanLearningSystem.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 37
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 31
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "12": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "13": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "14": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "16": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "17": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 77
        }
      },
      "19": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 47
        }
      },
      "20": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "21": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "22": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "23": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "24": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 41,
          column: 66
        }
      },
      "25": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "26": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 44
        }
      },
      "28": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 48
        }
      },
      "29": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 27
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "32": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 58
        }
      },
      "33": {
        start: {
          line: 66,
          column: 28
        },
        end: {
          line: 68,
          column: 38
        }
      },
      "34": {
        start: {
          line: 67,
          column: 41
        },
        end: {
          line: 67,
          column: 57
        }
      },
      "35": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 68,
          column: 37
        }
      },
      "36": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "37": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 74
        }
      },
      "38": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 24
        }
      },
      "39": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 41
        }
      },
      "40": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "41": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "42": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 28
        }
      },
      "43": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 96,
          column: 24
        }
      },
      "44": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 30
        }
      },
      "45": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "46": {
        start: {
          line: 100,
          column: 31
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "47": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "48": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "49": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "50": {
        start: {
          line: 105,
          column: 39
        },
        end: {
          line: 105,
          column: 81
        }
      },
      "51": {
        start: {
          line: 106,
          column: 44
        },
        end: {
          line: 106,
          column: 89
        }
      },
      "52": {
        start: {
          line: 108,
          column: 42
        },
        end: {
          line: 108,
          column: 79
        }
      },
      "53": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 109,
          column: 91
        }
      },
      "54": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "55": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "56": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "57": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "58": {
        start: {
          line: 118,
          column: 37
        },
        end: {
          line: 118,
          column: 75
        }
      },
      "59": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "60": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "61": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 53
        }
      },
      "62": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 65
        }
      },
      "63": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "64": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 36
        }
      },
      "65": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 78
        }
      },
      "66": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 86
        }
      },
      "67": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 74
        }
      },
      "68": {
        start: {
          line: 143,
          column: 23
        },
        end: {
          line: 143,
          column: 54
        }
      },
      "69": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 46
        }
      },
      "70": {
        start: {
          line: 146,
          column: 21
        },
        end: {
          line: 146,
          column: 59
        }
      },
      "71": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 42
        }
      },
      "72": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 26
        }
      },
      "73": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 58
        }
      },
      "74": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "75": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "76": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 46
        }
      },
      "77": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "78": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 53
        }
      },
      "79": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 59
        }
      },
      "80": {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 54
        }
      },
      "81": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 173,
          column: 67
        }
      },
      "82": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 174,
          column: 82
        }
      },
      "83": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 63
        }
      },
      "84": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "85": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 60
        }
      },
      "86": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "87": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "88": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "89": {
        start: {
          line: 196,
          column: 50
        },
        end: {
          line: 196,
          column: 75
        }
      },
      "90": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 96
        }
      },
      "91": {
        start: {
          line: 197,
          column: 57
        },
        end: {
          line: 197,
          column: 74
        }
      },
      "92": {
        start: {
          line: 198,
          column: 29
        },
        end: {
          line: 198,
          column: 124
        }
      },
      "93": {
        start: {
          line: 198,
          column: 57
        },
        end: {
          line: 198,
          column: 102
        }
      },
      "94": {
        start: {
          line: 200,
          column: 32
        },
        end: {
          line: 200,
          column: 62
        }
      },
      "95": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 62
        }
      },
      "96": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 74
        }
      },
      "97": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "98": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 61
        }
      },
      "99": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 29
        }
      },
      "100": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 221,
          column: 27
        }
      },
      "101": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 27
        }
      },
      "102": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 223,
          column: 28
        }
      },
      "103": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 28
        }
      },
      "104": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 225,
          column: 26
        }
      },
      "105": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 26
        }
      },
      "106": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 26
        }
      },
      "107": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 233,
          column: 29
        }
      },
      "108": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 29
        }
      },
      "109": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 235,
          column: 25
        }
      },
      "110": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 25
        }
      },
      "111": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 237,
          column: 28
        }
      },
      "112": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 28
        }
      },
      "113": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 22
        }
      },
      "114": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 244,
          column: 33
        }
      },
      "115": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "116": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "117": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 58
        }
      },
      "118": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 29
        }
      },
      "119": {
        start: {
          line: 251,
          column: 28
        },
        end: {
          line: 251,
          column: 47
        }
      },
      "120": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 33
        }
      },
      "121": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 39
        }
      },
      "122": {
        start: {
          line: 262,
          column: 0
        },
        end: {
          line: 262,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 66
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 57
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 57
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        },
        loc: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 67,
            column: 57
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 17
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 37
          }
        },
        line: 68
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 77
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 13
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 84
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 38
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 94
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 42
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 153
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 50
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 162
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 180
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 186
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 34
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 192
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 46
          }
        },
        loc: {
          start: {
            line: 196,
            column: 50
          },
          end: {
            line: 196,
            column: 75
          }
        },
        line: 196
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 197,
            column: 45
          },
          end: {
            line: 197,
            column: 46
          }
        },
        loc: {
          start: {
            line: 197,
            column: 57
          },
          end: {
            line: 197,
            column: 74
          }
        },
        line: 197
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 198,
            column: 45
          },
          end: {
            line: 198,
            column: 46
          }
        },
        loc: {
          start: {
            line: 198,
            column: 57
          },
          end: {
            line: 198,
            column: 102
          }
        },
        line: 198
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 23
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 208
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 30
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 219
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 41
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 231
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 40
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 243
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 251,
            column: 18
          },
          end: {
            line: 251,
            column: 19
          }
        },
        loc: {
          start: {
            line: 251,
            column: 28
          },
          end: {
            line: 251,
            column: 47
          }
        },
        line: 251
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 257
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 16
          },
          end: {
            line: 5,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 31
          },
          end: {
            line: 5,
            column: 35
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 5,
            column: 37
          },
          end: {
            line: 5,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 59
          },
          end: {
            line: 5,
            column: 64
          }
        }],
        line: 5
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 30
          },
          end: {
            line: 23,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 30
          },
          end: {
            line: 23,
            column: 51
          }
        }, {
          start: {
            line: 23,
            column: 55
          },
          end: {
            line: 23,
            column: 56
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 41,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 41,
            column: 61
          }
        }, {
          start: {
            line: 41,
            column: 65
          },
          end: {
            line: 41,
            column: 66
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 79,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 79,
            column: 36
          }
        }, {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 41
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 24
          },
          end: {
            line: 113,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 24
          },
          end: {
            line: 113,
            column: 39
          }
        }, {
          start: {
            line: 112,
            column: 29
          },
          end: {
            line: 113,
            column: 39
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 112,
            column: 29
          },
          end: {
            line: 113,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 29
          },
          end: {
            line: 113,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 156,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 156,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 40
          }
        }, {
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 45
          }
        }],
        line: 157
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 194,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 194,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "17": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "20": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "21": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 235,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 235,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "22": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 237,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 237,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 28
          },
          end: {
            line: 243,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 243,
            column: 36
          },
          end: {
            line: 243,
            column: 38
          }
        }],
        line: 243
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/HebbieanLearningSystem.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/HebbieanLearningSystem.ts"],
      sourcesContent: ["import { BehaviorPattern } from '../shared/types/organism';\r\n\r\nexport interface LearningResult {\r\n  strengthenedConnections: number;\r\n  weakenedConnections: number;\r\n  newPatterns: string[];\r\n  confidence: number;\r\n}\r\n\r\nexport class HebbieanLearningSystem {\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activationHistory: Map<string, number[]> = new Map();\r\n  private learningRate: number = 0.01;\r\n  private decayRate: number = 0.001;\r\n  \r\n  // Nouvelles propri\xE9t\xE9s pour la compatibilit\xE9 avec les tests\r\n  private weights: Map<string, number> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  private lastActive: Map<string, number> = new Map();\r\n  private inactivityThreshold: number;\r\n\r\n  constructor(learningRate: number = 0.01, inactivityThreshold: number = 0.001) {\r\n    this.learningRate = learningRate;\r\n    this.decayRate = inactivityThreshold;\r\n    this.inactivityThreshold = inactivityThreshold;\r\n  }\r\n\r\n  /**\r\n   * Renforce une connexion entre deux neurones (pour compatibilit\xE9 tests)\r\n   */\r\n  strengthenConnection(preId: string, postId: string, preAct: number, postAct: number): void {\r\n    const key = `${preId}->${postId}`;\r\n    const currentWeight = this.weights.get(key) || 0;\r\n    const deltaWeight = this.learningRate * preAct * postAct;\r\n    this.weights.set(key, currentWeight + deltaWeight);\r\n    \r\n    // Aussi mettre \xE0 jour dans le syst\xE8me principal\r\n    if (!this.connections.has(preId)) {\r\n      this.connections.set(preId, new Map());\r\n    }\r\n    this.connections.get(preId)!.set(postId, currentWeight + deltaWeight);\r\n    \r\n    this.lastActive.set(preId, Date.now());\r\n    this.lastActive.set(postId, Date.now());\r\n  }\r\n\r\n  /**\r\n   * Affaiblit les connexions inutilis\xE9es (pour compatibilit\xE9 tests)\r\n   */\r\n  weakenUnusedConnections(): void {\r\n    const now = Date.now();\r\n    for (const [key, weight] of this.weights) {\r\n      const [preId] = key.split('->');\r\n      const lastActiveTime = this.lastActive.get(preId) || 0;\r\n      \r\n      if (now - lastActiveTime > this.inactivityThreshold * 1000) {\r\n        this.weights.set(key, Math.max(0, weight - this.decayRate));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * D\xE9finit l'activation d'un neurone (pour compatibilit\xE9 tests)\r\n   */\r\n  setActivation(nodeId: string, value: number): void {\r\n    this.activations.set(nodeId, value);\r\n    this.lastActive.set(nodeId, Date.now());\r\n  }\r\n\r\n  /**\r\n   * D\xE9tecte les patterns \xE9mergents (pour compatibilit\xE9 tests)\r\n   */\r\n  detectEmergentPatterns(): string[] {\r\n    const patterns: string[] = [];\r\n    \r\n    // Analyser les connexions fortes\r\n    for (const [key, weight] of this.weights) {\r\n      if (weight > 0.5) { // Seuil pour consid\xE9rer une connexion comme \"forte\"\r\n        patterns.push(`strong_connection_${key}`);\r\n      }\r\n    }\r\n    \r\n    // Analyser les clusters d'activation\r\n    const activeNodes = Array.from(this.activations.entries())\r\n      .filter(([_, activation]) => activation > 0.3)\r\n      .map(([nodeId]) => nodeId);\r\n    \r\n    if (activeNodes.length > 2) {\r\n      patterns.push(`cluster_${activeNodes.slice(0, 3).join('_')}`);\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re le poids d'une connexion (pour compatibilit\xE9 tests)\r\n   */\r\n  getWeight(preId: string, postId: string): number {\r\n    const key = `${preId}->${postId}`;\r\n    return this.weights.get(key) || 0;\r\n  }\r\n\r\n  /**\r\n   * S\xE9rialise l'\xE9tat du syst\xE8me (pour compatibilit\xE9 tests)\r\n   */\r\n  toJSON(): { weights: [string, number][]; activations: [string, number][]; lastActive: [string, number][] } {\r\n    return {\r\n      weights: Array.from(this.weights.entries()),\r\n      activations: Array.from(this.activations.entries()),\r\n      lastActive: Array.from(this.lastActive.entries())\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Met \xE0 jour les poids des connexions bas\xE9 sur les patterns comportementaux\r\n   */\r\n  async updateWeights(behaviorData: BehaviorPattern[]): Promise<LearningResult> {\r\n    let strengthened = 0;\r\n    let weakened = 0;\r\n    const newPatterns: string[] = [];\r\n\r\n    for (const pattern of behaviorData) {\r\n      // Convertir le pattern en activation neuronale\r\n      const activation = this.patternToActivation(pattern);\r\n      \r\n      // Appliquer la r\xE8gle de Hebb : \"neurons that fire together, wire together\"\r\n      for (const [neuronA, activationA] of activation) {\r\n        for (const [neuronB, activationB] of activation) {\r\n          if (neuronA !== neuronB) {\r\n            const weight = this.getConnectionWeight(neuronA, neuronB);\r\n            const deltaWeight = this.learningRate * activationA * activationB;\r\n            \r\n            // Mettre \xE0 jour le poids\r\n            const newWeight = weight + deltaWeight - this.decayRate;\r\n            this.setConnectionWeight(neuronA, neuronB, Math.max(0, newWeight));\r\n            \r\n            if (deltaWeight > 0) strengthened++;\r\n            else if (deltaWeight < 0) weakened++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // D\xE9tecter de nouveaux patterns\r\n      const patternSignature = this.generatePatternSignature(pattern);\r\n      if (!this.hasSeenPattern(patternSignature)) {\r\n        newPatterns.push(patternSignature);\r\n        this.recordPattern(patternSignature);\r\n      }\r\n    }\r\n\r\n    // Calculer la confiance bas\xE9e sur la coh\xE9rence des patterns\r\n    const confidence = this.calculateConfidence(behaviorData);\r\n\r\n    return {\r\n      strengthenedConnections: strengthened,\r\n      weakenedConnections: weakened,\r\n      newPatterns,\r\n      confidence\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convertit un pattern comportemental en activation neuronale\r\n   */\r\n  private patternToActivation(pattern: BehaviorPattern): Map<string, number> {\r\n    const activation = new Map<string, number>();\r\n\r\n    // Mapper les aspects du pattern \xE0 des \"neurones\"\r\n    activation.set('time_neuron', Math.min(1, pattern.timeSpent / 60000)); // Normaliser le temps\r\n    activation.set('interaction_neuron', Math.min(1, pattern.interactions * 0.1));\r\n    activation.set('scroll_neuron', Math.min(1, pattern.scrollDepth));\r\n    \r\n    // Neurones bas\xE9s sur l'URL (domaine)\r\n    const domain = this.extractDomain(pattern.url);\r\n    activation.set(`domain_${domain}`, 1);\r\n\r\n    // Neurones temporels (heure de la journ\xE9e)\r\n    const hour = new Date(pattern.timestamp).getHours();\r\n    activation.set(`hour_${hour}`, 1);\r\n\r\n    return activation;\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re le poids d'une connexion\r\n   */\r\n  private getConnectionWeight(neuronA: string, neuronB: string): number {\r\n    const connectionsA = this.connections.get(neuronA);\r\n    if (!connectionsA) return 0;\r\n    return connectionsA.get(neuronB) || 0;\r\n  }\r\n\r\n  /**\r\n   * D\xE9finit le poids d'une connexion\r\n   */\r\n  private setConnectionWeight(neuronA: string, neuronB: string, weight: number): void {\r\n    if (!this.connections.has(neuronA)) {\r\n      this.connections.set(neuronA, new Map());\r\n    }\r\n    this.connections.get(neuronA)!.set(neuronB, weight);\r\n  }\r\n\r\n  /**\r\n   * G\xE9n\xE8re une signature unique pour un pattern\r\n   */\r\n  private generatePatternSignature(pattern: BehaviorPattern): string {\r\n    const domain = this.extractDomain(pattern.url);\r\n    const timeCategory = this.categorizeTime(pattern.timeSpent);\r\n    const interactionLevel = this.categorizeInteractions(pattern.interactions);\r\n    \r\n    return `${domain}_${timeCategory}_${interactionLevel}`;\r\n  }\r\n\r\n  /**\r\n   * V\xE9rifie si un pattern a d\xE9j\xE0 \xE9t\xE9 observ\xE9\r\n   */\r\n  private hasSeenPattern(signature: string): boolean {\r\n    return this.activationHistory.has(signature);\r\n  }\r\n\r\n  /**\r\n   * Enregistre un nouveau pattern\r\n   */\r\n  private recordPattern(signature: string): void {\r\n    this.activationHistory.set(signature, [Date.now()]);\r\n  }\r\n\r\n  /**\r\n   * Calcule la confiance bas\xE9e sur la coh\xE9rence des patterns\r\n   */\r\n  private calculateConfidence(patterns: BehaviorPattern[]): number {\r\n    if (patterns.length === 0) return 0;\r\n\r\n    // Analyser la variabilit\xE9 des patterns\r\n    const domains = new Set(patterns.map(p => this.extractDomain(p.url)));\r\n    const avgTimeSpent = patterns.reduce((sum, p) => sum + p.timeSpent, 0) / patterns.length;\r\n    const timeVariance = patterns.reduce((sum, p) => sum + Math.pow(p.timeSpent - avgTimeSpent, 2), 0) / patterns.length;\r\n\r\n    // Plus de domaines = moins de confiance dans un pattern sp\xE9cifique\r\n    const domainDiversity = domains.size / patterns.length;\r\n    \r\n    // Moins de variance dans le temps = plus de confiance\r\n    const timeConsistency = 1 / (1 + timeVariance / 10000);\r\n\r\n    return Math.min(1, timeConsistency * (1 - domainDiversity * 0.5));\r\n  }\r\n\r\n  /**\r\n   * Extrait le domaine d'une URL\r\n   */\r\n  private extractDomain(url: string): string {\r\n    try {\r\n      return new URL(url).hostname.replace('www.', '');\r\n    } catch {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cat\xE9gorise le temps pass\xE9\r\n   */\r\n  private categorizeTime(timeSpent: number): string {\r\n    if (timeSpent < 5000) return 'quick';\r\n    if (timeSpent < 30000) return 'medium';\r\n    if (timeSpent < 120000) return 'long';\r\n    return 'extended';\r\n  }\r\n\r\n  /**\r\n   * Cat\xE9gorise le niveau d'interaction\r\n   */\r\n  private categorizeInteractions(interactions: number): string {\r\n    if (interactions === 0) return 'passive';\r\n    if (interactions < 5) return 'low';\r\n    if (interactions < 15) return 'medium';\r\n    return 'high';\r\n  }\r\n\r\n  /**\r\n   * Obtient les connexions les plus fortes\r\n   */\r\n  getStrongestConnections(limit: number = 10): Array<{from: string, to: string, weight: number}> {\r\n    const allConnections: Array<{from: string, to: string, weight: number}> = [];\r\n    \r\n    for (const [from, connections] of this.connections) {\r\n      for (const [to, weight] of connections) {\r\n        allConnections.push({ from, to, weight });\r\n      }\r\n    }\r\n\r\n    return allConnections\r\n      .sort((a, b) => b.weight - a.weight)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * R\xE9initialise le syst\xE8me d'apprentissage\r\n   */\r\n  reset(): void {\r\n    this.connections.clear();\r\n    this.activationHistory.clear();\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94589bd07e2ab3f53ae6e4706ee0cd1f9ed4182f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xcirmc3k6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xcirmc3k6();
cov_1xcirmc3k6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xcirmc3k6().s[1]++;
exports.HebbieanLearningSystem = void 0;
class HebbieanLearningSystem {
  constructor(learningRate =
  /* istanbul ignore next */
  (cov_1xcirmc3k6().b[0][0]++, 0.01), inactivityThreshold =
  /* istanbul ignore next */
  (cov_1xcirmc3k6().b[1][0]++, 0.001)) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[0]++;
    cov_1xcirmc3k6().s[2]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[3]++;
    this.activationHistory = new Map();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[4]++;
    this.learningRate = 0.01;
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[5]++;
    this.decayRate = 0.001;
    // Nouvelles propriétés pour la compatibilité avec les tests
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[6]++;
    this.weights = new Map();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[7]++;
    this.activations = new Map();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[8]++;
    this.lastActive = new Map();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[9]++;
    this.learningRate = learningRate;
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[10]++;
    this.decayRate = inactivityThreshold;
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[11]++;
    this.inactivityThreshold = inactivityThreshold;
  }
  /**
   * Renforce une connexion entre deux neurones (pour compatibilité tests)
   */
  strengthenConnection(preId, postId, preAct, postAct) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[1]++;
    const key =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[12]++, `${preId}->${postId}`);
    const currentWeight =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[13]++,
    /* istanbul ignore next */
    (cov_1xcirmc3k6().b[2][0]++, this.weights.get(key)) ||
    /* istanbul ignore next */
    (cov_1xcirmc3k6().b[2][1]++, 0));
    const deltaWeight =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[14]++, this.learningRate * preAct * postAct);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[15]++;
    this.weights.set(key, currentWeight + deltaWeight);
    // Aussi mettre à jour dans le système principal
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[16]++;
    if (!this.connections.has(preId)) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[3][0]++;
      cov_1xcirmc3k6().s[17]++;
      this.connections.set(preId, new Map());
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[3][1]++;
    }
    cov_1xcirmc3k6().s[18]++;
    this.connections.get(preId).set(postId, currentWeight + deltaWeight);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[19]++;
    this.lastActive.set(preId, Date.now());
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[20]++;
    this.lastActive.set(postId, Date.now());
  }
  /**
   * Affaiblit les connexions inutilisées (pour compatibilité tests)
   */
  weakenUnusedConnections() {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[2]++;
    const now =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[21]++, Date.now());
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[22]++;
    for (const [key, weight] of this.weights) {
      const [preId] =
      /* istanbul ignore next */
      (cov_1xcirmc3k6().s[23]++, key.split('->'));
      const lastActiveTime =
      /* istanbul ignore next */
      (cov_1xcirmc3k6().s[24]++,
      /* istanbul ignore next */
      (cov_1xcirmc3k6().b[4][0]++, this.lastActive.get(preId)) ||
      /* istanbul ignore next */
      (cov_1xcirmc3k6().b[4][1]++, 0));
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[25]++;
      if (now - lastActiveTime > this.inactivityThreshold * 1000) {
        /* istanbul ignore next */
        cov_1xcirmc3k6().b[5][0]++;
        cov_1xcirmc3k6().s[26]++;
        this.weights.set(key, Math.max(0, weight - this.decayRate));
      } else
      /* istanbul ignore next */
      {
        cov_1xcirmc3k6().b[5][1]++;
      }
    }
  }
  /**
   * Définit l'activation d'un neurone (pour compatibilité tests)
   */
  setActivation(nodeId, value) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[3]++;
    cov_1xcirmc3k6().s[27]++;
    this.activations.set(nodeId, value);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[28]++;
    this.lastActive.set(nodeId, Date.now());
  }
  /**
   * Détecte les patterns émergents (pour compatibilité tests)
   */
  detectEmergentPatterns() {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[4]++;
    const patterns =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[29]++, []);
    // Analyser les connexions fortes
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[30]++;
    for (const [key, weight] of this.weights) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[31]++;
      if (weight > 0.5) {
        /* istanbul ignore next */
        cov_1xcirmc3k6().b[6][0]++;
        cov_1xcirmc3k6().s[32]++;
        // Seuil pour considérer une connexion comme "forte"
        patterns.push(`strong_connection_${key}`);
      } else
      /* istanbul ignore next */
      {
        cov_1xcirmc3k6().b[6][1]++;
      }
    }
    // Analyser les clusters d'activation
    const activeNodes =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[33]++, Array.from(this.activations.entries()).filter(([_, activation]) => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[5]++;
      cov_1xcirmc3k6().s[34]++;
      return activation > 0.3;
    }).map(([nodeId]) => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[6]++;
      cov_1xcirmc3k6().s[35]++;
      return nodeId;
    }));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[36]++;
    if (activeNodes.length > 2) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[7][0]++;
      cov_1xcirmc3k6().s[37]++;
      patterns.push(`cluster_${activeNodes.slice(0, 3).join('_')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[7][1]++;
    }
    cov_1xcirmc3k6().s[38]++;
    return patterns;
  }
  /**
   * Récupère le poids d'une connexion (pour compatibilité tests)
   */
  getWeight(preId, postId) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[7]++;
    const key =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[39]++, `${preId}->${postId}`);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[40]++;
    return /* istanbul ignore next */(cov_1xcirmc3k6().b[8][0]++, this.weights.get(key)) ||
    /* istanbul ignore next */
    (cov_1xcirmc3k6().b[8][1]++, 0);
  }
  /**
   * Sérialise l'état du système (pour compatibilité tests)
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[8]++;
    cov_1xcirmc3k6().s[41]++;
    return {
      weights: Array.from(this.weights.entries()),
      activations: Array.from(this.activations.entries()),
      lastActive: Array.from(this.lastActive.entries())
    };
  }
  /**
   * Met à jour les poids des connexions basé sur les patterns comportementaux
   */
  async updateWeights(behaviorData) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[9]++;
    let strengthened =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[42]++, 0);
    let weakened =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[43]++, 0);
    const newPatterns =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[44]++, []);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[45]++;
    for (const pattern of behaviorData) {
      // Convertir le pattern en activation neuronale
      const activation =
      /* istanbul ignore next */
      (cov_1xcirmc3k6().s[46]++, this.patternToActivation(pattern));
      // Appliquer la règle de Hebb : "neurons that fire together, wire together"
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[47]++;
      for (const [neuronA, activationA] of activation) {
        /* istanbul ignore next */
        cov_1xcirmc3k6().s[48]++;
        for (const [neuronB, activationB] of activation) {
          /* istanbul ignore next */
          cov_1xcirmc3k6().s[49]++;
          if (neuronA !== neuronB) {
            /* istanbul ignore next */
            cov_1xcirmc3k6().b[9][0]++;
            const weight =
            /* istanbul ignore next */
            (cov_1xcirmc3k6().s[50]++, this.getConnectionWeight(neuronA, neuronB));
            const deltaWeight =
            /* istanbul ignore next */
            (cov_1xcirmc3k6().s[51]++, this.learningRate * activationA * activationB);
            // Mettre à jour le poids
            const newWeight =
            /* istanbul ignore next */
            (cov_1xcirmc3k6().s[52]++, weight + deltaWeight - this.decayRate);
            /* istanbul ignore next */
            cov_1xcirmc3k6().s[53]++;
            this.setConnectionWeight(neuronA, neuronB, Math.max(0, newWeight));
            /* istanbul ignore next */
            cov_1xcirmc3k6().s[54]++;
            if (deltaWeight > 0) {
              /* istanbul ignore next */
              cov_1xcirmc3k6().b[10][0]++;
              cov_1xcirmc3k6().s[55]++;
              strengthened++;
            } else {
              /* istanbul ignore next */
              cov_1xcirmc3k6().b[10][1]++;
              cov_1xcirmc3k6().s[56]++;
              if (deltaWeight < 0) {
                /* istanbul ignore next */
                cov_1xcirmc3k6().b[11][0]++;
                cov_1xcirmc3k6().s[57]++;
                weakened++;
              } else
              /* istanbul ignore next */
              {
                cov_1xcirmc3k6().b[11][1]++;
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_1xcirmc3k6().b[9][1]++;
          }
        }
      }
      // Détecter de nouveaux patterns
      const patternSignature =
      /* istanbul ignore next */
      (cov_1xcirmc3k6().s[58]++, this.generatePatternSignature(pattern));
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[59]++;
      if (!this.hasSeenPattern(patternSignature)) {
        /* istanbul ignore next */
        cov_1xcirmc3k6().b[12][0]++;
        cov_1xcirmc3k6().s[60]++;
        newPatterns.push(patternSignature);
        /* istanbul ignore next */
        cov_1xcirmc3k6().s[61]++;
        this.recordPattern(patternSignature);
      } else
      /* istanbul ignore next */
      {
        cov_1xcirmc3k6().b[12][1]++;
      }
    }
    // Calculer la confiance basée sur la cohérence des patterns
    const confidence =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[62]++, this.calculateConfidence(behaviorData));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[63]++;
    return {
      strengthenedConnections: strengthened,
      weakenedConnections: weakened,
      newPatterns,
      confidence
    };
  }
  /**
   * Convertit un pattern comportemental en activation neuronale
   */
  patternToActivation(pattern) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[10]++;
    const activation =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[64]++, new Map());
    // Mapper les aspects du pattern à des "neurones"
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[65]++;
    activation.set('time_neuron', Math.min(1, pattern.timeSpent / 60000)); // Normaliser le temps
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[66]++;
    activation.set('interaction_neuron', Math.min(1, pattern.interactions * 0.1));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[67]++;
    activation.set('scroll_neuron', Math.min(1, pattern.scrollDepth));
    // Neurones basés sur l'URL (domaine)
    const domain =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[68]++, this.extractDomain(pattern.url));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[69]++;
    activation.set(`domain_${domain}`, 1);
    // Neurones temporels (heure de la journée)
    const hour =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[70]++, new Date(pattern.timestamp).getHours());
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[71]++;
    activation.set(`hour_${hour}`, 1);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[72]++;
    return activation;
  }
  /**
   * Récupère le poids d'une connexion
   */
  getConnectionWeight(neuronA, neuronB) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[11]++;
    const connectionsA =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[73]++, this.connections.get(neuronA));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[74]++;
    if (!connectionsA) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[13][0]++;
      cov_1xcirmc3k6().s[75]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[13][1]++;
    }
    cov_1xcirmc3k6().s[76]++;
    return /* istanbul ignore next */(cov_1xcirmc3k6().b[14][0]++, connectionsA.get(neuronB)) ||
    /* istanbul ignore next */
    (cov_1xcirmc3k6().b[14][1]++, 0);
  }
  /**
   * Définit le poids d'une connexion
   */
  setConnectionWeight(neuronA, neuronB, weight) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[12]++;
    cov_1xcirmc3k6().s[77]++;
    if (!this.connections.has(neuronA)) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[15][0]++;
      cov_1xcirmc3k6().s[78]++;
      this.connections.set(neuronA, new Map());
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[15][1]++;
    }
    cov_1xcirmc3k6().s[79]++;
    this.connections.get(neuronA).set(neuronB, weight);
  }
  /**
   * Génère une signature unique pour un pattern
   */
  generatePatternSignature(pattern) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[13]++;
    const domain =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[80]++, this.extractDomain(pattern.url));
    const timeCategory =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[81]++, this.categorizeTime(pattern.timeSpent));
    const interactionLevel =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[82]++, this.categorizeInteractions(pattern.interactions));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[83]++;
    return `${domain}_${timeCategory}_${interactionLevel}`;
  }
  /**
   * Vérifie si un pattern a déjà été observé
   */
  hasSeenPattern(signature) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[14]++;
    cov_1xcirmc3k6().s[84]++;
    return this.activationHistory.has(signature);
  }
  /**
   * Enregistre un nouveau pattern
   */
  recordPattern(signature) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[15]++;
    cov_1xcirmc3k6().s[85]++;
    this.activationHistory.set(signature, [Date.now()]);
  }
  /**
   * Calcule la confiance basée sur la cohérence des patterns
   */
  calculateConfidence(patterns) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[16]++;
    cov_1xcirmc3k6().s[86]++;
    if (patterns.length === 0) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[16][0]++;
      cov_1xcirmc3k6().s[87]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[16][1]++;
    }
    // Analyser la variabilité des patterns
    const domains =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[88]++, new Set(patterns.map(p => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[17]++;
      cov_1xcirmc3k6().s[89]++;
      return this.extractDomain(p.url);
    })));
    const avgTimeSpent =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[90]++, patterns.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[18]++;
      cov_1xcirmc3k6().s[91]++;
      return sum + p.timeSpent;
    }, 0) / patterns.length);
    const timeVariance =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[92]++, patterns.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[19]++;
      cov_1xcirmc3k6().s[93]++;
      return sum + Math.pow(p.timeSpent - avgTimeSpent, 2);
    }, 0) / patterns.length);
    // Plus de domaines = moins de confiance dans un pattern spécifique
    const domainDiversity =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[94]++, domains.size / patterns.length);
    // Moins de variance dans le temps = plus de confiance
    const timeConsistency =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[95]++, 1 / (1 + timeVariance / 10000));
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[96]++;
    return Math.min(1, timeConsistency * (1 - domainDiversity * 0.5));
  }
  /**
   * Extrait le domaine d'une URL
   */
  extractDomain(url) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[20]++;
    cov_1xcirmc3k6().s[97]++;
    try {
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[98]++;
      return new URL(url).hostname.replace('www.', '');
    } catch {
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[99]++;
      return 'unknown';
    }
  }
  /**
   * Catégorise le temps passé
   */
  categorizeTime(timeSpent) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[21]++;
    cov_1xcirmc3k6().s[100]++;
    if (timeSpent < 5000) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[17][0]++;
      cov_1xcirmc3k6().s[101]++;
      return 'quick';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[17][1]++;
    }
    cov_1xcirmc3k6().s[102]++;
    if (timeSpent < 30000) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[18][0]++;
      cov_1xcirmc3k6().s[103]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[18][1]++;
    }
    cov_1xcirmc3k6().s[104]++;
    if (timeSpent < 120000) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[19][0]++;
      cov_1xcirmc3k6().s[105]++;
      return 'long';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[19][1]++;
    }
    cov_1xcirmc3k6().s[106]++;
    return 'extended';
  }
  /**
   * Catégorise le niveau d'interaction
   */
  categorizeInteractions(interactions) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[22]++;
    cov_1xcirmc3k6().s[107]++;
    if (interactions === 0) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[20][0]++;
      cov_1xcirmc3k6().s[108]++;
      return 'passive';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[20][1]++;
    }
    cov_1xcirmc3k6().s[109]++;
    if (interactions < 5) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[21][0]++;
      cov_1xcirmc3k6().s[110]++;
      return 'low';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[21][1]++;
    }
    cov_1xcirmc3k6().s[111]++;
    if (interactions < 15) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().b[22][0]++;
      cov_1xcirmc3k6().s[112]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_1xcirmc3k6().b[22][1]++;
    }
    cov_1xcirmc3k6().s[113]++;
    return 'high';
  }
  /**
   * Obtient les connexions les plus fortes
   */
  getStrongestConnections(limit =
  /* istanbul ignore next */
  (cov_1xcirmc3k6().b[23][0]++, 10)) {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[23]++;
    const allConnections =
    /* istanbul ignore next */
    (cov_1xcirmc3k6().s[114]++, []);
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[115]++;
    for (const [from, connections] of this.connections) {
      /* istanbul ignore next */
      cov_1xcirmc3k6().s[116]++;
      for (const [to, weight] of connections) {
        /* istanbul ignore next */
        cov_1xcirmc3k6().s[117]++;
        allConnections.push({
          from,
          to,
          weight
        });
      }
    }
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[118]++;
    return allConnections.sort((a, b) => {
      /* istanbul ignore next */
      cov_1xcirmc3k6().f[24]++;
      cov_1xcirmc3k6().s[119]++;
      return b.weight - a.weight;
    }).slice(0, limit);
  }
  /**
   * Réinitialise le système d'apprentissage
   */
  reset() {
    /* istanbul ignore next */
    cov_1xcirmc3k6().f[25]++;
    cov_1xcirmc3k6().s[120]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1xcirmc3k6().s[121]++;
    this.activationHistory.clear();
  }
}
/* istanbul ignore next */
cov_1xcirmc3k6().s[122]++;
exports.HebbieanLearningSystem = HebbieanLearningSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,