{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/factories/OrganismFactory.ts","mappings":";AAAA,4DAA4D;;;AAU5D,MAAa,eAAe;IAG1B,MAAM,CAAC,eAAe,CAAC,IAA0B;QAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,GAAW,EAAE,MAAgC;QACjE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;QACzF,CAAC;QAED,8CAA8C;QAC9C,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACpD,OAAO,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;IAC3E,CAAC;IAED,MAAM,CAAC,gBAAgB;QACrB,8CAA8C;QAC9C,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;QAChD,OAAO,IAAI,UAAU,EAAE,CAAC;IAC1B,CAAC;;AArBH,0CAsBC;AArBgB,4BAAY,GAAgC,IAAI,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/factories/OrganismFactory.ts"],"sourcesContent":["// Factory pattern pour résoudre les dépendances circulaires\r\n\r\nimport { INeuralMesh } from '../interfaces/INeuralMesh';\r\nimport { IOrganismCore } from '../interfaces/IOrganismCore';\r\nimport { OrganismTraits } from '../../shared/types/organism';\r\n\r\nexport interface OrganismDependencies {\r\n  createNeuralMesh: () => INeuralMesh;\r\n}\r\n\r\nexport class OrganismFactory {\r\n  private static dependencies: OrganismDependencies | null = null;\r\n\r\n  static setDependencies(deps: OrganismDependencies): void {\r\n    this.dependencies = deps;\r\n  }\r\n\r\n  static createOrganism(dna: string, traits?: Partial<OrganismTraits>): IOrganismCore {\r\n    if (!this.dependencies) {\r\n      throw new Error('OrganismFactory dependencies not set. Call setDependencies() first.');\r\n    }\r\n\r\n    // Import dynamique pour éviter la circularité\r\n    const { OrganismCore } = require('../OrganismCore');\r\n    return new OrganismCore(dna, traits, this.dependencies.createNeuralMesh);\r\n  }\r\n\r\n  static createNeuralMesh(): INeuralMesh {\r\n    // Import dynamique pour éviter la circularité\r\n    const { NeuralMesh } = require('../NeuralMesh');\r\n    return new NeuralMesh();\r\n  }\r\n} "],"version":3}