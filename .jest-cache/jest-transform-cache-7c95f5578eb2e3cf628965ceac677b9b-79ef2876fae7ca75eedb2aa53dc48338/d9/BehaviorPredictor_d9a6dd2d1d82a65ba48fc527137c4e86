a7fd181da50ddd3866c1495a24b0d596
"use strict";

/* istanbul ignore next */
function cov_2f32hyn5m8() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/behavioral/core/BehaviorPredictor.ts";
  var hash = "a9a547db384c4b3081dcabe33c0459b2dae0184b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/behavioral/core/BehaviorPredictor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "4": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "5": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "7": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "8": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "9": {
        start: {
          line: 28,
          column: 13
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "11": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "12": {
        start: {
          line: 32,
          column: 13
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "14": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 46,
          column: 10
        }
      },
      "19": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 49,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 41
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/behavioral/core/BehaviorPredictor.ts",
      mappings: ";;;AAGA,MAAa,iBAAiB;IAC5B,sDAAsD;IACtD,OAAO,CAAC,IAAe;QACrB,oDAAoD;QACpD,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;IACpD,CAAC;IAED,sDAAsD;IACtD,eAAe,CAAC,QAAmB;QACjC,sDAAsD;QACtD,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACvC,CAAC;IAED,WAAW;QACT,uBAAuB;IACzB,CAAC;IAED,qEAAqE;IACrE,iBAAiB,CAAC,QAAuB,EAAE,OAAoB;QAC7D,4DAA4D;QAC5D,IAAI,eAAe,GAAG,QAAQ,CAAC;QAC/B,IAAI,UAAU,GAAG,GAAG,CAAC;QAErB,gEAAgE;QAChE,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC;YACpC,eAAe,GAAG,SAAS,CAAC;YAC5B,UAAU,IAAI,GAAG,CAAC;QACpB,CAAC;aAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC;YACvC,eAAe,GAAG,OAAO,CAAC;YAC1B,UAAU,IAAI,IAAI,CAAC;QACrB,CAAC;aAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;YAC5C,eAAe,GAAG,QAAQ,CAAC;YAC3B,UAAU,IAAI,GAAG,CAAC;QACpB,CAAC;QAED,+CAA+C;QAC/C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,eAAe,GAAG,QAAQ,CAAC;YAC3B,UAAU,IAAI,GAAG,CAAC;QACpB,CAAC;QAED,OAAO;YACL,MAAM,EAAE,eAAe;YACvB,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC;YACtC,YAAY,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;YAC7C,SAAS,EAAE,0DAA0D;SACtE,CAAC;IACJ,CAAC;CACF;AAhDD,8CAgDC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/behavioral/core/BehaviorPredictor.ts"],
      sourcesContent: ["// Pr\xE9diction comportementale\r\nimport { OrganismState, PageContext, ActionPrediction } from '../../shared/types/organism';\r\n\r\nexport class BehaviorPredictor {\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  predict(data: unknown[]): any {\r\n    // Pr\xE9diction comportementale simple - \xE0 impl\xE9menter\r\n    return { confidence: 0.5, prediction: 'unknown' };\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  analyzeBehavior(sequence: unknown[]): any {\r\n    // Analyse de s\xE9quence comportementale - \xE0 impl\xE9menter\r\n    return { pattern: 'none', score: 0 };\r\n  }\r\n\r\n  updateModel(): void {\r\n    // Model learning logic\r\n  }\r\n\r\n  // Nouvelle m\xE9thode pour pr\xE9dire bas\xE9e sur l'organisme et le contexte\r\n  predictNextAction(organism: OrganismState, context: PageContext): ActionPrediction {\r\n    // Logique de pr\xE9diction bas\xE9e sur les traits de l'organisme\r\n    let predictedAction = 'browse';\r\n    let confidence = 0.5;\r\n\r\n    // Analyser les traits pour d\xE9terminer l'action la plus probable\r\n    if (organism.traits.curiosity > 0.7) {\r\n      predictedAction = 'explore';\r\n      confidence += 0.2;\r\n    } else if (organism.traits.focus > 0.7) {\r\n      predictedAction = 'focus';\r\n      confidence += 0.15;\r\n    } else if (organism.traits.creativity > 0.6) {\r\n      predictedAction = 'create';\r\n      confidence += 0.1;\r\n    }\r\n\r\n    // Ajuster selon le contexte (URL, temps, etc.)\r\n    if (context.url.includes('search')) {\r\n      predictedAction = 'search';\r\n      confidence += 0.1;\r\n    }\r\n\r\n    return {\r\n      action: predictedAction,\r\n      confidence: Math.min(0.95, confidence),\r\n      alternatives: ['browse', 'search', 'explore'],\r\n      reasoning: `Pr\xE9diction bas\xE9e sur les traits dominants de l'organisme`\r\n    };\r\n  }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a9a547db384c4b3081dcabe33c0459b2dae0184b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2f32hyn5m8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2f32hyn5m8();
cov_2f32hyn5m8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2f32hyn5m8().s[1]++;
exports.BehaviorPredictor = void 0;
class BehaviorPredictor {
  // @ts-expect-error Paramètre réservé pour usage futur
  predict(data) {
    /* istanbul ignore next */
    cov_2f32hyn5m8().f[0]++;
    cov_2f32hyn5m8().s[2]++;
    // Prédiction comportementale simple - à implémenter
    return {
      confidence: 0.5,
      prediction: 'unknown'
    };
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  analyzeBehavior(sequence) {
    /* istanbul ignore next */
    cov_2f32hyn5m8().f[1]++;
    cov_2f32hyn5m8().s[3]++;
    // Analyse de séquence comportementale - à implémenter
    return {
      pattern: 'none',
      score: 0
    };
  }
  updateModel() {
    /* istanbul ignore next */
    cov_2f32hyn5m8().f[2]++;
  } // Model learning logic
  // Nouvelle méthode pour prédire basée sur l'organisme et le contexte
  predictNextAction(organism, context) {
    /* istanbul ignore next */
    cov_2f32hyn5m8().f[3]++;
    // Logique de prédiction basée sur les traits de l'organisme
    let predictedAction =
    /* istanbul ignore next */
    (cov_2f32hyn5m8().s[4]++, 'browse');
    let confidence =
    /* istanbul ignore next */
    (cov_2f32hyn5m8().s[5]++, 0.5);
    // Analyser les traits pour déterminer l'action la plus probable
    /* istanbul ignore next */
    cov_2f32hyn5m8().s[6]++;
    if (organism.traits.curiosity > 0.7) {
      /* istanbul ignore next */
      cov_2f32hyn5m8().b[0][0]++;
      cov_2f32hyn5m8().s[7]++;
      predictedAction = 'explore';
      /* istanbul ignore next */
      cov_2f32hyn5m8().s[8]++;
      confidence += 0.2;
    } else {
      /* istanbul ignore next */
      cov_2f32hyn5m8().b[0][1]++;
      cov_2f32hyn5m8().s[9]++;
      if (organism.traits.focus > 0.7) {
        /* istanbul ignore next */
        cov_2f32hyn5m8().b[1][0]++;
        cov_2f32hyn5m8().s[10]++;
        predictedAction = 'focus';
        /* istanbul ignore next */
        cov_2f32hyn5m8().s[11]++;
        confidence += 0.15;
      } else {
        /* istanbul ignore next */
        cov_2f32hyn5m8().b[1][1]++;
        cov_2f32hyn5m8().s[12]++;
        if (organism.traits.creativity > 0.6) {
          /* istanbul ignore next */
          cov_2f32hyn5m8().b[2][0]++;
          cov_2f32hyn5m8().s[13]++;
          predictedAction = 'create';
          /* istanbul ignore next */
          cov_2f32hyn5m8().s[14]++;
          confidence += 0.1;
        } else
        /* istanbul ignore next */
        {
          cov_2f32hyn5m8().b[2][1]++;
        }
      }
    }
    // Ajuster selon le contexte (URL, temps, etc.)
    /* istanbul ignore next */
    cov_2f32hyn5m8().s[15]++;
    if (context.url.includes('search')) {
      /* istanbul ignore next */
      cov_2f32hyn5m8().b[3][0]++;
      cov_2f32hyn5m8().s[16]++;
      predictedAction = 'search';
      /* istanbul ignore next */
      cov_2f32hyn5m8().s[17]++;
      confidence += 0.1;
    } else
    /* istanbul ignore next */
    {
      cov_2f32hyn5m8().b[3][1]++;
    }
    cov_2f32hyn5m8().s[18]++;
    return {
      action: predictedAction,
      confidence: Math.min(0.95, confidence),
      alternatives: ['browse', 'search', 'explore'],
      reasoning: `Prédiction basée sur les traits dominants de l'organisme`
    };
  }
}
/* istanbul ignore next */
cov_2f32hyn5m8().s[19]++;
exports.BehaviorPredictor = BehaviorPredictor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmYzMmh5bjVtOCIsImFjdHVhbENvdmVyYWdlIiwicyIsIkJlaGF2aW9yUHJlZGljdG9yIiwicHJlZGljdCIsImRhdGEiLCJmIiwiY29uZmlkZW5jZSIsInByZWRpY3Rpb24iLCJhbmFseXplQmVoYXZpb3IiLCJzZXF1ZW5jZSIsInBhdHRlcm4iLCJzY29yZSIsInVwZGF0ZU1vZGVsIiwicHJlZGljdE5leHRBY3Rpb24iLCJvcmdhbmlzbSIsImNvbnRleHQiLCJwcmVkaWN0ZWRBY3Rpb24iLCJ0cmFpdHMiLCJjdXJpb3NpdHkiLCJiIiwiZm9jdXMiLCJjcmVhdGl2aXR5IiwidXJsIiwiaW5jbHVkZXMiLCJhY3Rpb24iLCJNYXRoIiwibWluIiwiYWx0ZXJuYXRpdmVzIiwicmVhc29uaW5nIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy9tX29saS9Qcm9qZXRzL1NZTUJJT05UL3NyYy9iZWhhdmlvcmFsL2NvcmUvQmVoYXZpb3JQcmVkaWN0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUHLDqWRpY3Rpb24gY29tcG9ydGVtZW50YWxlXHJcbmltcG9ydCB7IE9yZ2FuaXNtU3RhdGUsIFBhZ2VDb250ZXh0LCBBY3Rpb25QcmVkaWN0aW9uIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3R5cGVzL29yZ2FuaXNtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCZWhhdmlvclByZWRpY3RvciB7XHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXJhbcOodHJlIHLDqXNlcnbDqSBwb3VyIHVzYWdlIGZ1dHVyXHJcbiAgcHJlZGljdChkYXRhOiB1bmtub3duW10pOiBhbnkge1xyXG4gICAgLy8gUHLDqWRpY3Rpb24gY29tcG9ydGVtZW50YWxlIHNpbXBsZSAtIMOgIGltcGzDqW1lbnRlclxyXG4gICAgcmV0dXJuIHsgY29uZmlkZW5jZTogMC41LCBwcmVkaWN0aW9uOiAndW5rbm93bicgfTtcclxuICB9XHJcblxyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUGFyYW3DqHRyZSByw6lzZXJ2w6kgcG91ciB1c2FnZSBmdXR1clxyXG4gIGFuYWx5emVCZWhhdmlvcihzZXF1ZW5jZTogdW5rbm93bltdKTogYW55IHtcclxuICAgIC8vIEFuYWx5c2UgZGUgc8OpcXVlbmNlIGNvbXBvcnRlbWVudGFsZSAtIMOgIGltcGzDqW1lbnRlclxyXG4gICAgcmV0dXJuIHsgcGF0dGVybjogJ25vbmUnLCBzY29yZTogMCB9O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlTW9kZWwoKTogdm9pZCB7XHJcbiAgICAvLyBNb2RlbCBsZWFybmluZyBsb2dpY1xyXG4gIH1cclxuXHJcbiAgLy8gTm91dmVsbGUgbcOpdGhvZGUgcG91ciBwcsOpZGlyZSBiYXPDqWUgc3VyIGwnb3JnYW5pc21lIGV0IGxlIGNvbnRleHRlXHJcbiAgcHJlZGljdE5leHRBY3Rpb24ob3JnYW5pc206IE9yZ2FuaXNtU3RhdGUsIGNvbnRleHQ6IFBhZ2VDb250ZXh0KTogQWN0aW9uUHJlZGljdGlvbiB7XHJcbiAgICAvLyBMb2dpcXVlIGRlIHByw6lkaWN0aW9uIGJhc8OpZSBzdXIgbGVzIHRyYWl0cyBkZSBsJ29yZ2FuaXNtZVxyXG4gICAgbGV0IHByZWRpY3RlZEFjdGlvbiA9ICdicm93c2UnO1xyXG4gICAgbGV0IGNvbmZpZGVuY2UgPSAwLjU7XHJcblxyXG4gICAgLy8gQW5hbHlzZXIgbGVzIHRyYWl0cyBwb3VyIGTDqXRlcm1pbmVyIGwnYWN0aW9uIGxhIHBsdXMgcHJvYmFibGVcclxuICAgIGlmIChvcmdhbmlzbS50cmFpdHMuY3VyaW9zaXR5ID4gMC43KSB7XHJcbiAgICAgIHByZWRpY3RlZEFjdGlvbiA9ICdleHBsb3JlJztcclxuICAgICAgY29uZmlkZW5jZSArPSAwLjI7XHJcbiAgICB9IGVsc2UgaWYgKG9yZ2FuaXNtLnRyYWl0cy5mb2N1cyA+IDAuNykge1xyXG4gICAgICBwcmVkaWN0ZWRBY3Rpb24gPSAnZm9jdXMnO1xyXG4gICAgICBjb25maWRlbmNlICs9IDAuMTU7XHJcbiAgICB9IGVsc2UgaWYgKG9yZ2FuaXNtLnRyYWl0cy5jcmVhdGl2aXR5ID4gMC42KSB7XHJcbiAgICAgIHByZWRpY3RlZEFjdGlvbiA9ICdjcmVhdGUnO1xyXG4gICAgICBjb25maWRlbmNlICs9IDAuMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBanVzdGVyIHNlbG9uIGxlIGNvbnRleHRlIChVUkwsIHRlbXBzLCBldGMuKVxyXG4gICAgaWYgKGNvbnRleHQudXJsLmluY2x1ZGVzKCdzZWFyY2gnKSkge1xyXG4gICAgICBwcmVkaWN0ZWRBY3Rpb24gPSAnc2VhcmNoJztcclxuICAgICAgY29uZmlkZW5jZSArPSAwLjE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYWN0aW9uOiBwcmVkaWN0ZWRBY3Rpb24sXHJcbiAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWluKDAuOTUsIGNvbmZpZGVuY2UpLFxyXG4gICAgICBhbHRlcm5hdGl2ZXM6IFsnYnJvd3NlJywgJ3NlYXJjaCcsICdleHBsb3JlJ10sXHJcbiAgICAgIHJlYXNvbmluZzogYFByw6lkaWN0aW9uIGJhc8OpZSBzdXIgbGVzIHRyYWl0cyBkb21pbmFudHMgZGUgbCdvcmdhbmlzbWVgXHJcbiAgICB9O1xyXG4gIH1cclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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