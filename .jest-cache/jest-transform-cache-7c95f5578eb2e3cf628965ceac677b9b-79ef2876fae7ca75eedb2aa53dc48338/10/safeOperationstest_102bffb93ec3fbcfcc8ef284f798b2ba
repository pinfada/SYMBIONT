07ad93df7a7ddf86fcbd3cded25ea76f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Tests unitaires pour les opérations sécurisées
const safeOperations_1 = require("../safeOperations");
// Mock DOM environment for tests
const mockElement = (className) => ({
    className,
    tagName: 'DIV'
});
describe('SafeOperations Tests', () => {
    describe('safeAverage', () => {
        test('should return 0 for empty array', () => {
            expect((0, safeOperations_1.safeAverage)([])).toBe(0);
        });
        test('should return 0 for null/undefined', () => {
            expect((0, safeOperations_1.safeAverage)(null)).toBe(0);
            expect((0, safeOperations_1.safeAverage)(undefined)).toBe(0);
        });
        test('should calculate correct average', () => {
            expect((0, safeOperations_1.safeAverage)([1, 2, 3, 4, 5])).toBe(3);
            expect((0, safeOperations_1.safeAverage)([10, 20])).toBe(15);
        });
    });
    describe('safeRatio', () => {
        test('should return 0 when denominator is 0', () => {
            expect((0, safeOperations_1.safeRatio)(10, 0)).toBe(0);
        });
        test('should calculate correct ratio', () => {
            expect((0, safeOperations_1.safeRatio)(10, 2)).toBe(5);
            expect((0, safeOperations_1.safeRatio)(0, 5)).toBe(0);
        });
    });
    describe('safeGetClasses', () => {
        test('should return empty array for null/undefined', () => {
            expect((0, safeOperations_1.safeGetClasses)(null)).toEqual([]);
            expect((0, safeOperations_1.safeGetClasses)(undefined)).toEqual([]);
        });
        test('should return empty array for element without className', () => {
            const element = mockElement();
            expect((0, safeOperations_1.safeGetClasses)(element)).toEqual([]);
        });
        test('should split and filter classes correctly', () => {
            const element = mockElement('class1 class2  class3 ');
            expect((0, safeOperations_1.safeGetClasses)(element)).toEqual(['class1', 'class2', 'class3']);
        });
        test('should handle non-string className', () => {
            const element = { className: 123 };
            expect((0, safeOperations_1.safeGetClasses)(element)).toEqual([]);
        });
    });
    describe('safeSplit', () => {
        test('should return empty array for non-string input', () => {
            expect((0, safeOperations_1.safeSplit)(null, ' ')).toEqual([]);
            expect((0, safeOperations_1.safeSplit)(undefined, ' ')).toEqual([]);
            expect((0, safeOperations_1.safeSplit)(123, ' ')).toEqual([]);
        });
        test('should split string correctly', () => {
            expect((0, safeOperations_1.safeSplit)('a b c', ' ')).toEqual(['a', 'b', 'c']);
            expect((0, safeOperations_1.safeSplit)('hello,world', ',')).toEqual(['hello', 'world']);
        });
    });
    describe('safeLength', () => {
        test('should return 0 for null/undefined', () => {
            expect((0, safeOperations_1.safeLength)(null)).toBe(0);
            expect((0, safeOperations_1.safeLength)(undefined)).toBe(0);
        });
        test('should return 0 for non-objects', () => {
            expect((0, safeOperations_1.safeLength)('string')).toBe(0);
            expect((0, safeOperations_1.safeLength)(123)).toBe(0);
        });
        test('should return length for arrays', () => {
            expect((0, safeOperations_1.safeLength)([1, 2, 3])).toBe(3);
            expect((0, safeOperations_1.safeLength)([])).toBe(0);
        });
    });
    describe('safeJsonParse', () => {
        test('should return default for invalid JSON', () => {
            expect((0, safeOperations_1.safeJsonParse)('invalid json', 'default')).toBe('default');
            expect((0, safeOperations_1.safeJsonParse)('', 'default')).toBe('default');
            expect((0, safeOperations_1.safeJsonParse)(null, 'default')).toBe('default');
        });
        test('should parse valid JSON', () => {
            expect((0, safeOperations_1.safeJsonParse)('{"key": "value"}', {})).toEqual({ key: 'value' });
            expect((0, safeOperations_1.safeJsonParse)('[1,2,3]', [])).toEqual([1, 2, 3]);
        });
        test('should handle null values correctly', () => {
            expect((0, safeOperations_1.safeJsonParse)('null', 'default')).toBe('default');
        });
    });
    describe('safeGet', () => {
        test('should return default for null/undefined object', () => {
            expect((0, safeOperations_1.safeGet)(null, 'path', 'default')).toBe('default');
            expect((0, safeOperations_1.safeGet)(undefined, 'path', 'default')).toBe('default');
        });
        test('should return default for non-existent path', () => {
            const obj = { a: { b: 'value' } };
            expect((0, safeOperations_1.safeGet)(obj, 'a.c', 'default')).toBe('default');
            expect((0, safeOperations_1.safeGet)(obj, 'x.y.z', 'default')).toBe('default');
        });
        test('should return correct value for valid path', () => {
            const obj = { a: { b: { c: 'found' } } };
            expect((0, safeOperations_1.safeGet)(obj, 'a.b.c', 'default')).toBe('found');
            expect((0, safeOperations_1.safeGet)(obj, 'a.b', 'default')).toEqual({ c: 'found' });
        });
    });
    describe('safeLimitArray', () => {
        test('should return empty array for null/undefined', () => {
            expect((0, safeOperations_1.safeLimitArray)(null, 5)).toEqual([]);
            expect((0, safeOperations_1.safeLimitArray)(undefined, 5)).toEqual([]);
        });
        test('should return original array if within limit', () => {
            const arr = [1, 2, 3];
            expect((0, safeOperations_1.safeLimitArray)(arr, 5)).toEqual([1, 2, 3]);
        });
        test('should limit array to max size from end', () => {
            const arr = [1, 2, 3, 4, 5, 6];
            expect((0, safeOperations_1.safeLimitArray)(arr, 3)).toEqual([4, 5, 6]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,