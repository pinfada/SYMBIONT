{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/__tests__/safeOperations.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/__tests__/safeOperations.test.ts"],"sourcesContent":["// Tests unitaires pour les opérations sécurisées\r\nimport {\r\n  safeAverage,\r\n  safeRatio,\r\n  safeGetClasses,\r\n  safeSplit,\r\n  safeLength,\r\n  safeJsonParse,\r\n  safeGet,\r\n  safeLimitArray\r\n} from '../safeOperations';\r\n\r\n// Mock DOM environment for tests\r\nconst mockElement = (className?: string) => ({\r\n  className,\r\n  tagName: 'DIV'\r\n} as Element);\r\n\r\ndescribe('SafeOperations Tests', () => {\r\n  \r\n  describe('safeAverage', () => {\r\n    test('should return 0 for empty array', () => {\r\n      expect(safeAverage([])).toBe(0);\r\n    });\r\n    \r\n    test('should return 0 for null/undefined', () => {\r\n      expect(safeAverage(null as any)).toBe(0);\r\n      expect(safeAverage(undefined as any)).toBe(0);\r\n    });\r\n    \r\n    test('should calculate correct average', () => {\r\n      expect(safeAverage([1, 2, 3, 4, 5])).toBe(3);\r\n      expect(safeAverage([10, 20])).toBe(15);\r\n    });\r\n  });\r\n\r\n  describe('safeRatio', () => {\r\n    test('should return 0 when denominator is 0', () => {\r\n      expect(safeRatio(10, 0)).toBe(0);\r\n    });\r\n    \r\n    test('should calculate correct ratio', () => {\r\n      expect(safeRatio(10, 2)).toBe(5);\r\n      expect(safeRatio(0, 5)).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('safeGetClasses', () => {\r\n    test('should return empty array for null/undefined', () => {\r\n      expect(safeGetClasses(null)).toEqual([]);\r\n      expect(safeGetClasses(undefined)).toEqual([]);\r\n    });\r\n    \r\n    test('should return empty array for element without className', () => {\r\n      const element = mockElement();\r\n      expect(safeGetClasses(element)).toEqual([]);\r\n    });\r\n    \r\n    test('should split and filter classes correctly', () => {\r\n      const element = mockElement('class1 class2  class3 ');\r\n      expect(safeGetClasses(element)).toEqual(['class1', 'class2', 'class3']);\r\n    });\r\n    \r\n    test('should handle non-string className', () => {\r\n      const element = { className: 123 } as any;\r\n      expect(safeGetClasses(element)).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('safeSplit', () => {\r\n    test('should return empty array for non-string input', () => {\r\n      expect(safeSplit(null, ' ')).toEqual([]);\r\n      expect(safeSplit(undefined, ' ')).toEqual([]);\r\n      expect(safeSplit(123, ' ')).toEqual([]);\r\n    });\r\n    \r\n    test('should split string correctly', () => {\r\n      expect(safeSplit('a b c', ' ')).toEqual(['a', 'b', 'c']);\r\n      expect(safeSplit('hello,world', ',')).toEqual(['hello', 'world']);\r\n    });\r\n  });\r\n\r\n  describe('safeLength', () => {\r\n    test('should return 0 for null/undefined', () => {\r\n      expect(safeLength(null)).toBe(0);\r\n      expect(safeLength(undefined)).toBe(0);\r\n    });\r\n    \r\n    test('should return 0 for non-objects', () => {\r\n      expect(safeLength('string')).toBe(0);\r\n      expect(safeLength(123)).toBe(0);\r\n    });\r\n    \r\n    test('should return length for arrays', () => {\r\n      expect(safeLength([1, 2, 3])).toBe(3);\r\n      expect(safeLength([])).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('safeJsonParse', () => {\r\n    test('should return default for invalid JSON', () => {\r\n      expect(safeJsonParse('invalid json', 'default')).toBe('default');\r\n      expect(safeJsonParse('', 'default')).toBe('default');\r\n      expect(safeJsonParse(null as any, 'default')).toBe('default');\r\n    });\r\n    \r\n    test('should parse valid JSON', () => {\r\n      expect(safeJsonParse('{\"key\": \"value\"}', {})).toEqual({ key: 'value' });\r\n      expect(safeJsonParse('[1,2,3]', [])).toEqual([1, 2, 3]);\r\n    });\r\n    \r\n    test('should handle null values correctly', () => {\r\n      expect(safeJsonParse('null', 'default')).toBe('default');\r\n    });\r\n  });\r\n\r\n  describe('safeGet', () => {\r\n    test('should return default for null/undefined object', () => {\r\n      expect(safeGet(null, 'path', 'default')).toBe('default');\r\n      expect(safeGet(undefined, 'path', 'default')).toBe('default');\r\n    });\r\n    \r\n    test('should return default for non-existent path', () => {\r\n      const obj = { a: { b: 'value' } };\r\n      expect(safeGet(obj, 'a.c', 'default')).toBe('default');\r\n      expect(safeGet(obj, 'x.y.z', 'default')).toBe('default');\r\n    });\r\n    \r\n    test('should return correct value for valid path', () => {\r\n      const obj = { a: { b: { c: 'found' } } };\r\n      expect(safeGet(obj, 'a.b.c', 'default')).toBe('found');\r\n      expect(safeGet(obj, 'a.b', 'default')).toEqual({ c: 'found' });\r\n    });\r\n  });\r\n\r\n  describe('safeLimitArray', () => {\r\n    test('should return empty array for null/undefined', () => {\r\n      expect(safeLimitArray(null as any, 5)).toEqual([]);\r\n      expect(safeLimitArray(undefined as any, 5)).toEqual([]);\r\n    });\r\n    \r\n    test('should return original array if within limit', () => {\r\n      const arr = [1, 2, 3];\r\n      expect(safeLimitArray(arr, 5)).toEqual([1, 2, 3]);\r\n    });\r\n    \r\n    test('should limit array to max size from end', () => {\r\n      const arr = [1, 2, 3, 4, 5, 6];\r\n      expect(safeLimitArray(arr, 3)).toEqual([4, 5, 6]);\r\n    });\r\n  });\r\n}); "],"version":3}