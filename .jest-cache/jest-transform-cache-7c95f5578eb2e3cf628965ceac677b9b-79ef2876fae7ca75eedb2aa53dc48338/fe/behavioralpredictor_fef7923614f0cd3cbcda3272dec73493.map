{"version":3,"names":["cov_fw2m078ty","actualCoverage","s","secureLogger_1","require","BehavioralPredictor","constructor","f","history","model","train","features","label","push","buildModel","SecureLogger","info","predict","b","key","JSON","stringify","pred","evaluate","correct","ex","accuracy","length","toFixed","counts","Object","entries","sort","a","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/ml/behavioral-predictor.ts"],"sourcesContent":["import { SecureLogger } from '@shared/utils/secureLogger';\n// ml/behavioral-predictor.ts\r\n// Prédiction comportementale par apprentissage automatique (Phase 4)\r\n\r\nexport class BehavioralPredictor {\r\n  private history: { features: any, label: any }[] = []\r\n  private model: any = null // Simulation d'un modèle ML\r\n\r\n  train(features: any, label: any) {\r\n    this.history.push({ features, label })\r\n    // Simulation : le \"modèle\" est la moyenne des labels pour chaque feature\r\n    this.model = this.buildModel()\r\n    SecureLogger.info('[ML] Entraînement sur un nouvel exemple')\r\n  }\r\n\r\n  predict(features: any): any {\r\n    if (!this.model) return null\r\n    // Simulation : retourne la prédiction la plus fréquente pour des features similaires\r\n    const key = JSON.stringify(features)\r\n    const pred = this.model[key] || null\r\n    SecureLogger.info('[ML] Prédiction pour', features, '=>', pred)\r\n    return pred\r\n  }\r\n\r\n  evaluate(): number {\r\n    // Simulation : précision = % de labels retrouvés dans l'historique\r\n    if (!this.model) return 0\r\n    let correct = 0\r\n    for (const ex of this.history) {\r\n      const key = JSON.stringify(ex.features)\r\n      if (this.model[key] === ex.label) correct++\r\n    }\r\n    const accuracy = correct / (this.history.length || 1)\r\n    SecureLogger.info(`[ML] Précision du modèle : ${(accuracy * 100).toFixed(1)}%`)\r\n    return accuracy\r\n  }\r\n\r\n  private buildModel() {\r\n    // Simulation : dictionnaire feature->label le plus fréquent\r\n    const counts: Record<string, Record<string, number>> = {}\r\n    for (const ex of this.history) {\r\n      const key = JSON.stringify(ex.features)\r\n      if (!counts[key]) counts[key] = {}\r\n      counts[key][ex.label] = (counts[key][ex.label] || 0) + 1\r\n    }\r\n    const model: Record<string, string> = {}\r\n    for (const key in counts) {\r\n      model[key] = Object.entries(counts[key]).sort((a, b) => b[1] - a[1])[0][0]\r\n    }\r\n    return model\r\n  }\r\n} "],"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","ignoreList":[]}