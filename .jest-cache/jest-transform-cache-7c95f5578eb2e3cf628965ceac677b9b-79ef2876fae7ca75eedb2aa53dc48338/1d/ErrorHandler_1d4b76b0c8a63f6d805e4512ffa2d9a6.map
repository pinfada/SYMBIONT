{"version":3,"names":["cov_ifc6jkijf","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","secureLogger_1","require","ErrorHandler","constructor","errorQueue","maxQueueSize","logLevel","metrics","errorCount","lastErrorTime","errorsByComponent","Map","errorsByMethod","recoveryAttempts","recoverySuccesses","getInstance","instance","setLogLevel","level","logError","context","updateMetrics","addToQueue","outputError","logSimpleError","component","method","error","message","Error","String","errorContext","timestamp","Date","now","severity","details","originalError","stack","console","recordError","validateRequired","value","fieldName","errors","push","result","isValid","length","warnings","validateType","expectedType","constraints","required","actualType","min","max","Number","isFinite","pattern","test","actualValue","withRetry","operation","strategy","lastError","attempt","maxRetries","_error","shouldRetry","delay","backoffMs","fallbackValue","safeExecute","safeExecuteAsync","getMetrics","getRecentErrors","maxCount","slice","reset","componentCount","get","set","methodKey","methodCount","shouldLog","toISOString","toUpperCase","logger","warn","info","debug","levels","currentLevelIndex","indexOf","messageLevelIndex","ms","Promise","resolve","setTimeout","exports","errorHandler"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/utils/ErrorHandler.ts"],"sourcesContent":["// Système de gestion d'erreurs centralisé pour SYMBIONT\r\n\r\nimport { ErrorContext, ValidationResult } from '../../types/core';\r\nimport { logger } from '@shared/utils/secureLogger';\r\n\r\nexport type LogLevel = 'debug' | 'info' | 'warning' | 'error' | 'critical';\r\n\r\nexport interface ErrorMetrics {\r\n  errorCount: number;\r\n  lastErrorTime: number;\r\n  errorsByComponent: Map<string, number>;\r\n  errorsByMethod: Map<string, number>;\r\n  recoveryAttempts: number;\r\n  recoverySuccesses: number;\r\n}\r\n\r\nexport interface ErrorRecoveryStrategy {\r\n  maxRetries: number;\r\n  backoffMs: number;\r\n  fallbackValue?: unknown;\r\n  shouldRetry: (error: Error, attempt: number) => boolean;\r\n}\r\n\r\nexport class ErrorHandler {\r\n  private static instance: ErrorHandler | null = null;\r\n  private metrics: ErrorMetrics;\r\n  private errorQueue: ErrorContext[] = [];\r\n  private maxQueueSize = 1000;\r\n  private logLevel: LogLevel = 'warning';\r\n\r\n  private constructor() {\r\n    this.metrics = {\r\n      errorCount: 0,\r\n      lastErrorTime: 0,\r\n      errorsByComponent: new Map(),\r\n      errorsByMethod: new Map(),\r\n      recoveryAttempts: 0,\r\n      recoverySuccesses: 0\r\n    };\r\n  }\r\n\r\n  public static getInstance(): ErrorHandler {\r\n    if (!ErrorHandler.instance) {\r\n      ErrorHandler.instance = new ErrorHandler();\r\n    }\r\n    return ErrorHandler.instance;\r\n  }\r\n\r\n  /**\r\n   * Configure le niveau de log\r\n   */\r\n  public setLogLevel(level: LogLevel): void {\r\n    this.logLevel = level;\r\n  }\r\n\r\n  /**\r\n   * Enregistre une erreur avec contexte\r\n   */\r\n  public logError(context: ErrorContext): void {\r\n    this.updateMetrics(context);\r\n    this.addToQueue(context);\r\n    this.outputError(context);\r\n  }\r\n\r\n  /**\r\n   * Enregistre une erreur avec informations minimales\r\n   */\r\n  public logSimpleError(\r\n    component: string,\r\n    method: string,\r\n    error: Error | unknown,\r\n    level: 'debug' | 'info' | 'warning' | 'error' = 'error',\r\n    context?: any\r\n  ): void {\r\n    const message = error instanceof Error ? error.message : String(error);\r\n    \r\n    const errorContext: ErrorContext = {\r\n      component,\r\n      method,\r\n      timestamp: Date.now(),\r\n      severity: level,\r\n      details: {\r\n        message,\r\n        context,\r\n        originalError: error instanceof Error ? {\r\n          name: error.name,\r\n          stack: error.stack\r\n        } : undefined\r\n      }\r\n    };\r\n\r\n    // Simple console logging\r\n    console[level === 'warning' ? 'warn' : level === 'debug' ? 'debug' : level === 'info' ? 'info' : 'error'](\r\n      `[${component}][${method}] ${message}`,\r\n      context || ''\r\n    );\r\n\r\n    // Store for metrics\r\n    this.recordError(errorContext);\r\n  }\r\n\r\n  /**\r\n   * Validation avec retour structuré\r\n   */\r\n  public validateRequired<T>(\r\n    value: T | null | undefined, \r\n    fieldName: string,\r\n    component: string,\r\n    method: string\r\n  ): ValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    if (value === null || value === undefined) {\r\n      errors.push(`${fieldName} is required`);\r\n    }\r\n\r\n    const result: ValidationResult = {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings: [],\r\n      context: {\r\n        component,\r\n        method,\r\n        timestamp: Date.now(),\r\n        severity: errors.length > 0 ? 'error' : 'info'\r\n      }\r\n    };\r\n\r\n    if (!result.isValid) {\r\n      this.logError(result.context!);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Valide le type et les contraintes d'une valeur\r\n   */\r\n  // @ts-expect-error Paramètre de type réservé pour usage futur\r\n  public validateType<T>(\r\n    value: unknown,\r\n    expectedType: string,\r\n    constraints: {\r\n      min?: number;\r\n      max?: number;\r\n      required?: boolean;\r\n      pattern?: RegExp;\r\n    } = {},\r\n    fieldName: string,\r\n    component: string,\r\n    method: string\r\n  ): ValidationResult {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    // Check required\r\n    if (constraints.required && (value === null || value === undefined)) {\r\n      errors.push(`${fieldName} is required`);\r\n    }\r\n\r\n    // Check type\r\n    if (value !== null && value !== undefined) {\r\n      const actualType = typeof value;\r\n      if (actualType !== expectedType) {\r\n        errors.push(`${fieldName} must be of type ${expectedType}, got ${actualType}`);\r\n      }\r\n\r\n      // Numeric constraints\r\n      if (expectedType === 'number' && typeof value === 'number') {\r\n        if (constraints.min !== undefined && value < constraints.min) {\r\n          errors.push(`${fieldName} must be >= ${constraints.min}`);\r\n        }\r\n        if (constraints.max !== undefined && value > constraints.max) {\r\n          errors.push(`${fieldName} must be <= ${constraints.max}`);\r\n        }\r\n        if (!Number.isFinite(value)) {\r\n          errors.push(`${fieldName} must be a finite number`);\r\n        }\r\n      }\r\n\r\n      // String constraints (longueur et pattern)\r\n      if (expectedType === 'string' && typeof value === 'string') {\r\n        if (constraints.min !== undefined && value.length < constraints.min) {\r\n          errors.push(`${fieldName} must be at least ${constraints.min} characters long`);\r\n        }\r\n        if (constraints.max !== undefined && value.length > constraints.max) {\r\n          errors.push(`${fieldName} must be at most ${constraints.max} characters long`);\r\n        }\r\n        if (constraints.pattern && !constraints.pattern.test(value)) {\r\n          errors.push(`${fieldName} does not match required pattern`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const result: ValidationResult = {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      context: {\r\n        component,\r\n        method,\r\n        timestamp: Date.now(),\r\n        severity: errors.length > 0 ? 'error' : 'warning',\r\n        details: { fieldName, expectedType, actualValue: value }\r\n      }\r\n    };\r\n\r\n    if (!result.isValid) {\r\n      this.logError(result.context!);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Exécute une opération avec retry automatique\r\n   */\r\n  public async withRetry<T>(\r\n    operation: () => Promise<T>,\r\n    strategy: ErrorRecoveryStrategy,\r\n    context: { component: string; method: string }\r\n  ): Promise<T> {\r\n    let lastError: Error | null = null;\r\n    \r\n    for (let attempt = 1; attempt <= strategy.maxRetries; attempt++) {\r\n      this.metrics.recoveryAttempts++;\r\n      \r\n      try {\r\n        const result = await operation();\r\n        if (attempt > 1) {\r\n          this.metrics.recoverySuccesses++;\r\n          this.logSimpleError(\r\n            context.component, \r\n            context.method, \r\n            `Recovery successful after ${attempt} attempts`, \r\n            'info'\r\n          );\r\n        }\r\n        return result;\r\n      } catch (_error) {\r\n        lastError = _error instanceof Error ? _error : new Error(String(_error));\r\n        \r\n        this.logSimpleError(\r\n          context.component, \r\n          context.method, \r\n          `Attempt ${attempt}/${strategy.maxRetries} failed: ${lastError.message}`, \r\n          'warning'\r\n        );\r\n\r\n        if (attempt < strategy.maxRetries && strategy.shouldRetry(lastError, attempt)) {\r\n          await this.delay(strategy.backoffMs * attempt);\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // All retries failed\r\n    this.logSimpleError(\r\n      context.component, \r\n      context.method, \r\n      `All ${strategy.maxRetries} retry attempts failed. Last error: ${lastError?.message}`, \r\n      'error'\r\n    );\r\n\r\n    if (strategy.fallbackValue !== undefined) {\r\n      return strategy.fallbackValue as T;\r\n    }\r\n\r\n    throw lastError;\r\n  }\r\n\r\n  /**\r\n   * Wrapper safe pour les opérations qui peuvent lever des exceptions\r\n   */\r\n  public safeExecute<T>(\r\n    operation: () => T,\r\n    fallbackValue: T,\r\n    context: { component: string; method: string }\r\n  ): T {\r\n    try {\r\n      return operation();\r\n    } catch (_error) {\r\n      this.logSimpleError(context.component, context.method, _error, 'error');\r\n      return fallbackValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrapper safe pour les opérations async\r\n   */\r\n  public async safeExecuteAsync<T>(\r\n    operation: () => Promise<T>,\r\n    fallbackValue: T,\r\n    context: { component: string; method: string }\r\n  ): Promise<T> {\r\n    try {\r\n      return await operation();\r\n    } catch (_error) {\r\n      this.logSimpleError(context.component, context.method, _error, 'error');\r\n      return fallbackValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les métriques d'erreurs\r\n   */\r\n  public getMetrics(): ErrorMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * Récupère les erreurs récentes\r\n   */\r\n  public getRecentErrors(maxCount: number = 50): ErrorContext[] {\r\n    return this.errorQueue.slice(-maxCount);\r\n  }\r\n\r\n  /**\r\n   * Nettoie les métriques et la queue\r\n   */\r\n  public reset(): void {\r\n    this.metrics = {\r\n      errorCount: 0,\r\n      lastErrorTime: 0,\r\n      errorsByComponent: new Map(),\r\n      errorsByMethod: new Map(),\r\n      recoveryAttempts: 0,\r\n      recoverySuccesses: 0\r\n    };\r\n    this.errorQueue = [];\r\n  }\r\n\r\n  private updateMetrics(context: ErrorContext): void {\r\n    this.metrics.errorCount++;\r\n    this.metrics.lastErrorTime = context.timestamp;\r\n    \r\n    // Update component metrics\r\n    const componentCount = this.metrics.errorsByComponent.get(context.component) || 0;\r\n    this.metrics.errorsByComponent.set(context.component, componentCount + 1);\r\n    \r\n    // Update method metrics\r\n    const methodKey = `${context.component}.${context.method}`;\r\n    const methodCount = this.metrics.errorsByMethod.get(methodKey) || 0;\r\n    this.metrics.errorsByMethod.set(methodKey, methodCount + 1);\r\n  }\r\n\r\n  private addToQueue(context: ErrorContext): void {\r\n    this.errorQueue.push(context);\r\n    \r\n    // Maintain queue size\r\n    if (this.errorQueue.length > this.maxQueueSize) {\r\n      this.errorQueue = this.errorQueue.slice(-this.maxQueueSize);\r\n    }\r\n  }\r\n\r\n  private outputError(context: ErrorContext): void {\r\n    if (!this.shouldLog(context.severity)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = new Date(context.timestamp).toISOString();\r\n    const message = `[${timestamp}] ${context.severity.toUpperCase()} ${context.component}.${context.method}`;\r\n    \r\n    switch (context.severity) {\r\n      case 'critical':\r\n      case 'error':\r\n        logger.error(message, context.details);\r\n        break;\r\n      case 'warning':\r\n        logger.warn(message, context.details);\r\n        break;\r\n      case 'info':\r\n        console.info(message, context.details);\r\n        break;\r\n      case 'debug':\r\n        logger.debug(message, context.details);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private shouldLog(severity: LogLevel): boolean {\r\n    const levels: LogLevel[] = ['debug', 'info', 'warning', 'error', 'critical'];\r\n    const currentLevelIndex = levels.indexOf(this.logLevel);\r\n    const messageLevelIndex = levels.indexOf(severity);\r\n    return messageLevelIndex >= currentLevelIndex;\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private recordError(context: ErrorContext): void {\r\n    this.updateMetrics(context);\r\n    this.addToQueue(context);\r\n  }\r\n}\r\n\r\n// Instance globale pour utilisation facile\r\nexport const errorHandler = ErrorHandler.getInstance(); "],"mappings":"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","ignoreList":[]}