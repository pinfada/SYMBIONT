{"version":3,"names":["cov_14aqfnksqn","actualCoverage","s","exports","generateUUID","isCryptoUUIDAvailable","generateSecureUUID","secureRandom_1","require","secureLogger_1","f","b","crypto","randomUUID","error","logger","warn","SecureRandom","uuid"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/uuid.ts"],"sourcesContent":["import { SecureRandom } from './secureRandom';\r\nimport { logger } from './secureLogger';\r\n\r\n/**\r\n * Génère un UUID v4 avec fallback pour les environnements sans crypto.randomUUID\r\n */\r\nexport function generateUUID(): string {\r\n  // Essayer d'abord crypto.randomUUID si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n    try {\r\n      return crypto.randomUUID();\r\n    } catch (error) {\r\n      logger.warn('crypto.randomUUID failed, using fallback', { error });\r\n    }\r\n  }\r\n\r\n  // Utilise notre générateur sécurisé au lieu de Math.random()\r\n  return SecureRandom.uuid();\r\n}\r\n\r\n/**\r\n * Vérifie si crypto.randomUUID est disponible dans l'environnement actuel\r\n */\r\nexport function isCryptoUUIDAvailable(): boolean {\r\n  return typeof crypto !== 'undefined' && \r\n         typeof crypto.randomUUID === 'function';\r\n}\r\n\r\n/**\r\n * Génère un UUID v4 cryptographiquement sécurisé si possible\r\n * Utilise le système SecureRandom comme fallback sécurisé\r\n */\r\nexport function generateSecureUUID(): string {\r\n  if (isCryptoUUIDAvailable()) {\r\n    return crypto.randomUUID();\r\n  }\r\n\r\n  // Utilise notre générateur sécurisé\r\n  return SecureRandom.uuid();\r\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;AALLC,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAYC;AAAAJ,cAAA,GAAAE,CAAA;AAKDC,OAAA,CAAAE,qBAAA,GAAAA,qBAAA;AAGC;AAAAL,cAAA,GAAAE,CAAA;AAMDC,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAhCA,MAAAC,cAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAM,OAAA;AACA,MAAAC,cAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAAM,OAAA;AAEA;;;AAGA,SAAgBJ,YAAYA,CAAA;EAAA;EAAAJ,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAE,CAAA;EAC1B;EACA;EAAI;EAAA,CAAAF,cAAA,GAAAW,CAAA,iBAAOC,MAAM,KAAK,WAAW;EAAA;EAAA,CAAAZ,cAAA,GAAAW,CAAA,UAAIC,MAAM,CAACC,UAAU,GAAE;IAAA;IAAAb,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACtD,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,OAAOU,MAAM,CAACC,UAAU,EAAE;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAd,cAAA,GAAAE,CAAA;MACdO,cAAA,CAAAM,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAE;QAAEF;MAAK,CAAE,CAAC;IACpE;EACF,CAAC;EAAA;EAAA;IAAAd,cAAA,GAAAW,CAAA;EAAA;EAED;EAAAX,cAAA,GAAAE,CAAA;EACA,OAAOK,cAAA,CAAAU,YAAY,CAACC,IAAI,EAAE;AAC5B;AAEA;;;AAGA,SAAgBb,qBAAqBA,CAAA;EAAA;EAAAL,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAE,CAAA;EACnC,OAAO,2BAAAF,cAAA,GAAAW,CAAA,iBAAOC,MAAM,KAAK,WAAW;EAAA;EAAA,CAAAZ,cAAA,GAAAW,CAAA,UAC7B,OAAOC,MAAM,CAACC,UAAU,KAAK,UAAU;AAChD;AAEA;;;;AAIA,SAAgBP,kBAAkBA,CAAA;EAAA;EAAAN,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAE,CAAA;EAChC,IAAIG,qBAAqB,EAAE,EAAE;IAAA;IAAAL,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC3B,OAAOU,MAAM,CAACC,UAAU,EAAE;EAC5B,CAAC;EAAA;EAAA;IAAAb,cAAA,GAAAW,CAAA;EAAA;EAED;EAAAX,cAAA,GAAAE,CAAA;EACA,OAAOK,cAAA,CAAAU,YAAY,CAACC,IAAI,EAAE;AAC5B","ignoreList":[]}