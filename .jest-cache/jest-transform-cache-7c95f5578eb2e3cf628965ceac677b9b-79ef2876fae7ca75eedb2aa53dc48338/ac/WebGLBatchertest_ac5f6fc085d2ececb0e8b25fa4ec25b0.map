{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/WebGLBatcher.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/WebGLBatcher.test.ts"],"sourcesContent":["import { WebGLBatcher, WebGLDrawCall } from '../src/core/utils/WebGLBatcher';\r\n\r\n// Mock WebGL context\r\nconst createMockWebGLContext = (): WebGLRenderingContext => {\r\n  const buffers: WebGLBuffer[] = [];\r\n  let bufferIndex = 0;\r\n\r\n  return {\r\n    TRIANGLES: 4,\r\n    LINES: 1,\r\n    POINTS: 0,\r\n    ARRAY_BUFFER: 34962,\r\n    ELEMENT_ARRAY_BUFFER: 34963,\r\n    DYNAMIC_DRAW: 35048,\r\n    FLOAT: 5126,\r\n    UNSIGNED_SHORT: 5123,\r\n    \r\n    createBuffer: jest.fn(() => {\r\n      const buffer = { id: bufferIndex++ } as WebGLBuffer;\r\n      buffers.push(buffer);\r\n      return buffer;\r\n    }),\r\n    \r\n    deleteBuffer: jest.fn(),\r\n    bindBuffer: jest.fn(),\r\n    bufferData: jest.fn(),\r\n    vertexAttribPointer: jest.fn(),\r\n    enableVertexAttribArray: jest.fn(),\r\n    drawArrays: jest.fn(),\r\n    drawElements: jest.fn(),\r\n  } as unknown as WebGLRenderingContext;\r\n};\r\n\r\ndescribe('WebGLBatcher', () => {\r\n  let gl: WebGLRenderingContext;\r\n  let batcher: WebGLBatcher;\r\n\r\n  beforeEach(() => {\r\n    gl = createMockWebGLContext();\r\n    batcher = new WebGLBatcher(gl, {\r\n      maxBatchSize: 3,\r\n      maxVertices: 100,\r\n      frameTimeoutMs: 16.67\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (batcher) {\r\n      batcher.dispose();\r\n    }\r\n  });\r\n\r\n  it('should initialize WebGL buffers correctly', () => {\r\n    expect(gl.createBuffer).toHaveBeenCalledTimes(2); // Vertex and index buffers\r\n  });\r\n\r\n  it('should add draw calls and return unique IDs', () => {\r\n    const drawCall = {\r\n      type: 'triangle' as const,\r\n      vertices: new Float32Array([0, 0, 0, 1, 0, 0, 0, 1, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal' as const\r\n    };\r\n\r\n    const id1 = batcher.addDrawCall(drawCall);\r\n    const id2 = batcher.addDrawCall(drawCall);\r\n\r\n    expect(id1).toBeDefined();\r\n    expect(id2).toBeDefined();\r\n    expect(id1).not.toBe(id2);\r\n  });\r\n\r\n  it('should batch draw calls of the same type', async () => {\r\n    const vertices1 = new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]);\r\n    const vertices2 = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0]);\r\n\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: vertices1,\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: vertices2,\r\n      uniforms: { u_color: 0.5 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    // Force flush to trigger batching\r\n    batcher.flush();\r\n\r\n    expect(gl.bufferData).toHaveBeenCalled();\r\n    expect(gl.drawArrays).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should handle high priority draw calls immediately', async () => {\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'low'\r\n    });\r\n\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([1, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'high' // Should trigger immediate rendering\r\n    });\r\n\r\n    // Small delay to allow async processing\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n\r\n    expect(gl.drawArrays).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should render when max batch size is reached', () => {\r\n    // Add draw calls up to max batch size\r\n    for (let i = 0; i < 3; i++) {\r\n      batcher.addDrawCall({\r\n        type: 'triangle',\r\n        vertices: new Float32Array([i, 0, 0, 0, 0, 1, 0, 0]),\r\n        uniforms: { u_color: 1.0 },\r\n        priority: 'normal'\r\n      });\r\n    }\r\n\r\n    // Should have triggered immediate rendering\r\n    expect(gl.drawArrays).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should handle indexed drawing correctly', () => {\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0,\r\n                                  1, 0, 0, 0, 0, 1, 0, 0,\r\n                                  0, 1, 0, 0, 0, 1, 0, 0]),\r\n      indices: new Uint16Array([0, 1, 2]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.flush();\r\n\r\n    expect(gl.bindBuffer).toHaveBeenCalledWith(gl.ELEMENT_ARRAY_BUFFER, expect.anything());\r\n    expect(gl.drawElements).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should track statistics correctly', () => {\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([1, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.flush();\r\n\r\n    const stats = batcher.getStats();\r\n    expect(stats.totalDrawCalls).toBe(2);\r\n    expect(stats.totalBatches).toBeGreaterThan(0);\r\n    expect(stats.compressionRatio).toBeGreaterThan(1);\r\n  });\r\n\r\n  it('should handle different primitive types separately', () => {\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.addDrawCall({\r\n      type: 'line',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.flush();\r\n\r\n    // Should have made separate draw calls for different primitive types\r\n    expect(gl.drawArrays).toHaveBeenCalledTimes(2);\r\n  });\r\n\r\n  it('should dispose resources correctly', () => {\r\n    batcher.dispose();\r\n\r\n    expect(gl.deleteBuffer).toHaveBeenCalledTimes(2);\r\n  });\r\n\r\n  it('should handle empty batches gracefully', () => {\r\n    // Try to flush with no draw calls\r\n    expect(() => batcher.flush()).not.toThrow();\r\n  });\r\n\r\n  it('should merge uniforms correctly when batching', () => {\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0, u_intensity: 0.5 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([1, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 0.5, u_brightness: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    batcher.flush();\r\n\r\n    const stats = batcher.getStats();\r\n    expect(stats.totalBatches).toBe(1); // Should be batched together\r\n  });\r\n\r\n  it('should respect frame timeout for rendering', async () => {\r\n    const fastBatcher = new WebGLBatcher(gl, {\r\n      frameTimeoutMs: 10 // Very short timeout\r\n    });\r\n\r\n    fastBatcher.addDrawCall({\r\n      type: 'triangle',\r\n      vertices: new Float32Array([0, 0, 0, 0, 0, 1, 0, 0]),\r\n      uniforms: { u_color: 1.0 },\r\n      priority: 'normal'\r\n    });\r\n\r\n    // Should render within timeout\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n\r\n    const stats = fastBatcher.getStats();\r\n    expect(stats.totalBatches).toBeGreaterThan(0);\r\n\r\n    fastBatcher.dispose();\r\n  });\r\n}); "],"version":3}