{"version":3,"names":["cov_1xcirmc3k6","actualCoverage","s","HebbieanLearningSystem","constructor","learningRate","b","inactivityThreshold","f","connections","Map","activationHistory","decayRate","weights","activations","lastActive","strengthenConnection","preId","postId","preAct","postAct","key","currentWeight","get","deltaWeight","set","has","Date","now","weakenUnusedConnections","weight","split","lastActiveTime","Math","max","setActivation","nodeId","value","detectEmergentPatterns","patterns","push","activeNodes","Array","from","entries","filter","_","activation","map","length","slice","join","getWeight","toJSON","updateWeights","behaviorData","strengthened","weakened","newPatterns","pattern","patternToActivation","neuronA","activationA","neuronB","activationB","getConnectionWeight","newWeight","setConnectionWeight","patternSignature","generatePatternSignature","hasSeenPattern","recordPattern","confidence","calculateConfidence","strengthenedConnections","weakenedConnections","min","timeSpent","interactions","scrollDepth","domain","extractDomain","url","hour","timestamp","getHours","connectionsA","timeCategory","categorizeTime","interactionLevel","categorizeInteractions","signature","domains","Set","p","avgTimeSpent","reduce","sum","timeVariance","pow","domainDiversity","size","timeConsistency","URL","hostname","replace","getStrongestConnections","limit","allConnections","to","sort","a","reset","clear","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/neural/HebbieanLearningSystem.ts"],"sourcesContent":["import { BehaviorPattern } from '../shared/types/organism';\r\n\r\nexport interface LearningResult {\r\n  strengthenedConnections: number;\r\n  weakenedConnections: number;\r\n  newPatterns: string[];\r\n  confidence: number;\r\n}\r\n\r\nexport class HebbieanLearningSystem {\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activationHistory: Map<string, number[]> = new Map();\r\n  private learningRate: number = 0.01;\r\n  private decayRate: number = 0.001;\r\n  \r\n  // Nouvelles propriétés pour la compatibilité avec les tests\r\n  private weights: Map<string, number> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  private lastActive: Map<string, number> = new Map();\r\n  private inactivityThreshold: number;\r\n\r\n  constructor(learningRate: number = 0.01, inactivityThreshold: number = 0.001) {\r\n    this.learningRate = learningRate;\r\n    this.decayRate = inactivityThreshold;\r\n    this.inactivityThreshold = inactivityThreshold;\r\n  }\r\n\r\n  /**\r\n   * Renforce une connexion entre deux neurones (pour compatibilité tests)\r\n   */\r\n  strengthenConnection(preId: string, postId: string, preAct: number, postAct: number): void {\r\n    const key = `${preId}->${postId}`;\r\n    const currentWeight = this.weights.get(key) || 0;\r\n    const deltaWeight = this.learningRate * preAct * postAct;\r\n    this.weights.set(key, currentWeight + deltaWeight);\r\n    \r\n    // Aussi mettre à jour dans le système principal\r\n    if (!this.connections.has(preId)) {\r\n      this.connections.set(preId, new Map());\r\n    }\r\n    this.connections.get(preId)!.set(postId, currentWeight + deltaWeight);\r\n    \r\n    this.lastActive.set(preId, Date.now());\r\n    this.lastActive.set(postId, Date.now());\r\n  }\r\n\r\n  /**\r\n   * Affaiblit les connexions inutilisées (pour compatibilité tests)\r\n   */\r\n  weakenUnusedConnections(): void {\r\n    const now = Date.now();\r\n    for (const [key, weight] of this.weights) {\r\n      const [preId] = key.split('->');\r\n      const lastActiveTime = this.lastActive.get(preId) || 0;\r\n      \r\n      if (now - lastActiveTime > this.inactivityThreshold * 1000) {\r\n        this.weights.set(key, Math.max(0, weight - this.decayRate));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Définit l'activation d'un neurone (pour compatibilité tests)\r\n   */\r\n  setActivation(nodeId: string, value: number): void {\r\n    this.activations.set(nodeId, value);\r\n    this.lastActive.set(nodeId, Date.now());\r\n  }\r\n\r\n  /**\r\n   * Détecte les patterns émergents (pour compatibilité tests)\r\n   */\r\n  detectEmergentPatterns(): string[] {\r\n    const patterns: string[] = [];\r\n    \r\n    // Analyser les connexions fortes\r\n    for (const [key, weight] of this.weights) {\r\n      if (weight > 0.5) { // Seuil pour considérer une connexion comme \"forte\"\r\n        patterns.push(`strong_connection_${key}`);\r\n      }\r\n    }\r\n    \r\n    // Analyser les clusters d'activation\r\n    const activeNodes = Array.from(this.activations.entries())\r\n      .filter(([_, activation]) => activation > 0.3)\r\n      .map(([nodeId]) => nodeId);\r\n    \r\n    if (activeNodes.length > 2) {\r\n      patterns.push(`cluster_${activeNodes.slice(0, 3).join('_')}`);\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Récupère le poids d'une connexion (pour compatibilité tests)\r\n   */\r\n  getWeight(preId: string, postId: string): number {\r\n    const key = `${preId}->${postId}`;\r\n    return this.weights.get(key) || 0;\r\n  }\r\n\r\n  /**\r\n   * Sérialise l'état du système (pour compatibilité tests)\r\n   */\r\n  toJSON(): { weights: [string, number][]; activations: [string, number][]; lastActive: [string, number][] } {\r\n    return {\r\n      weights: Array.from(this.weights.entries()),\r\n      activations: Array.from(this.activations.entries()),\r\n      lastActive: Array.from(this.lastActive.entries())\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Met à jour les poids des connexions basé sur les patterns comportementaux\r\n   */\r\n  async updateWeights(behaviorData: BehaviorPattern[]): Promise<LearningResult> {\r\n    let strengthened = 0;\r\n    let weakened = 0;\r\n    const newPatterns: string[] = [];\r\n\r\n    for (const pattern of behaviorData) {\r\n      // Convertir le pattern en activation neuronale\r\n      const activation = this.patternToActivation(pattern);\r\n      \r\n      // Appliquer la règle de Hebb : \"neurons that fire together, wire together\"\r\n      for (const [neuronA, activationA] of activation) {\r\n        for (const [neuronB, activationB] of activation) {\r\n          if (neuronA !== neuronB) {\r\n            const weight = this.getConnectionWeight(neuronA, neuronB);\r\n            const deltaWeight = this.learningRate * activationA * activationB;\r\n            \r\n            // Mettre à jour le poids\r\n            const newWeight = weight + deltaWeight - this.decayRate;\r\n            this.setConnectionWeight(neuronA, neuronB, Math.max(0, newWeight));\r\n            \r\n            if (deltaWeight > 0) strengthened++;\r\n            else if (deltaWeight < 0) weakened++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Détecter de nouveaux patterns\r\n      const patternSignature = this.generatePatternSignature(pattern);\r\n      if (!this.hasSeenPattern(patternSignature)) {\r\n        newPatterns.push(patternSignature);\r\n        this.recordPattern(patternSignature);\r\n      }\r\n    }\r\n\r\n    // Calculer la confiance basée sur la cohérence des patterns\r\n    const confidence = this.calculateConfidence(behaviorData);\r\n\r\n    return {\r\n      strengthenedConnections: strengthened,\r\n      weakenedConnections: weakened,\r\n      newPatterns,\r\n      confidence\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convertit un pattern comportemental en activation neuronale\r\n   */\r\n  private patternToActivation(pattern: BehaviorPattern): Map<string, number> {\r\n    const activation = new Map<string, number>();\r\n\r\n    // Mapper les aspects du pattern à des \"neurones\"\r\n    activation.set('time_neuron', Math.min(1, pattern.timeSpent / 60000)); // Normaliser le temps\r\n    activation.set('interaction_neuron', Math.min(1, pattern.interactions * 0.1));\r\n    activation.set('scroll_neuron', Math.min(1, pattern.scrollDepth));\r\n    \r\n    // Neurones basés sur l'URL (domaine)\r\n    const domain = this.extractDomain(pattern.url);\r\n    activation.set(`domain_${domain}`, 1);\r\n\r\n    // Neurones temporels (heure de la journée)\r\n    const hour = new Date(pattern.timestamp).getHours();\r\n    activation.set(`hour_${hour}`, 1);\r\n\r\n    return activation;\r\n  }\r\n\r\n  /**\r\n   * Récupère le poids d'une connexion\r\n   */\r\n  private getConnectionWeight(neuronA: string, neuronB: string): number {\r\n    const connectionsA = this.connections.get(neuronA);\r\n    if (!connectionsA) return 0;\r\n    return connectionsA.get(neuronB) || 0;\r\n  }\r\n\r\n  /**\r\n   * Définit le poids d'une connexion\r\n   */\r\n  private setConnectionWeight(neuronA: string, neuronB: string, weight: number): void {\r\n    if (!this.connections.has(neuronA)) {\r\n      this.connections.set(neuronA, new Map());\r\n    }\r\n    this.connections.get(neuronA)!.set(neuronB, weight);\r\n  }\r\n\r\n  /**\r\n   * Génère une signature unique pour un pattern\r\n   */\r\n  private generatePatternSignature(pattern: BehaviorPattern): string {\r\n    const domain = this.extractDomain(pattern.url);\r\n    const timeCategory = this.categorizeTime(pattern.timeSpent);\r\n    const interactionLevel = this.categorizeInteractions(pattern.interactions);\r\n    \r\n    return `${domain}_${timeCategory}_${interactionLevel}`;\r\n  }\r\n\r\n  /**\r\n   * Vérifie si un pattern a déjà été observé\r\n   */\r\n  private hasSeenPattern(signature: string): boolean {\r\n    return this.activationHistory.has(signature);\r\n  }\r\n\r\n  /**\r\n   * Enregistre un nouveau pattern\r\n   */\r\n  private recordPattern(signature: string): void {\r\n    this.activationHistory.set(signature, [Date.now()]);\r\n  }\r\n\r\n  /**\r\n   * Calcule la confiance basée sur la cohérence des patterns\r\n   */\r\n  private calculateConfidence(patterns: BehaviorPattern[]): number {\r\n    if (patterns.length === 0) return 0;\r\n\r\n    // Analyser la variabilité des patterns\r\n    const domains = new Set(patterns.map(p => this.extractDomain(p.url)));\r\n    const avgTimeSpent = patterns.reduce((sum, p) => sum + p.timeSpent, 0) / patterns.length;\r\n    const timeVariance = patterns.reduce((sum, p) => sum + Math.pow(p.timeSpent - avgTimeSpent, 2), 0) / patterns.length;\r\n\r\n    // Plus de domaines = moins de confiance dans un pattern spécifique\r\n    const domainDiversity = domains.size / patterns.length;\r\n    \r\n    // Moins de variance dans le temps = plus de confiance\r\n    const timeConsistency = 1 / (1 + timeVariance / 10000);\r\n\r\n    return Math.min(1, timeConsistency * (1 - domainDiversity * 0.5));\r\n  }\r\n\r\n  /**\r\n   * Extrait le domaine d'une URL\r\n   */\r\n  private extractDomain(url: string): string {\r\n    try {\r\n      return new URL(url).hostname.replace('www.', '');\r\n    } catch {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Catégorise le temps passé\r\n   */\r\n  private categorizeTime(timeSpent: number): string {\r\n    if (timeSpent < 5000) return 'quick';\r\n    if (timeSpent < 30000) return 'medium';\r\n    if (timeSpent < 120000) return 'long';\r\n    return 'extended';\r\n  }\r\n\r\n  /**\r\n   * Catégorise le niveau d'interaction\r\n   */\r\n  private categorizeInteractions(interactions: number): string {\r\n    if (interactions === 0) return 'passive';\r\n    if (interactions < 5) return 'low';\r\n    if (interactions < 15) return 'medium';\r\n    return 'high';\r\n  }\r\n\r\n  /**\r\n   * Obtient les connexions les plus fortes\r\n   */\r\n  getStrongestConnections(limit: number = 10): Array<{from: string, to: string, weight: number}> {\r\n    const allConnections: Array<{from: string, to: string, weight: number}> = [];\r\n    \r\n    for (const [from, connections] of this.connections) {\r\n      for (const [to, weight] of connections) {\r\n        allConnections.push({ from, to, weight });\r\n      }\r\n    }\r\n\r\n    return allConnections\r\n      .sort((a, b) => b.weight - a.weight)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Réinitialise le système d'apprentissage\r\n   */\r\n  reset(): void {\r\n    this.connections.clear();\r\n    this.activationHistory.clear();\r\n  }\r\n} "],"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","ignoreList":[]}