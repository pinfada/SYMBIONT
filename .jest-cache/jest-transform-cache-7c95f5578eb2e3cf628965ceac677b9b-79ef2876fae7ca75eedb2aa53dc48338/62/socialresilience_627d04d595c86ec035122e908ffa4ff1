f974d85f640bddbbeb3db8a0c258d91e
"use strict";

/* istanbul ignore next */
function cov_15xcvd8i8t() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts";
  var hash = "948e33bceaf206db6bbdaa9fca12b37d97779795";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "3": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 95
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 67
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 75
        }
      },
      "7": {
        start: {
          line: 12,
          column: 44
        },
        end: {
          line: 12,
          column: 74
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 92
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 94
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 110
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 84
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 91
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "17": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 119
        }
      },
      "18": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "19": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 95
        }
      },
      "20": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 22
        }
      },
      "21": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 12,
            column: 34
          }
        },
        loc: {
          start: {
            line: 12,
            column: 44
          },
          end: {
            line: 12,
            column: 74
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 37
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 23
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 31
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 33,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 33,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 38,
            column: 22
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 22
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts",
      mappings: ";;;AAAA,8BAA8B;AAC9B,uDAAuD;AACvD,+DAA4D;AAC5D,6DAAoD;AAEpD,MAAa,gBAAgB;IAI3B;QACE,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,2BAAY,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACvE,IAAI,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAC,qBAAqB,CAAC,CAAA;QAC1D,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACpE,CAAC;IAED,sBAAsB,CAAC,UAAkB;QACvC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,CAAC,CAAA;QACnF,qBAAM,CAAC,IAAI,CAAC,6CAA6C,UAAU,EAAE,CAAC,CAAA;IACxE,CAAC;IAED,oBAAoB,CAAC,UAAkB;QACrC,kEAAkE;QAClE,iDAAiD;QACjD,qBAAM,CAAC,IAAI,CAAC,6DAA6D,UAAU,EAAE,CAAC,CAAA;IACxF,CAAC;IAED,oBAAoB;QAClB,0BAA0B;QAC1B,qBAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAA;IAC9D,CAAC;IAED,oBAAoB,CAAC,OAAe;QAClC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;QACvE,qBAAM,CAAC,IAAI,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAA;IACrE,CAAC;IAEO,aAAa,CAAC,GAAQ;QAC5B,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM;YAAE,OAAM,CAAC,cAAc;QACnD,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC;YACjB,KAAK,gBAAgB;gBACnB,qDAAqD;gBACrD,qBAAM,CAAC,IAAI,CAAC,yCAAyC,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,UAAU,EAAE,CAAC,CAAA;gBACvF,MAAK;YACP,KAAK,OAAO;gBACV,qBAAM,CAAC,IAAI,CAAC,qCAAqC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;gBAC/D,MAAK;QACT,CAAC;IACH,CAAC;CACF;AA3CD,4CA2CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/social-resilience.ts"],
      sourcesContent: ["// social/social-resilience.ts\r\n// R\xE9silience sociale et backup communautaire (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\nimport { logger } from '@shared/utils/secureLogger';\n\r\nexport class SocialResilience {\r\n  private channel: BroadcastChannel\r\n  private peerId: string\r\n\r\n  constructor() {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    this.channel = new BroadcastChannel('symbiont_resilience')\r\n    this.channel.onmessage = (event) => this.handleMessage(event.data)\r\n  }\r\n\r\n  requestCommunityBackup(organismId: string) {\r\n    this.channel.postMessage({ type: 'backup_request', from: this.peerId, organismId })\r\n    logger.info(`[SocialResilience] Demande de backup pour ${organismId}`)\r\n  }\r\n\r\n  restoreFromCommunity(organismId: string) {\r\n    // \xC9coute les backups re\xE7us et restaure si l'organismId correspond\r\n    // (La logique r\xE9elle de restauration serait ici)\r\n    logger.info(`[SocialResilience] Restauration depuis la communaut\xE9 pour ${organismId}`)\r\n  }\r\n\r\n  detectMassiveFailure() {\r\n    // Simulation de d\xE9tection\r\n    logger.info(`[SocialResilience] D\xE9tection de panne massive`)\r\n  }\r\n\r\n  launchCommunityAlert(message: string) {\r\n    this.channel.postMessage({ type: 'alert', from: this.peerId, message })\r\n    logger.info(`[SocialResilience] Alerte communautaire : ${message}`)\r\n  }\r\n\r\n  private handleMessage(msg: any) {\r\n    if (msg.from === this.peerId) return // Ignore self\r\n    switch (msg.type) {\r\n      case 'backup_request':\r\n        // TODO: R\xE9pondre avec un backup si on a l'organismId\r\n        logger.info(`[SocialResilience] Backup demand\xE9 par ${msg.from} pour ${msg.organismId}`)\r\n        break\r\n      case 'alert':\r\n        logger.info(`[SocialResilience] Alerte re\xE7ue : ${msg.message}`)\r\n        break\r\n    }\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "948e33bceaf206db6bbdaa9fca12b37d97779795"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15xcvd8i8t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15xcvd8i8t();
cov_15xcvd8i8t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15xcvd8i8t().s[1]++;
exports.SocialResilience = void 0;
// social/social-resilience.ts
// Résilience sociale et backup communautaire (Phase 3)
const secureRandom_1 =
/* istanbul ignore next */
(cov_15xcvd8i8t().s[2]++, require("../shared/utils/secureRandom"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_15xcvd8i8t().s[3]++, require("@shared/utils/secureLogger"));
class SocialResilience {
  constructor() {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[0]++;
    cov_15xcvd8i8t().s[4]++;
    this.peerId = 'peer_' + secureRandom_1.SecureRandom.random().toString(36).substr(2, 8);
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[5]++;
    this.channel = new BroadcastChannel('symbiont_resilience');
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[6]++;
    this.channel.onmessage = event => {
      /* istanbul ignore next */
      cov_15xcvd8i8t().f[1]++;
      cov_15xcvd8i8t().s[7]++;
      return this.handleMessage(event.data);
    };
  }
  requestCommunityBackup(organismId) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[2]++;
    cov_15xcvd8i8t().s[8]++;
    this.channel.postMessage({
      type: 'backup_request',
      from: this.peerId,
      organismId
    });
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[9]++;
    secureLogger_1.logger.info(`[SocialResilience] Demande de backup pour ${organismId}`);
  }
  restoreFromCommunity(organismId) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[3]++;
    cov_15xcvd8i8t().s[10]++;
    // Écoute les backups reçus et restaure si l'organismId correspond
    // (La logique réelle de restauration serait ici)
    secureLogger_1.logger.info(`[SocialResilience] Restauration depuis la communauté pour ${organismId}`);
  }
  detectMassiveFailure() {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[4]++;
    cov_15xcvd8i8t().s[11]++;
    // Simulation de détection
    secureLogger_1.logger.info(`[SocialResilience] Détection de panne massive`);
  }
  launchCommunityAlert(message) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[5]++;
    cov_15xcvd8i8t().s[12]++;
    this.channel.postMessage({
      type: 'alert',
      from: this.peerId,
      message
    });
    /* istanbul ignore next */
    cov_15xcvd8i8t().s[13]++;
    secureLogger_1.logger.info(`[SocialResilience] Alerte communautaire : ${message}`);
  }
  handleMessage(msg) {
    /* istanbul ignore next */
    cov_15xcvd8i8t().f[6]++;
    cov_15xcvd8i8t().s[14]++;
    if (msg.from === this.peerId) {
      /* istanbul ignore next */
      cov_15xcvd8i8t().b[0][0]++;
      cov_15xcvd8i8t().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15xcvd8i8t().b[0][1]++;
    } // Ignore self
    cov_15xcvd8i8t().s[16]++;
    switch (msg.type) {
      case 'backup_request':
        /* istanbul ignore next */
        cov_15xcvd8i8t().b[1][0]++;
        cov_15xcvd8i8t().s[17]++;
        // TODO: Répondre avec un backup si on a l'organismId
        secureLogger_1.logger.info(`[SocialResilience] Backup demandé par ${msg.from} pour ${msg.organismId}`);
        /* istanbul ignore next */
        cov_15xcvd8i8t().s[18]++;
        break;
      case 'alert':
        /* istanbul ignore next */
        cov_15xcvd8i8t().b[1][1]++;
        cov_15xcvd8i8t().s[19]++;
        secureLogger_1.logger.info(`[SocialResilience] Alerte reçue : ${msg.message}`);
        /* istanbul ignore next */
        cov_15xcvd8i8t().s[20]++;
        break;
    }
  }
}
/* istanbul ignore next */
cov_15xcvd8i8t().s[21]++;
exports.SocialResilience = SocialResilience;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTV4Y3ZkOGk4dCIsImFjdHVhbENvdmVyYWdlIiwicyIsInNlY3VyZVJhbmRvbV8xIiwicmVxdWlyZSIsInNlY3VyZUxvZ2dlcl8xIiwiU29jaWFsUmVzaWxpZW5jZSIsImNvbnN0cnVjdG9yIiwiZiIsInBlZXJJZCIsIlNlY3VyZVJhbmRvbSIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiY2hhbm5lbCIsIkJyb2FkY2FzdENoYW5uZWwiLCJvbm1lc3NhZ2UiLCJldmVudCIsImhhbmRsZU1lc3NhZ2UiLCJkYXRhIiwicmVxdWVzdENvbW11bml0eUJhY2t1cCIsIm9yZ2FuaXNtSWQiLCJwb3N0TWVzc2FnZSIsInR5cGUiLCJmcm9tIiwibG9nZ2VyIiwiaW5mbyIsInJlc3RvcmVGcm9tQ29tbXVuaXR5IiwiZGV0ZWN0TWFzc2l2ZUZhaWx1cmUiLCJsYXVuY2hDb21tdW5pdHlBbGVydCIsIm1lc3NhZ2UiLCJtc2ciLCJiIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy9tX29saS9Qcm9qZXRzL1NZTUJJT05UL3NyYy9zb2NpYWwvc29jaWFsLXJlc2lsaWVuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc29jaWFsL3NvY2lhbC1yZXNpbGllbmNlLnRzXHJcbi8vIFLDqXNpbGllbmNlIHNvY2lhbGUgZXQgYmFja3VwIGNvbW11bmF1dGFpcmUgKFBoYXNlIDMpXHJcbmltcG9ydCB7IFNlY3VyZVJhbmRvbSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9zZWN1cmVSYW5kb20nO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNoYXJlZC91dGlscy9zZWN1cmVMb2dnZXInO1xuXHJcbmV4cG9ydCBjbGFzcyBTb2NpYWxSZXNpbGllbmNlIHtcclxuICBwcml2YXRlIGNoYW5uZWw6IEJyb2FkY2FzdENoYW5uZWxcclxuICBwcml2YXRlIHBlZXJJZDogc3RyaW5nXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5wZWVySWQgPSAncGVlcl8nICsgU2VjdXJlUmFuZG9tLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOClcclxuICAgIHRoaXMuY2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKCdzeW1iaW9udF9yZXNpbGllbmNlJylcclxuICAgIHRoaXMuY2hhbm5lbC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTWVzc2FnZShldmVudC5kYXRhKVxyXG4gIH1cclxuXHJcbiAgcmVxdWVzdENvbW11bml0eUJhY2t1cChvcmdhbmlzbUlkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuY2hhbm5lbC5wb3N0TWVzc2FnZSh7IHR5cGU6ICdiYWNrdXBfcmVxdWVzdCcsIGZyb206IHRoaXMucGVlcklkLCBvcmdhbmlzbUlkIH0pXHJcbiAgICBsb2dnZXIuaW5mbyhgW1NvY2lhbFJlc2lsaWVuY2VdIERlbWFuZGUgZGUgYmFja3VwIHBvdXIgJHtvcmdhbmlzbUlkfWApXHJcbiAgfVxyXG5cclxuICByZXN0b3JlRnJvbUNvbW11bml0eShvcmdhbmlzbUlkOiBzdHJpbmcpIHtcclxuICAgIC8vIMOJY291dGUgbGVzIGJhY2t1cHMgcmXDp3VzIGV0IHJlc3RhdXJlIHNpIGwnb3JnYW5pc21JZCBjb3JyZXNwb25kXHJcbiAgICAvLyAoTGEgbG9naXF1ZSByw6llbGxlIGRlIHJlc3RhdXJhdGlvbiBzZXJhaXQgaWNpKVxyXG4gICAgbG9nZ2VyLmluZm8oYFtTb2NpYWxSZXNpbGllbmNlXSBSZXN0YXVyYXRpb24gZGVwdWlzIGxhIGNvbW11bmF1dMOpIHBvdXIgJHtvcmdhbmlzbUlkfWApXHJcbiAgfVxyXG5cclxuICBkZXRlY3RNYXNzaXZlRmFpbHVyZSgpIHtcclxuICAgIC8vIFNpbXVsYXRpb24gZGUgZMOpdGVjdGlvblxyXG4gICAgbG9nZ2VyLmluZm8oYFtTb2NpYWxSZXNpbGllbmNlXSBEw6l0ZWN0aW9uIGRlIHBhbm5lIG1hc3NpdmVgKVxyXG4gIH1cclxuXHJcbiAgbGF1bmNoQ29tbXVuaXR5QWxlcnQobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNoYW5uZWwucG9zdE1lc3NhZ2UoeyB0eXBlOiAnYWxlcnQnLCBmcm9tOiB0aGlzLnBlZXJJZCwgbWVzc2FnZSB9KVxyXG4gICAgbG9nZ2VyLmluZm8oYFtTb2NpYWxSZXNpbGllbmNlXSBBbGVydGUgY29tbXVuYXV0YWlyZSA6ICR7bWVzc2FnZX1gKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVNZXNzYWdlKG1zZzogYW55KSB7XHJcbiAgICBpZiAobXNnLmZyb20gPT09IHRoaXMucGVlcklkKSByZXR1cm4gLy8gSWdub3JlIHNlbGZcclxuICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcclxuICAgICAgY2FzZSAnYmFja3VwX3JlcXVlc3QnOlxyXG4gICAgICAgIC8vIFRPRE86IFLDqXBvbmRyZSBhdmVjIHVuIGJhY2t1cCBzaSBvbiBhIGwnb3JnYW5pc21JZFxyXG4gICAgICAgIGxvZ2dlci5pbmZvKGBbU29jaWFsUmVzaWxpZW5jZV0gQmFja3VwIGRlbWFuZMOpIHBhciAke21zZy5mcm9tfSBwb3VyICR7bXNnLm9yZ2FuaXNtSWR9YClcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdhbGVydCc6XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oYFtTb2NpYWxSZXNpbGllbmNlXSBBbGVydGUgcmXDp3VlIDogJHttc2cubWVzc2FnZX1gKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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