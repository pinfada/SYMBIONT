272302be42c473c41a207dd460dae6e1
"use strict";

/* istanbul ignore next */
function cov_10ofcmjxpg() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts";
  var hash = "269ff46773f6fa310f0f94285b8465e966be0076";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 70
        }
      },
      "7": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "9": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 67
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 49
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 17
        }
      },
      "15": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 25
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "17": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "19": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 43
        }
      },
      "20": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 28
        }
      },
      "23": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 28
        }
      },
      "24": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "26": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 17
        }
      },
      "27": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 24
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "29": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "30": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 62,
          column: 53
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 53
        }
      },
      "32": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "33": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "34": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 56
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 40
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 13
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 68
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 12,
            column: 31
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 12,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 12,
            column: 40
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 12,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 50
          },
          end: {
            line: 12,
            column: 54
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts"],
      sourcesContent: ["import { SecureRandom } from '@shared/utils/secureRandom';\n/**\r\n * SensoryNetwork - R\xE9seau sensoriel pour organisme artificiel\r\n * - G\xE8re les capteurs, la normalisation, le bruit, l'adaptation\r\n * - Pr\xEAt \xE0 \xEAtre branch\xE9 sur OrganismCore/NeuralMesh\r\n */\r\n\r\nexport interface Sensor {\r\n  id: string;\r\n  type: 'vision' | 'audition' | 'touch' | 'taste' | 'smell' | 'custom';\r\n  min: number;\r\n  max: number;\r\n  noise: number; // \xE9cart-type du bruit gaussien\r\n  value: number;\r\n}\r\n\r\nexport class SensoryNetwork {\r\n  private sensors: Map<string, Sensor> = new Map();\r\n\r\n  /**\r\n   * Ajoute un capteur sensoriel\r\n   */\r\n  public addSensor(id: string, type: Sensor['type'], min = 0, max = 1, noise = 0.01): void {\r\n    if (this.sensors.has(id)) throw new Error(`Sensor ${id} already exists`);\r\n    this.sensors.set(id, { id, type, min, max, noise, value: 0 });\r\n  }\r\n\r\n  /**\r\n   * Simule une perception (avec bruit et normalisation)\r\n   */\r\n  public sense(id: string, rawValue: number): number {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    // Normalisation\r\n    let v = (rawValue - sensor.min) / (sensor.max - sensor.min);\r\n    // Ajout de bruit gaussien\r\n    v += this.gaussianNoise(0, sensor.noise);\r\n    v = Math.max(0, Math.min(1, v));\r\n    sensor.value = v;\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * R\xE9cup\xE8re les valeurs normalis\xE9es de tous les capteurs\r\n   */\r\n  public getInputs(): Record<string, number> {\r\n    const inputs: Record<string, number> = {};\r\n    for (const [id, sensor] of this.sensors.entries()) {\r\n      inputs[id] = sensor.value;\r\n    }\r\n    return inputs;\r\n  }\r\n\r\n  /**\r\n   * Adapte dynamiquement la sensibilit\xE9 d'un capteur\r\n   */\r\n  public adapt(id: string, newMin: number, newMax: number, newNoise?: number): void {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    sensor.min = newMin;\r\n    sensor.max = newMax;\r\n    if (newNoise !== undefined) sensor.noise = newNoise;\r\n  }\r\n\r\n  /**\r\n   * G\xE9n\xE8re un bruit gaussien (Box-Muller)\r\n   */\r\n  private gaussianNoise(mu: number, sigma: number): number {\r\n    let u = 0, v = 0;\r\n    while (u === 0) u = SecureRandom.random();\r\n    while (v === 0) v = SecureRandom.random();\r\n    return mu + sigma * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return Array.from(this.sensors.values());\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "269ff46773f6fa310f0f94285b8465e966be0076"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10ofcmjxpg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10ofcmjxpg();
cov_10ofcmjxpg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10ofcmjxpg().s[1]++;
exports.SensoryNetwork = void 0;
const secureRandom_1 =
/* istanbul ignore next */
(cov_10ofcmjxpg().s[2]++, require("@shared/utils/secureRandom"));
class SensoryNetwork {
  constructor() {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[0]++;
    cov_10ofcmjxpg().s[3]++;
    this.sensors = new Map();
  }
  /**
   * Ajoute un capteur sensoriel
   */
  addSensor(id, type, min =
  /* istanbul ignore next */
  (cov_10ofcmjxpg().b[0][0]++, 0), max =
  /* istanbul ignore next */
  (cov_10ofcmjxpg().b[1][0]++, 1), noise =
  /* istanbul ignore next */
  (cov_10ofcmjxpg().b[2][0]++, 0.01)) {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[1]++;
    cov_10ofcmjxpg().s[4]++;
    if (this.sensors.has(id)) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().b[3][0]++;
      cov_10ofcmjxpg().s[5]++;
      throw new Error(`Sensor ${id} already exists`);
    } else
    /* istanbul ignore next */
    {
      cov_10ofcmjxpg().b[3][1]++;
    }
    cov_10ofcmjxpg().s[6]++;
    this.sensors.set(id, {
      id,
      type,
      min,
      max,
      noise,
      value: 0
    });
  }
  /**
   * Simule une perception (avec bruit et normalisation)
   */
  sense(id, rawValue) {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[2]++;
    const sensor =
    /* istanbul ignore next */
    (cov_10ofcmjxpg().s[7]++, this.sensors.get(id));
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[8]++;
    if (!sensor) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().b[4][0]++;
      cov_10ofcmjxpg().s[9]++;
      throw new Error('Sensor not found');
    } else
    /* istanbul ignore next */
    {
      cov_10ofcmjxpg().b[4][1]++;
    }
    // Normalisation
    let v =
    /* istanbul ignore next */
    (cov_10ofcmjxpg().s[10]++, (rawValue - sensor.min) / (sensor.max - sensor.min));
    // Ajout de bruit gaussien
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[11]++;
    v += this.gaussianNoise(0, sensor.noise);
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[12]++;
    v = Math.max(0, Math.min(1, v));
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[13]++;
    sensor.value = v;
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[14]++;
    return v;
  }
  /**
   * Récupère les valeurs normalisées de tous les capteurs
   */
  getInputs() {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[3]++;
    const inputs =
    /* istanbul ignore next */
    (cov_10ofcmjxpg().s[15]++, {});
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[16]++;
    for (const [id, sensor] of this.sensors.entries()) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().s[17]++;
      inputs[id] = sensor.value;
    }
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[18]++;
    return inputs;
  }
  /**
   * Adapte dynamiquement la sensibilité d'un capteur
   */
  adapt(id, newMin, newMax, newNoise) {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[4]++;
    const sensor =
    /* istanbul ignore next */
    (cov_10ofcmjxpg().s[19]++, this.sensors.get(id));
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[20]++;
    if (!sensor) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().b[5][0]++;
      cov_10ofcmjxpg().s[21]++;
      throw new Error('Sensor not found');
    } else
    /* istanbul ignore next */
    {
      cov_10ofcmjxpg().b[5][1]++;
    }
    cov_10ofcmjxpg().s[22]++;
    sensor.min = newMin;
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[23]++;
    sensor.max = newMax;
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[24]++;
    if (newNoise !== undefined) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().b[6][0]++;
      cov_10ofcmjxpg().s[25]++;
      sensor.noise = newNoise;
    } else
    /* istanbul ignore next */
    {
      cov_10ofcmjxpg().b[6][1]++;
    }
  }
  /**
   * Génère un bruit gaussien (Box-Muller)
   */
  gaussianNoise(mu, sigma) {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[5]++;
    let u =
      /* istanbul ignore next */
      (cov_10ofcmjxpg().s[26]++, 0),
      v =
      /* istanbul ignore next */
      (cov_10ofcmjxpg().s[27]++, 0);
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[28]++;
    while (u === 0) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().s[29]++;
      u = secureRandom_1.SecureRandom.random();
    }
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[30]++;
    while (v === 0) {
      /* istanbul ignore next */
      cov_10ofcmjxpg().s[31]++;
      v = secureRandom_1.SecureRandom.random();
    }
    /* istanbul ignore next */
    cov_10ofcmjxpg().s[32]++;
    return mu + sigma * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  }
  /**
   * Export JSON pour debug/visualisation
   */
  toJSON() {
    /* istanbul ignore next */
    cov_10ofcmjxpg().f[6]++;
    cov_10ofcmjxpg().s[33]++;
    return Array.from(this.sensors.values());
  }
}
/* istanbul ignore next */
cov_10ofcmjxpg().s[34]++;
exports.SensoryNetwork = SensoryNetwork;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,