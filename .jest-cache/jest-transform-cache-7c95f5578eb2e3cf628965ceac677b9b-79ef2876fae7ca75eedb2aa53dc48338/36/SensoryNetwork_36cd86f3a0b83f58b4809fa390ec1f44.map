{"version":3,"names":["cov_10ofcmjxpg","actualCoverage","s","secureRandom_1","require","SensoryNetwork","constructor","f","sensors","Map","addSensor","id","type","min","b","max","noise","has","Error","set","value","sense","rawValue","sensor","get","v","gaussianNoise","Math","getInputs","inputs","entries","adapt","newMin","newMax","newNoise","undefined","mu","sigma","u","SecureRandom","random","sqrt","log","cos","PI","toJSON","Array","from","values","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SensoryNetwork.ts"],"sourcesContent":["import { SecureRandom } from '@shared/utils/secureRandom';\n/**\r\n * SensoryNetwork - Réseau sensoriel pour organisme artificiel\r\n * - Gère les capteurs, la normalisation, le bruit, l'adaptation\r\n * - Prêt à être branché sur OrganismCore/NeuralMesh\r\n */\r\n\r\nexport interface Sensor {\r\n  id: string;\r\n  type: 'vision' | 'audition' | 'touch' | 'taste' | 'smell' | 'custom';\r\n  min: number;\r\n  max: number;\r\n  noise: number; // écart-type du bruit gaussien\r\n  value: number;\r\n}\r\n\r\nexport class SensoryNetwork {\r\n  private sensors: Map<string, Sensor> = new Map();\r\n\r\n  /**\r\n   * Ajoute un capteur sensoriel\r\n   */\r\n  public addSensor(id: string, type: Sensor['type'], min = 0, max = 1, noise = 0.01): void {\r\n    if (this.sensors.has(id)) throw new Error(`Sensor ${id} already exists`);\r\n    this.sensors.set(id, { id, type, min, max, noise, value: 0 });\r\n  }\r\n\r\n  /**\r\n   * Simule une perception (avec bruit et normalisation)\r\n   */\r\n  public sense(id: string, rawValue: number): number {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    // Normalisation\r\n    let v = (rawValue - sensor.min) / (sensor.max - sensor.min);\r\n    // Ajout de bruit gaussien\r\n    v += this.gaussianNoise(0, sensor.noise);\r\n    v = Math.max(0, Math.min(1, v));\r\n    sensor.value = v;\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * Récupère les valeurs normalisées de tous les capteurs\r\n   */\r\n  public getInputs(): Record<string, number> {\r\n    const inputs: Record<string, number> = {};\r\n    for (const [id, sensor] of this.sensors.entries()) {\r\n      inputs[id] = sensor.value;\r\n    }\r\n    return inputs;\r\n  }\r\n\r\n  /**\r\n   * Adapte dynamiquement la sensibilité d'un capteur\r\n   */\r\n  public adapt(id: string, newMin: number, newMax: number, newNoise?: number): void {\r\n    const sensor = this.sensors.get(id);\r\n    if (!sensor) throw new Error('Sensor not found');\r\n    sensor.min = newMin;\r\n    sensor.max = newMax;\r\n    if (newNoise !== undefined) sensor.noise = newNoise;\r\n  }\r\n\r\n  /**\r\n   * Génère un bruit gaussien (Box-Muller)\r\n   */\r\n  private gaussianNoise(mu: number, sigma: number): number {\r\n    let u = 0, v = 0;\r\n    while (u === 0) u = SecureRandom.random();\r\n    while (v === 0) v = SecureRandom.random();\r\n    return mu + sigma * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/visualisation\r\n   */\r\n  public toJSON() {\r\n    return Array.from(this.sensors.values());\r\n  }\r\n} "],"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","ignoreList":[]}