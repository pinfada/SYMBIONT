{"version":3,"names":["cov_2eqnw8jtwc","actualCoverage","s","SeededRandom","constructor","seed","f","next","ProceduralGenerator","params","perm","Uint8Array","rng","b","Date","now","generateBaseForm","vertices","Float32Array","complexity","Math","floor","i","angle","PI","radius","cos","sin","normals","calculateNormals","indices","triangulate","applyLSystem","iterations","rules","current","split","map","char","join","interpretLSystem","generateFractalPattern","size","data","y","x","value","fractalNoise","idx","width","height","amplitude","frequency","maxValue","noise2D","X","Y","u","fade","v","a","lerp","grad","t","hash","h","initPermutation","length","Uint16Array","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/ProceduralGenerator.ts"],"sourcesContent":["// src/generative/ProceduralGenerator.ts\r\n// Générateur procédural\r\ninterface GenerativeParameters {\r\n    complexity: number;\r\n    symmetry: number;\r\n    fluidity: number;\r\n    colorVariance: number;\r\n    patternDensity: number;\r\n  }\r\n  \r\n  // Types minimaux pour lever les erreurs\r\n  interface Geometry {\r\n    vertices: Float32Array;\r\n    normals?: Float32Array;\r\n    indices: Uint16Array;\r\n  }\r\n  \r\n  interface Texture {\r\n    data: Uint8Array;\r\n    width: number;\r\n    height: number;\r\n  }\r\n  \r\n  class SeededRandom {\r\n    private seed: number;\r\n    constructor(seed: number) { this.seed = seed; }\r\n    next(): number { this.seed = (this.seed * 9301 + 49297) % 233280; return this.seed / 233280; }\r\n  }\r\n  \r\n  export class ProceduralGenerator {\r\n    // @ts-expect-error Paramètres réservés pour usage futur\r\n    private params: GenerativeParameters;\r\n    private rng: SeededRandom;\r\n    \r\n    constructor(params: GenerativeParameters, seed?: number) {\r\n      this.params = params;\r\n      this.rng = new SeededRandom(seed || Date.now());\r\n    }\r\n    \r\n    public generateBaseForm(params: GenerativeParameters): Geometry {\r\n      const vertices: Float32Array = new Float32Array(18); // 6 vertices * 3 coords\r\n      const complexity = Math.floor(3 + params.complexity * 12); // 3-15 sides\r\n      \r\n      // Génération de forme base\r\n      for (let i = 0; i < complexity; i++) {\r\n        const angle = (i / complexity) * Math.PI * 2;\r\n        const radius = 0.3 + this.rng.next() * 0.2 * params.complexity;\r\n        \r\n        vertices[i * 3] = Math.cos(angle) * radius;\r\n        vertices[i * 3 + 1] = Math.sin(angle) * radius;\r\n        vertices[i * 3 + 2] = 0;\r\n      }\r\n      \r\n      return {\r\n        vertices,\r\n        normals: this.calculateNormals(vertices),\r\n        indices: this.triangulate(complexity)\r\n      };\r\n    }\r\n    \r\n    public applyLSystem(iterations: number): Geometry {\r\n      // L-System pour croissance organique\r\n      const rules: { [key: string]: string } = {\r\n        'F': 'FF+[+F-F-F]-[-F+F+F]',\r\n        '+': '+',\r\n        '-': '-',\r\n        '[': '[',\r\n        ']': ']'\r\n      };\r\n      \r\n      let current = 'F';\r\n      for (let i = 0; i < iterations; i++) {\r\n        current = current.split('').map(char => rules[char] || char).join('');\r\n      }\r\n      \r\n      return this.interpretLSystem(current);\r\n    }\r\n    \r\n    public generateFractalPattern(seed: number): Texture {\r\n      const size = 256;\r\n      const data = new Uint8Array(size * size * 4);\r\n      \r\n      // Bruit de Perlin multi-octave\r\n      for (let y = 0; y < size; y++) {\r\n        for (let x = 0; x < size; x++) {\r\n          const value = this.fractalNoise(x / size, y / size, seed);\r\n          const idx = (y * size + x) * 4;\r\n          \r\n          data[idx] = value * 255;\r\n          data[idx + 1] = value * 255;\r\n          data[idx + 2] = value * 255;\r\n          data[idx + 3] = 255;\r\n        }\r\n      }\r\n      \r\n      return { data, width: size, height: size };\r\n    }\r\n    \r\n    private fractalNoise(x: number, y: number, seed: number): number {\r\n      let value = 0;\r\n      let amplitude = 1;\r\n      let frequency = 1;\r\n      let maxValue = 0;\r\n      \r\n      for (let i = 0; i < 8; i++) {\r\n        value += this.noise2D(x * frequency + seed, y * frequency) * amplitude;\r\n        maxValue += amplitude;\r\n        amplitude *= 0.5;\r\n        frequency *= 2;\r\n      }\r\n      \r\n      return value / maxValue;\r\n    }\r\n    \r\n    private noise2D(x: number, y: number): number {\r\n      // Implémentation simplifiée du bruit de Perlin\r\n      const X = Math.floor(x) & 255;\r\n      const Y = Math.floor(y) & 255;\r\n      \r\n      x -= Math.floor(x);\r\n      y -= Math.floor(y);\r\n      \r\n      const u = this.fade(x);\r\n      const v = this.fade(y);\r\n      \r\n      // Gradient pseudo-aléatoire\r\n      const a = this.perm[X] + Y;\r\n      const b = this.perm[X + 1] + Y;\r\n      \r\n      return this.lerp(v,\r\n        this.lerp(u, this.grad(this.perm[a], x, y),\r\n                     this.grad(this.perm[b], x - 1, y)),\r\n        this.lerp(u, this.grad(this.perm[a + 1], x, y - 1),\r\n                     this.grad(this.perm[b + 1], x - 1, y - 1))\r\n      );\r\n    }\r\n    \r\n    private fade(t: number): number {\r\n      return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n    \r\n    private lerp(t: number, a: number, b: number): number {\r\n      return a + t * (b - a);\r\n    }\r\n    \r\n    private grad(hash: number, x: number, y: number): number {\r\n      const h = hash & 15;\r\n      const u = h < 8 ? x : y;\r\n      const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\r\n      return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\r\n    }\r\n    \r\n    // Table de permutation pour le bruit\r\n    private perm = new Uint8Array(512);\r\n    \r\n    // @ts-expect-error Méthode réservée pour usage futur\r\n    private initPermutation(): void {\r\n      // Initialise la table de permutation de Perlin\r\n      // Cette implémentation sera nécessaire pour le bruit procédural avancé\r\n    }\r\n    \r\n    private calculateNormals(vertices: Float32Array): Float32Array { return new Float32Array(vertices.length); }\r\n    private triangulate(complexity: number): Uint16Array { return new Uint16Array(complexity); }\r\n    // @ts-expect-error Paramètre réservé pour usage futur\r\n    private interpretLSystem(current: string): Geometry { return { vertices: new Float32Array(0), indices: new Uint16Array(0) }; }\r\n  }"],"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","ignoreList":[]}