2c17afb3f9277f9975254f0ee6753226
"use strict";

/* istanbul ignore next */
function cov_2eqnw8jtwc() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/ProceduralGenerator.ts";
  var hash = "ac4751110a15208aac1d4ef342ec1ab8fa916d61";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/ProceduralGenerator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 5,
          column: 24
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "3": {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "4": {
        start: {
          line: 6,
          column: 62
        },
        end: {
          line: 6,
          column: 88
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 40
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "8": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "9": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "12": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 56
        }
      },
      "13": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "14": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 55
        }
      },
      "15": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "16": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 36
        }
      },
      "17": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "18": {
        start: {
          line: 34,
          column: 22
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "19": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "21": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 22
        }
      },
      "22": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 82
        }
      },
      "23": {
        start: {
          line: 43,
          column: 52
        },
        end: {
          line: 43,
          column: 71
        }
      },
      "24": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "25": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "26": {
        start: {
          line: 49,
          column: 21
        },
        end: {
          line: 49,
          column: 52
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "28": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 51,
          column: 22
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "30": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "31": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 73
        }
      },
      "32": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "33": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "34": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 44
        }
      },
      "35": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 44
        }
      },
      "36": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "37": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 51
        }
      },
      "38": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 21
        }
      },
      "39": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 25
        }
      },
      "40": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "41": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 24
        }
      },
      "42": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "43": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "44": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "45": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 34
        }
      },
      "46": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "47": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 27
        }
      },
      "48": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "49": {
        start: {
          line: 78,
          column: 18
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "50": {
        start: {
          line: 79,
          column: 18
        },
        end: {
          line: 79,
          column: 37
        }
      },
      "51": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 27
        }
      },
      "52": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 27
        }
      },
      "53": {
        start: {
          line: 82,
          column: 18
        },
        end: {
          line: 82,
          column: 30
        }
      },
      "54": {
        start: {
          line: 83,
          column: 18
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "55": {
        start: {
          line: 85,
          column: 18
        },
        end: {
          line: 85,
          column: 34
        }
      },
      "56": {
        start: {
          line: 86,
          column: 18
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "57": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 204
        }
      },
      "58": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 51
        }
      },
      "59": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 31
        }
      },
      "60": {
        start: {
          line: 96,
          column: 18
        },
        end: {
          line: 96,
          column: 27
        }
      },
      "61": {
        start: {
          line: 97,
          column: 18
        },
        end: {
          line: 97,
          column: 31
        }
      },
      "62": {
        start: {
          line: 98,
          column: 18
        },
        end: {
          line: 98,
          column: 58
        }
      },
      "63": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 67
        }
      },
      "64": {
        start: {
          line: 106,
          column: 33
        },
        end: {
          line: 106,
          column: 74
        }
      },
      "65": {
        start: {
          line: 107,
          column: 30
        },
        end: {
          line: 107,
          column: 65
        }
      },
      "66": {
        start: {
          line: 109,
          column: 32
        },
        end: {
          line: 109,
          column: 102
        }
      },
      "67": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 111,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 5,
            column: 43
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 90
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 15
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 44
          },
          end: {
            line: 43,
            column: 45
          }
        },
        loc: {
          start: {
            line: 43,
            column: 52
          },
          end: {
            line: 43,
            column: 71
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 47
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 29
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 63
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 18
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 76
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 92
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 95
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 22
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 102
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 106,
            column: 76
          }
        },
        line: 106
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 28
          },
          end: {
            line: 107,
            column: 67
          }
        },
        line: 107
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 30
          },
          end: {
            line: 109,
            column: 104
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 13,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 13,
            column: 40
          }
        }, {
          start: {
            line: 13,
            column: 44
          },
          end: {
            line: 13,
            column: 54
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 52
          },
          end: {
            line: 43,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 52
          },
          end: {
            line: 43,
            column: 63
          }
        }, {
          start: {
            line: 43,
            column: 67
          },
          end: {
            line: 43,
            column: 71
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 97,
            column: 18
          },
          end: {
            line: 97,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 26
          },
          end: {
            line: 97,
            column: 27
          }
        }, {
          start: {
            line: 97,
            column: 30
          },
          end: {
            line: 97,
            column: 31
          }
        }],
        line: 97
      },
      "3": {
        loc: {
          start: {
            line: 98,
            column: 18
          },
          end: {
            line: 98,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 27
          }
        }, {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 98,
            column: 58
          }
        }],
        line: 98
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 98,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 53
          },
          end: {
            line: 98,
            column: 54
          }
        }, {
          start: {
            line: 98,
            column: 57
          },
          end: {
            line: 98,
            column: 58
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 98,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 98,
            column: 38
          }
        }, {
          start: {
            line: 98,
            column: 42
          },
          end: {
            line: 98,
            column: 50
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 32
          },
          end: {
            line: 99,
            column: 33
          }
        }, {
          start: {
            line: 99,
            column: 36
          },
          end: {
            line: 99,
            column: 38
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 59
          },
          end: {
            line: 99,
            column: 60
          }
        }, {
          start: {
            line: 99,
            column: 63
          },
          end: {
            line: 99,
            column: 65
          }
        }],
        line: 99
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/ProceduralGenerator.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/ProceduralGenerator.ts"],
      sourcesContent: ["// src/generative/ProceduralGenerator.ts\r\n// G\xE9n\xE9rateur proc\xE9dural\r\ninterface GenerativeParameters {\r\n    complexity: number;\r\n    symmetry: number;\r\n    fluidity: number;\r\n    colorVariance: number;\r\n    patternDensity: number;\r\n  }\r\n  \r\n  // Types minimaux pour lever les erreurs\r\n  interface Geometry {\r\n    vertices: Float32Array;\r\n    normals?: Float32Array;\r\n    indices: Uint16Array;\r\n  }\r\n  \r\n  interface Texture {\r\n    data: Uint8Array;\r\n    width: number;\r\n    height: number;\r\n  }\r\n  \r\n  class SeededRandom {\r\n    private seed: number;\r\n    constructor(seed: number) { this.seed = seed; }\r\n    next(): number { this.seed = (this.seed * 9301 + 49297) % 233280; return this.seed / 233280; }\r\n  }\r\n  \r\n  export class ProceduralGenerator {\r\n    // @ts-expect-error Param\xE8tres r\xE9serv\xE9s pour usage futur\r\n    private params: GenerativeParameters;\r\n    private rng: SeededRandom;\r\n    \r\n    constructor(params: GenerativeParameters, seed?: number) {\r\n      this.params = params;\r\n      this.rng = new SeededRandom(seed || Date.now());\r\n    }\r\n    \r\n    public generateBaseForm(params: GenerativeParameters): Geometry {\r\n      const vertices: Float32Array = new Float32Array(18); // 6 vertices * 3 coords\r\n      const complexity = Math.floor(3 + params.complexity * 12); // 3-15 sides\r\n      \r\n      // G\xE9n\xE9ration de forme base\r\n      for (let i = 0; i < complexity; i++) {\r\n        const angle = (i / complexity) * Math.PI * 2;\r\n        const radius = 0.3 + this.rng.next() * 0.2 * params.complexity;\r\n        \r\n        vertices[i * 3] = Math.cos(angle) * radius;\r\n        vertices[i * 3 + 1] = Math.sin(angle) * radius;\r\n        vertices[i * 3 + 2] = 0;\r\n      }\r\n      \r\n      return {\r\n        vertices,\r\n        normals: this.calculateNormals(vertices),\r\n        indices: this.triangulate(complexity)\r\n      };\r\n    }\r\n    \r\n    public applyLSystem(iterations: number): Geometry {\r\n      // L-System pour croissance organique\r\n      const rules: { [key: string]: string } = {\r\n        'F': 'FF+[+F-F-F]-[-F+F+F]',\r\n        '+': '+',\r\n        '-': '-',\r\n        '[': '[',\r\n        ']': ']'\r\n      };\r\n      \r\n      let current = 'F';\r\n      for (let i = 0; i < iterations; i++) {\r\n        current = current.split('').map(char => rules[char] || char).join('');\r\n      }\r\n      \r\n      return this.interpretLSystem(current);\r\n    }\r\n    \r\n    public generateFractalPattern(seed: number): Texture {\r\n      const size = 256;\r\n      const data = new Uint8Array(size * size * 4);\r\n      \r\n      // Bruit de Perlin multi-octave\r\n      for (let y = 0; y < size; y++) {\r\n        for (let x = 0; x < size; x++) {\r\n          const value = this.fractalNoise(x / size, y / size, seed);\r\n          const idx = (y * size + x) * 4;\r\n          \r\n          data[idx] = value * 255;\r\n          data[idx + 1] = value * 255;\r\n          data[idx + 2] = value * 255;\r\n          data[idx + 3] = 255;\r\n        }\r\n      }\r\n      \r\n      return { data, width: size, height: size };\r\n    }\r\n    \r\n    private fractalNoise(x: number, y: number, seed: number): number {\r\n      let value = 0;\r\n      let amplitude = 1;\r\n      let frequency = 1;\r\n      let maxValue = 0;\r\n      \r\n      for (let i = 0; i < 8; i++) {\r\n        value += this.noise2D(x * frequency + seed, y * frequency) * amplitude;\r\n        maxValue += amplitude;\r\n        amplitude *= 0.5;\r\n        frequency *= 2;\r\n      }\r\n      \r\n      return value / maxValue;\r\n    }\r\n    \r\n    private noise2D(x: number, y: number): number {\r\n      // Impl\xE9mentation simplifi\xE9e du bruit de Perlin\r\n      const X = Math.floor(x) & 255;\r\n      const Y = Math.floor(y) & 255;\r\n      \r\n      x -= Math.floor(x);\r\n      y -= Math.floor(y);\r\n      \r\n      const u = this.fade(x);\r\n      const v = this.fade(y);\r\n      \r\n      // Gradient pseudo-al\xE9atoire\r\n      const a = this.perm[X] + Y;\r\n      const b = this.perm[X + 1] + Y;\r\n      \r\n      return this.lerp(v,\r\n        this.lerp(u, this.grad(this.perm[a], x, y),\r\n                     this.grad(this.perm[b], x - 1, y)),\r\n        this.lerp(u, this.grad(this.perm[a + 1], x, y - 1),\r\n                     this.grad(this.perm[b + 1], x - 1, y - 1))\r\n      );\r\n    }\r\n    \r\n    private fade(t: number): number {\r\n      return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n    \r\n    private lerp(t: number, a: number, b: number): number {\r\n      return a + t * (b - a);\r\n    }\r\n    \r\n    private grad(hash: number, x: number, y: number): number {\r\n      const h = hash & 15;\r\n      const u = h < 8 ? x : y;\r\n      const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\r\n      return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\r\n    }\r\n    \r\n    // Table de permutation pour le bruit\r\n    private perm = new Uint8Array(512);\r\n    \r\n    // @ts-expect-error M\xE9thode r\xE9serv\xE9e pour usage futur\r\n    private initPermutation(): void {\r\n      // Initialise la table de permutation de Perlin\r\n      // Cette impl\xE9mentation sera n\xE9cessaire pour le bruit proc\xE9dural avanc\xE9\r\n    }\r\n    \r\n    private calculateNormals(vertices: Float32Array): Float32Array { return new Float32Array(vertices.length); }\r\n    private triangulate(complexity: number): Uint16Array { return new Uint16Array(complexity); }\r\n    // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n    private interpretLSystem(current: string): Geometry { return { vertices: new Float32Array(0), indices: new Uint16Array(0) }; }\r\n  }"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ac4751110a15208aac1d4ef342ec1ab8fa916d61"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2eqnw8jtwc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2eqnw8jtwc();
cov_2eqnw8jtwc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2eqnw8jtwc().s[1]++;
exports.ProceduralGenerator = void 0;
class SeededRandom {
  constructor(seed) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[0]++;
    cov_2eqnw8jtwc().s[2]++;
    this.seed = seed;
  }
  next() {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[1]++;
    cov_2eqnw8jtwc().s[3]++;
    this.seed = (this.seed * 9301 + 49297) % 233280;
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[4]++;
    return this.seed / 233280;
  }
}
class ProceduralGenerator {
  constructor(params, seed) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[2]++;
    cov_2eqnw8jtwc().s[5]++;
    // Table de permutation pour le bruit
    this.perm = new Uint8Array(512);
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[6]++;
    this.params = params;
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[7]++;
    this.rng = new SeededRandom(
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[0][0]++, seed) ||
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[0][1]++, Date.now()));
  }
  generateBaseForm(params) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[3]++;
    const vertices =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[8]++, new Float32Array(18)); // 6 vertices * 3 coords
    const complexity =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[9]++, Math.floor(3 + params.complexity * 12)); // 3-15 sides
    // Génération de forme base
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[10]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[11]++, 0); i < complexity; i++) {
      const angle =
      /* istanbul ignore next */
      (cov_2eqnw8jtwc().s[12]++, i / complexity * Math.PI * 2);
      const radius =
      /* istanbul ignore next */
      (cov_2eqnw8jtwc().s[13]++, 0.3 + this.rng.next() * 0.2 * params.complexity);
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[14]++;
      vertices[i * 3] = Math.cos(angle) * radius;
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[15]++;
      vertices[i * 3 + 1] = Math.sin(angle) * radius;
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[16]++;
      vertices[i * 3 + 2] = 0;
    }
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[17]++;
    return {
      vertices,
      normals: this.calculateNormals(vertices),
      indices: this.triangulate(complexity)
    };
  }
  applyLSystem(iterations) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[4]++;
    // L-System pour croissance organique
    const rules =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[18]++, {
      'F': 'FF+[+F-F-F]-[-F+F+F]',
      '+': '+',
      '-': '-',
      '[': '[',
      ']': ']'
    });
    let current =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[19]++, 'F');
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[20]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[21]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[22]++;
      current = current.split('').map(char => {
        /* istanbul ignore next */
        cov_2eqnw8jtwc().f[5]++;
        cov_2eqnw8jtwc().s[23]++;
        return /* istanbul ignore next */(cov_2eqnw8jtwc().b[1][0]++, rules[char]) ||
        /* istanbul ignore next */
        (cov_2eqnw8jtwc().b[1][1]++, char);
      }).join('');
    }
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[24]++;
    return this.interpretLSystem(current);
  }
  generateFractalPattern(seed) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[6]++;
    const size =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[25]++, 256);
    const data =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[26]++, new Uint8Array(size * size * 4));
    // Bruit de Perlin multi-octave
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[27]++;
    for (let y =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[28]++, 0); y < size; y++) {
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[29]++;
      for (let x =
      /* istanbul ignore next */
      (cov_2eqnw8jtwc().s[30]++, 0); x < size; x++) {
        const value =
        /* istanbul ignore next */
        (cov_2eqnw8jtwc().s[31]++, this.fractalNoise(x / size, y / size, seed));
        const idx =
        /* istanbul ignore next */
        (cov_2eqnw8jtwc().s[32]++, (y * size + x) * 4);
        /* istanbul ignore next */
        cov_2eqnw8jtwc().s[33]++;
        data[idx] = value * 255;
        /* istanbul ignore next */
        cov_2eqnw8jtwc().s[34]++;
        data[idx + 1] = value * 255;
        /* istanbul ignore next */
        cov_2eqnw8jtwc().s[35]++;
        data[idx + 2] = value * 255;
        /* istanbul ignore next */
        cov_2eqnw8jtwc().s[36]++;
        data[idx + 3] = 255;
      }
    }
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[37]++;
    return {
      data,
      width: size,
      height: size
    };
  }
  fractalNoise(x, y, seed) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[7]++;
    let value =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[38]++, 0);
    let amplitude =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[39]++, 1);
    let frequency =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[40]++, 1);
    let maxValue =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[41]++, 0);
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[42]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[43]++, 0); i < 8; i++) {
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[44]++;
      value += this.noise2D(x * frequency + seed, y * frequency) * amplitude;
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[45]++;
      maxValue += amplitude;
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[46]++;
      amplitude *= 0.5;
      /* istanbul ignore next */
      cov_2eqnw8jtwc().s[47]++;
      frequency *= 2;
    }
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[48]++;
    return value / maxValue;
  }
  noise2D(x, y) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[8]++;
    // Implémentation simplifiée du bruit de Perlin
    const X =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[49]++, Math.floor(x) & 255);
    const Y =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[50]++, Math.floor(y) & 255);
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[51]++;
    x -= Math.floor(x);
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[52]++;
    y -= Math.floor(y);
    const u =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[53]++, this.fade(x));
    const v =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[54]++, this.fade(y));
    // Gradient pseudo-aléatoire
    const a =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[55]++, this.perm[X] + Y);
    const b =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[56]++, this.perm[X + 1] + Y);
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[57]++;
    return this.lerp(v, this.lerp(u, this.grad(this.perm[a], x, y), this.grad(this.perm[b], x - 1, y)), this.lerp(u, this.grad(this.perm[a + 1], x, y - 1), this.grad(this.perm[b + 1], x - 1, y - 1)));
  }
  fade(t) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[9]++;
    cov_2eqnw8jtwc().s[58]++;
    return t * t * t * (t * (t * 6 - 15) + 10);
  }
  lerp(t, a, b) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[10]++;
    cov_2eqnw8jtwc().s[59]++;
    return a + t * (b - a);
  }
  grad(hash, x, y) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[11]++;
    const h =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[60]++, hash & 15);
    const u =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[61]++, h < 8 ?
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[2][0]++, x) :
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[2][1]++, y));
    const v =
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().s[62]++, h < 4 ?
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[3][0]++, y) :
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[3][1]++,
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[5][0]++, h === 12) ||
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[5][1]++, h === 14) ?
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[4][0]++, x) :
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[4][1]++, 0)));
    /* istanbul ignore next */
    cov_2eqnw8jtwc().s[63]++;
    return ((h & 1) === 0 ?
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[6][0]++, u) :
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[6][1]++, -u)) + ((h & 2) === 0 ?
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[7][0]++, v) :
    /* istanbul ignore next */
    (cov_2eqnw8jtwc().b[7][1]++, -v));
  }
  // @ts-expect-error Méthode réservée pour usage futur
  initPermutation() {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[12]++;
  } // Initialise la table de permutation de Perlin
  // Cette implémentation sera nécessaire pour le bruit procédural avancé
  calculateNormals(vertices) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[13]++;
    cov_2eqnw8jtwc().s[64]++;
    return new Float32Array(vertices.length);
  }
  triangulate(complexity) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[14]++;
    cov_2eqnw8jtwc().s[65]++;
    return new Uint16Array(complexity);
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  interpretLSystem(current) {
    /* istanbul ignore next */
    cov_2eqnw8jtwc().f[15]++;
    cov_2eqnw8jtwc().s[66]++;
    return {
      vertices: new Float32Array(0),
      indices: new Uint16Array(0)
    };
  }
}
/* istanbul ignore next */
cov_2eqnw8jtwc().s[67]++;
exports.ProceduralGenerator = ProceduralGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,