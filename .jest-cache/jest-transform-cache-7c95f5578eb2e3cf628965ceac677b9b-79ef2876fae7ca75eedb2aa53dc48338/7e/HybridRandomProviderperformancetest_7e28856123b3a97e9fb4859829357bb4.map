{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/HybridRandomProvider.performance.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/HybridRandomProvider.performance.test.ts"],"sourcesContent":["/**\n * Tests de performance pour HybridRandomProvider\n * Validation des gains de performance vs SecureRandom original\n */\n\nimport { \n  HybridRandomProvider, \n  UsageContext, \n  XorShift128Plus,\n  RandomPool \n} from '../../src/shared/utils/HybridRandomProvider';\nimport { PerformanceOptimizedRandom } from '../../src/shared/utils/PerformanceOptimizedRandom';\n\n// Mock crypto pour tests consistants\nconst mockCrypto = {\n  getRandomValues: jest.fn((array: Uint32Array) => {\n    for (let i = 0; i < array.length; i++) {\n      array[i] = Math.floor(Math.random() * 0x100000000);\n    }\n    return array;\n  })\n};\n\nObject.defineProperty(global, 'crypto', {\n  value: mockCrypto,\n  writable: true\n});\n\ndescribe('HybridRandomProvider Performance Tests', () => {\n  let provider: HybridRandomProvider;\n\n  beforeEach(() => {\n    provider = HybridRandomProvider.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Performance Benchmarks', () => {\n    test('should be significantly faster than original SecureRandom', async () => {\n      const iterations = 10000;\n\n      // Benchmark SecureRandom original (simulation)\n      const startSecure = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        const array = new Uint32Array(1);\n        mockCrypto.getRandomValues(array);\n        array[0] / 0x100000000;\n      }\n      const secureTime = performance.now() - startSecure;\n\n      // Benchmark HybridRandomProvider neural context (performance critique)\n      const startHybrid = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        provider.random(UsageContext.NEURAL_NETWORK);\n      }\n      const hybridTime = performance.now() - startHybrid;\n\n      const speedup = secureTime / hybridTime;\n      \n      console.log(`SecureRandom original: ${secureTime.toFixed(2)}ms`);\n      console.log(`HybridRandomProvider: ${hybridTime.toFixed(2)}ms`);\n      console.log(`Speedup: ${speedup.toFixed(1)}x`);\n\n      // Doit être au minimum 50x plus rapide\n      expect(speedup).toBeGreaterThan(50);\n      expect(hybridTime).toBeLessThan(secureTime / 50);\n    }, 30000);\n\n    test('should show different performance profiles by context', async () => {\n      const iterations = 5000;\n      const contexts = [\n        UsageContext.CRYPTOGRAPHIC_OPS,\n        UsageContext.NEURAL_NETWORK,\n        UsageContext.WEBGL_RENDERING,\n        UsageContext.GENETIC_MUTATIONS\n      ];\n\n      const results = new Map<UsageContext, number>();\n\n      for (const context of contexts) {\n        const start = performance.now();\n        \n        for (let i = 0; i < iterations; i++) {\n          provider.random(context);\n        }\n        \n        const time = performance.now() - start;\n        results.set(context, time);\n      }\n\n      // Performance ordering expected: WEBGL/NEURAL < GENETIC < CRYPTO\n      const webglTime = results.get(UsageContext.WEBGL_RENDERING)!;\n      const neuralTime = results.get(UsageContext.NEURAL_NETWORK)!;\n      const geneticTime = results.get(UsageContext.GENETIC_MUTATIONS)!;\n      const cryptoTime = results.get(UsageContext.CRYPTOGRAPHIC_OPS)!;\n\n      console.log('Performance by context:');\n      console.log(`WebGL: ${webglTime.toFixed(2)}ms`);\n      console.log(`Neural: ${neuralTime.toFixed(2)}ms`);\n      console.log(`Genetic: ${geneticTime.toFixed(2)}ms`);\n      console.log(`Crypto: ${cryptoTime.toFixed(2)}ms`);\n\n      // WebGL/Neural doivent être plus rapides que Crypto\n      expect(webglTime).toBeLessThan(cryptoTime);\n      expect(neuralTime).toBeLessThan(cryptoTime);\n      \n      // Genetic entre performance et sécurité\n      expect(geneticTime).toBeGreaterThan(Math.min(webglTime, neuralTime));\n      expect(geneticTime).toBeLessThan(cryptoTime);\n    });\n\n    test('should handle batch generation efficiently', async () => {\n      const batchSize = 10000;\n\n      // Test batch vs sequential\n      const startSequential = performance.now();\n      const sequential = [];\n      for (let i = 0; i < batchSize; i++) {\n        sequential.push(provider.random(UsageContext.NEURAL_NETWORK));\n      }\n      const sequentialTime = performance.now() - startSequential;\n\n      const startBatch = performance.now();\n      const batch = await provider.generateBatch(batchSize, UsageContext.NEURAL_NETWORK);\n      const batchTime = performance.now() - startBatch;\n\n      const batchSpeedup = sequentialTime / batchTime;\n\n      console.log(`Sequential ${batchSize}: ${sequentialTime.toFixed(2)}ms`);\n      console.log(`Batch ${batchSize}: ${batchTime.toFixed(2)}ms`);\n      console.log(`Batch speedup: ${batchSpeedup.toFixed(1)}x`);\n\n      expect(batch.length).toBe(batchSize);\n      expect(batchTime).toBeLessThan(sequentialTime);\n      expect(batchSpeedup).toBeGreaterThan(1.5); // Au moins 50% plus rapide\n    });\n  });\n\n  describe('XorShift128Plus Performance', () => {\n    test('should be extremely fast for performance-critical paths', () => {\n      const prng = new XorShift128Plus();\n      const iterations = 100000;\n\n      const start = performance.now();\n      for (let i = 0; i < iterations; i++) {\n        prng.random();\n      }\n      const time = performance.now() - start;\n\n      console.log(`XorShift128Plus ${iterations} iterations: ${time.toFixed(2)}ms`);\n      console.log(`Rate: ${(iterations / time * 1000).toFixed(0)} ops/second`);\n\n      // Doit être capable de >1M ops/second\n      const opsPerSecond = iterations / time * 1000;\n      expect(opsPerSecond).toBeGreaterThan(1000000);\n    });\n\n    test('should maintain randomness quality', () => {\n      const prng = new XorShift128Plus();\n      const samples = 10000;\n      const numbers = [];\n\n      for (let i = 0; i < samples; i++) {\n        numbers.push(prng.random());\n      }\n\n      // Test distribution uniformity (Chi-square approximation)\n      const buckets = 10;\n      const expectedPerBucket = samples / buckets;\n      const counts = new Array(buckets).fill(0);\n\n      for (const num of numbers) {\n        const bucket = Math.floor(num * buckets);\n        counts[Math.min(bucket, buckets - 1)]++;\n      }\n\n      // Chi-square test approximatif\n      let chiSquare = 0;\n      for (let i = 0; i < buckets; i++) {\n        const diff = counts[i] - expectedPerBucket;\n        chiSquare += (diff * diff) / expectedPerBucket;\n      }\n\n      // For 9 degrees of freedom, critical value at 0.05 is ~16.92\n      expect(chiSquare).toBeLessThan(20); // Slightly relaxed for PRNG\n      \n      // Vérifier que tous les nombres sont dans [0,1)\n      expect(Math.min(...numbers)).toBeGreaterThanOrEqual(0);\n      expect(Math.max(...numbers)).toBeLessThan(1);\n    });\n  });\n\n  describe('RandomPool Performance', () => {\n    test('should provide fast access to pre-generated secure numbers', async () => {\n      const pool = new RandomPool(5000, 1000);\n      await pool.initialize();\n\n      const iterations = 1000;\n      const start = performance.now();\n\n      for (let i = 0; i < iterations; i++) {\n        const value = pool.getNext();\n        expect(value).toBeGreaterThanOrEqual(0);\n        expect(value).toBeLessThan(1);\n      }\n\n      const time = performance.now() - start;\n      console.log(`RandomPool ${iterations} accesses: ${time.toFixed(2)}ms`);\n\n      // Pool access doit être très rapide\n      expect(time).toBeLessThan(10); // <10ms pour 1000 accès\n    });\n\n    test('should handle pool refill gracefully', async () => {\n      const pool = new RandomPool(100, 80); // Petit pool, refill rapide\n      await pool.initialize();\n\n      // Consume most of pool\n      for (let i = 0; i < 85; i++) {\n        pool.getNext();\n      }\n\n      // Should trigger refill but still provide values\n      const value = pool.getNext();\n      expect(value).toBeGreaterThanOrEqual(0);\n      expect(value).toBeLessThan(1);\n\n      const stats = pool.getStats();\n      expect(stats.totalConsumed).toBe(86);\n    });\n  });\n\n  describe('PerformanceOptimizedRandom Integration', () => {\n    test('should show massive improvement over original SecureRandom', async () => {\n      const benchmark = await PerformanceOptimizedRandom.benchmarkVsSecureRandom(5000);\n\n      console.log('Benchmark Results:');\n      console.log(`Original SecureRandom: ${benchmark.secureRandomMs}ms`);\n      console.log(`PerformanceOptimized: ${benchmark.optimizedMs}ms`);\n      console.log(`Speedup: ${benchmark.speedupRatio}x`);\n      console.log(`Recommendation: ${benchmark.recommendation}`);\n\n      expect(benchmark.speedupRatio).toBeGreaterThan(50);\n      expect(benchmark.optimizedMs).toBeLessThan(benchmark.secureRandomMs / 50);\n      expect(benchmark.recommendation).toContain('Migration recommandée');\n    });\n\n    test('should handle warmup correctly', async () => {\n      const start = performance.now();\n      await PerformanceOptimizedRandom.warmup();\n      const warmupTime = performance.now() - start;\n\n      console.log(`Warmup completed in: ${warmupTime.toFixed(2)}ms`);\n\n      // Warmup ne doit pas être trop long\n      expect(warmupTime).toBeLessThan(1000); // <1 seconde\n\n      // Après warmup, performance doit être optimale\n      const testStart = performance.now();\n      for (let i = 0; i < 1000; i++) {\n        PerformanceOptimizedRandom.neuralRandom();\n      }\n      const testTime = performance.now() - testStart;\n\n      expect(testTime).toBeLessThan(10); // <10ms pour 1000 calls après warmup\n    });\n\n    test('should provide detailed performance metrics', () => {\n      // Générer quelques appels\n      for (let i = 0; i < 100; i++) {\n        PerformanceOptimizedRandom.neuralRandom();\n        PerformanceOptimizedRandom.renderingRandom();\n        PerformanceOptimizedRandom.cryptoRandom();\n      }\n\n      const metrics = PerformanceOptimizedRandom.getPerformanceMetrics();\n\n      console.log('Performance Metrics:');\n      console.log(`Total calls: ${metrics.totalCalls}`);\n      console.log(`Distribution: ${JSON.stringify(metrics.distribution, null, 2)}`);\n      console.log(`Avg latency: ${metrics.avgLatencyMs.toFixed(3)}ms`);\n\n      expect(metrics.totalCalls).toBeGreaterThan(0);\n      expect(metrics.fastCalls).toBeGreaterThan(0);\n      expect(metrics.avgLatencyMs).toBeLessThan(1); // Latence moyenne <1ms\n    });\n  });\n\n  describe('FPS Target Validation', () => {\n    test('should achieve target 30+ FPS in WebGL rendering scenario', async () => {\n      // Simulate WebGL rendering loop with random operations\n      const targetFPS = 30;\n      const frameTargetMs = 1000 / targetFPS; // 33.33ms per frame\n      const randomCallsPerFrame = 100; // Typical for particle system\n\n      const frames = 60; // Test 60 frames\n      let totalFrameTime = 0;\n\n      for (let frame = 0; frame < frames; frame++) {\n        const frameStart = performance.now();\n\n        // Simulate frame with many random calls\n        for (let i = 0; i < randomCallsPerFrame; i++) {\n          PerformanceOptimizedRandom.renderingRandom();\n        }\n\n        const frameTime = performance.now() - frameStart;\n        totalFrameTime += frameTime;\n      }\n\n      const avgFrameTime = totalFrameTime / frames;\n      const achievedFPS = 1000 / avgFrameTime;\n\n      console.log(`Average frame time: ${avgFrameTime.toFixed(2)}ms`);\n      console.log(`Achieved FPS: ${achievedFPS.toFixed(1)}`);\n      console.log(`Target FPS: ${targetFPS}`);\n\n      expect(avgFrameTime).toBeLessThan(frameTargetMs);\n      expect(achievedFPS).toBeGreaterThanOrEqual(targetFPS);\n    });\n\n    test('should handle neural network mutations without performance degradation', async () => {\n      // Simulate intensive neural network mutations\n      const mutationsPerSecond = 1000;\n      const randomCallsPerMutation = 10;\n      const testDurationMs = 1000;\n\n      const expectedCalls = mutationsPerSecond * randomCallsPerMutation;\n\n      const start = performance.now();\n      for (let i = 0; i < expectedCalls; i++) {\n        PerformanceOptimizedRandom.neuralRandom();\n      }\n      const actualTime = performance.now() - start;\n\n      const actualCallsPerSecond = expectedCalls / (actualTime / 1000);\n\n      console.log(`Expected: ${expectedCalls} calls in ~1000ms`);\n      console.log(`Actual: ${expectedCalls} calls in ${actualTime.toFixed(2)}ms`);\n      console.log(`Rate: ${actualCallsPerSecond.toFixed(0)} calls/second`);\n\n      expect(actualTime).toBeLessThan(testDurationMs); // Doit finir en moins d'1 seconde\n      expect(actualCallsPerSecond).toBeGreaterThan(expectedCalls); // Doit dépasser le target\n    });\n  });\n\n  describe('Memory Usage', () => {\n    test('should have reasonable memory footprint', () => {\n      const initialMemory = process.memoryUsage();\n      \n      // Generate many random numbers\n      const numbers = [];\n      for (let i = 0; i < 10000; i++) {\n        numbers.push(PerformanceOptimizedRandom.random());\n      }\n\n      const afterGeneration = process.memoryUsage();\n      const memoryIncrease = afterGeneration.heapUsed - initialMemory.heapUsed;\n\n      console.log(`Memory increase: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB`);\n\n      // Memory increase should be reasonable\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // <50MB\n      expect(numbers.length).toBe(10000);\n    });\n  });\n});"],"version":3}