2c4198a15a52758acd476eee3c932c0a
"use strict";

/* istanbul ignore next */
function cov_fw2m078ty() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/ml/behavioral-predictor.ts";
  var hash = "2b5b967e04f483eecd8a73fa6dd8955364a91322";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/ml/behavioral-predictor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 26
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 78
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "9": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "10": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "11": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 44
        }
      },
      "12": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 81
        }
      },
      "13": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 20
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "16": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 23
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "18": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "19": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "20": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "21": {
        start: {
          line: 37,
          column: 25
        },
        end: {
          line: 37,
          column: 61
        }
      },
      "22": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 97
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 24
        }
      },
      "24": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "26": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 51
        }
      },
      "27": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "28": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "29": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 69
        }
      },
      "30": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 50,
          column: 24
        }
      },
      "31": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "32": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 87
        }
      },
      "33": {
        start: {
          line: 52,
          column: 68
        },
        end: {
          line: 52,
          column: 79
        }
      },
      "34": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 21
        }
      },
      "35": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 41
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 58
          },
          end: {
            line: 52,
            column: 59
          }
        },
        loc: {
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 52,
            column: 79
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 36
          }
        }, {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 23,
            column: 44
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 30,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 30,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 37,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 37,
            column: 55
          }
        }, {
          start: {
            line: 37,
            column: 59
          },
          end: {
            line: 37,
            column: 60
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "6": {
        loc: {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 58
          }
        }, {
          start: {
            line: 48,
            column: 62
          },
          end: {
            line: 48,
            column: 63
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/ml/behavioral-predictor.ts",
      mappings: ";;;AAAA,6DAAoD;AACpD,6BAA6B;AAC7B,qEAAqE;AAErE,MAAa,mBAAmB;IAAhC;QACU,YAAO,GAAoC,EAAE,CAAA;QAC7C,UAAK,GAAQ,IAAI,CAAA,CAAC,4BAA4B;IA6CxD,CAAC;IA3CC,KAAK,CAAC,QAAa,EAAE,KAAU;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAA;QACtC,yEAAyE;QACzE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAA;QAC9B,qBAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAA;IACxD,CAAC;IAED,OAAO,CAAC,QAAa;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAA;QAC5B,qFAAqF;QACrF,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;QACpC,qBAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QACzD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,QAAQ;QACN,mEAAmE;QACnE,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,OAAO,CAAC,CAAA;QACzB,IAAI,OAAO,GAAG,CAAC,CAAA;QACf,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;YACvC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK;gBAAE,OAAO,EAAE,CAAA;QAC7C,CAAC;QACD,MAAM,QAAQ,GAAG,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA;QACrD,qBAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QACzE,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEO,UAAU;QAChB,4DAA4D;QAC5D,MAAM,MAAM,GAA2C,EAAE,CAAA;QACzD,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;YACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;gBAAE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;YAClC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAC1D,CAAC;QACD,MAAM,KAAK,GAA2B,EAAE,CAAA;QACxC,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;YACzB,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5E,CAAC;QACD,OAAO,KAAK,CAAA;IACd,CAAC;CACF;AA/CD,kDA+CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/ml/behavioral-predictor.ts"],
      sourcesContent: ["import { logger } from '@shared/utils/secureLogger';\n// ml/behavioral-predictor.ts\r\n// Pr\xE9diction comportementale par apprentissage automatique (Phase 4)\r\n\r\nexport class BehavioralPredictor {\r\n  private history: { features: any, label: any }[] = []\r\n  private model: any = null // Simulation d'un mod\xE8le ML\r\n\r\n  train(features: any, label: any) {\r\n    this.history.push({ features, label })\r\n    // Simulation : le \"mod\xE8le\" est la moyenne des labels pour chaque feature\r\n    this.model = this.buildModel()\r\n    logger.info('[ML] Entra\xEEnement sur un nouvel exemple')\r\n  }\r\n\r\n  predict(features: any): any {\r\n    if (!this.model) return null\r\n    // Simulation : retourne la pr\xE9diction la plus fr\xE9quente pour des features similaires\r\n    const key = JSON.stringify(features)\r\n    const pred = this.model[key] || null\r\n    logger.info('[ML] Pr\xE9diction pour', features, '=>', pred)\r\n    return pred\r\n  }\r\n\r\n  evaluate(): number {\r\n    // Simulation : pr\xE9cision = % de labels retrouv\xE9s dans l'historique\r\n    if (!this.model) return 0\r\n    let correct = 0\r\n    for (const ex of this.history) {\r\n      const key = JSON.stringify(ex.features)\r\n      if (this.model[key] === ex.label) correct++\r\n    }\r\n    const accuracy = correct / (this.history.length || 1)\r\n    logger.info(`[ML] Pr\xE9cision du mod\xE8le : ${(accuracy * 100).toFixed(1)}%`)\r\n    return accuracy\r\n  }\r\n\r\n  private buildModel() {\r\n    // Simulation : dictionnaire feature->label le plus fr\xE9quent\r\n    const counts: Record<string, Record<string, number>> = {}\r\n    for (const ex of this.history) {\r\n      const key = JSON.stringify(ex.features)\r\n      if (!counts[key]) counts[key] = {}\r\n      counts[key][ex.label] = (counts[key][ex.label] || 0) + 1\r\n    }\r\n    const model: Record<string, string> = {}\r\n    for (const key in counts) {\r\n      model[key] = Object.entries(counts[key]).sort((a, b) => b[1] - a[1])[0][0]\r\n    }\r\n    return model\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b5b967e04f483eecd8a73fa6dd8955364a91322"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fw2m078ty = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fw2m078ty();
cov_fw2m078ty().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_fw2m078ty().s[1]++;
exports.BehavioralPredictor = void 0;
const secureLogger_1 =
/* istanbul ignore next */
(cov_fw2m078ty().s[2]++, require("@shared/utils/secureLogger"));
// ml/behavioral-predictor.ts
// Prédiction comportementale par apprentissage automatique (Phase 4)
class BehavioralPredictor {
  constructor() {
    /* istanbul ignore next */
    cov_fw2m078ty().f[0]++;
    cov_fw2m078ty().s[3]++;
    this.history = [];
    /* istanbul ignore next */
    cov_fw2m078ty().s[4]++;
    this.model = null; // Simulation d'un modèle ML
  }
  train(features, label) {
    /* istanbul ignore next */
    cov_fw2m078ty().f[1]++;
    cov_fw2m078ty().s[5]++;
    this.history.push({
      features,
      label
    });
    // Simulation : le "modèle" est la moyenne des labels pour chaque feature
    /* istanbul ignore next */
    cov_fw2m078ty().s[6]++;
    this.model = this.buildModel();
    /* istanbul ignore next */
    cov_fw2m078ty().s[7]++;
    secureLogger_1.logger.info('[ML] Entraînement sur un nouvel exemple');
  }
  predict(features) {
    /* istanbul ignore next */
    cov_fw2m078ty().f[2]++;
    cov_fw2m078ty().s[8]++;
    if (!this.model) {
      /* istanbul ignore next */
      cov_fw2m078ty().b[0][0]++;
      cov_fw2m078ty().s[9]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_fw2m078ty().b[0][1]++;
    }
    // Simulation : retourne la prédiction la plus fréquente pour des features similaires
    const key =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[10]++, JSON.stringify(features));
    const pred =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[11]++,
    /* istanbul ignore next */
    (cov_fw2m078ty().b[1][0]++, this.model[key]) ||
    /* istanbul ignore next */
    (cov_fw2m078ty().b[1][1]++, null));
    /* istanbul ignore next */
    cov_fw2m078ty().s[12]++;
    secureLogger_1.logger.info('[ML] Prédiction pour', features, '=>', pred);
    /* istanbul ignore next */
    cov_fw2m078ty().s[13]++;
    return pred;
  }
  evaluate() {
    /* istanbul ignore next */
    cov_fw2m078ty().f[3]++;
    cov_fw2m078ty().s[14]++;
    // Simulation : précision = % de labels retrouvés dans l'historique
    if (!this.model) {
      /* istanbul ignore next */
      cov_fw2m078ty().b[2][0]++;
      cov_fw2m078ty().s[15]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_fw2m078ty().b[2][1]++;
    }
    let correct =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[16]++, 0);
    /* istanbul ignore next */
    cov_fw2m078ty().s[17]++;
    for (const ex of this.history) {
      const key =
      /* istanbul ignore next */
      (cov_fw2m078ty().s[18]++, JSON.stringify(ex.features));
      /* istanbul ignore next */
      cov_fw2m078ty().s[19]++;
      if (this.model[key] === ex.label) {
        /* istanbul ignore next */
        cov_fw2m078ty().b[3][0]++;
        cov_fw2m078ty().s[20]++;
        correct++;
      } else
      /* istanbul ignore next */
      {
        cov_fw2m078ty().b[3][1]++;
      }
    }
    const accuracy =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[21]++, correct / (
    /* istanbul ignore next */
    (cov_fw2m078ty().b[4][0]++, this.history.length) ||
    /* istanbul ignore next */
    (cov_fw2m078ty().b[4][1]++, 1)));
    /* istanbul ignore next */
    cov_fw2m078ty().s[22]++;
    secureLogger_1.logger.info(`[ML] Précision du modèle : ${(accuracy * 100).toFixed(1)}%`);
    /* istanbul ignore next */
    cov_fw2m078ty().s[23]++;
    return accuracy;
  }
  buildModel() {
    /* istanbul ignore next */
    cov_fw2m078ty().f[4]++;
    // Simulation : dictionnaire feature->label le plus fréquent
    const counts =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[24]++, {});
    /* istanbul ignore next */
    cov_fw2m078ty().s[25]++;
    for (const ex of this.history) {
      const key =
      /* istanbul ignore next */
      (cov_fw2m078ty().s[26]++, JSON.stringify(ex.features));
      /* istanbul ignore next */
      cov_fw2m078ty().s[27]++;
      if (!counts[key]) {
        /* istanbul ignore next */
        cov_fw2m078ty().b[5][0]++;
        cov_fw2m078ty().s[28]++;
        counts[key] = {};
      } else
      /* istanbul ignore next */
      {
        cov_fw2m078ty().b[5][1]++;
      }
      cov_fw2m078ty().s[29]++;
      counts[key][ex.label] = (
      /* istanbul ignore next */
      (cov_fw2m078ty().b[6][0]++, counts[key][ex.label]) ||
      /* istanbul ignore next */
      (cov_fw2m078ty().b[6][1]++, 0)) + 1;
    }
    const model =
    /* istanbul ignore next */
    (cov_fw2m078ty().s[30]++, {});
    /* istanbul ignore next */
    cov_fw2m078ty().s[31]++;
    for (const key in counts) {
      /* istanbul ignore next */
      cov_fw2m078ty().s[32]++;
      model[key] = Object.entries(counts[key]).sort((a, b) => {
        /* istanbul ignore next */
        cov_fw2m078ty().f[5]++;
        cov_fw2m078ty().s[33]++;
        return b[1] - a[1];
      })[0][0];
    }
    /* istanbul ignore next */
    cov_fw2m078ty().s[34]++;
    return model;
  }
}
/* istanbul ignore next */
cov_fw2m078ty().s[35]++;
exports.BehavioralPredictor = BehavioralPredictor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,