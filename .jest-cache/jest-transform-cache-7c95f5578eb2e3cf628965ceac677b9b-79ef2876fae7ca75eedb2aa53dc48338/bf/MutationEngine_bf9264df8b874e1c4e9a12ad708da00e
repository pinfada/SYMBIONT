36cec07093699a688d9e165c511ae1f0
"use strict";

/* istanbul ignore next */
function cov_1cb4ix3zf3() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/MutationEngine.ts";
  var hash = "1e119150339dd6dfd5332396438576caa6961615";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/MutationEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 41
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 14,
          column: 10
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "6": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "7": {
        start: {
          line: 24,
          column: 19
        },
        end: {
          line: 24,
          column: 50
        }
      },
      "8": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "9": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 53
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 18
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "14": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 36,
          column: 67
        }
      },
      "15": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 88
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 47
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "19": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "21": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 41
        }
      },
      "22": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "23": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 92
        }
      },
      "24": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 30
        }
      },
      "25": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 68
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "27": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "28": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 22
        }
      },
      "29": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 60
        }
      },
      "30": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 22
        }
      },
      "31": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 68
        }
      },
      "32": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 22
        }
      },
      "33": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 61
        }
      },
      "34": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 22
        }
      },
      "35": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 40
        }
      },
      "36": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 37
        }
      },
      "37": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "38": {
        start: {
          line: 82,
          column: 37
        },
        end: {
          line: 82,
          column: 67
        }
      },
      "39": {
        start: {
          line: 82,
          column: 68
        },
        end: {
          line: 82,
          column: 81
        }
      },
      "40": {
        start: {
          line: 84,
          column: 0
        },
        end: {
          line: 84,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 24
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 34
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 53
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 22
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 73
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 35
          },
          end: {
            line: 82,
            column: 83
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }, {
          start: {
            line: 36,
            column: 65
          },
          end: {
            line: 36,
            column: 66
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 59
          },
          end: {
            line: 38,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 59
          },
          end: {
            line: 38,
            column: 74
          }
        }, {
          start: {
            line: 38,
            column: 78
          },
          end: {
            line: 38,
            column: 86
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 41
          }
        }, {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 48
          }
        }, {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 92
          }
        }, {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 30
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 34
          },
          end: {
            line: 49,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 44
          },
          end: {
            line: 49,
            column: 57
          }
        }, {
          start: {
            line: 49,
            column: 60
          },
          end: {
            line: 49,
            column: 91
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 24
          },
          end: {
            line: 54,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 24
          },
          end: {
            line: 54,
            column: 41
          }
        }, {
          start: {
            line: 54,
            column: 45
          },
          end: {
            line: 54,
            column: 46
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 22
          }
        }, {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 22
          }
        }, {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 22
          }
        }, {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 22
          }
        }],
        line: 55
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/MutationEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/generative/MutationEngine.ts"],
      sourcesContent: ["// src/generative/MutationEngine.ts\r\n// Syst\xE8me de mutations harmonis\xE9\r\nimport { OrganismMutation, MutationState } from '../shared/types/organism';\r\n\r\n// Seuls les types visuels sont accept\xE9s par le moteur WebGL\r\n// (visual_evolution est ignor\xE9 ici)\r\ntype VisualMutation = Extract<OrganismMutation, { type: 'color_shift' | 'pattern_change' | 'size_fluctuation' | 'opacity_variation' }>;\r\n\r\nexport class MutationEngine {\r\n  // On utilise Map<string, any> car les mutations sont enrichies dynamiquement (startTime, progress)\r\n  private activeMutations: Map<string, any> = new Map();\r\n  private mutationId: number = 0;\r\n  private currentState: MutationState = {\r\n    colorShift: 0,\r\n    patternIntensity: 0,\r\n    sizeMultiplier: 1,\r\n    opacity: 1\r\n  };\r\n\r\n  /**\r\n   * Applique une mutation visuelle (autres types ignor\xE9s)\r\n   */\r\n  public apply(mutation: OrganismMutation): string | undefined {\r\n    if (!['color_shift', 'pattern_change', 'size_fluctuation', 'opacity_variation'].includes(mutation.type)) {\r\n      // Ignorer les mutations non visuelles\r\n      return undefined;\r\n    }\r\n    const id = `mutation_${this.mutationId++}`;\r\n    const visualMutation: VisualMutation = mutation as VisualMutation;\r\n    (visualMutation as any).startTime = performance.now();\r\n    (visualMutation as any).progress = 0;\r\n    this.activeMutations.set(id, visualMutation);\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Met \xE0 jour toutes les mutations actives\r\n   */\r\n  public update(currentTime: number): void {\r\n    for (const [id, mutation] of this.activeMutations.entries()) {\r\n      const elapsed = currentTime - ((mutation as any).startTime || 0);\r\n      const progress = Math.min(elapsed / (mutation as any).duration, 1);\r\n      (mutation as any).progress = this.applyEasing(progress, (mutation as any).easing || 'linear');\r\n      this.updateMutationState(mutation as any);\r\n      if (progress >= 1) {\r\n        this.activeMutations.delete(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyEasing(t: number, easing: string): number {\r\n    switch (easing) {\r\n      case 'ease-in': return t * t;\r\n      case 'ease-out': return t * (2 - t);\r\n      case 'bounce': return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\r\n      default: return t;\r\n    }\r\n  }\r\n\r\n  private updateMutationState(mutation: any): void {\r\n    const factor = (mutation.progress || 0) * mutation.magnitude;\r\n    switch (mutation.type) {\r\n      case 'color_shift':\r\n        this.currentState.colorShift = factor;\r\n        break;\r\n      case 'pattern_change':\r\n        this.currentState.patternIntensity = factor;\r\n        break;\r\n      case 'size_fluctuation':\r\n        this.currentState.sizeMultiplier = 1 + factor * 0.5;\r\n        break;\r\n      case 'opacity_variation':\r\n        this.currentState.opacity = 1 - factor * 0.3;\r\n        break;\r\n    }\r\n  }\r\n\r\n  public getCurrentState(): MutationState {\r\n    return { ...this.currentState };\r\n  }\r\n\r\n  public clearAll(): void {\r\n    this.activeMutations.clear();\r\n    this.currentState = {\r\n      colorShift: 0,\r\n      patternIntensity: 0,\r\n      sizeMultiplier: 1,\r\n      opacity: 1\r\n    };\r\n  }\r\n\r\n  applyMutation(state: any, mutation: any) { state.lastMutation = mutation; return state; }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1e119150339dd6dfd5332396438576caa6961615"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1cb4ix3zf3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1cb4ix3zf3();
cov_1cb4ix3zf3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1cb4ix3zf3().s[1]++;
exports.MutationEngine = void 0;
class MutationEngine {
  constructor() {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[0]++;
    cov_1cb4ix3zf3().s[2]++;
    // On utilise Map<string, any> car les mutations sont enrichies dynamiquement (startTime, progress)
    this.activeMutations = new Map();
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[3]++;
    this.mutationId = 0;
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[4]++;
    this.currentState = {
      colorShift: 0,
      patternIntensity: 0,
      sizeMultiplier: 1,
      opacity: 1
    };
  }
  /**
   * Applique une mutation visuelle (autres types ignorés)
   */
  apply(mutation) {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[1]++;
    cov_1cb4ix3zf3().s[5]++;
    if (!['color_shift', 'pattern_change', 'size_fluctuation', 'opacity_variation'].includes(mutation.type)) {
      /* istanbul ignore next */
      cov_1cb4ix3zf3().b[0][0]++;
      cov_1cb4ix3zf3().s[6]++;
      // Ignorer les mutations non visuelles
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_1cb4ix3zf3().b[0][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_1cb4ix3zf3().s[7]++, `mutation_${this.mutationId++}`);
    const visualMutation =
    /* istanbul ignore next */
    (cov_1cb4ix3zf3().s[8]++, mutation);
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[9]++;
    visualMutation.startTime = performance.now();
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[10]++;
    visualMutation.progress = 0;
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[11]++;
    this.activeMutations.set(id, visualMutation);
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[12]++;
    return id;
  }
  /**
   * Met à jour toutes les mutations actives
   */
  update(currentTime) {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[2]++;
    cov_1cb4ix3zf3().s[13]++;
    for (const [id, mutation] of this.activeMutations.entries()) {
      const elapsed =
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().s[14]++, currentTime - (
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().b[1][0]++, mutation.startTime) ||
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().b[1][1]++, 0)));
      const progress =
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().s[15]++, Math.min(elapsed / mutation.duration, 1));
      /* istanbul ignore next */
      cov_1cb4ix3zf3().s[16]++;
      mutation.progress = this.applyEasing(progress,
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().b[2][0]++, mutation.easing) ||
      /* istanbul ignore next */
      (cov_1cb4ix3zf3().b[2][1]++, 'linear'));
      /* istanbul ignore next */
      cov_1cb4ix3zf3().s[17]++;
      this.updateMutationState(mutation);
      /* istanbul ignore next */
      cov_1cb4ix3zf3().s[18]++;
      if (progress >= 1) {
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[3][0]++;
        cov_1cb4ix3zf3().s[19]++;
        this.activeMutations.delete(id);
      } else
      /* istanbul ignore next */
      {
        cov_1cb4ix3zf3().b[3][1]++;
      }
    }
  }
  applyEasing(t, easing) {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[3]++;
    cov_1cb4ix3zf3().s[20]++;
    switch (easing) {
      case 'ease-in':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[4][0]++;
        cov_1cb4ix3zf3().s[21]++;
        return t * t;
      case 'ease-out':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[4][1]++;
        cov_1cb4ix3zf3().s[22]++;
        return t * (2 - t);
      case 'bounce':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[4][2]++;
        cov_1cb4ix3zf3().s[23]++;
        return t < 0.5 ?
        /* istanbul ignore next */
        (cov_1cb4ix3zf3().b[5][0]++, 4 * t * t * t) :
        /* istanbul ignore next */
        (cov_1cb4ix3zf3().b[5][1]++, 1 - Math.pow(-2 * t + 2, 3) / 2);
      default:
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[4][3]++;
        cov_1cb4ix3zf3().s[24]++;
        return t;
    }
  }
  updateMutationState(mutation) {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[4]++;
    const factor =
    /* istanbul ignore next */
    (cov_1cb4ix3zf3().s[25]++, (
    /* istanbul ignore next */
    (cov_1cb4ix3zf3().b[6][0]++, mutation.progress) ||
    /* istanbul ignore next */
    (cov_1cb4ix3zf3().b[6][1]++, 0)) * mutation.magnitude);
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[26]++;
    switch (mutation.type) {
      case 'color_shift':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[7][0]++;
        cov_1cb4ix3zf3().s[27]++;
        this.currentState.colorShift = factor;
        /* istanbul ignore next */
        cov_1cb4ix3zf3().s[28]++;
        break;
      case 'pattern_change':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[7][1]++;
        cov_1cb4ix3zf3().s[29]++;
        this.currentState.patternIntensity = factor;
        /* istanbul ignore next */
        cov_1cb4ix3zf3().s[30]++;
        break;
      case 'size_fluctuation':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[7][2]++;
        cov_1cb4ix3zf3().s[31]++;
        this.currentState.sizeMultiplier = 1 + factor * 0.5;
        /* istanbul ignore next */
        cov_1cb4ix3zf3().s[32]++;
        break;
      case 'opacity_variation':
        /* istanbul ignore next */
        cov_1cb4ix3zf3().b[7][3]++;
        cov_1cb4ix3zf3().s[33]++;
        this.currentState.opacity = 1 - factor * 0.3;
        /* istanbul ignore next */
        cov_1cb4ix3zf3().s[34]++;
        break;
    }
  }
  getCurrentState() {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[5]++;
    cov_1cb4ix3zf3().s[35]++;
    return {
      ...this.currentState
    };
  }
  clearAll() {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[6]++;
    cov_1cb4ix3zf3().s[36]++;
    this.activeMutations.clear();
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[37]++;
    this.currentState = {
      colorShift: 0,
      patternIntensity: 0,
      sizeMultiplier: 1,
      opacity: 1
    };
  }
  applyMutation(state, mutation) {
    /* istanbul ignore next */
    cov_1cb4ix3zf3().f[7]++;
    cov_1cb4ix3zf3().s[38]++;
    state.lastMutation = mutation;
    /* istanbul ignore next */
    cov_1cb4ix3zf3().s[39]++;
    return state;
  }
}
/* istanbul ignore next */
cov_1cb4ix3zf3().s[40]++;
exports.MutationEngine = MutationEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,