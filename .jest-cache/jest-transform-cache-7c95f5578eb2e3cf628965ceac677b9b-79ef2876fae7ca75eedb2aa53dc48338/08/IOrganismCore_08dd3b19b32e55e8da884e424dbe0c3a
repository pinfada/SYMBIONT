20ce8b5770b9e518244639e43ea47844
"use strict";

// Interface d'abstraction pour OrganismCore
/* istanbul ignore next */
function cov_re1sgkt1z() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/interfaces/IOrganismCore.ts";
  var hash = "b3a4d63355b76841cc8ac95ea4c093679a46c95e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/interfaces/IOrganismCore.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/interfaces/IOrganismCore.ts",
      mappings: ";AAAA,4CAA4C",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/interfaces/IOrganismCore.ts"],
      sourcesContent: ["// Interface d'abstraction pour OrganismCore\r\n\r\nimport { OrganismState, OrganismTraits } from '../../shared/types/organism';\r\nimport { PerformanceMetrics } from './INeuralMesh';\r\n\r\nexport interface ShaderParameters {\r\n  energy: number;\r\n  health: number;\r\n  neuralActivity: number;\r\n  creativity: number;\r\n  focus: number;\r\n  time: number;\r\n}\r\n\r\nexport interface OrganismJSON {\r\n  mesh: any;\r\n  traits: OrganismTraits;\r\n  energy: number;\r\n  health: number;\r\n  dna: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface IOrganismCore {\r\n  // Cycle de vie\r\n  boot(): Promise<void>;\r\n  hibernate(): Promise<void>;\r\n  update(deltaTime?: number): void;\r\n  \r\n  // Stimulation\r\n  stimulate(inputId: string, value: number): void;\r\n  \r\n  // \xC9volution\r\n  mutate(rate?: number): void;\r\n  feed(amount?: number): void;\r\n  \r\n  // \xC9tat et traits\r\n  getTraits(): OrganismTraits;\r\n  setTraits(traits: Partial<OrganismTraits>): void;\r\n  getState(): OrganismState;\r\n  \r\n  // M\xE9triques et export\r\n  getPerformanceMetrics(): Promise<PerformanceMetrics>;\r\n  getShaderParameters(): ShaderParameters;\r\n  toJSON(): OrganismJSON;\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b3a4d63355b76841cc8ac95ea4c093679a46c95e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_re1sgkt1z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_re1sgkt1z();
cov_re1sgkt1z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcmUxc2drdDF6IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL2NvcmUvaW50ZXJmYWNlcy9JT3JnYW5pc21Db3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEludGVyZmFjZSBkJ2Fic3RyYWN0aW9uIHBvdXIgT3JnYW5pc21Db3JlXHJcblxyXG5pbXBvcnQgeyBPcmdhbmlzbVN0YXRlLCBPcmdhbmlzbVRyYWl0cyB9IGZyb20gJy4uLy4uL3NoYXJlZC90eXBlcy9vcmdhbmlzbSc7XHJcbmltcG9ydCB7IFBlcmZvcm1hbmNlTWV0cmljcyB9IGZyb20gJy4vSU5ldXJhbE1lc2gnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaGFkZXJQYXJhbWV0ZXJzIHtcclxuICBlbmVyZ3k6IG51bWJlcjtcclxuICBoZWFsdGg6IG51bWJlcjtcclxuICBuZXVyYWxBY3Rpdml0eTogbnVtYmVyO1xyXG4gIGNyZWF0aXZpdHk6IG51bWJlcjtcclxuICBmb2N1czogbnVtYmVyO1xyXG4gIHRpbWU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPcmdhbmlzbUpTT04ge1xyXG4gIG1lc2g6IGFueTtcclxuICB0cmFpdHM6IE9yZ2FuaXNtVHJhaXRzO1xyXG4gIGVuZXJneTogbnVtYmVyO1xyXG4gIGhlYWx0aDogbnVtYmVyO1xyXG4gIGRuYTogc3RyaW5nO1xyXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElPcmdhbmlzbUNvcmUge1xyXG4gIC8vIEN5Y2xlIGRlIHZpZVxyXG4gIGJvb3QoKTogUHJvbWlzZTx2b2lkPjtcclxuICBoaWJlcm5hdGUoKTogUHJvbWlzZTx2b2lkPjtcclxuICB1cGRhdGUoZGVsdGFUaW1lPzogbnVtYmVyKTogdm9pZDtcclxuICBcclxuICAvLyBTdGltdWxhdGlvblxyXG4gIHN0aW11bGF0ZShpbnB1dElkOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG4gIFxyXG4gIC8vIMOJdm9sdXRpb25cclxuICBtdXRhdGUocmF0ZT86IG51bWJlcik6IHZvaWQ7XHJcbiAgZmVlZChhbW91bnQ/OiBudW1iZXIpOiB2b2lkO1xyXG4gIFxyXG4gIC8vIMOJdGF0IGV0IHRyYWl0c1xyXG4gIGdldFRyYWl0cygpOiBPcmdhbmlzbVRyYWl0cztcclxuICBzZXRUcmFpdHModHJhaXRzOiBQYXJ0aWFsPE9yZ2FuaXNtVHJhaXRzPik6IHZvaWQ7XHJcbiAgZ2V0U3RhdGUoKTogT3JnYW5pc21TdGF0ZTtcclxuICBcclxuICAvLyBNw6l0cmlxdWVzIGV0IGV4cG9ydFxyXG4gIGdldFBlcmZvcm1hbmNlTWV0cmljcygpOiBQcm9taXNlPFBlcmZvcm1hbmNlTWV0cmljcz47XHJcbiAgZ2V0U2hhZGVyUGFyYW1ldGVycygpOiBTaGFkZXJQYXJhbWV0ZXJzO1xyXG4gIHRvSlNPTigpOiBPcmdhbmlzbUpTT047XHJcbn0gIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFBQSxTQUFBQSxjQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7SUFBQUMsU0FBQTtJQUFBQyxDQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO0lBQUFDLENBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXRCLElBQUE7RUFBQTtFQUFBLElBQUF1QixRQUFBLEdBQUF0QixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQW9CLFFBQUEsQ0FBQXhCLElBQUEsS0FBQXdCLFFBQUEsQ0FBQXhCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUF1QixRQUFBLENBQUF4QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFvQixjQUFBLEdBQUFELFFBQUEsQ0FBQXhCLElBQUE7RUFBQSIsImlnbm9yZUxpc3QiOltdfQ==