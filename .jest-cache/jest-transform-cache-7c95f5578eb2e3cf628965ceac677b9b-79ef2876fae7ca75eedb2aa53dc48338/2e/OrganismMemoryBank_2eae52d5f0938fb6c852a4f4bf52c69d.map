{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/OrganismMemoryBank.ts","mappings":";;;AAGA,MAAa,kBAAkB;IAG7B,YAAY,QAAyB;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAEO,MAAM,CAAC,EAAU;QACvB,OAAO,YAAY,EAAE,EAAE,CAAA;IACzB,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,EAAU,EAAE,KAAoB;QACtD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAA;QACjE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE;gBAC9D,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS;oBAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;;oBACzD,OAAO,EAAE,CAAA;YAChB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC3D,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS;oBAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;qBACzD,CAAC;oBACJ,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAuB,CAAA;oBAC/D,IAAI,KAAK,GAA8B,SAAS,CAAA;oBAChD,IAAI,SAAS,EAAE,CAAC;wBACd,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAA;oBAC7D,CAAC;oBACD,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,IAAI,EAAE,EAAE,CAAC,CAAA;gBAC9E,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,SAAmB;QAC3C,8BAA8B;QAC9B,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAA;IACzE,CAAC;IAED,kCAAkC;IAClC,KAAK,CAAC,eAAe;QACnB,sCAAsC;QACtC,6CAA6C;QAC7C,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAA;IACvD,CAAC;IAED,qBAAqB;IACrB,cAAc,CAAC,GAAW;QACxB,iDAAiD;QACjD,+CAA+C;QAC/C,OAAO,CAAC,GAAG,CAAC,8BAA8B,GAAG,EAAE,CAAC,CAAA;IAClD,CAAC;IAEM,OAAO;QACZ,wBAAwB;IAC1B,CAAC;CACF;AA3DD,gDA2DC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/OrganismMemoryBank.ts"],"sourcesContent":["import { OrganismState, OrganismHistory, TimeSpan, ConsolidationResult } from '../shared/types/organism'\r\nimport { SecurityManager } from './SecurityManager'\r\n\r\nexport class OrganismMemoryBank {\r\n  private security: SecurityManager\r\n\r\n  constructor(security: SecurityManager) {\r\n    this.security = security\r\n  }\r\n\r\n  private getKey(id: string): string {\r\n    return `organism_${id}`\r\n  }\r\n\r\n  async saveOrganismState(id: string, state: OrganismState): Promise<void> {\r\n    const encrypted = await this.security.encryptSensitiveData(state)\r\n    return new Promise((resolve, reject) => {\r\n      chrome.storage.local.set({ [this.getKey(id)]: encrypted }, () => {\r\n        if (chrome.runtime.lastError) reject(chrome.runtime.lastError)\r\n        else resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  async loadOrganismHistory(id: string): Promise<OrganismHistory> {\r\n    return new Promise((resolve, reject) => {\r\n      chrome.storage.local.get([this.getKey(id)], async (result) => {\r\n        if (chrome.runtime.lastError) reject(chrome.runtime.lastError)\r\n        else {\r\n          const encrypted = result[this.getKey(id)] as string | undefined\r\n          let state: OrganismState | undefined = undefined\r\n          if (encrypted) {\r\n            state = await this.security.decryptSensitiveData(encrypted)\r\n          }\r\n          resolve({ states: state ? [state] : [], mutations: state?.mutations || [] })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  async consolidateMemories(_timespan: TimeSpan): Promise<ConsolidationResult> {\r\n    // TODO: Consolidation avancée\r\n    return { consolidated: true, details: 'Consolidation non implémentée' }\r\n  }\r\n\r\n  // Hook d'optimisation du stockage\r\n  async optimizeStorage(): Promise<void> {\r\n    // Compression, cache, nettoyage, etc.\r\n    // (À implémenter selon la volumétrie réelle)\r\n    this.logPerformance('Optimisation stockage exécutée')\r\n  }\r\n\r\n  // --- Monitoring ---\r\n  logPerformance(msg: string) {\r\n    // Hook pour loguer ou alerter sur la performance\r\n    // (À remplacer par un vrai monitoring en prod)\r\n    console.log(`[OrganismMemoryBank][Perf] ${msg}`)\r\n  }\r\n\r\n  public cleanup(): void {\r\n    // ... existing code ...\r\n  }\r\n} "],"version":3}