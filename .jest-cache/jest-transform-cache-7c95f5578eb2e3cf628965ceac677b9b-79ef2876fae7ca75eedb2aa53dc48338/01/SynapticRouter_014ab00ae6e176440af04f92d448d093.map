{"version":3,"names":["cov_23ublqqmk2","actualCoverage","s","NeuralMesh_1","require","EventEmitter","constructor","f","SynapticRouter","predictions","Map","cache","routes","neuralMesh","NeuralMesh","setupLearningLoop","getInstance","instance","b","routeImpulse","impulse","routeKey","getRouteKey","optimizedRoute","findOptimalRoute","predicted","console","log","type","predictedResponse","response","performRouting","route","learnFromRouting","target","addRoute","handler","set","processImpulse","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/messaging/SynapticRouter.ts"],"sourcesContent":["import { NeuralMesh } from '../neural/NeuralMesh';\r\n\r\n// Types minimaux pour lever les erreurs\r\nclass EventEmitter {\r\n  constructor() {}\r\n}\r\n\r\ninterface RoutePrection { predicted?: any; predictedResponse?: any; route?: any; }\r\ninterface CachedResponse { response: any; timestamp: number; }\r\ninterface NeuralImpulse { type: string; [key: string]: any; }\r\n\r\nexport class SynapticRouter extends EventEmitter {\r\n  private static instance: SynapticRouter;\r\n  // @ts-expect-error Mesh r√©serv√© pour usage futur\r\n  private neuralMesh: NeuralMesh;\r\n  // @ts-expect-error Pr√©dictions r√©serv√©es pour usage futur\r\n  private predictions: Map<string, RoutePrection> = new Map();\r\n  // @ts-expect-error Cache r√©serv√© pour usage futur\r\n  private cache: Map<string, CachedResponse> = new Map();\r\n  private routes: Map<string, any> = new Map();\r\n  \r\n  private constructor() {\r\n    super();\r\n    this.neuralMesh = new NeuralMesh();\r\n    this.setupLearningLoop();\r\n  }\r\n\r\n  public static getInstance(): SynapticRouter {\r\n    if (!SynapticRouter.instance) {\r\n      SynapticRouter.instance = new SynapticRouter();\r\n    }\r\n    return SynapticRouter.instance;\r\n  }\r\n\r\n  public async routeImpulse(impulse: NeuralImpulse): Promise<any> {\r\n    const routeKey = this.getRouteKey(impulse);\r\n    \r\n    // Tentative pr√©dictive\r\n    const optimizedRoute = await this.findOptimalRoute(impulse);\r\n    \r\n    if (optimizedRoute.predicted) {\r\n      console.log(`üß† Predicted route for ${impulse.type}`);\r\n      return optimizedRoute.predictedResponse;\r\n    }\r\n\r\n    // Route standard\r\n    const response = await this.performRouting(impulse, optimizedRoute.route);\r\n    \r\n    // Apprentissage\r\n    this.learnFromRouting(routeKey, optimizedRoute.route, response);\r\n    \r\n    return response;\r\n  }\r\n\r\n  private setupLearningLoop(): void {}\r\n  // @ts-expect-error Param√®tre r√©serv√© pour usage futur\r\n  private getRouteKey(impulse: NeuralImpulse): string { return '' }\r\n  // @ts-expect-error Param√®tre r√©serv√© pour usage futur\r\n  private async findOptimalRoute(impulse: NeuralImpulse): Promise<any> { return {}; }\r\n  // @ts-expect-error Param√®tres r√©serv√©s pour usage futur\r\n  private async performRouting(impulse: NeuralImpulse, route: any): Promise<any> { return {}; }\r\n  // @ts-expect-error Param√®tres r√©serv√©s pour usage futur\r\n  private learnFromRouting(routeKey: string, route: any, response: any): void {}\r\n\r\n  // @ts-expect-error Param√®tres r√©serv√©s pour usage futur\r\n  route(type: string, target: string): any {\r\n    return null;\r\n  }\r\n\r\n  addRoute(type: string, handler: any): void {\r\n    this.routes.set(type, handler);\r\n  }\r\n\r\n  // @ts-expect-error Param√®tre r√©serv√© pour usage futur\r\n  processImpulse(impulse: any): any {\r\n    return null;\r\n  }\r\n\r\n  // Suite de l'impl√©mentation...\r\n}"],"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","ignoreList":[]}