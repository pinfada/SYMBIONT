{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/FeatureFlagService.ts"],"sourcesContent":["/**\n * FeatureFlagService - Gestion centralisée des feature flags\n * Sépare proprement le comportement dev/staging/production\n */\n\nexport interface FeatureFlags {\n  USE_REAL_METRICS: boolean;\n  USE_REAL_DNA: boolean;\n  USE_REAL_BEHAVIOR: boolean;\n  USE_BACKEND_API: boolean;\n  ENABLE_DEBUG_LOGGING: boolean;\n  ENABLE_PERFORMANCE_PROFILING: boolean;\n  ENABLE_MOCK_DATA: boolean;\n  ENABLE_SECURITY_AUDIT: boolean;\n  ENABLE_ADVANCED_ANALYTICS: boolean;\n  ENABLE_A_B_TESTING: boolean;\n}\n\nexport type Environment = 'development' | 'staging' | 'production';\n\nclass FeatureFlagService {\n  private static instance: FeatureFlagService;\n  private environment: Environment;\n  private flags: FeatureFlags;\n  private overrides: Partial<FeatureFlags> = {};\n\n  private constructor() {\n    this.environment = this.detectEnvironment();\n    this.flags = this.initializeFlags();\n    this.loadOverrides();\n  }\n\n  static getInstance(): FeatureFlagService {\n    if (!FeatureFlagService.instance) {\n      FeatureFlagService.instance = new FeatureFlagService();\n    }\n    return FeatureFlagService.instance;\n  }\n\n  /**\n   * Détecte l'environnement actuel\n   */\n  private detectEnvironment(): Environment {\n    // 1. Variable d'environnement explicite\n    const nodeEnv = process.env.NODE_ENV;\n    if (nodeEnv === 'production') return 'production';\n    if (nodeEnv === 'staging') return 'staging';\n    if (nodeEnv === 'development') return 'development';\n\n    // 2. Détection par URL (pour extensions)\n    if (typeof window !== 'undefined') {\n      const url = window.location.href;\n      if (url.includes('staging')) return 'staging';\n      if (url.includes('localhost') || url.includes('127.0.0.1')) return 'development';\n      if (url.startsWith('chrome-extension://')) {\n        // Extension en prod si pas de marqueur dev\n        return url.includes('dev') ? 'development' : 'production';\n      }\n    }\n\n    // 3. Fallback développement\n    return 'development';\n  }\n\n  /**\n   * Initialise les flags selon l'environnement\n   */\n  private initializeFlags(): FeatureFlags {\n    const baseFlags: FeatureFlags = {\n      USE_REAL_METRICS: false,\n      USE_REAL_DNA: false,\n      USE_REAL_BEHAVIOR: false,\n      USE_BACKEND_API: false,\n      ENABLE_DEBUG_LOGGING: false,\n      ENABLE_PERFORMANCE_PROFILING: false,\n      ENABLE_MOCK_DATA: true,\n      ENABLE_SECURITY_AUDIT: false,\n      ENABLE_ADVANCED_ANALYTICS: false,\n      ENABLE_A_B_TESTING: false\n    };\n\n    switch (this.environment) {\n      case 'development':\n        return {\n          ...baseFlags,\n          ENABLE_DEBUG_LOGGING: true,\n          ENABLE_PERFORMANCE_PROFILING: true,\n          ENABLE_MOCK_DATA: true,\n          ENABLE_SECURITY_AUDIT: true,\n          // Possibilité d'activer vraies données en dev pour tests\n          USE_REAL_METRICS: this.getEnvBoolean('USE_REAL_METRICS', false),\n          USE_REAL_DNA: this.getEnvBoolean('USE_REAL_DNA', false),\n          USE_REAL_BEHAVIOR: this.getEnvBoolean('USE_REAL_BEHAVIOR', false),\n          USE_BACKEND_API: this.getEnvBoolean('USE_BACKEND_API', false)\n        };\n\n      case 'staging':\n        return {\n          ...baseFlags,\n          USE_REAL_METRICS: true,\n          USE_REAL_DNA: true,\n          USE_REAL_BEHAVIOR: true,\n          USE_BACKEND_API: true,\n          ENABLE_DEBUG_LOGGING: false,\n          ENABLE_PERFORMANCE_PROFILING: true,\n          ENABLE_MOCK_DATA: false,\n          ENABLE_SECURITY_AUDIT: true,\n          ENABLE_ADVANCED_ANALYTICS: true,\n          ENABLE_A_B_TESTING: true\n        };\n\n      case 'production':\n        return {\n          ...baseFlags,\n          USE_REAL_METRICS: true,\n          USE_REAL_DNA: true,\n          USE_REAL_BEHAVIOR: true,\n          USE_BACKEND_API: true,\n          ENABLE_DEBUG_LOGGING: false,\n          ENABLE_PERFORMANCE_PROFILING: false,\n          ENABLE_MOCK_DATA: false,\n          ENABLE_SECURITY_AUDIT: false,\n          ENABLE_ADVANCED_ANALYTICS: true,\n          ENABLE_A_B_TESTING: false // Désactivé par défaut en prod\n        };\n\n      default:\n        return baseFlags;\n    }\n  }\n\n  /**\n   * Charge les overrides depuis localStorage et variables d'env\n   */\n  private loadOverrides(): void {\n    // 1. Variables d'environnement\n    Object.keys(this.flags).forEach(flag => {\n      const envValue = process.env[`SYMBIONT_${flag}`];\n      if (envValue !== undefined) {\n        this.overrides[flag as keyof FeatureFlags] = envValue === 'true';\n      }\n    });\n\n    // 2. localStorage (pour tests manuels en dev)\n    if (this.environment === 'development' && typeof localStorage !== 'undefined') {\n      Object.keys(this.flags).forEach(flag => {\n        const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n        const storageValue = localStorage.getItem(storageKey);\n        if (storageValue !== null) {\n          this.overrides[flag as keyof FeatureFlags] = storageValue === 'true';\n        }\n      });\n    }\n  }\n\n  /**\n   * Obtient la valeur d'un feature flag\n   */\n  isEnabled(flag: keyof FeatureFlags): boolean {\n    // 1. Override explicite\n    if (this.overrides[flag] !== undefined) {\n      return this.overrides[flag]!;\n    }\n\n    // 2. Valeur par défaut selon environnement\n    return this.flags[flag];\n  }\n\n  /**\n   * Override temporaire d'un flag (dev uniquement)\n   */\n  setFlag(flag: keyof FeatureFlags, value: boolean): void {\n    if (this.environment !== 'development') {\n      console.warn(`⚠️ Override de feature flag '${flag}' ignoré en ${this.environment}`);\n      return;\n    }\n\n    this.overrides[flag] = value;\n    \n    // Sauvegarder en localStorage pour persistence\n    if (typeof localStorage !== 'undefined') {\n      const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n      localStorage.setItem(storageKey, value.toString());\n    }\n\n    console.log(`🔧 Feature flag '${flag}' défini à ${value}`);\n  }\n\n  /**\n   * Remet à zéro tous les overrides\n   */\n  resetOverrides(): void {\n    if (this.environment !== 'development') {\n      console.warn('⚠️ Reset des overrides ignoré en production');\n      return;\n    }\n\n    this.overrides = {};\n    \n    // Nettoyer localStorage\n    if (typeof localStorage !== 'undefined') {\n      Object.keys(this.flags).forEach(flag => {\n        const storageKey = `symbiont_feature_${flag.toLowerCase()}`;\n        localStorage.removeItem(storageKey);\n      });\n    }\n\n    console.log('🔄 Tous les feature flags remis aux valeurs par défaut');\n  }\n\n  /**\n   * Obtient l'environnement actuel\n   */\n  getEnvironment(): Environment {\n    return this.environment;\n  }\n\n  /**\n   * Obtient tous les flags actuels (pour debug)\n   */\n  getAllFlags(): FeatureFlags & { environment: Environment } {\n    const resolvedFlags: FeatureFlags = {} as FeatureFlags;\n    \n    Object.keys(this.flags).forEach(flag => {\n      resolvedFlags[flag as keyof FeatureFlags] = this.isEnabled(flag as keyof FeatureFlags);\n    });\n\n    return {\n      ...resolvedFlags,\n      environment: this.environment\n    };\n  }\n\n  /**\n   * Vérifie si on est en mode développement\n   */\n  isDevelopment(): boolean {\n    return this.environment === 'development';\n  }\n\n  /**\n   * Vérifie si on est en mode staging\n   */\n  isStaging(): boolean {\n    return this.environment === 'staging';\n  }\n\n  /**\n   * Vérifie si on est en mode production\n   */\n  isProduction(): boolean {\n    return this.environment === 'production';\n  }\n\n  /**\n   * Exécute du code conditionnel selon l'environnement\n   */\n  runInEnvironment<T>(\n    handlers: {\n      development?: () => T;\n      staging?: () => T;\n      production?: () => T;\n      default?: () => T;\n    }\n  ): T | undefined {\n    const handler = handlers[this.environment] || handlers.default;\n    return handler?.();\n  }\n\n  /**\n   * Log conditionnel selon les feature flags\n   */\n  debugLog(message: string, ...args: any[]): void {\n    if (this.isEnabled('ENABLE_DEBUG_LOGGING')) {\n      console.log(`🐛 [SYMBIONT Debug] ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Performance profiling conditionnel\n   */\n  profileOperation<T>(name: string, operation: () => T): T {\n    if (!this.isEnabled('ENABLE_PERFORMANCE_PROFILING')) {\n      return operation();\n    }\n\n    const start = performance.now();\n    const result = operation();\n    const duration = performance.now() - start;\n    \n    console.log(`⏱️ [SYMBIONT Profile] ${name}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  }\n\n  /**\n   * Exécution conditionnelle selon feature flag\n   */\n  whenEnabled<T>(flag: keyof FeatureFlags, operation: () => T): T | undefined {\n    return this.isEnabled(flag) ? operation() : undefined;\n  }\n\n  /**\n   * Utilitaire pour lire variables d'environnement boolean\n   */\n  private getEnvBoolean(key: string, defaultValue: boolean): boolean {\n    const value = process.env[key];\n    if (value === undefined) return defaultValue;\n    return value.toLowerCase() === 'true';\n  }\n\n  /**\n   * Validation de sécurité - vérifie qu'on n'utilise pas de données mock en prod\n   */\n  validateProductionSafety(): void {\n    if (!this.isProduction()) return;\n\n    const unsafeFlags = [\n      'ENABLE_MOCK_DATA',\n      'ENABLE_DEBUG_LOGGING'\n    ];\n\n    const violations = unsafeFlags.filter(flag => \n      this.isEnabled(flag as keyof FeatureFlags)\n    );\n\n    if (violations.length > 0) {\n      throw new Error(\n        `🚨 SÉCURITÉ: Flags dangereux activés en production: ${violations.join(', ')}`\n      );\n    }\n  }\n}\n\nexport default FeatureFlagService;"],"version":3}