d697b4a9cc77957694d5cf5efffdf688
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hybrid_storage_manager_1 = require("../src/storage/hybrid-storage-manager");
describe('HybridStorageManager - Stress & Failover', () => {
    let storage;
    beforeEach(() => {
        storage = new hybrid_storage_manager_1.HybridStorageManager();
    });
    it('stocke et récupère 1000 clés sans perte', async () => {
        const N = 1000;
        for (let i = 0; i < N; i++) {
            await storage.store('key' + i, { v: i });
        }
        let ok = true;
        for (let i = 0; i < N; i++) {
            const val = await storage.retrieve('key' + i);
            if (!val || val.v !== i)
                ok = false;
        }
        expect(ok).toBe(true);
    });
    it('récupère la donnée après corruption mémoire (failover chrome.storage)', async () => {
        await storage.store('failover', { v: 42 });
        storage.memoryCache.clear();
        const val = await storage.retrieve('failover');
        expect(val && val.v).toBe(42);
    });
    it('récupère la donnée après corruption chrome.storage (failover IndexedDB/localStorage)', async () => {
        await storage.store('failover2', { v: 99 });
        // Simule une corruption chrome.storage
        const orig = storage['persistentStorage'];
        storage['persistentStorage'] = { get: (_, cb) => cb({}), set: (_, cb) => cb() };
        const val = await storage.retrieve('failover2');
        expect(val && val.v).toBe(99);
        storage['persistentStorage'] = orig;
    });
    it('auto-répare une divergence entre couches', async () => {
        await storage.store('diverge', { v: 1 });
        // Simule une divergence : mémoire = 1, chrome.storage = 2, localStorage = 1
        storage['memoryCache'].set('diverge', { v: 1 });
        await storage['persistentStorage'].set({ diverge: { v: 2 } }, () => { });
        await storage['emergencyLocalStorage'].setItem('diverge', JSON.stringify({ v: 1 }));
        // Déclenche le monitoring d'intégrité manuellement
        await storage.setupIntegrityMonitoring();
        // Après monitoring, la valeur majoritaire (1) doit être restaurée partout
        const val = await storage.retrieve('diverge');
        expect(val && val.v).toBe(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL0h5YnJpZFN0b3JhZ2VNYW5hZ2VyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRkFBNEU7QUFFNUUsUUFBUSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtJQUN4RCxJQUFJLE9BQTZCLENBQUE7SUFFakMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sR0FBRyxJQUFJLDZDQUFvQixFQUFFLENBQUE7SUFDdEMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMseUNBQXlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdkQsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzNCLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUNELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQTtRQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMzQixNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzdDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUFFLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFDckMsQ0FBQztRQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsdUVBQXVFLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckYsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUV6QztRQUFDLE9BQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDckMsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzlDLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvQixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxzRkFBc0YsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDM0MsdUNBQXVDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3pDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFTLENBQUE7UUFDMUcsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM3QixPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxJQUFJLENBQUE7SUFDckMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEQsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3hDLDRFQUE0RTtRQUM1RSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdkUsTUFBTSxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ25GLG1EQUFtRDtRQUNuRCxNQUFPLE9BQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO1FBQ2pELDBFQUEwRTtRQUMxRSxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDN0MsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL0h5YnJpZFN0b3JhZ2VNYW5hZ2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHlicmlkU3RvcmFnZU1hbmFnZXIgfSBmcm9tICcuLi9zcmMvc3RvcmFnZS9oeWJyaWQtc3RvcmFnZS1tYW5hZ2VyJ1xyXG5cclxuZGVzY3JpYmUoJ0h5YnJpZFN0b3JhZ2VNYW5hZ2VyIC0gU3RyZXNzICYgRmFpbG92ZXInLCAoKSA9PiB7XHJcbiAgbGV0IHN0b3JhZ2U6IEh5YnJpZFN0b3JhZ2VNYW5hZ2VyXHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc3RvcmFnZSA9IG5ldyBIeWJyaWRTdG9yYWdlTWFuYWdlcigpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3N0b2NrZSBldCByw6ljdXDDqHJlIDEwMDAgY2zDqXMgc2FucyBwZXJ0ZScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IE4gPSAxMDAwXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xyXG4gICAgICBhd2FpdCBzdG9yYWdlLnN0b3JlKCdrZXknICsgaSwgeyB2OiBpIH0pXHJcbiAgICB9XHJcbiAgICBsZXQgb2sgPSB0cnVlXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xyXG4gICAgICBjb25zdCB2YWwgPSBhd2FpdCBzdG9yYWdlLnJldHJpZXZlKCdrZXknICsgaSlcclxuICAgICAgaWYgKCF2YWwgfHwgdmFsLnYgIT09IGkpIG9rID0gZmFsc2VcclxuICAgIH1cclxuICAgIGV4cGVjdChvaykudG9CZSh0cnVlKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdyw6ljdXDDqHJlIGxhIGRvbm7DqWUgYXByw6hzIGNvcnJ1cHRpb24gbcOpbW9pcmUgKGZhaWxvdmVyIGNocm9tZS5zdG9yYWdlKScsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHN0b3JhZ2Uuc3RvcmUoJ2ZhaWxvdmVyJywgeyB2OiA0MiB9KVxyXG4gICAgLy8gU2ltdWxlIHVuZSBjb3JydXB0aW9uIG3DqW1vaXJlXHJcbiAgICA7KHN0b3JhZ2UgYXMgYW55KS5tZW1vcnlDYWNoZS5jbGVhcigpXHJcbiAgICBjb25zdCB2YWwgPSBhd2FpdCBzdG9yYWdlLnJldHJpZXZlKCdmYWlsb3ZlcicpXHJcbiAgICBleHBlY3QodmFsICYmIHZhbC52KS50b0JlKDQyKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdyw6ljdXDDqHJlIGxhIGRvbm7DqWUgYXByw6hzIGNvcnJ1cHRpb24gY2hyb21lLnN0b3JhZ2UgKGZhaWxvdmVyIEluZGV4ZWREQi9sb2NhbFN0b3JhZ2UpJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgc3RvcmFnZS5zdG9yZSgnZmFpbG92ZXIyJywgeyB2OiA5OSB9KVxyXG4gICAgLy8gU2ltdWxlIHVuZSBjb3JydXB0aW9uIGNocm9tZS5zdG9yYWdlXHJcbiAgICBjb25zdCBvcmlnID0gc3RvcmFnZVsncGVyc2lzdGVudFN0b3JhZ2UnXVxyXG4gICAgc3RvcmFnZVsncGVyc2lzdGVudFN0b3JhZ2UnXSA9IHsgZ2V0OiAoXzogYW55LCBjYjogYW55KSA9PiBjYih7fSksIHNldDogKF86IGFueSwgY2I6IGFueSkgPT4gY2IoKSB9IGFzIGFueVxyXG4gICAgY29uc3QgdmFsID0gYXdhaXQgc3RvcmFnZS5yZXRyaWV2ZSgnZmFpbG92ZXIyJylcclxuICAgIGV4cGVjdCh2YWwgJiYgdmFsLnYpLnRvQmUoOTkpXHJcbiAgICBzdG9yYWdlWydwZXJzaXN0ZW50U3RvcmFnZSddID0gb3JpZ1xyXG4gIH0pXHJcblxyXG4gIGl0KCdhdXRvLXLDqXBhcmUgdW5lIGRpdmVyZ2VuY2UgZW50cmUgY291Y2hlcycsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHN0b3JhZ2Uuc3RvcmUoJ2RpdmVyZ2UnLCB7IHY6IDEgfSlcclxuICAgIC8vIFNpbXVsZSB1bmUgZGl2ZXJnZW5jZSA6IG3DqW1vaXJlID0gMSwgY2hyb21lLnN0b3JhZ2UgPSAyLCBsb2NhbFN0b3JhZ2UgPSAxXHJcbiAgICBzdG9yYWdlWydtZW1vcnlDYWNoZSddLnNldCgnZGl2ZXJnZScsIHsgdjogMSB9KVxyXG4gICAgYXdhaXQgc3RvcmFnZVsncGVyc2lzdGVudFN0b3JhZ2UnXS5zZXQoeyBkaXZlcmdlOiB7IHY6IDIgfSB9LCAoKSA9PiB7fSlcclxuICAgIGF3YWl0IHN0b3JhZ2VbJ2VtZXJnZW5jeUxvY2FsU3RvcmFnZSddLnNldEl0ZW0oJ2RpdmVyZ2UnLCBKU09OLnN0cmluZ2lmeSh7IHY6IDEgfSkpXHJcbiAgICAvLyBEw6ljbGVuY2hlIGxlIG1vbml0b3JpbmcgZCdpbnTDqWdyaXTDqSBtYW51ZWxsZW1lbnRcclxuICAgIGF3YWl0IChzdG9yYWdlIGFzIGFueSkuc2V0dXBJbnRlZ3JpdHlNb25pdG9yaW5nKClcclxuICAgIC8vIEFwcsOocyBtb25pdG9yaW5nLCBsYSB2YWxldXIgbWFqb3JpdGFpcmUgKDEpIGRvaXQgw6p0cmUgcmVzdGF1csOpZSBwYXJ0b3V0XHJcbiAgICBjb25zdCB2YWwgPSBhd2FpdCBzdG9yYWdlLnJldHJpZXZlKCdkaXZlcmdlJylcclxuICAgIGV4cGVjdCh2YWwgJiYgdmFsLnYpLnRvQmUoMSlcclxuICB9KVxyXG59KSAiXSwidmVyc2lvbiI6M30=