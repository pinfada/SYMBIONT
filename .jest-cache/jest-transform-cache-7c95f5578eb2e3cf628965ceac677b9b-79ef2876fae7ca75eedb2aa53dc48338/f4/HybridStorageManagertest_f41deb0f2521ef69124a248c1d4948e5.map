{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/HybridStorageManager.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/HybridStorageManager.test.ts"],"sourcesContent":["import { HybridStorageManager } from '../src/storage/hybrid-storage-manager'\r\n\r\ndescribe('HybridStorageManager - Stress & Failover', () => {\r\n  let storage: HybridStorageManager\r\n\r\n  beforeEach(() => {\r\n    storage = new HybridStorageManager()\r\n  })\r\n\r\n  it('stocke et récupère 1000 clés sans perte', async () => {\r\n    const N = 1000\r\n    for (let i = 0; i < N; i++) {\r\n      await storage.store('key' + i, { v: i })\r\n    }\r\n    let ok = true\r\n    for (let i = 0; i < N; i++) {\r\n      const val = await storage.retrieve('key' + i)\r\n      if (!val || val.v !== i) ok = false\r\n    }\r\n    expect(ok).toBe(true)\r\n  })\r\n\r\n  it('récupère la donnée après corruption mémoire (failover chrome.storage)', async () => {\r\n    await storage.store('failover', { v: 42 })\r\n    // Simule une corruption mémoire\r\n    ;(storage as any).memoryCache.clear()\r\n    const val = await storage.retrieve('failover')\r\n    expect(val && val.v).toBe(42)\r\n  })\r\n\r\n  it('récupère la donnée après corruption chrome.storage (failover IndexedDB/localStorage)', async () => {\r\n    await storage.store('failover2', { v: 99 })\r\n    // Simule une corruption chrome.storage\r\n    const orig = storage['persistentStorage']\r\n    storage['persistentStorage'] = { get: (_: any, cb: any) => cb({}), set: (_: any, cb: any) => cb() } as any\r\n    const val = await storage.retrieve('failover2')\r\n    expect(val && val.v).toBe(99)\r\n    storage['persistentStorage'] = orig\r\n  })\r\n\r\n  it('auto-répare une divergence entre couches', async () => {\r\n    await storage.store('diverge', { v: 1 })\r\n    // Simule une divergence : mémoire = 1, chrome.storage = 2, localStorage = 1\r\n    storage['memoryCache'].set('diverge', { v: 1 })\r\n    await storage['persistentStorage'].set({ diverge: { v: 2 } }, () => {})\r\n    await storage['emergencyLocalStorage'].setItem('diverge', JSON.stringify({ v: 1 }))\r\n    // Déclenche le monitoring d'intégrité manuellement\r\n    await (storage as any).setupIntegrityMonitoring()\r\n    // Après monitoring, la valeur majoritaire (1) doit être restaurée partout\r\n    const val = await storage.retrieve('diverge')\r\n    expect(val && val.v).toBe(1)\r\n  })\r\n}) "],"version":3}