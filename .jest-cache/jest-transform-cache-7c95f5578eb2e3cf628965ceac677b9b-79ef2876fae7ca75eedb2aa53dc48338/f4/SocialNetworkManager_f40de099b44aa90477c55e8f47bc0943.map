{"version":3,"names":["cov_r5dhot8zr","actualCoverage","s","secureRandom_1","require","randomUUID","f","replace","c","r","SecureRandom","random","v","b","toString","SocialNetworkManager","constructor","memoryBank","security","invitations","_collectiveSessions","Map","generateInvitation","inviterId","context","anonymizedContext","behaviorPattern","anonymizeForSharing","code","invitation","expirationTime","Date","now","createdBy","createdAt","push","facilitateSharedMutation","source","target","history1","loadOrganismHistory","history2","org1","states","org2","id","traitChanges","compatibility","timestamp","mutationType","traits","Object","keys","diff","forEach","trait","Math","abs","length","saveOrganismState","detectCollectiveSync","userIds","fuseTraits","traitSums","count","userId","history","org","k","entries","fused","applyCollectiveBonus","bonus","min","triggerCollectiveWake","trigger","sync","success","details","fusedTraits","empathy","creativity","JSON","stringify","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/SocialNetworkManager.ts"],"sourcesContent":["import { InvitationContext, InvitationCode, SharedMutationResult, CollectiveTrigger, WakeResult } from '../shared/types/social'\r\nimport { BehaviorPattern } from '../shared/types/organism'\r\nimport { OrganismMemoryBank } from '../background/OrganismMemoryBank'\r\nimport { SecurityManager } from '../background/SecurityManager'\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\n\r\nfunction randomUUID(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    const r = SecureRandom.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8)\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\ninterface Invitation {\r\n  code: string\r\n  context: InvitationContext\r\n  expirationTime: number\r\n  createdBy: string\r\n  createdAt: number\r\n}\r\n\r\nexport class SocialNetworkManager {\r\n  private invitations: Invitation[] = []\r\n  private memoryBank: OrganismMemoryBank\r\n  private security: SecurityManager\r\n  // @ts-expect-error Sessions réservées pour usage futur\r\n  private _collectiveSessions: Map<string, { participants: string[], traits: Record<string, number> }> = new Map()\r\n\r\n  constructor(memoryBank: OrganismMemoryBank, security: SecurityManager) {\r\n    this.memoryBank = memoryBank\r\n    this.security = security\r\n  }\r\n\r\n  async generateInvitation(inviterId: string, context: InvitationContext): Promise<InvitationCode> {\r\n    // Anonymisation du contexte comportemental\r\n    const anonymizedContext = {\r\n      ...context,\r\n      behaviorPattern: this.security.anonymizeForSharing(context.behaviorPattern as BehaviorPattern)\r\n    }\r\n    const code = randomUUID()\r\n    const invitation: Invitation = {\r\n      code,\r\n      context: anonymizedContext,\r\n      expirationTime: Date.now() + 24 * 60 * 60 * 1000, // 24h\r\n      createdBy: inviterId,\r\n      createdAt: Date.now()\r\n    }\r\n    this.invitations.push(invitation)\r\n    return code\r\n  }\r\n\r\n  async facilitateSharedMutation(source: string, target: string): Promise<SharedMutationResult> {\r\n    // Chargement des organismes depuis la mémoire centrale\r\n    const history1 = await this.memoryBank.loadOrganismHistory(source)\r\n    const history2 = await this.memoryBank.loadOrganismHistory(target)\r\n    const org1 = history1.states[0]\r\n    const org2 = history2.states[0]\r\n    if (!org1 || !org2) {\r\n      return {\r\n        id: '', traitChanges: {}, compatibility: 0, timestamp: Date.now(), mutationType: 'social_exchange'\r\n      }\r\n    }\r\n    // Calcul compatibilité\r\n    const traits = Object.keys(org1.traits)\r\n    let diff = 0\r\n    traits.forEach(trait => {\r\n      diff += Math.abs((org1.traits[trait] || 0) - (org2.traits[trait] || 0))\r\n    })\r\n    const compatibility = 1 - diff / traits.length\r\n    // Sélection de traits à partager\r\n    const traitChanges: Record<string, number> = {}\r\n    traits.forEach(trait => {\r\n      if (SecureRandom.random() < 0.5) {\r\n        traitChanges[trait] = (org1.traits[trait] + org2.traits[trait]) / 2\r\n        // Application de la mutation sur les deux organismes\r\n        org1.traits[trait] = traitChanges[trait]\r\n        org2.traits[trait] = traitChanges[trait]\r\n      }\r\n    })\r\n    // Anonymisation des données comportementales échangées (exemple)\r\n    // (À adapter selon le format réel des échanges)\r\n    // const anonymizedData = this.security.anonymizeForSharing(...)\r\n    // Sauvegarde des organismes modifiés\r\n    await this.memoryBank.saveOrganismState(source, org1)\r\n    await this.memoryBank.saveOrganismState(target, org2)\r\n    return {\r\n      id: randomUUID(),\r\n      traitChanges,\r\n      compatibility,\r\n      timestamp: Date.now(),\r\n      mutationType: 'social_exchange'\r\n    }\r\n  }\r\n\r\n  // Détecte une synchronisation collective (plusieurs utilisateurs)\r\n  async detectCollectiveSync(userIds: string[]): Promise<boolean> {\r\n    // Si >3 utilisateurs actifs en même temps, on considère une synchro\r\n    return userIds.length >= 3\r\n  }\r\n\r\n  // Fusionne les traits de plusieurs organismes (moyenne)\r\n  async fuseTraits(userIds: string[]): Promise<Record<string, number>> {\r\n    const traitSums: Record<string, number> = {}\r\n    let count = 0\r\n    for (const userId of userIds) {\r\n      const history = await this.memoryBank.loadOrganismHistory(userId)\r\n      const org = history.states[0]\r\n      if (!org) continue\r\n      for (const [k, v] of Object.entries(org.traits)) {\r\n        traitSums[k] = (traitSums[k] ?? 0) + (v as number)\r\n      }\r\n      count++\r\n    }\r\n    const fused: Record<string, number> = {}\r\n    for (const [k, v] of Object.entries(traitSums)) {\r\n      fused[k] = v / count\r\n    }\r\n    return fused\r\n  }\r\n\r\n  // Applique un effet collectif (bonus)\r\n  async applyCollectiveBonus(userIds: string[], bonus: Record<string, number>) {\r\n    for (const userId of userIds) {\r\n      const history = await this.memoryBank.loadOrganismHistory(userId)\r\n      const org = history.states[0]\r\n      if (!org) continue\r\n      for (const [k, v] of Object.entries(bonus)) {\r\n        org.traits[k] = Math.min(1, (org.traits[k] ?? 0.5) + (v as number))\r\n      }\r\n      await this.memoryBank.saveOrganismState(userId, org)\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Paramètre réservé pour usage futur\r\n  async triggerCollectiveWake(trigger: CollectiveTrigger, userIds: string[]): Promise<WakeResult> {\r\n    const sync = await this.detectCollectiveSync(userIds)\r\n    if (!sync) return { success: false, details: 'Pas assez de participants.' }\r\n    const fusedTraits = await this.fuseTraits(userIds)\r\n    // Bonus collectif: +0.05 sur l'empathie et la creativite\r\n    await this.applyCollectiveBonus(userIds, { empathy: 0.05, creativity: 0.05 })\r\n    return {\r\n      success: true,\r\n      details: `Reveil collectif reussi pour ${userIds.length} participants. Traits fusionnes: ${JSON.stringify(fusedTraits)}`\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}