fd27feea0e5d47c9ef8510ad1ad432cd
"use strict";
/**
 * RealMetricsService - Service central pour collecte de vraies métriques
 * Remplace Math.random() par des données de performance réelles
 */
Object.defineProperty(exports, "__esModule", { value: true });
class RealMetricsService {
    constructor() {
        this.metricsCache = new Map();
        this.isProduction = process.env.NODE_ENV === 'production';
    }
    static getInstance() {
        if (!RealMetricsService.instance) {
            RealMetricsService.instance = new RealMetricsService();
        }
        return RealMetricsService.instance;
    }
    /**
     * Collecte des métriques mémoire réelles
     */
    async getMemoryMetrics() {
        try {
            // Try Performance Memory API (Chrome)
            if ('memory' in performance) {
                const memInfo = performance.memory;
                return {
                    used: memInfo.usedJSHeapSize,
                    total: memInfo.totalJSHeapSize,
                    percentage: (memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit) * 100
                };
            }
            // Fallback: Estimate via DOM elements count
            const estimate = this.estimateMemoryUsage();
            return {
                used: estimate,
                total: estimate * 2,
                percentage: 50
            };
        }
        catch (error) {
            console.warn('Erreur collecte mémoire, fallback estimation:', error);
            return this.getFallbackMemoryMetrics();
        }
    }
    /**
     * Collecte des métriques de timing réelles
     */
    async getTimingMetrics() {
        try {
            const navigation = performance.getEntriesByType('navigation')[0];
            const paint = performance.getEntriesByType('paint');
            const firstPaint = paint.find(p => p.name === 'first-paint')?.startTime || 0;
            const firstContentfulPaint = paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0;
            return {
                loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,
                domReady: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,
                firstPaint,
                firstContentfulPaint
            };
        }
        catch (error) {
            console.warn('Erreur collecte timing, fallback estimation:', error);
            return this.getFallbackTimingMetrics();
        }
    }
    /**
     * Collecte des métriques réseau réelles
     */
    async getNetworkMetrics() {
        try {
            const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
            // Mesure latency via HEAD request vers favicon
            const latency = await this.measureNetworkLatency();
            return {
                latency,
                bandwidth: connection?.downlink || 0,
                connectionType: connection?.effectiveType || 'unknown'
            };
        }
        catch (error) {
            console.warn('Erreur collecte réseau, fallback estimation:', error);
            return this.getFallbackNetworkMetrics();
        }
    }
    /**
     * Collecte des métriques CPU réelles (estimation)
     */
    async getCPUMetrics() {
        try {
            const usage = await this.estimateCPUUsage();
            const cores = navigator.hardwareConcurrency || 4;
            return { usage, cores };
        }
        catch (error) {
            console.warn('Erreur collecte CPU, fallback estimation:', error);
            return this.getFallbackCPUMetrics();
        }
    }
    /**
     * Interface principale pour les métriques système (remplace Math.random())
     */
    async getSystemMetrics() {
        const cacheKey = 'system_metrics';
        const cached = this.metricsCache.get(cacheKey);
        // Cache 30 secondes pour éviter overhead
        if (cached && Date.now() - cached.timestamp < 30000) {
            return cached.value;
        }
        try {
            const [memory, network, cpu] = await Promise.all([
                this.getMemoryMetrics(),
                this.getNetworkMetrics(),
                this.getCPUMetrics()
            ]);
            const frameRate = this.measureFrameRate();
            const metrics = {
                cpu: cpu.usage,
                memory: memory.percentage,
                latency: network.latency,
                frameRate: await frameRate,
                timestamp: Date.now()
            };
            this.metricsCache.set(cacheKey, { value: metrics, timestamp: Date.now() });
            return metrics;
        }
        catch (error) {
            console.error('Erreur collecte métriques système:', error);
            return this.getFallbackSystemMetrics();
        }
    }
    /**
     * Collecte Web Vitals pour performance UX
     */
    async getWebVitals() {
        try {
            const [lcp, fid, cls, fcp, ttfb] = await Promise.all([
                this.measureLCP(),
                this.measureFID(),
                this.measureCLS(),
                this.measureFCP(),
                this.measureTTFB()
            ]);
            return { lcp, fid, cls, fcp, ttfb };
        }
        catch (error) {
            console.warn('Erreur Web Vitals, fallback defaults:', error);
            return this.getFallbackWebVitals();
        }
    }
    // === MÉTHODES PRIVÉES DE MESURE ===
    async measureNetworkLatency() {
        try {
            const start = performance.now();
            await fetch('/favicon.ico', { method: 'HEAD' });
            return performance.now() - start;
        }
        catch {
            return 50; // Fallback 50ms
        }
    }
    async estimateCPUUsage() {
        return new Promise((resolve) => {
            const start = performance.now();
            const iterations = 50000;
            // CPU stress test léger
            let result = 0;
            for (let i = 0; i < iterations; i++) {
                result += Math.sqrt(i) * Math.sin(i);
            }
            const duration = performance.now() - start;
            // Normaliser entre 0 et 1 (plus de 20ms = usage élevé)
            const usage = Math.min(duration / 20, 1);
            resolve(usage);
        });
    }
    async measureFrameRate() {
        return new Promise((resolve) => {
            let frames = 0;
            const start = performance.now();
            const countFrame = () => {
                frames++;
                if (performance.now() - start < 1000) {
                    requestAnimationFrame(countFrame);
                }
                else {
                    resolve(frames);
                }
            };
            requestAnimationFrame(countFrame);
        });
    }
    estimateMemoryUsage() {
        // Estimation basée sur le nombre d'éléments DOM
        const domElements = document.querySelectorAll('*').length;
        const estimateBytes = domElements * 1000; // ~1KB par élément
        return estimateBytes;
    }
    // Web Vitals measurements
    async measureLCP() {
        try {
            const lcpEntries = performance.getEntriesByType('largest-contentful-paint');
            return lcpEntries.length > 0 ? lcpEntries[lcpEntries.length - 1].startTime : 0;
        }
        catch {
            return 2500; // Fallback LCP
        }
    }
    async measureFID() {
        try {
            const fidEntries = performance.getEntriesByType('first-input');
            return fidEntries.length > 0 ? fidEntries[0].processingStart - fidEntries[0].startTime : 0;
        }
        catch {
            return 100; // Fallback FID
        }
    }
    async measureCLS() {
        try {
            let clsValue = 0;
            const observer = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (!entry.hadRecentInput) {
                        clsValue += entry.value;
                    }
                }
            });
            observer.observe({ type: 'layout-shift', buffered: true });
            // Wait 100ms to collect entries
            await new Promise(resolve => setTimeout(resolve, 100));
            observer.disconnect();
            return clsValue;
        }
        catch {
            return 0.1; // Fallback CLS
        }
    }
    async measureFCP() {
        try {
            const fcpEntry = performance.getEntriesByName('first-contentful-paint')[0];
            return fcpEntry ? fcpEntry.startTime : 0;
        }
        catch {
            return 1500; // Fallback FCP
        }
    }
    async measureTTFB() {
        try {
            const navigation = performance.getEntriesByType('navigation')[0];
            return navigation ? navigation.responseStart - navigation.requestStart : 0;
        }
        catch {
            return 200; // Fallback TTFB
        }
    }
    // === FALLBACKS POUR DÉVELOPPEMENT ===
    getFallbackMemoryMetrics() {
        return {
            used: 25 * 1024 * 1024, // 25MB
            total: 100 * 1024 * 1024, // 100MB
            percentage: 25
        };
    }
    getFallbackTimingMetrics() {
        return {
            loadTime: 1500,
            domReady: 800,
            firstPaint: 1200,
            firstContentfulPaint: 1400
        };
    }
    getFallbackNetworkMetrics() {
        return {
            latency: 50,
            bandwidth: 10,
            connectionType: '4g'
        };
    }
    getFallbackCPUMetrics() {
        return {
            usage: 0.15, // 15%
            cores: 4
        };
    }
    getFallbackSystemMetrics() {
        return {
            cpu: 0.15,
            memory: 25,
            latency: 50,
            frameRate: 60,
            timestamp: Date.now()
        };
    }
    getFallbackWebVitals() {
        return {
            lcp: 2500,
            fid: 100,
            cls: 0.1,
            fcp: 1500,
            ttfb: 200
        };
    }
    /**
     * Utilitaire pour remplacer Math.random() par vraies données
     */
    async getRandomReplacementValue(type = 'generic') {
        const metrics = await this.getSystemMetrics();
        switch (type) {
            case 'cpu':
                return metrics.cpu;
            case 'memory':
                return metrics.memory / 100; // Normaliser 0-1
            case 'latency':
                return metrics.latency / 1000; // Normaliser en secondes
            default:
                // Mélange normalisé pour usage générique
                return (metrics.cpu + metrics.memory / 100 + metrics.latency / 1000) / 3;
        }
    }
    /**
     * Force refresh du cache des métriques
     */
    refreshMetrics() {
        this.metricsCache.clear();
    }
    /**
     * Obtient des métriques en mode développement avec warnings
     */
    async getDevMetrics() {
        if (this.isProduction) {
            return this.getSystemMetrics();
        }
        console.warn('🚧 MODE DÉVELOPPEMENT: Utilisation métriques simulées pour les tests');
        return this.getFallbackSystemMetrics();
    }
    // =============================================================================
    // MÉTHODES AJOUTÉES POUR COMPATIBILITÉ ORGANISMCORE
    // =============================================================================
    /**
     * Get CPU usage as a normalized value (0-1)
     */
    async getCPUUsage() {
        const metrics = await this.getSystemMetrics();
        return metrics.cpu;
    }
    /**
     * Get memory usage as a normalized value (0-1)
     */
    async getMemoryUsage() {
        const metrics = await this.getSystemMetrics();
        return metrics.memory / 100; // Convert percentage to 0-1 range
    }
}
exports.default = RealMetricsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,