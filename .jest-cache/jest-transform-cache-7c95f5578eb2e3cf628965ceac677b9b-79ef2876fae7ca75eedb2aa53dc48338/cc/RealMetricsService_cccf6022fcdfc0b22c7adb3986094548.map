{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts"],"sourcesContent":["/**\n * RealMetricsService - Service central pour collecte de vraies métriques\n * Remplace Math.random() par des données de performance réelles\n */\n\nexport interface PerformanceMetrics {\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  timing: {\n    loadTime: number;\n    domReady: number;\n    firstPaint: number;\n    firstContentfulPaint: number;\n  };\n  network: {\n    latency: number;\n    bandwidth: number;\n    connectionType: string;\n  };\n  cpu: {\n    usage: number;\n    cores: number;\n  };\n  timestamp: number;\n}\n\nexport interface WebVitalsMetrics {\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  fcp: number; // First Contentful Paint\n  ttfb: number; // Time To First Byte\n}\n\nexport interface SystemMetrics {\n  cpu: number;\n  memory: number;\n  latency: number;\n  frameRate: number;\n  timestamp: number;\n}\n\nclass RealMetricsService {\n  private static instance: RealMetricsService;\n  private isProduction: boolean;\n  private metricsCache: Map<string, { value: any; timestamp: number }> = new Map();\n  \n  private constructor() {\n    this.isProduction = process.env.NODE_ENV === 'production';\n  }\n\n  static getInstance(): RealMetricsService {\n    if (!RealMetricsService.instance) {\n      RealMetricsService.instance = new RealMetricsService();\n    }\n    return RealMetricsService.instance;\n  }\n\n  /**\n   * Collecte des métriques mémoire réelles\n   */\n  async getMemoryMetrics(): Promise<{ used: number; total: number; percentage: number }> {\n    try {\n      // Try Performance Memory API (Chrome)\n      if ('memory' in performance) {\n        const memInfo = (performance as any).memory;\n        return {\n          used: memInfo.usedJSHeapSize,\n          total: memInfo.totalJSHeapSize,\n          percentage: (memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit) * 100\n        };\n      }\n\n      // Fallback: Estimate via DOM elements count\n      const estimate = this.estimateMemoryUsage();\n      return {\n        used: estimate,\n        total: estimate * 2,\n        percentage: 50\n      };\n    } catch (error) {\n      console.warn('Erreur collecte mémoire, fallback estimation:', error);\n      return this.getFallbackMemoryMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques de timing réelles\n   */\n  async getTimingMetrics(): Promise<{ loadTime: number; domReady: number; firstPaint: number; firstContentfulPaint: number }> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const paint = performance.getEntriesByType('paint');\n      \n      const firstPaint = paint.find(p => p.name === 'first-paint')?.startTime || 0;\n      const firstContentfulPaint = paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0;\n\n      return {\n        loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n        domReady: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n        firstPaint,\n        firstContentfulPaint\n      };\n    } catch (error) {\n      console.warn('Erreur collecte timing, fallback estimation:', error);\n      return this.getFallbackTimingMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques réseau réelles\n   */\n  async getNetworkMetrics(): Promise<{ latency: number; bandwidth: number; connectionType: string }> {\n    try {\n      const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n      \n      // Mesure latency via HEAD request vers favicon\n      const latency = await this.measureNetworkLatency();\n      \n      return {\n        latency,\n        bandwidth: connection?.downlink || 0,\n        connectionType: connection?.effectiveType || 'unknown'\n      };\n    } catch (error) {\n      console.warn('Erreur collecte réseau, fallback estimation:', error);\n      return this.getFallbackNetworkMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques CPU réelles (estimation)\n   */\n  async getCPUMetrics(): Promise<{ usage: number; cores: number }> {\n    try {\n      const usage = await this.estimateCPUUsage();\n      const cores = navigator.hardwareConcurrency || 4;\n      \n      return { usage, cores };\n    } catch (error) {\n      console.warn('Erreur collecte CPU, fallback estimation:', error);\n      return this.getFallbackCPUMetrics();\n    }\n  }\n\n  /**\n   * Interface principale pour les métriques système (remplace Math.random())\n   */\n  async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.metricsCache.get(cacheKey);\n    \n    // Cache 30 secondes pour éviter overhead\n    if (cached && Date.now() - cached.timestamp < 30000) {\n      return cached.value;\n    }\n\n    try {\n      const [memory, network, cpu] = await Promise.all([\n        this.getMemoryMetrics(),\n        this.getNetworkMetrics(),\n        this.getCPUMetrics()\n      ]);\n\n      const frameRate = this.measureFrameRate();\n\n      const metrics: SystemMetrics = {\n        cpu: cpu.usage,\n        memory: memory.percentage,\n        latency: network.latency,\n        frameRate: await frameRate,\n        timestamp: Date.now()\n      };\n\n      this.metricsCache.set(cacheKey, { value: metrics, timestamp: Date.now() });\n      return metrics;\n    } catch (error) {\n      console.error('Erreur collecte métriques système:', error);\n      return this.getFallbackSystemMetrics();\n    }\n  }\n\n  /**\n   * Collecte Web Vitals pour performance UX\n   */\n  async getWebVitals(): Promise<WebVitalsMetrics> {\n    try {\n      const [lcp, fid, cls, fcp, ttfb] = await Promise.all([\n        this.measureLCP(),\n        this.measureFID(),\n        this.measureCLS(),\n        this.measureFCP(),\n        this.measureTTFB()\n      ]);\n\n      return { lcp, fid, cls, fcp, ttfb };\n    } catch (error) {\n      console.warn('Erreur Web Vitals, fallback defaults:', error);\n      return this.getFallbackWebVitals();\n    }\n  }\n\n  // === MÉTHODES PRIVÉES DE MESURE ===\n\n  private async measureNetworkLatency(): Promise<number> {\n    try {\n      const start = performance.now();\n      await fetch('/favicon.ico', { method: 'HEAD' });\n      return performance.now() - start;\n    } catch {\n      return 50; // Fallback 50ms\n    }\n  }\n\n  private async estimateCPUUsage(): Promise<number> {\n    return new Promise((resolve) => {\n      const start = performance.now();\n      const iterations = 50000;\n      \n      // CPU stress test léger\n      let result = 0;\n      for (let i = 0; i < iterations; i++) {\n        result += Math.sqrt(i) * Math.sin(i);\n      }\n      \n      const duration = performance.now() - start;\n      // Normaliser entre 0 et 1 (plus de 20ms = usage élevé)\n      const usage = Math.min(duration / 20, 1);\n      resolve(usage);\n    });\n  }\n\n  private async measureFrameRate(): Promise<number> {\n    return new Promise((resolve) => {\n      let frames = 0;\n      const start = performance.now();\n      \n      const countFrame = () => {\n        frames++;\n        if (performance.now() - start < 1000) {\n          requestAnimationFrame(countFrame);\n        } else {\n          resolve(frames);\n        }\n      };\n      \n      requestAnimationFrame(countFrame);\n    });\n  }\n\n  private estimateMemoryUsage(): number {\n    // Estimation basée sur le nombre d'éléments DOM\n    const domElements = document.querySelectorAll('*').length;\n    const estimateBytes = domElements * 1000; // ~1KB par élément\n    return estimateBytes;\n  }\n\n  // Web Vitals measurements\n  private async measureLCP(): Promise<number> {\n    try {\n      const lcpEntries = performance.getEntriesByType('largest-contentful-paint') as any[];\n      return lcpEntries.length > 0 ? lcpEntries[lcpEntries.length - 1].startTime : 0;\n    } catch {\n      return 2500; // Fallback LCP\n    }\n  }\n\n  private async measureFID(): Promise<number> {\n    try {\n      const fidEntries = performance.getEntriesByType('first-input') as any[];\n      return fidEntries.length > 0 ? fidEntries[0].processingStart - fidEntries[0].startTime : 0;\n    } catch {\n      return 100; // Fallback FID\n    }\n  }\n\n  private async measureCLS(): Promise<number> {\n    try {\n      let clsValue = 0;\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (!(entry as any).hadRecentInput) {\n            clsValue += (entry as any).value;\n          }\n        }\n      });\n      observer.observe({ type: 'layout-shift', buffered: true });\n      \n      // Wait 100ms to collect entries\n      await new Promise(resolve => setTimeout(resolve, 100));\n      observer.disconnect();\n      \n      return clsValue;\n    } catch {\n      return 0.1; // Fallback CLS\n    }\n  }\n\n  private async measureFCP(): Promise<number> {\n    try {\n      const fcpEntry = performance.getEntriesByName('first-contentful-paint')[0];\n      return fcpEntry ? fcpEntry.startTime : 0;\n    } catch {\n      return 1500; // Fallback FCP\n    }\n  }\n\n  private async measureTTFB(): Promise<number> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      return navigation ? navigation.responseStart - navigation.requestStart : 0;\n    } catch {\n      return 200; // Fallback TTFB\n    }\n  }\n\n  // === FALLBACKS POUR DÉVELOPPEMENT ===\n\n  private getFallbackMemoryMetrics() {\n    return {\n      used: 25 * 1024 * 1024, // 25MB\n      total: 100 * 1024 * 1024, // 100MB\n      percentage: 25\n    };\n  }\n\n  private getFallbackTimingMetrics() {\n    return {\n      loadTime: 1500,\n      domReady: 800,\n      firstPaint: 1200,\n      firstContentfulPaint: 1400\n    };\n  }\n\n  private getFallbackNetworkMetrics() {\n    return {\n      latency: 50,\n      bandwidth: 10,\n      connectionType: '4g'\n    };\n  }\n\n  private getFallbackCPUMetrics() {\n    return {\n      usage: 0.15, // 15%\n      cores: 4\n    };\n  }\n\n  private getFallbackSystemMetrics(): SystemMetrics {\n    return {\n      cpu: 0.15,\n      memory: 25,\n      latency: 50,\n      frameRate: 60,\n      timestamp: Date.now()\n    };\n  }\n\n  private getFallbackWebVitals(): WebVitalsMetrics {\n    return {\n      lcp: 2500,\n      fid: 100,\n      cls: 0.1,\n      fcp: 1500,\n      ttfb: 200\n    };\n  }\n\n  /**\n   * Utilitaire pour remplacer Math.random() par vraies données\n   */\n  async getRandomReplacementValue(type: 'cpu' | 'memory' | 'latency' | 'generic' = 'generic'): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    \n    switch (type) {\n      case 'cpu':\n        return metrics.cpu;\n      case 'memory':\n        return metrics.memory / 100; // Normaliser 0-1\n      case 'latency':\n        return metrics.latency / 1000; // Normaliser en secondes\n      default:\n        // Mélange normalisé pour usage générique\n        return (metrics.cpu + metrics.memory / 100 + metrics.latency / 1000) / 3;\n    }\n  }\n\n  /**\n   * Force refresh du cache des métriques\n   */\n  refreshMetrics(): void {\n    this.metricsCache.clear();\n  }\n\n  /**\n   * Obtient des métriques en mode développement avec warnings\n   */\n  async getDevMetrics(): Promise<SystemMetrics> {\n    if (this.isProduction) {\n      return this.getSystemMetrics();\n    }\n\n    console.warn('🚧 MODE DÉVELOPPEMENT: Utilisation métriques simulées pour les tests');\n    return this.getFallbackSystemMetrics();\n  }\n\n  // =============================================================================\n  // MÉTHODES AJOUTÉES POUR COMPATIBILITÉ ORGANISMCORE\n  // =============================================================================\n\n  /**\n   * Get CPU usage as a normalized value (0-1)\n   */\n  async getCPUUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.cpu;\n  }\n\n  /**\n   * Get memory usage as a normalized value (0-1)\n   */\n  async getMemoryUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.memory / 100; // Convert percentage to 0-1 range\n  }\n}\n\nexport default RealMetricsService;"],"version":3}