{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureRandom.ts"],"sourcesContent":["import { SecureLogger } from '@shared/utils/secureLogger';\n/**\n * Utilitaires de génération de nombres aléatoires sécurisés\n * Remplace Math.random() par crypto.getRandomValues() pour la sécurité cryptographique\n */\n\nexport class SecureRandom {\n  private static readonly MAX_UINT32 = 0xFFFFFFFF;\n\n  /**\n   * Génère un nombre aléatoire sécurisé entre 0 et 1 (équivalent Math.random())\n   */\n  static random(): number {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint32Array(1);\n      crypto.getRandomValues(array);\n      return array[0] / (this.MAX_UINT32 + 1);\n    }\n    \n    // Fallback pour les environnements sans crypto\n    SecureLogger.warn('SecureRandom: crypto.getRandomValues non disponible, utilisation de Math.random()');\n    return Math.random();\n  }\n\n  /**\n   * Génère un entier aléatoire sécurisé dans une plage\n   */\n  static randomInt(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    const range = max - min;\n    return Math.floor(this.random() * range) + min;\n  }\n\n  /**\n   * Génère un nombre flottant aléatoire sécurisé dans une plage\n   */\n  static randomFloat(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    return this.random() * (max - min) + min;\n  }\n\n  /**\n   * Génère des bytes aléatoires sécurisés\n   */\n  static randomBytes(length: number): Uint8Array {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      return array;\n    }\n    \n    // Fallback pour les environnements sans crypto\n    SecureLogger.warn('SecureRandom: crypto.getRandomValues non disponible, génération fallback');\n    const array = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n    return array;\n  }\n\n  /**\n   * Sélectionne un élément aléatoire d'un tableau\n   */\n  static choice<T>(array: T[]): T {\n    if (array.length === 0) {\n      throw new Error('SecureRandom: Le tableau ne peut pas être vide');\n    }\n    \n    const index = this.randomInt(0, array.length);\n    return array[index];\n  }\n\n  /**\n   * Génère un UUID v4 sécurisé\n   */\n  static uuid(): string {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const bytes = new Uint8Array(16);\n      crypto.getRandomValues(bytes);\n      \n      // Version 4 UUID format\n      bytes[6] = (bytes[6] & 0x0f) | 0x40; // Version 4\n      bytes[8] = (bytes[8] & 0x3f) | 0x80; // Variant 10\n\n      const hex = Array.from(bytes, b => b.toString(16).padStart(2, '0')).join('');\n      return [\n        hex.slice(0, 8),\n        hex.slice(8, 12),\n        hex.slice(12, 16),\n        hex.slice(16, 20),\n        hex.slice(20, 32)\n      ].join('-');\n    }\n    \n    // Fallback UUID generation\n    SecureLogger.warn('SecureRandom: crypto.getRandomValues non disponible, UUID fallback');\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Génère une chaîne aléatoire sécurisée\n   */\n  static randomString(length: number, charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'): string {\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += charset.charAt(this.randomInt(0, charset.length));\n    }\n    return result;\n  }\n\n  /**\n   * Génère un ID court sécurisé pour les identifiants\n   */\n  static randomId(prefix = '', length = 8): string {\n    const id = this.randomString(length, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    return prefix ? `${prefix}_${id}` : id;\n  }\n}\n\n// Alias pour une migration facile depuis Math.random()\nexport const secureRandom = SecureRandom.random;\nexport const secureRandomInt = SecureRandom.randomInt;\nexport const secureRandomFloat = SecureRandom.randomFloat;"],"version":3}