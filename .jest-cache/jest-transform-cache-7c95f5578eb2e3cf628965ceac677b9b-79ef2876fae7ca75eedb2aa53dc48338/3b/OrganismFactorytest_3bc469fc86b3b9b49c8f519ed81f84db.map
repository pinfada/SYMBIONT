{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismFactory.test.ts","mappings":";;AAAA,2EAAwE;AAGxE,uDAAoD;AAEpD,iCAAiC;AACjC,MAAM,cAAc;IAApB;QACU,UAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QAClB,gBAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IAsDlC,CAAC;IApDC,KAAK,CAAC,UAAU;QACd,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,EAAU,EAAE,IAAmC,EAAE,IAAa;QACpE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,aAAa,CAAC,MAAc,EAAE,IAAY,EAAE,MAAc;QACxD,sBAAsB;IACxB,CAAC;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACrC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,SAAS;QACP,mBAAmB;IACrB,CAAC;IAED,aAAa,CAAC,MAAc;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM,CAAC,IAAa;QAClB,gBAAgB;IAClB,CAAC;IAED,iBAAiB;QACf,OAAO,GAAG,CAAC;IACb,CAAC;IAED,qBAAqB;QACnB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM;QACJ,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAED,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,UAAU,CAAC,GAAG,EAAE;QACd,uCAAuC;QACvC,iCAAe,CAAC,eAAe,CAAC;YAC9B,gBAAgB,EAAE,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE;SAC7C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;YAE5D,iCAAe,CAAC,eAAe,CAAC;gBAC9B,gBAAgB,EAAE,eAAe;aAClC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YAEpE,MAAM,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,6BAA6B;YAC5B,iCAAuB,CAAC,YAAY,GAAG,IAAI,CAAC;YAE7C,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,SAAS,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,EAAE;gBACnE,UAAU,EAAE,GAAG;aAChB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,EAAE;gBACnE,UAAU,EAAE,GAAG;aAChB,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YAEpE,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9C,MAAM,CAAC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,YAAY,GAAG;gBACnB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;aACZ,CAAC;YAEF,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;YAElF,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,QAAQ,GAAG,YAAY,CAAC;YAE9B,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAE9C,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY;YAClD,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY;YACzD,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ;YAC9D,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,IAAI,GAAG,iCAAe,CAAC,gBAAgB,EAAE,CAAC;YAEhD,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3B,MAAM,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,KAAK,GAAG,iCAAe,CAAC,gBAAgB,EAAE,CAAC;YACjD,MAAM,KAAK,GAAG,iCAAe,CAAC,gBAAgB,EAAE,CAAC;YAEjD,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,aAAa,GAAG;gBACpB,UAAU,EAAE,CAAC,GAAG,EAAE,yBAAyB;gBAC3C,KAAK,EAAE,GAAG,EAAQ,oBAAoB;gBACtC,MAAM,EAAE,GAAG,CAAO,cAAc;aACjC,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,UAAU,GAAG,kBAAkB,CAAC,CAAC,8BAA8B;YAErE,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,IAAW,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,CAAC,GAAG,EAAE;gBACV,iCAAe,CAAC,cAAc,CAAC,SAAgB,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,iCAAe,CAAC,eAAe,CAAC;gBAC9B,gBAAgB,EAAE,GAAG,EAAE,CAAC,IAAI,uBAAU,EAAE;aACzC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACpE,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,SAAS,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACrE,MAAM,SAAS,GAAG,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YAErE,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;YACvB,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;YAEvB,yBAAyB;YACzB,SAAS,CAAC,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;YAE1C,8BAA8B;YAC9B,MAAM,OAAO,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;YAEtC,wEAAwE;YACxE,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEtC,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC;YAC5B,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,SAAS,GAAoB,EAAE,CAAC;YAEtC,4BAA4B;YAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7C,SAAS,CAAC,IAAI,CAAC,iCAAe,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAElC,oCAAoC;YACpC,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;YAExD,iCAAe,CAAC,eAAe,CAAC;gBAC9B,gBAAgB,EAAE,WAAW;aAC9B,CAAC,CAAC;YAEH,4BAA4B;YAC5B,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACnD,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACnD,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YAEnD,MAAM,CAAC,WAAW,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;YACzD,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;YAE1D,yBAAyB;YACzB,iCAAe,CAAC,eAAe,CAAC;gBAC9B,gBAAgB,EAAE,YAAY;aAC/B,CAAC,CAAC;YAEH,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACnD,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAE9C,sBAAsB;YACtB,iCAAe,CAAC,eAAe,CAAC;gBAC9B,gBAAgB,EAAE,aAAa;aAChC,CAAC,CAAC;YAEH,iCAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACnD,MAAM,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,6BAA6B;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismFactory.test.ts"],"sourcesContent":["import { OrganismFactory } from '../src/core/factories/OrganismFactory';\r\nimport { INeuralMesh } from '../src/core/interfaces/INeuralMesh';\r\nimport { IOrganismCore } from '../src/core/interfaces/IOrganismCore';\r\nimport { NeuralMesh } from '../src/core/NeuralMesh';\r\n\r\n// Mock NeuralMesh pour les tests\r\nclass MockNeuralMesh implements INeuralMesh {\r\n  private nodes = new Map();\r\n  private activations = new Map();\r\n\r\n  async initialize(): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias?: number): void {\r\n    this.nodes.set(id, { id, type, bias: bias || 0 });\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    // Mock implementation\r\n  }\r\n\r\n  stimulate(nodeId: string, value: number): void {\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  propagate(): void {\r\n    // Mock propagation\r\n  }\r\n\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  mutate(rate?: number): void {\r\n    // Mock mutation\r\n  }\r\n\r\n  getNeuralActivity(): number {\r\n    return 0.5;\r\n  }\r\n\r\n  getConnectionStrength(): number {\r\n    return 0.3;\r\n  }\r\n\r\n  async getCPUUsage(): Promise<number> {\r\n    return 0.1;\r\n  }\r\n\r\n  async getMemoryUsage(): Promise<number> {\r\n    return 0.05;\r\n  }\r\n\r\n  toJSON(): any {\r\n    return { nodes: Array.from(this.nodes.values()) };\r\n  }\r\n\r\n  async suspend(): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\ndescribe('OrganismFactory', () => {\r\n  beforeEach(() => {\r\n    // Reset factory state before each test\r\n    OrganismFactory.setDependencies({\r\n      createNeuralMesh: () => new MockNeuralMesh()\r\n    });\r\n  });\r\n\r\n  describe('Dependency Management', () => {\r\n    it('should set and use dependencies correctly', () => {\r\n      const mockMeshFactory = jest.fn(() => new MockNeuralMesh());\r\n      \r\n      OrganismFactory.setDependencies({\r\n        createNeuralMesh: mockMeshFactory\r\n      });\r\n\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      \r\n      expect(mockMeshFactory).toHaveBeenCalled();\r\n      expect(organism).toBeDefined();\r\n    });\r\n\r\n    it('should throw error when dependencies not set', () => {\r\n      // Reset dependencies to null\r\n      (OrganismFactory as any).dependencies = null;\r\n\r\n      expect(() => {\r\n        OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      }).toThrow('OrganismFactory dependencies not set');\r\n    });\r\n\r\n    it('should create different organisms with same dependencies', () => {\r\n      const organism1 = OrganismFactory.createOrganism('ATCGATCGATCGATCG', {\r\n        creativity: 0.3\r\n      });\r\n      \r\n      const organism2 = OrganismFactory.createOrganism('GCTAGCTAGCTAGCTA', {\r\n        creativity: 0.7\r\n      });\r\n\r\n      expect(organism1).toBeDefined();\r\n      expect(organism2).toBeDefined();\r\n      expect(organism1).not.toBe(organism2);\r\n    });\r\n  });\r\n\r\n  describe('Organism Creation', () => {\r\n    it('should create organism with valid DNA', () => {\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      \r\n      expect(organism).toBeDefined();\r\n      expect(typeof organism.boot).toBe('function');\r\n      expect(typeof organism.mutate).toBe('function');\r\n      expect(typeof organism.getTraits).toBe('function');\r\n    });\r\n\r\n    it('should create organism with custom traits', () => {\r\n      const customTraits = {\r\n        creativity: 0.8,\r\n        focus: 0.3,\r\n        energy: 0.9\r\n      };\r\n\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG', customTraits);\r\n      \r\n      expect(organism).toBeDefined();\r\n    });\r\n\r\n    it('should handle short DNA sequences', () => {\r\n      const shortDNA = 'ATCGATCGAT';\r\n      \r\n      const organism = OrganismFactory.createOrganism(shortDNA);\r\n      expect(organism).toBeDefined();\r\n    });\r\n\r\n    it('should handle long DNA sequences', () => {\r\n      const longDNA = 'ATCGATCGATCGATCG'.repeat(10);\r\n      \r\n      const organism = OrganismFactory.createOrganism(longDNA);\r\n      expect(organism).toBeDefined();\r\n    });\r\n\r\n    it('should validate DNA format during creation', () => {\r\n      expect(() => {\r\n        OrganismFactory.createOrganism(''); // Empty DNA\r\n      }).toThrow();\r\n\r\n      expect(() => {\r\n        OrganismFactory.createOrganism('INVALID'); // Too short\r\n      }).toThrow();\r\n\r\n      expect(() => {\r\n        OrganismFactory.createOrganism('ATCGATCGATCGATCG'); // Valid\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('NeuralMesh Creation', () => {\r\n    it('should create neural mesh directly', () => {\r\n      const mesh = OrganismFactory.createNeuralMesh();\r\n      \r\n      expect(mesh).toBeDefined();\r\n      expect(typeof mesh.initialize).toBe('function');\r\n      expect(typeof mesh.addNode).toBe('function');\r\n      expect(typeof mesh.propagate).toBe('function');\r\n    });\r\n\r\n    it('should create different mesh instances', () => {\r\n      const mesh1 = OrganismFactory.createNeuralMesh();\r\n      const mesh2 = OrganismFactory.createNeuralMesh();\r\n      \r\n      expect(mesh1).not.toBe(mesh2);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle invalid trait values gracefully', () => {\r\n      const invalidTraits = {\r\n        creativity: -0.5, // Invalid negative value\r\n        focus: 1.5,       // Invalid > 1 value\r\n        energy: 0.5       // Valid value\r\n      };\r\n\r\n      expect(() => {\r\n        OrganismFactory.createOrganism('ATCGATCGATCGATCG', invalidTraits);\r\n      }).toThrow();\r\n    });\r\n\r\n    it('should handle DNA with invalid characters', () => {\r\n      const invalidDNA = 'ATCGATCGXYZGATCG'; // Contains invalid characters\r\n      \r\n      expect(() => {\r\n        OrganismFactory.createOrganism(invalidDNA);\r\n      }).toThrow();\r\n    });\r\n\r\n    it('should handle null/undefined parameters', () => {\r\n      expect(() => {\r\n        OrganismFactory.createOrganism(null as any);\r\n      }).toThrow();\r\n\r\n      expect(() => {\r\n        OrganismFactory.createOrganism(undefined as any);\r\n      }).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Integration with Real Components', () => {\r\n    it('should work with real NeuralMesh', () => {\r\n      OrganismFactory.setDependencies({\r\n        createNeuralMesh: () => new NeuralMesh()\r\n      });\r\n\r\n      const organism = OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      expect(organism).toBeDefined();\r\n    });\r\n\r\n    it('should maintain mesh independence between organisms', async () => {\r\n      const organism1 = OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      const organism2 = OrganismFactory.createOrganism('GCTAGCTAGCTAGCTA');\r\n\r\n      await organism1.boot();\r\n      await organism2.boot();\r\n\r\n      // Stimulate one organism\r\n      organism1.stimulate('sensory_input', 0.8);\r\n      \r\n      // Should not affect the other\r\n      const traits1 = organism1.getTraits();\r\n      const traits2 = organism2.getTraits();\r\n      \r\n      // They might be the same initially, but should be independent instances\r\n      expect(organism1).not.toBe(organism2);\r\n\r\n      await organism1.hibernate();\r\n      await organism2.hibernate();\r\n    });\r\n  });\r\n\r\n  describe('Memory Management', () => {\r\n    it('should not leak memory when creating multiple organisms', () => {\r\n      const organisms: IOrganismCore[] = [];\r\n      \r\n      // Create multiple organisms\r\n      for (let i = 0; i < 10; i++) {\r\n        const dna = 'ATCGATCGATCGATCG'.repeat(i + 1);\r\n        organisms.push(OrganismFactory.createOrganism(dna));\r\n      }\r\n\r\n      expect(organisms.length).toBe(10);\r\n      \r\n      // All should be different instances\r\n      const uniqueOrganisms = new Set(organisms);\r\n      expect(uniqueOrganisms.size).toBe(10);\r\n    });\r\n  });\r\n\r\n  describe('Factory State Management', () => {\r\n    it('should maintain dependencies across multiple calls', () => {\r\n      const mockFactory = jest.fn(() => new MockNeuralMesh());\r\n      \r\n      OrganismFactory.setDependencies({\r\n        createNeuralMesh: mockFactory\r\n      });\r\n\r\n      // Create multiple organisms\r\n      OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      OrganismFactory.createOrganism('GCTAGCTAGCTAGCTA');\r\n      OrganismFactory.createOrganism('TTAAGGCCTTAAGGCC');\r\n\r\n      expect(mockFactory).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should allow dependency updates', () => {\r\n      const firstFactory = jest.fn(() => new MockNeuralMesh());\r\n      const secondFactory = jest.fn(() => new MockNeuralMesh());\r\n\r\n      // Set first dependencies\r\n      OrganismFactory.setDependencies({\r\n        createNeuralMesh: firstFactory\r\n      });\r\n\r\n      OrganismFactory.createOrganism('ATCGATCGATCGATCG');\r\n      expect(firstFactory).toHaveBeenCalledTimes(1);\r\n\r\n      // Update dependencies\r\n      OrganismFactory.setDependencies({\r\n        createNeuralMesh: secondFactory\r\n      });\r\n\r\n      OrganismFactory.createOrganism('GCTAGCTAGCTAGCTA');\r\n      expect(secondFactory).toHaveBeenCalledTimes(1);\r\n      expect(firstFactory).toHaveBeenCalledTimes(1); // Should not be called again\r\n    });\r\n  });\r\n}); "],"version":3}