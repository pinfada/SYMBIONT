{"version":3,"names":["cov_1azo45gbtr","actualCoverage","s","secureRandom_1","require","secureLogger_1","BasicHealthMonitor","constructor","alertCallback","f","metrics","cpu","memory","latency","errors","lastAlerts","Map","alertCooldown","b","setupMonitoring","setInterval","collectMetrics","checkHealth","SecureRandom","random","push","length","shift","avg","arr","reduce","a","cpuAvg","memAvg","latAvg","alert","toFixed","logError","msg","alertKey","split","now","Date","lastAlert","get","SecureLogger","warn","set","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/monitoring/basic-health-monitor.ts"],"sourcesContent":["import { SecureRandom } from '@shared/utils/secureRandom';\nimport { SecureLogger } from '@shared/utils/secureLogger';\n// monitoring/basic-health-monitor.ts\r\n// Monitoring basique de la santÃ© du systÃ¨me (Phase 1)\r\n\r\nexport class BasicHealthMonitor {\r\n  private metrics: any = {\r\n    cpu: [],\r\n    memory: [],\r\n    latency: [],\r\n    errors: 0\r\n  }\r\n  private alertCallback: ((msg: string) => void) | null = null\r\n  private lastAlerts: Map<string, number> = new Map()\r\n  private alertCooldown = 30000 // 30 secondes de cooldown entre alertes similaires\r\n\r\n  constructor(alertCallback?: (msg: string) => void) {\r\n    if (alertCallback) this.alertCallback = alertCallback\r\n    this.setupMonitoring()\r\n  }\r\n\r\n  private setupMonitoring(): void {\r\n    setInterval(() => {\r\n      this.collectMetrics()\r\n      this.checkHealth()\r\n    }, 30000) // Toutes les 30 secondes au lieu de 5\r\n  }\r\n\r\n  private collectMetrics(): void {\r\n    // Simule la collecte CPU/mÃ©moire/latence\r\n    const cpu = SecureRandom.random() * 0.2\r\n    const memory = SecureRandom.random() * 20\r\n    const latency = SecureRandom.random() * 5\r\n    this.metrics.cpu.push(cpu)\r\n    this.metrics.memory.push(memory)\r\n    this.metrics.latency.push(latency)\r\n    if (this.metrics.cpu.length > 20) this.metrics.cpu.shift()\r\n    if (this.metrics.memory.length > 20) this.metrics.memory.shift()\r\n    if (this.metrics.latency.length > 20) this.metrics.latency.shift()\r\n  }\r\n\r\n  private checkHealth(): void {\r\n    const avg = (arr: number[]) => arr.reduce((a, b) => a + b, 0) / (arr.length || 1)\r\n    const cpuAvg = avg(this.metrics.cpu)\r\n    const memAvg = avg(this.metrics.memory)\r\n    const latAvg = avg(this.metrics.latency)\r\n    \r\n    // Seuils plus Ã©levÃ©s pour Ã©viter les fausses alertes\r\n    if (cpuAvg > 0.5) this.alert('CPU Ã©levÃ© : ' + cpuAvg.toFixed(3))\r\n    if (memAvg > 50) this.alert('MÃ©moire Ã©levÃ©e : ' + memAvg.toFixed(2) + 'MB')\r\n    if (latAvg > 10) this.alert('Latence Ã©levÃ©e : ' + latAvg.toFixed(2) + 'ms')\r\n    if (this.metrics.errors > 5) this.alert('Erreurs dÃ©tectÃ©es : ' + this.metrics.errors)\r\n  }\r\n\r\n  public logError() {\r\n    this.metrics.errors++\r\n  }\r\n\r\n  private alert(msg: string) {\r\n    const alertKey = msg.split(':')[0]; // Utilise le type d'alerte comme clÃ©\r\n    const now = Date.now();\r\n    const lastAlert = this.lastAlerts.get(alertKey);\r\n    \r\n    // VÃ©rifie le cooldown\r\n    if (!lastAlert || now - lastAlert > this.alertCooldown) {\r\n      SecureLogger.warn('ðŸ›‘ [HealthMonitor]', msg)\r\n      this.lastAlerts.set(alertKey, now);\r\n      if (this.alertCallback) this.alertCallback(msg)\r\n    }\r\n  }\r\n}\r\n\r\n// TODO: Exporter/brancher sur le background principal "],"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","ignoreList":[]}