{"version":3,"names":["cov_1wfa3ekfto","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","OrganismFactory","setDependencies","deps","dependencies","createOrganism","dna","traits","Error","OrganismCore","require","createNeuralMesh","NeuralMesh","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/factories/OrganismFactory.ts"],"sourcesContent":["// Factory pattern pour résoudre les dépendances circulaires\r\n\r\nimport { INeuralMesh } from '../interfaces/INeuralMesh';\r\nimport { IOrganismCore } from '../interfaces/IOrganismCore';\r\nimport { OrganismTraits } from '../../shared/types/organism';\r\n\r\nexport interface OrganismDependencies {\r\n  createNeuralMesh: () => INeuralMesh;\r\n}\r\n\r\nexport class OrganismFactory {\r\n  private static dependencies: OrganismDependencies | null = null;\r\n\r\n  static setDependencies(deps: OrganismDependencies): void {\r\n    this.dependencies = deps;\r\n  }\r\n\r\n  static createOrganism(dna: string, traits?: Partial<OrganismTraits>): IOrganismCore {\r\n    if (!this.dependencies) {\r\n      throw new Error('OrganismFactory dependencies not set. Call setDependencies() first.');\r\n    }\r\n\r\n    // Import dynamique pour éviter la circularité\r\n    const { OrganismCore } = require('../OrganismCore');\r\n    return new OrganismCore(dna, traits, this.dependencies.createNeuralMesh);\r\n  }\r\n\r\n  static createNeuralMesh(): INeuralMesh {\r\n    // Import dynamique pour éviter la circularité\r\n    const { NeuralMesh } = require('../NeuralMesh');\r\n    return new NeuralMesh();\r\n  }\r\n} "],"mappings":"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","ignoreList":[]}