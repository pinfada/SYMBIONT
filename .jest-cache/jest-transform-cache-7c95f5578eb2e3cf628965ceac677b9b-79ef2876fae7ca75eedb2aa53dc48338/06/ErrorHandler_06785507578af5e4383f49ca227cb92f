ab459258a5993583323196c9a0db860a
"use strict";
// Système de gestion d'erreurs centralisé pour SYMBIONT
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = exports.ErrorHandler = void 0;
class ErrorHandler {
    constructor() {
        this.errorQueue = [];
        this.maxQueueSize = 1000;
        this.logLevel = 'warning';
        this.metrics = {
            errorCount: 0,
            lastErrorTime: 0,
            errorsByComponent: new Map(),
            errorsByMethod: new Map(),
            recoveryAttempts: 0,
            recoverySuccesses: 0
        };
    }
    static getInstance() {
        if (!ErrorHandler.instance) {
            ErrorHandler.instance = new ErrorHandler();
        }
        return ErrorHandler.instance;
    }
    /**
     * Configure le niveau de log
     */
    setLogLevel(level) {
        this.logLevel = level;
    }
    /**
     * Enregistre une erreur avec contexte
     */
    logError(context) {
        this.updateMetrics(context);
        this.addToQueue(context);
        this.outputError(context);
    }
    /**
     * Enregistre une erreur avec informations minimales
     */
    logSimpleError(component, method, error, level = 'error', context) {
        const message = error instanceof Error ? error.message : String(error);
        const errorContext = {
            component,
            method,
            timestamp: Date.now(),
            severity: level,
            details: {
                message,
                context,
                originalError: error instanceof Error ? {
                    name: error.name,
                    stack: error.stack
                } : undefined
            }
        };
        // Simple console logging
        console[level === 'warning' ? 'warn' : level === 'debug' ? 'debug' : level === 'info' ? 'info' : 'error'](`[${component}][${method}] ${message}`, context || '');
        // Store for metrics
        this.recordError(errorContext);
    }
    /**
     * Validation avec retour structuré
     */
    validateRequired(value, fieldName, component, method) {
        const errors = [];
        if (value === null || value === undefined) {
            errors.push(`${fieldName} is required`);
        }
        const result = {
            isValid: errors.length === 0,
            errors,
            warnings: [],
            context: {
                component,
                method,
                timestamp: Date.now(),
                severity: errors.length > 0 ? 'error' : 'info'
            }
        };
        if (!result.isValid) {
            this.logError(result.context);
        }
        return result;
    }
    /**
     * Valide le type et les contraintes d'une valeur
     */
    // @ts-expect-error Paramètre de type réservé pour usage futur
    validateType(value, expectedType, constraints = {}, fieldName, component, method) {
        const errors = [];
        const warnings = [];
        // Check required
        if (constraints.required && (value === null || value === undefined)) {
            errors.push(`${fieldName} is required`);
        }
        // Check type
        if (value !== null && value !== undefined) {
            const actualType = typeof value;
            if (actualType !== expectedType) {
                errors.push(`${fieldName} must be of type ${expectedType}, got ${actualType}`);
            }
            // Numeric constraints
            if (expectedType === 'number' && typeof value === 'number') {
                if (constraints.min !== undefined && value < constraints.min) {
                    errors.push(`${fieldName} must be >= ${constraints.min}`);
                }
                if (constraints.max !== undefined && value > constraints.max) {
                    errors.push(`${fieldName} must be <= ${constraints.max}`);
                }
                if (!Number.isFinite(value)) {
                    errors.push(`${fieldName} must be a finite number`);
                }
            }
            // String constraints (longueur et pattern)
            if (expectedType === 'string' && typeof value === 'string') {
                if (constraints.min !== undefined && value.length < constraints.min) {
                    errors.push(`${fieldName} must be at least ${constraints.min} characters long`);
                }
                if (constraints.max !== undefined && value.length > constraints.max) {
                    errors.push(`${fieldName} must be at most ${constraints.max} characters long`);
                }
                if (constraints.pattern && !constraints.pattern.test(value)) {
                    errors.push(`${fieldName} does not match required pattern`);
                }
            }
        }
        const result = {
            isValid: errors.length === 0,
            errors,
            warnings,
            context: {
                component,
                method,
                timestamp: Date.now(),
                severity: errors.length > 0 ? 'error' : 'warning',
                details: { fieldName, expectedType, actualValue: value }
            }
        };
        if (!result.isValid) {
            this.logError(result.context);
        }
        return result;
    }
    /**
     * Exécute une opération avec retry automatique
     */
    async withRetry(operation, strategy, context) {
        let lastError = null;
        for (let attempt = 1; attempt <= strategy.maxRetries; attempt++) {
            this.metrics.recoveryAttempts++;
            try {
                const result = await operation();
                if (attempt > 1) {
                    this.metrics.recoverySuccesses++;
                    this.logSimpleError(context.component, context.method, `Recovery successful after ${attempt} attempts`, 'info');
                }
                return result;
            }
            catch (error) {
                lastError = error instanceof Error ? error : new Error(String(error));
                this.logSimpleError(context.component, context.method, `Attempt ${attempt}/${strategy.maxRetries} failed: ${lastError.message}`, 'warning');
                if (attempt < strategy.maxRetries && strategy.shouldRetry(lastError, attempt)) {
                    await this.delay(strategy.backoffMs * attempt);
                    continue;
                }
                break;
            }
        }
        // All retries failed
        this.logSimpleError(context.component, context.method, `All ${strategy.maxRetries} retry attempts failed. Last error: ${lastError?.message}`, 'error');
        if (strategy.fallbackValue !== undefined) {
            return strategy.fallbackValue;
        }
        throw lastError;
    }
    /**
     * Wrapper safe pour les opérations qui peuvent lever des exceptions
     */
    safeExecute(operation, fallbackValue, context) {
        try {
            return operation();
        }
        catch (error) {
            this.logSimpleError(context.component, context.method, error, 'error');
            return fallbackValue;
        }
    }
    /**
     * Wrapper safe pour les opérations async
     */
    async safeExecuteAsync(operation, fallbackValue, context) {
        try {
            return await operation();
        }
        catch (error) {
            this.logSimpleError(context.component, context.method, error, 'error');
            return fallbackValue;
        }
    }
    /**
     * Récupère les métriques d'erreurs
     */
    getMetrics() {
        return { ...this.metrics };
    }
    /**
     * Récupère les erreurs récentes
     */
    getRecentErrors(maxCount = 50) {
        return this.errorQueue.slice(-maxCount);
    }
    /**
     * Nettoie les métriques et la queue
     */
    reset() {
        this.metrics = {
            errorCount: 0,
            lastErrorTime: 0,
            errorsByComponent: new Map(),
            errorsByMethod: new Map(),
            recoveryAttempts: 0,
            recoverySuccesses: 0
        };
        this.errorQueue = [];
    }
    updateMetrics(context) {
        this.metrics.errorCount++;
        this.metrics.lastErrorTime = context.timestamp;
        // Update component metrics
        const componentCount = this.metrics.errorsByComponent.get(context.component) || 0;
        this.metrics.errorsByComponent.set(context.component, componentCount + 1);
        // Update method metrics
        const methodKey = `${context.component}.${context.method}`;
        const methodCount = this.metrics.errorsByMethod.get(methodKey) || 0;
        this.metrics.errorsByMethod.set(methodKey, methodCount + 1);
    }
    addToQueue(context) {
        this.errorQueue.push(context);
        // Maintain queue size
        if (this.errorQueue.length > this.maxQueueSize) {
            this.errorQueue = this.errorQueue.slice(-this.maxQueueSize);
        }
    }
    outputError(context) {
        if (!this.shouldLog(context.severity)) {
            return;
        }
        const timestamp = new Date(context.timestamp).toISOString();
        const message = `[${timestamp}] ${context.severity.toUpperCase()} ${context.component}.${context.method}`;
        switch (context.severity) {
            case 'critical':
            case 'error':
                console.error(message, context.details);
                break;
            case 'warning':
                console.warn(message, context.details);
                break;
            case 'info':
                console.info(message, context.details);
                break;
            case 'debug':
                console.debug(message, context.details);
                break;
        }
    }
    shouldLog(severity) {
        const levels = ['debug', 'info', 'warning', 'error', 'critical'];
        const currentLevelIndex = levels.indexOf(this.logLevel);
        const messageLevelIndex = levels.indexOf(severity);
        return messageLevelIndex >= currentLevelIndex;
    }
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    recordError(context) {
        this.updateMetrics(context);
        this.addToQueue(context);
    }
}
exports.ErrorHandler = ErrorHandler;
ErrorHandler.instance = null;
// Instance globale pour utilisation facile
exports.errorHandler = ErrorHandler.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,