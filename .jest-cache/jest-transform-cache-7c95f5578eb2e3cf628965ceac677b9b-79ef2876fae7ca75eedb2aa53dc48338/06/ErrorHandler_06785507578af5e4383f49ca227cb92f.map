{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/utils/ErrorHandler.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/utils/ErrorHandler.ts"],"sourcesContent":["// Système de gestion d'erreurs centralisé pour SYMBIONT\r\n\r\nimport { ErrorContext, ValidationResult } from '../../types/core';\r\n\r\nexport type LogLevel = 'debug' | 'info' | 'warning' | 'error' | 'critical';\r\n\r\nexport interface ErrorMetrics {\r\n  errorCount: number;\r\n  lastErrorTime: number;\r\n  errorsByComponent: Map<string, number>;\r\n  errorsByMethod: Map<string, number>;\r\n  recoveryAttempts: number;\r\n  recoverySuccesses: number;\r\n}\r\n\r\nexport interface ErrorRecoveryStrategy {\r\n  maxRetries: number;\r\n  backoffMs: number;\r\n  fallbackValue?: unknown;\r\n  shouldRetry: (error: Error, attempt: number) => boolean;\r\n}\r\n\r\nexport class ErrorHandler {\r\n  private static instance: ErrorHandler | null = null;\r\n  private metrics: ErrorMetrics;\r\n  private errorQueue: ErrorContext[] = [];\r\n  private maxQueueSize = 1000;\r\n  private logLevel: LogLevel = 'warning';\r\n\r\n  private constructor() {\r\n    this.metrics = {\r\n      errorCount: 0,\r\n      lastErrorTime: 0,\r\n      errorsByComponent: new Map(),\r\n      errorsByMethod: new Map(),\r\n      recoveryAttempts: 0,\r\n      recoverySuccesses: 0\r\n    };\r\n  }\r\n\r\n  public static getInstance(): ErrorHandler {\r\n    if (!ErrorHandler.instance) {\r\n      ErrorHandler.instance = new ErrorHandler();\r\n    }\r\n    return ErrorHandler.instance;\r\n  }\r\n\r\n  /**\r\n   * Configure le niveau de log\r\n   */\r\n  public setLogLevel(level: LogLevel): void {\r\n    this.logLevel = level;\r\n  }\r\n\r\n  /**\r\n   * Enregistre une erreur avec contexte\r\n   */\r\n  public logError(context: ErrorContext): void {\r\n    this.updateMetrics(context);\r\n    this.addToQueue(context);\r\n    this.outputError(context);\r\n  }\r\n\r\n  /**\r\n   * Enregistre une erreur avec informations minimales\r\n   */\r\n  public logSimpleError(\r\n    component: string,\r\n    method: string,\r\n    error: any,\r\n    level: 'debug' | 'info' | 'warning' | 'error' = 'error',\r\n    context?: any\r\n  ): void {\r\n    const message = error instanceof Error ? error.message : String(error);\r\n    \r\n    const errorContext: ErrorContext = {\r\n      component,\r\n      method,\r\n      timestamp: Date.now(),\r\n      severity: level,\r\n      details: {\r\n        message,\r\n        context,\r\n        originalError: error instanceof Error ? {\r\n          name: error.name,\r\n          stack: error.stack\r\n        } : undefined\r\n      }\r\n    };\r\n\r\n    // Simple console logging\r\n    console[level === 'warning' ? 'warn' : level === 'debug' ? 'debug' : level === 'info' ? 'info' : 'error'](\r\n      `[${component}][${method}] ${message}`,\r\n      context || ''\r\n    );\r\n\r\n    // Store for metrics\r\n    this.recordError(errorContext);\r\n  }\r\n\r\n  /**\r\n   * Validation avec retour structuré\r\n   */\r\n  public validateRequired<T>(\r\n    value: T | null | undefined, \r\n    fieldName: string,\r\n    component: string,\r\n    method: string\r\n  ): ValidationResult {\r\n    const errors: string[] = [];\r\n    \r\n    if (value === null || value === undefined) {\r\n      errors.push(`${fieldName} is required`);\r\n    }\r\n\r\n    const result: ValidationResult = {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings: [],\r\n      context: {\r\n        component,\r\n        method,\r\n        timestamp: Date.now(),\r\n        severity: errors.length > 0 ? 'error' : 'info'\r\n      }\r\n    };\r\n\r\n    if (!result.isValid) {\r\n      this.logError(result.context!);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Valide le type et les contraintes d'une valeur\r\n   */\r\n  // @ts-expect-error Paramètre de type réservé pour usage futur\r\n  public validateType<T>(\r\n    value: unknown,\r\n    expectedType: string,\r\n    constraints: {\r\n      min?: number;\r\n      max?: number;\r\n      required?: boolean;\r\n      pattern?: RegExp;\r\n    } = {},\r\n    fieldName: string,\r\n    component: string,\r\n    method: string\r\n  ): ValidationResult {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    // Check required\r\n    if (constraints.required && (value === null || value === undefined)) {\r\n      errors.push(`${fieldName} is required`);\r\n    }\r\n\r\n    // Check type\r\n    if (value !== null && value !== undefined) {\r\n      const actualType = typeof value;\r\n      if (actualType !== expectedType) {\r\n        errors.push(`${fieldName} must be of type ${expectedType}, got ${actualType}`);\r\n      }\r\n\r\n      // Numeric constraints\r\n      if (expectedType === 'number' && typeof value === 'number') {\r\n        if (constraints.min !== undefined && value < constraints.min) {\r\n          errors.push(`${fieldName} must be >= ${constraints.min}`);\r\n        }\r\n        if (constraints.max !== undefined && value > constraints.max) {\r\n          errors.push(`${fieldName} must be <= ${constraints.max}`);\r\n        }\r\n        if (!Number.isFinite(value)) {\r\n          errors.push(`${fieldName} must be a finite number`);\r\n        }\r\n      }\r\n\r\n      // String constraints (longueur et pattern)\r\n      if (expectedType === 'string' && typeof value === 'string') {\r\n        if (constraints.min !== undefined && value.length < constraints.min) {\r\n          errors.push(`${fieldName} must be at least ${constraints.min} characters long`);\r\n        }\r\n        if (constraints.max !== undefined && value.length > constraints.max) {\r\n          errors.push(`${fieldName} must be at most ${constraints.max} characters long`);\r\n        }\r\n        if (constraints.pattern && !constraints.pattern.test(value)) {\r\n          errors.push(`${fieldName} does not match required pattern`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const result: ValidationResult = {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      context: {\r\n        component,\r\n        method,\r\n        timestamp: Date.now(),\r\n        severity: errors.length > 0 ? 'error' : 'warning',\r\n        details: { fieldName, expectedType, actualValue: value }\r\n      }\r\n    };\r\n\r\n    if (!result.isValid) {\r\n      this.logError(result.context!);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Exécute une opération avec retry automatique\r\n   */\r\n  public async withRetry<T>(\r\n    operation: () => Promise<T>,\r\n    strategy: ErrorRecoveryStrategy,\r\n    context: { component: string; method: string }\r\n  ): Promise<T> {\r\n    let lastError: Error | null = null;\r\n    \r\n    for (let attempt = 1; attempt <= strategy.maxRetries; attempt++) {\r\n      this.metrics.recoveryAttempts++;\r\n      \r\n      try {\r\n        const result = await operation();\r\n        if (attempt > 1) {\r\n          this.metrics.recoverySuccesses++;\r\n          this.logSimpleError(\r\n            context.component, \r\n            context.method, \r\n            `Recovery successful after ${attempt} attempts`, \r\n            'info'\r\n          );\r\n        }\r\n        return result;\r\n      } catch (error) {\r\n        lastError = error instanceof Error ? error : new Error(String(error));\r\n        \r\n        this.logSimpleError(\r\n          context.component, \r\n          context.method, \r\n          `Attempt ${attempt}/${strategy.maxRetries} failed: ${lastError.message}`, \r\n          'warning'\r\n        );\r\n\r\n        if (attempt < strategy.maxRetries && strategy.shouldRetry(lastError, attempt)) {\r\n          await this.delay(strategy.backoffMs * attempt);\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // All retries failed\r\n    this.logSimpleError(\r\n      context.component, \r\n      context.method, \r\n      `All ${strategy.maxRetries} retry attempts failed. Last error: ${lastError?.message}`, \r\n      'error'\r\n    );\r\n\r\n    if (strategy.fallbackValue !== undefined) {\r\n      return strategy.fallbackValue as T;\r\n    }\r\n\r\n    throw lastError;\r\n  }\r\n\r\n  /**\r\n   * Wrapper safe pour les opérations qui peuvent lever des exceptions\r\n   */\r\n  public safeExecute<T>(\r\n    operation: () => T,\r\n    fallbackValue: T,\r\n    context: { component: string; method: string }\r\n  ): T {\r\n    try {\r\n      return operation();\r\n    } catch (error) {\r\n      this.logSimpleError(context.component, context.method, error, 'error');\r\n      return fallbackValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrapper safe pour les opérations async\r\n   */\r\n  public async safeExecuteAsync<T>(\r\n    operation: () => Promise<T>,\r\n    fallbackValue: T,\r\n    context: { component: string; method: string }\r\n  ): Promise<T> {\r\n    try {\r\n      return await operation();\r\n    } catch (error) {\r\n      this.logSimpleError(context.component, context.method, error, 'error');\r\n      return fallbackValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les métriques d'erreurs\r\n   */\r\n  public getMetrics(): ErrorMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * Récupère les erreurs récentes\r\n   */\r\n  public getRecentErrors(maxCount: number = 50): ErrorContext[] {\r\n    return this.errorQueue.slice(-maxCount);\r\n  }\r\n\r\n  /**\r\n   * Nettoie les métriques et la queue\r\n   */\r\n  public reset(): void {\r\n    this.metrics = {\r\n      errorCount: 0,\r\n      lastErrorTime: 0,\r\n      errorsByComponent: new Map(),\r\n      errorsByMethod: new Map(),\r\n      recoveryAttempts: 0,\r\n      recoverySuccesses: 0\r\n    };\r\n    this.errorQueue = [];\r\n  }\r\n\r\n  private updateMetrics(context: ErrorContext): void {\r\n    this.metrics.errorCount++;\r\n    this.metrics.lastErrorTime = context.timestamp;\r\n    \r\n    // Update component metrics\r\n    const componentCount = this.metrics.errorsByComponent.get(context.component) || 0;\r\n    this.metrics.errorsByComponent.set(context.component, componentCount + 1);\r\n    \r\n    // Update method metrics\r\n    const methodKey = `${context.component}.${context.method}`;\r\n    const methodCount = this.metrics.errorsByMethod.get(methodKey) || 0;\r\n    this.metrics.errorsByMethod.set(methodKey, methodCount + 1);\r\n  }\r\n\r\n  private addToQueue(context: ErrorContext): void {\r\n    this.errorQueue.push(context);\r\n    \r\n    // Maintain queue size\r\n    if (this.errorQueue.length > this.maxQueueSize) {\r\n      this.errorQueue = this.errorQueue.slice(-this.maxQueueSize);\r\n    }\r\n  }\r\n\r\n  private outputError(context: ErrorContext): void {\r\n    if (!this.shouldLog(context.severity)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = new Date(context.timestamp).toISOString();\r\n    const message = `[${timestamp}] ${context.severity.toUpperCase()} ${context.component}.${context.method}`;\r\n    \r\n    switch (context.severity) {\r\n      case 'critical':\r\n      case 'error':\r\n        console.error(message, context.details);\r\n        break;\r\n      case 'warning':\r\n        console.warn(message, context.details);\r\n        break;\r\n      case 'info':\r\n        console.info(message, context.details);\r\n        break;\r\n      case 'debug':\r\n        console.debug(message, context.details);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private shouldLog(severity: LogLevel): boolean {\r\n    const levels: LogLevel[] = ['debug', 'info', 'warning', 'error', 'critical'];\r\n    const currentLevelIndex = levels.indexOf(this.logLevel);\r\n    const messageLevelIndex = levels.indexOf(severity);\r\n    return messageLevelIndex >= currentLevelIndex;\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private recordError(context: ErrorContext): void {\r\n    this.updateMetrics(context);\r\n    this.addToQueue(context);\r\n  }\r\n}\r\n\r\n// Instance globale pour utilisation facile\r\nexport const errorHandler = ErrorHandler.getInstance(); "],"version":3}