{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/SecurityManager.test.ts","mappings":";;AAsCA,IAAI,CAAC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3D,WAAW,EAAE;QACX,MAAM,EAAE,gBAAgB;QACxB,eAAe,EAAE,yBAAyB;KAC3C;CACF,CAAC,CAAC,CAAC;AA3CJ,+DAA+D;AAC/D,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QACvC,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE;QAC3C,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;KAClB,CAAC;IACf,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QACrC,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE;QAC3C,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;KAClB,CAAC;IACf,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;IAC3D,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;QAC/C,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QACtC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,OAAO,UAAU,CAAC,MAAM,CAAC;IAC3B,CAAC,CAAC;IACF,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACvD,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;IACnD,CAAC,CAAC;IACF,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;QAC9C,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC,CAAC;CACH,CAAC;AAEF,MAAM,yBAAyB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE;IAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACpC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC,CAAC;AASH,uEAAmE;AAEnE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,QAAyB,CAAC;IAE9B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,yBAAyB;QACzB,gBAAgB,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;QACzC,gBAAgB,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QACrC,gBAAgB,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QACrC,gBAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACpC,yBAAyB,CAAC,SAAS,EAAE,CAAC;QAEtC,QAAQ,GAAG,IAAI,iCAAe,EAAE,CAAC;QAEjC,gFAAgF;QAC/E,QAAgB,CAAC,aAAa,GAAG;YAChC,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE;YAC3C,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;SAClB,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YAEvC,kBAAkB;YAClB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAChE,MAAM,CAAC,OAAO,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEpD,oBAAoB;YACpB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAExE,MAAM,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,4CAA4C,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAEzE,MAAM,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;QAC/G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,OAAO,GAAG;gBACd,GAAG,EAAE,oBAAoB;gBACzB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,EAAE;gBACb,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;YAEF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC3D,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,OAAO,GAAG;gBACd,GAAG,EAAE,oBAAoB;gBACzB,MAAM,EAAE,SAAS;gBACjB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,EAAE;gBACb,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;YAEF,MAAM,UAAU,GAAG,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;YACvD,MAAM,CAAC,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,OAAO,GAAG;gBACd,GAAG,EAAE,oBAAoB;gBACzB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,WAAW;gBAClB,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;YAC7D,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,MAAe,EAAE,CAAC;YAChF,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,OAAgB,EAAE,CAAC;YAClF,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClF,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,UAAU,GAAG,aAAa,CAAC;YACjC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE7C,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,UAAU,GAAG,iBAAiB,CAAC;YACrC,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE9C,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,UAAU,GAAG,WAAW,CAAC;YAC/B,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAE3C,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/SecurityManager.test.ts"],"sourcesContent":["// Mock service-worker-adapter before importing SecurityManager\r\nconst mockCryptoSubtle = {\r\n  generateKey: jest.fn().mockResolvedValue({ \r\n    type: 'secret', \r\n    extractable: true, \r\n    algorithm: { name: 'AES-GCM', length: 256 }, \r\n    usages: ['encrypt', 'decrypt'] \r\n  } as CryptoKey),\r\n  importKey: jest.fn().mockResolvedValue({ \r\n    type: 'secret', \r\n    extractable: true, \r\n    algorithm: { name: 'AES-GCM', length: 256 }, \r\n    usages: ['encrypt', 'decrypt'] \r\n  } as CryptoKey),\r\n  exportKey: jest.fn().mockResolvedValue(new ArrayBuffer(32)),\r\n  encrypt: jest.fn().mockImplementation(async () => {\r\n    const mockResult = new Uint8Array(32);\r\n    mockResult.fill(0xAB);\r\n    return mockResult.buffer;\r\n  }),\r\n  decrypt: jest.fn().mockImplementation(async () => {\r\n    const testData = JSON.stringify({ foo: 'bar', n: 42 });\r\n    return new TextEncoder().encode(testData).buffer;\r\n  }),\r\n  digest: jest.fn().mockImplementation(async () => {\r\n    const hash = new Uint8Array(32);\r\n    hash.fill(0xCD);\r\n    return hash.buffer;\r\n  })\r\n};\r\n\r\nconst mockCryptoGetRandomValues = jest.fn((arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = Math.floor(Math.random() * 256);\r\n  }\r\n  return arr;\r\n});\r\n\r\njest.mock('../src/background/service-worker-adapter', () => ({\r\n  swCryptoAPI: {\r\n    subtle: mockCryptoSubtle,\r\n    getRandomValues: mockCryptoGetRandomValues\r\n  }\r\n}));\r\n\r\nimport { SecurityManager } from '../src/background/SecurityManager'\r\n\r\ndescribe('SecurityManager', () => {\r\n  let security: SecurityManager;\r\n  \r\n  beforeEach(async () => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Reset all crypto mocks\r\n    mockCryptoSubtle.generateKey.mockClear();\r\n    mockCryptoSubtle.encrypt.mockClear();\r\n    mockCryptoSubtle.decrypt.mockClear();\r\n    mockCryptoSubtle.digest.mockClear();\r\n    mockCryptoGetRandomValues.mockClear();\r\n    \r\n    security = new SecurityManager();\r\n    \r\n    // Mock the private encryptionKey property to simulate successful initialization\r\n    (security as any).encryptionKey = { \r\n      type: 'secret', \r\n      extractable: true, \r\n      algorithm: { name: 'AES-GCM', length: 256 }, \r\n      usages: ['encrypt', 'decrypt'] \r\n    } as CryptoKey;\r\n  });\r\n\r\n  describe('Chiffrement/Déchiffrement', () => {\r\n    it('chiffre et déchiffre correctement les données', async () => {\r\n      const testData = { foo: 'bar', n: 42 };\r\n      \r\n      // Test encryption\r\n      const encrypted = await security.encryptSensitiveData(testData);\r\n      expect(typeof encrypted).toBe('string');\r\n      expect(encrypted.length).toBeGreaterThan(0);\r\n      expect(mockCryptoSubtle.encrypt).toHaveBeenCalled();\r\n      \r\n      // Test decryption  \r\n      const decrypted = await security.decryptSensitiveData(encrypted);\r\n      expect(decrypted).toEqual(testData);\r\n      expect(mockCryptoSubtle.decrypt).toHaveBeenCalled();\r\n    });\r\n\r\n    it('gère les erreurs de chiffrement gracieusement', async () => {\r\n      mockCryptoSubtle.encrypt.mockRejectedValue(new Error('Crypto failure'));\r\n      \r\n      await expect(security.encryptSensitiveData({})).rejects.toThrow('Échec du chiffrement des données sensibles');\r\n    });\r\n\r\n    it('gère les erreurs de déchiffrement gracieusement', async () => {\r\n      mockCryptoSubtle.decrypt.mockRejectedValue(new Error('Decrypt failure'));\r\n      \r\n      await expect(security.decryptSensitiveData('invalid')).rejects.toThrow('Échec du déchiffrement des données');\r\n    });\r\n  });\r\n\r\n  describe('Anonymisation', () => {\r\n    it('anonymise les données comportementales (async)', async () => {\r\n      const pattern = { \r\n        url: 'https://secret.com', \r\n        interactions: 5, \r\n        timeSpent: 10, \r\n        scrollDepth: 0.8, \r\n        timestamp: Date.now() \r\n      };\r\n      \r\n      const anonymized = await security.anonymizeForSharing(pattern);\r\n      expect(anonymized.url).toBe('anonymized');\r\n      expect(anonymized.interactions).toBe(pattern.interactions);\r\n      expect(anonymized.timeSpent).toBe(pattern.timeSpent);\r\n      expect(anonymized.scrollDepth).toBe(pattern.scrollDepth);\r\n    });\r\n\r\n    it('anonymise les données comportementales (sync)', () => {\r\n      const pattern = { \r\n        url: 'https://secret.com', \r\n        userId: 'user123',\r\n        interactions: 5, \r\n        timeSpent: 10, \r\n        scrollDepth: 0.8, \r\n        timestamp: Date.now() \r\n      };\r\n      \r\n      const anonymized = security.anonymizeForSharingSync(pattern);\r\n      expect(anonymized.url).toBe('anonymized');\r\n      expect(anonymized.userId).not.toBe('user123'); // Hashé\r\n      expect(typeof anonymized.userId).toBe('string');\r\n    });\r\n\r\n    it('supprime les champs sensibles', async () => {\r\n      const pattern = { \r\n        url: 'https://secret.com',\r\n        email: 'test@example.com',\r\n        name: 'John Doe',\r\n        phone: '123456789',\r\n        interactions: 5\r\n      };\r\n      \r\n      const anonymized = await security.anonymizeForSharing(pattern);\r\n      expect(anonymized.email).toBeUndefined();\r\n      expect(anonymized.name).toBeUndefined();\r\n      expect(anonymized.phone).toBeUndefined();\r\n      expect(anonymized.interactions).toBe(5);\r\n    });\r\n  });\r\n\r\n  describe('Contrôle d\\'accès', () => {\r\n    it('valide l\\'accès utilisateur basique', () => {\r\n      const request = { userId: 'user123', resource: 'organisms' };\r\n      expect(security.validateDataAccess(request)).toBe(true);\r\n    });\r\n\r\n    it('rejette l\\'accès admin sans rôle admin', () => {\r\n      const request = { userId: 'user123', resource: 'admin', role: 'user' as const };\r\n      expect(security.validateDataAccess(request, 'admin')).toBe(false);\r\n    });\r\n\r\n    it('accepte l\\'accès admin avec rôle admin', () => {\r\n      const request = { userId: 'admin123', resource: 'admin', role: 'admin' as const };\r\n      expect(security.validateDataAccess(request, 'admin')).toBe(true);\r\n    });\r\n\r\n    it('rejette les requêtes invalides', () => {\r\n      expect(security.validateDataAccess({ userId: '', resource: 'test' })).toBe(false);\r\n      expect(security.validateDataAccess({ userId: 'user', resource: '' })).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Hashage', () => {\r\n    it('hash des chaînes avec SHA-256', async () => {\r\n      const testString = 'test-string';\r\n      const hash = await security.hash(testString);\r\n      \r\n      expect(typeof hash).toBe('string');\r\n      expect(hash.length).toBeGreaterThan(0);\r\n      expect(mockCryptoSubtle.digest).toHaveBeenCalledWith('SHA-256', expect.any(Uint8Array));\r\n    });\r\n\r\n    it('produit des hashs cohérents', async () => {\r\n      const testString = 'consistent-test';\r\n      const hash1 = await security.hash(testString);\r\n      const hash2 = await security.hash(testString);\r\n      \r\n      expect(hash1).toBe(hash2);\r\n    });\r\n\r\n    it('hash sync fonctionne comme fallback', () => {\r\n      const testString = 'sync-test';\r\n      const hash = security.hashSync(testString);\r\n      \r\n      expect(typeof hash).toBe('string');\r\n      expect(hash.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n}); "],"version":3}