{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/secureLogger.test.ts","mappings":";AAAA;;GAEG;;AAEH,sEAA6E;AAE7E,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,MAAoB,CAAC;IACzB,IAAI,UAA4B,CAAC;IAEjC,UAAU,CAAC,GAAG,EAAE;QACd,yCAAyC;QACxC,2BAAoB,CAAC,QAAQ,GAAG,SAAS,CAAC;QAE3C,uBAAuB;QACvB,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAClD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAElD,mBAAmB;QACnB,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,EAAE;YACpC,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;YAC3B,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,SAAS,GAAG,2BAAY,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,SAAS,GAAG,2BAAY,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,uBAAQ,CAAC,IAAI;gBACpB,aAAa,EAAE,KAAK;gBACpB,aAAa,EAAE,KAAK;aACrB,CAAC;YACF,MAAM,GAAG,2BAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAE1C,8CAA8C;YAC9C,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7B,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAE1C,0CAA0C;YAC1C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC5B,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,mBAAmB;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,GAAG,2BAAY,CAAC,WAAW,CAAC;gBAChC,KAAK,EAAE,uBAAQ,CAAC,KAAK;gBACrB,aAAa,EAAE,IAAI;gBACnB,aAAa,EAAE,IAAI;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,aAAa,GAAG;gBACpB,QAAQ,EAAE,WAAW;gBACrB,KAAK,EAAE,aAAa;gBACpB,MAAM,EAAE,qBAAqB;gBAC7B,KAAK,EAAE,kBAAkB;gBACzB,UAAU,EAAE,cAAc;aAC3B,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;YAEvD,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC9C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,eAAe,GAAG,6CAA6C,CAAC;YAEtE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAE7B,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,UAAU,GAAG;gBACjB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE;wBACR,QAAQ,EAAE,UAAU;wBACpB,KAAK,EAAE,MAAM;qBACd;iBACF;aACF,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;YAE5C,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,SAAS,GAAG;gBAChB,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE;gBAC3B,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE;aAC3B,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YAE1C,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,GAAG,2BAAY,CAAC,WAAW,CAAC;gBAChC,KAAK,EAAE,uBAAQ,CAAC,IAAI;gBACpB,aAAa,EAAE,IAAI;gBACnB,aAAa,EAAE,IAAI;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,qBAAqB;YACpD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAG,cAAc;YAC7C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAG,cAAc;YAC7C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,cAAc;YAE7C,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB;YAClD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YACnE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAC;YACjE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAC;YACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAEnE,MAAM,CAAC,QAAQ,CAAC,uBAAQ,CAAC,KAAK,CAAC,CAAC;YAEhC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEtB,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,GAAG,2BAAY,CAAC,WAAW,CAAC;gBAChC,KAAK,EAAE,uBAAQ,CAAC,KAAK;gBACrB,aAAa,EAAE,KAAK;gBACpB,aAAa,EAAE,IAAI;gBACnB,iBAAiB,EAAE,CAAC;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,aAAa,CAAC,CAAC;YAE9D,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpB,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACzC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACxC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,oCAAoC;YAE9D,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEtB,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,uBAAQ,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,KAAK,CAAC,CAAC;YAEhD,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;YACnD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,UAAU,CAAC,GAAG,EAAE;YACd,8BAA8B;YAC9B,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,EAAE;gBACpC,KAAK,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE;gBACjC,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YAEH,oCAAoC;YACpC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;gBACtC,KAAK,EAAE;oBACL,OAAO,EAAE;wBACP,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;qBACtC;iBACF;gBACD,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,OAAQ,MAAc,CAAC,MAAM,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,GAAG,2BAAY,CAAC,WAAW,EAAE,CAAC;YAEpC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAElC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAE1C,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,GAAG,2BAAY,CAAC,WAAW,CAAC;gBAChC,KAAK,EAAE,uBAAQ,CAAC,KAAK;gBACrB,aAAa,EAAE,IAAI;gBACnB,aAAa,EAAE,IAAI;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,CAAC,QAAQ,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;YAE/B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB;YAC5C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAG,qBAAqB;YAC5C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAG,cAAc;YAErC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAQ,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAE1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrB,MAAM,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEzB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,MAAM,CAAC,SAAS,EAAE,CAAC;YAEnB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEzB,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/secureLogger.test.ts"],"sourcesContent":["/**\n * Tests pour le système de logging sécurisé\n */\n\nimport { SecureLogger, LogLevel } from '../../src/shared/utils/secureLogger';\n\ndescribe('SecureLogger', () => {\n  let logger: SecureLogger;\n  let consoleSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    // Reset singleton instance for each test\n    (SecureLogger as any).instance = undefined;\n    \n    // Mock console methods\n    consoleSpy = jest.spyOn(console, 'info').mockImplementation();\n    jest.spyOn(console, 'warn').mockImplementation();\n    jest.spyOn(console, 'error').mockImplementation();\n    jest.spyOn(console, 'debug').mockImplementation();\n    \n    // Mock process.env\n    Object.defineProperty(process, 'env', {\n      value: { NODE_ENV: 'test' },\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('getInstance()', () => {\n    it('should return singleton instance', () => {\n      const instance1 = SecureLogger.getInstance();\n      const instance2 = SecureLogger.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should configure logger with provided config', () => {\n      const config = {\n        level: LogLevel.WARN,\n        enableConsole: false,\n        enableStorage: false,\n      };\n      logger = SecureLogger.getInstance(config);\n      \n      // Log at DEBUG level (should be filtered out)\n      logger.debug('test message');\n      expect(consoleSpy).not.toHaveBeenCalled();\n      \n      // Log at WARN level (should pass through)\n      logger.warn('warn message');\n      expect(consoleSpy).not.toHaveBeenCalled(); // Console disabled\n    });\n  });\n\n  describe('Data Sanitization', () => {\n    beforeEach(() => {\n      logger = SecureLogger.getInstance({\n        level: LogLevel.DEBUG,\n        enableConsole: true,\n        enableStorage: true,\n      });\n    });\n\n    it('should sanitize sensitive strings', () => {\n      const sensitiveData = {\n        password: 'secret123',\n        token: 'abc123token',\n        apiKey: 'sk-1234567890abcdef',\n        email: 'user@example.com',\n        normalData: 'this is fine',\n      };\n\n      logger.info('Test with sensitive data', sensitiveData);\n      \n      const logs = logger.getLogs();\n      const lastLog = logs[logs.length - 1];\n      \n      expect(lastLog.data.password).toBe('[REDACTED]');\n      expect(lastLog.data.token).toBe('[REDACTED]');\n      expect(lastLog.data.apiKey).toBe('[REDACTED]');\n      expect(lastLog.data.normalData).toBe('this is fine');\n      expect(lastLog.sanitized).toBe(true);\n    });\n\n    it('should detect and sanitize pattern-based sensitive data', () => {\n      const sensitiveString = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\n      \n      logger.warn(sensitiveString);\n      \n      const logs = logger.getLogs();\n      const lastLog = logs[logs.length - 1];\n      \n      expect(lastLog.message).toContain('[REDACTED]');\n    });\n\n    it('should sanitize nested objects', () => {\n      const nestedData = {\n        user: {\n          name: 'John',\n          password: 'secret',\n          settings: {\n            apiToken: 'token123',\n            theme: 'dark',\n          },\n        },\n      };\n\n      logger.info('Nested data test', nestedData);\n      \n      const logs = logger.getLogs();\n      const lastLog = logs[logs.length - 1];\n      \n      expect(lastLog.data.user.name).toBe('John');\n      expect(lastLog.data.user.password).toBe('[REDACTED]');\n      expect(lastLog.data.user.settings.apiToken).toBe('[REDACTED]');\n      expect(lastLog.data.user.settings.theme).toBe('dark');\n    });\n\n    it('should sanitize arrays', () => {\n      const arrayData = [\n        { id: 1, secret: 'hidden' },\n        { id: 2, name: 'visible' },\n      ];\n\n      logger.info('Array data test', arrayData);\n      \n      const logs = logger.getLogs();\n      const lastLog = logs[logs.length - 1];\n      \n      expect(lastLog.data[0].id).toBe(1);\n      expect(lastLog.data[0].secret).toBe('[REDACTED]');\n      expect(lastLog.data[1].name).toBe('visible');\n    });\n  });\n\n  describe('Log Levels', () => {\n    beforeEach(() => {\n      logger = SecureLogger.getInstance({\n        level: LogLevel.INFO,\n        enableConsole: true,\n        enableStorage: true,\n      });\n    });\n\n    it('should respect log level filtering', () => {\n      logger.debug('debug message'); // Should be filtered\n      logger.info('info message');   // Should pass\n      logger.warn('warn message');   // Should pass\n      logger.error('error message'); // Should pass\n\n      const logs = logger.getLogs();\n      expect(logs.length).toBe(3); // debug filtered out\n      expect(logs[0].level).toBe(LogLevel.INFO);\n      expect(logs[1].level).toBe(LogLevel.WARN);\n      expect(logs[2].level).toBe(LogLevel.ERROR);\n    });\n\n    it('should log to appropriate console methods', () => {\n      const debugSpy = jest.spyOn(console, 'debug').mockImplementation();\n      const infoSpy = jest.spyOn(console, 'info').mockImplementation();\n      const warnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      logger.setLevel(LogLevel.DEBUG);\n      \n      logger.debug('debug');\n      logger.info('info');\n      logger.warn('warn');\n      logger.error('error');\n      logger.fatal('fatal');\n\n      expect(debugSpy).toHaveBeenCalled();\n      expect(infoSpy).toHaveBeenCalled();\n      expect(warnSpy).toHaveBeenCalled();\n      expect(errorSpy).toHaveBeenCalledTimes(2); // error + fatal\n    });\n  });\n\n  describe('Log Storage', () => {\n    beforeEach(() => {\n      logger = SecureLogger.getInstance({\n        level: LogLevel.DEBUG,\n        enableConsole: false,\n        enableStorage: true,\n        maxStorageEntries: 3,\n      });\n    });\n\n    it('should store logs with proper structure', () => {\n      logger.info('test message', { name: 'value' }, 'TestContext');\n      \n      const logs = logger.getLogs();\n      const log = logs[0];\n      \n      expect(log.timestamp).toBeGreaterThan(0);\n      expect(log.level).toBe(LogLevel.INFO);\n      expect(log.message).toBe('test message');\n      expect(log.data).toEqual({ name: 'value' });\n      expect(log.context).toBe('TestContext');\n      expect(log.sanitized).toBe(true);\n    });\n\n    it('should limit stored entries', () => {\n      logger.info('message 1');\n      logger.info('message 2');\n      logger.info('message 3');\n      logger.info('message 4'); // Should cause oldest to be removed\n      \n      const logs = logger.getLogs();\n      expect(logs.length).toBe(3);\n      expect(logs[0].message).toBe('message 2');\n      expect(logs[2].message).toBe('message 4');\n    });\n\n    it('should filter logs by level when retrieving', () => {\n      logger.debug('debug');\n      logger.info('info');\n      logger.warn('warn');\n      logger.error('error');\n\n      const errorLogs = logger.getLogs(LogLevel.ERROR);\n      expect(errorLogs.length).toBe(1);\n      expect(errorLogs[0].level).toBe(LogLevel.ERROR);\n\n      const warnAndAbove = logger.getLogs(LogLevel.WARN);\n      expect(warnAndAbove.length).toBe(2);\n    });\n  });\n\n  describe('Production Mode', () => {\n    beforeEach(() => {\n      // Mock production environment\n      Object.defineProperty(process, 'env', {\n        value: { NODE_ENV: 'production' },\n        writable: true,\n      });\n      \n      // Mock Chrome extension environment\n      Object.defineProperty(global, 'chrome', {\n        value: {\n          runtime: {\n            getManifest: () => ({ name: 'test' }),\n          },\n        },\n        writable: true,\n      });\n    });\n\n    afterEach(() => {\n      delete (global as any).chrome;\n    });\n\n    it('should disable console in production by default', () => {\n      logger = SecureLogger.getInstance();\n      \n      logger.info('production message');\n      \n      expect(consoleSpy).not.toHaveBeenCalled();\n      \n      const logs = logger.getLogs();\n      expect(logs.length).toBe(1); // Still stored\n    });\n  });\n\n  describe('Utility Methods', () => {\n    beforeEach(() => {\n      logger = SecureLogger.getInstance({\n        level: LogLevel.DEBUG,\n        enableConsole: true,\n        enableStorage: true,\n      });\n    });\n\n    it('should change log level dynamically', () => {\n      logger.setLevel(LogLevel.WARN);\n      \n      logger.debug('debug'); // Should be filtered\n      logger.info('info');   // Should be filtered\n      logger.warn('warn');   // Should pass\n      \n      const logs = logger.getLogs();\n      expect(logs.length).toBe(1);\n      expect(logs[0].level).toBe(LogLevel.WARN);\n    });\n\n    it('should enable/disable console dynamically', () => {\n      logger.enableConsole(false);\n      logger.info('test');\n      expect(consoleSpy).not.toHaveBeenCalled();\n      \n      logger.enableConsole(true);\n      logger.info('test2');\n      expect(consoleSpy).toHaveBeenCalled();\n    });\n\n    it('should clear logs', () => {\n      logger.info('message 1');\n      logger.info('message 2');\n      \n      expect(logger.getLogs().length).toBe(2);\n      \n      logger.clearLogs();\n      \n      expect(logger.getLogs().length).toBe(0);\n    });\n\n    it('should export logs as JSON', () => {\n      logger.info('message 1', { data: 'test' });\n      logger.warn('message 2');\n      \n      const exported = logger.exportLogs();\n      const parsed = JSON.parse(exported);\n      \n      expect(Array.isArray(parsed)).toBe(true);\n      expect(parsed.length).toBe(2);\n      expect(parsed[0].message).toBe('message 1');\n      expect(parsed[1].message).toBe('message 2');\n    });\n  });\n});"],"version":3}