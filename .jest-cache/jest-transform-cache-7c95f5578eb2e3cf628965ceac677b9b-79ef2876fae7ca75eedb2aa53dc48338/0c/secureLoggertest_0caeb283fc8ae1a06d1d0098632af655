101b987d42cb842ca73926d72106cb69
"use strict";
/**
 * Tests pour le système de logging sécurisé
 */
Object.defineProperty(exports, "__esModule", { value: true });
const secureLogger_1 = require("../../src/shared/utils/secureLogger");
describe('SecureLogger', () => {
    let logger;
    let consoleSpy;
    beforeEach(() => {
        // Reset singleton instance for each test
        secureLogger_1.SecureLogger.instance = undefined;
        // Mock console methods
        consoleSpy = jest.spyOn(console, 'info').mockImplementation();
        jest.spyOn(console, 'warn').mockImplementation();
        jest.spyOn(console, 'error').mockImplementation();
        jest.spyOn(console, 'debug').mockImplementation();
        // Mock process.env
        Object.defineProperty(process, 'env', {
            value: { NODE_ENV: 'test' },
            writable: true,
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('getInstance()', () => {
        it('should return singleton instance', () => {
            const instance1 = secureLogger_1.SecureLogger.getInstance();
            const instance2 = secureLogger_1.SecureLogger.getInstance();
            expect(instance1).toBe(instance2);
        });
        it('should configure logger with provided config', () => {
            const config = {
                level: secureLogger_1.LogLevel.WARN,
                enableConsole: false,
                enableStorage: false,
            };
            logger = secureLogger_1.SecureLogger.getInstance(config);
            // Log at DEBUG level (should be filtered out)
            logger.debug('test message');
            expect(consoleSpy).not.toHaveBeenCalled();
            // Log at WARN level (should pass through)
            logger.warn('warn message');
            expect(consoleSpy).not.toHaveBeenCalled(); // Console disabled
        });
    });
    describe('Data Sanitization', () => {
        beforeEach(() => {
            logger = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should sanitize sensitive strings', () => {
            const sensitiveData = {
                password: 'secret123',
                token: 'abc123token',
                apiKey: 'sk-1234567890abcdef',
                email: 'user@example.com',
                normalData: 'this is fine',
            };
            logger.info('Test with sensitive data', sensitiveData);
            const logs = logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data.password).toBe('[REDACTED]');
            expect(lastLog.data.token).toBe('[REDACTED]');
            expect(lastLog.data.apiKey).toBe('[REDACTED]');
            expect(lastLog.data.normalData).toBe('this is fine');
            expect(lastLog.sanitized).toBe(true);
        });
        it('should detect and sanitize pattern-based sensitive data', () => {
            const sensitiveString = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';
            logger.warn(sensitiveString);
            const logs = logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.message).toContain('[REDACTED]');
        });
        it('should sanitize nested objects', () => {
            const nestedData = {
                user: {
                    name: 'John',
                    password: 'secret',
                    settings: {
                        apiToken: 'token123',
                        theme: 'dark',
                    },
                },
            };
            logger.info('Nested data test', nestedData);
            const logs = logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data.user.name).toBe('John');
            expect(lastLog.data.user.password).toBe('[REDACTED]');
            expect(lastLog.data.user.settings.apiToken).toBe('[REDACTED]');
            expect(lastLog.data.user.settings.theme).toBe('dark');
        });
        it('should sanitize arrays', () => {
            const arrayData = [
                { id: 1, secret: 'hidden' },
                { id: 2, name: 'visible' },
            ];
            logger.info('Array data test', arrayData);
            const logs = logger.getLogs();
            const lastLog = logs[logs.length - 1];
            expect(lastLog.data[0].id).toBe(1);
            expect(lastLog.data[0].secret).toBe('[REDACTED]');
            expect(lastLog.data[1].name).toBe('visible');
        });
    });
    describe('Log Levels', () => {
        beforeEach(() => {
            logger = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.INFO,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should respect log level filtering', () => {
            logger.debug('debug message'); // Should be filtered
            logger.info('info message'); // Should pass
            logger.warn('warn message'); // Should pass
            logger.error('error message'); // Should pass
            const logs = logger.getLogs();
            expect(logs.length).toBe(3); // debug filtered out
            expect(logs[0].level).toBe(secureLogger_1.LogLevel.INFO);
            expect(logs[1].level).toBe(secureLogger_1.LogLevel.WARN);
            expect(logs[2].level).toBe(secureLogger_1.LogLevel.ERROR);
        });
        it('should log to appropriate console methods', () => {
            const debugSpy = jest.spyOn(console, 'debug').mockImplementation();
            const infoSpy = jest.spyOn(console, 'info').mockImplementation();
            const warnSpy = jest.spyOn(console, 'warn').mockImplementation();
            const errorSpy = jest.spyOn(console, 'error').mockImplementation();
            logger.setLevel(secureLogger_1.LogLevel.DEBUG);
            logger.debug('debug');
            logger.info('info');
            logger.warn('warn');
            logger.error('error');
            logger.fatal('fatal');
            expect(debugSpy).toHaveBeenCalled();
            expect(infoSpy).toHaveBeenCalled();
            expect(warnSpy).toHaveBeenCalled();
            expect(errorSpy).toHaveBeenCalledTimes(2); // error + fatal
        });
    });
    describe('Log Storage', () => {
        beforeEach(() => {
            logger = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: false,
                enableStorage: true,
                maxStorageEntries: 3,
            });
        });
        it('should store logs with proper structure', () => {
            logger.info('test message', { name: 'value' }, 'TestContext');
            const logs = logger.getLogs();
            const log = logs[0];
            expect(log.timestamp).toBeGreaterThan(0);
            expect(log.level).toBe(secureLogger_1.LogLevel.INFO);
            expect(log.message).toBe('test message');
            expect(log.data).toEqual({ name: 'value' });
            expect(log.context).toBe('TestContext');
            expect(log.sanitized).toBe(true);
        });
        it('should limit stored entries', () => {
            logger.info('message 1');
            logger.info('message 2');
            logger.info('message 3');
            logger.info('message 4'); // Should cause oldest to be removed
            const logs = logger.getLogs();
            expect(logs.length).toBe(3);
            expect(logs[0].message).toBe('message 2');
            expect(logs[2].message).toBe('message 4');
        });
        it('should filter logs by level when retrieving', () => {
            logger.debug('debug');
            logger.info('info');
            logger.warn('warn');
            logger.error('error');
            const errorLogs = logger.getLogs(secureLogger_1.LogLevel.ERROR);
            expect(errorLogs.length).toBe(1);
            expect(errorLogs[0].level).toBe(secureLogger_1.LogLevel.ERROR);
            const warnAndAbove = logger.getLogs(secureLogger_1.LogLevel.WARN);
            expect(warnAndAbove.length).toBe(2);
        });
    });
    describe('Production Mode', () => {
        beforeEach(() => {
            // Mock production environment
            Object.defineProperty(process, 'env', {
                value: { NODE_ENV: 'production' },
                writable: true,
            });
            // Mock Chrome extension environment
            Object.defineProperty(global, 'chrome', {
                value: {
                    runtime: {
                        getManifest: () => ({ name: 'test' }),
                    },
                },
                writable: true,
            });
        });
        afterEach(() => {
            delete global.chrome;
        });
        it('should disable console in production by default', () => {
            logger = secureLogger_1.SecureLogger.getInstance();
            logger.info('production message');
            expect(consoleSpy).not.toHaveBeenCalled();
            const logs = logger.getLogs();
            expect(logs.length).toBe(1); // Still stored
        });
    });
    describe('Utility Methods', () => {
        beforeEach(() => {
            logger = secureLogger_1.SecureLogger.getInstance({
                level: secureLogger_1.LogLevel.DEBUG,
                enableConsole: true,
                enableStorage: true,
            });
        });
        it('should change log level dynamically', () => {
            logger.setLevel(secureLogger_1.LogLevel.WARN);
            logger.debug('debug'); // Should be filtered
            logger.info('info'); // Should be filtered
            logger.warn('warn'); // Should pass
            const logs = logger.getLogs();
            expect(logs.length).toBe(1);
            expect(logs[0].level).toBe(secureLogger_1.LogLevel.WARN);
        });
        it('should enable/disable console dynamically', () => {
            logger.enableConsole(false);
            logger.info('test');
            expect(consoleSpy).not.toHaveBeenCalled();
            logger.enableConsole(true);
            logger.info('test2');
            expect(consoleSpy).toHaveBeenCalled();
        });
        it('should clear logs', () => {
            logger.info('message 1');
            logger.info('message 2');
            expect(logger.getLogs().length).toBe(2);
            logger.clearLogs();
            expect(logger.getLogs().length).toBe(0);
        });
        it('should export logs as JSON', () => {
            logger.info('message 1', { data: 'test' });
            logger.warn('message 2');
            const exported = logger.exportLogs();
            const parsed = JSON.parse(exported);
            expect(Array.isArray(parsed)).toBe(true);
            expect(parsed.length).toBe(2);
            expect(parsed[0].message).toBe('message 1');
            expect(parsed[1].message).toBe('message 2');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL3NlY3VyaXR5L3NlY3VyZUxvZ2dlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCxzRUFBNkU7QUFFN0UsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsSUFBSSxNQUFvQixDQUFDO0lBQ3pCLElBQUksVUFBNEIsQ0FBQztJQUVqQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QseUNBQXlDO1FBQ3hDLDJCQUFvQixDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFFM0MsdUJBQXVCO1FBQ3ZCLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRWxELG1CQUFtQjtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7WUFDcEMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtZQUMzQixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQzdCLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7WUFDMUMsTUFBTSxTQUFTLEdBQUcs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TUJJT05UL19fdGVzdHNfXy9zZWN1cml0eS9zZWN1cmVMb2dnZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIHBvdXIgbGUgc3lzdMOobWUgZGUgbG9nZ2luZyBzw6ljdXJpc8OpXG4gKi9cblxuaW1wb3J0IHsgU2VjdXJlTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJy4uLy4uL3NyYy9zaGFyZWQvdXRpbHMvc2VjdXJlTG9nZ2VyJztcblxuZGVzY3JpYmUoJ1NlY3VyZUxvZ2dlcicsICgpID0+IHtcbiAgbGV0IGxvZ2dlcjogU2VjdXJlTG9nZ2VyO1xuICBsZXQgY29uc29sZVNweTogamVzdC5TcHlJbnN0YW5jZTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBSZXNldCBzaW5nbGV0b24gaW5zdGFuY2UgZm9yIGVhY2ggdGVzdFxuICAgIChTZWN1cmVMb2dnZXIgYXMgYW55KS5pbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICBcbiAgICAvLyBNb2NrIGNvbnNvbGUgbWV0aG9kc1xuICAgIGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdpbmZvJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnZGVidWcnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICBcbiAgICAvLyBNb2NrIHByb2Nlc3MuZW52XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb2Nlc3MsICdlbnYnLCB7XG4gICAgICB2YWx1ZTogeyBOT0RFX0VOVjogJ3Rlc3QnIH0sXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0SW5zdGFuY2UoKScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBzaW5nbGV0b24gaW5zdGFuY2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnN0YW5jZTEgPSBTZWN1cmVMb2dnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IFNlY3VyZUxvZ2dlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgZXhwZWN0KGluc3RhbmNlMSkudG9CZShpbnN0YW5jZTIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjb25maWd1cmUgbG9nZ2VyIHdpdGggcHJvdmlkZWQgY29uZmlnJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBsZXZlbDogTG9nTGV2ZWwuV0FSTixcbiAgICAgICAgZW5hYmxlQ29uc29sZTogZmFsc2UsXG4gICAgICAgIGVuYWJsZVN0b3JhZ2U6IGZhbHNlLFxuICAgICAgfTtcbiAgICAgIGxvZ2dlciA9IFNlY3VyZUxvZ2dlci5nZXRJbnN0YW5jZShjb25maWcpO1xuICAgICAgXG4gICAgICAvLyBMb2cgYXQgREVCVUcgbGV2ZWwgKHNob3VsZCBiZSBmaWx0ZXJlZCBvdXQpXG4gICAgICBsb2dnZXIuZGVidWcoJ3Rlc3QgbWVzc2FnZScpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBcbiAgICAgIC8vIExvZyBhdCBXQVJOIGxldmVsIChzaG91bGQgcGFzcyB0aHJvdWdoKVxuICAgICAgbG9nZ2VyLndhcm4oJ3dhcm4gbWVzc2FnZScpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7IC8vIENvbnNvbGUgZGlzYWJsZWRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGEgU2FuaXRpemF0aW9uJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgbG9nZ2VyID0gU2VjdXJlTG9nZ2VyLmdldEluc3RhbmNlKHtcbiAgICAgICAgbGV2ZWw6IExvZ0xldmVsLkRFQlVHLFxuICAgICAgICBlbmFibGVDb25zb2xlOiB0cnVlLFxuICAgICAgICBlbmFibGVTdG9yYWdlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNhbml0aXplIHNlbnNpdGl2ZSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2Vuc2l0aXZlRGF0YSA9IHtcbiAgICAgICAgcGFzc3dvcmQ6ICdzZWNyZXQxMjMnLFxuICAgICAgICB0b2tlbjogJ2FiYzEyM3Rva2VuJyxcbiAgICAgICAgYXBpS2V5OiAnc2stMTIzNDU2Nzg5MGFiY2RlZicsXG4gICAgICAgIGVtYWlsOiAndXNlckBleGFtcGxlLmNvbScsXG4gICAgICAgIG5vcm1hbERhdGE6ICd0aGlzIGlzIGZpbmUnLFxuICAgICAgfTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ1Rlc3Qgd2l0aCBzZW5zaXRpdmUgZGF0YScsIHNlbnNpdGl2ZURhdGEpO1xuICAgICAgXG4gICAgICBjb25zdCBsb2dzID0gbG9nZ2VyLmdldExvZ3MoKTtcbiAgICAgIGNvbnN0IGxhc3RMb2cgPSBsb2dzW2xvZ3MubGVuZ3RoIC0gMV07XG4gICAgICBcbiAgICAgIGV4cGVjdChsYXN0TG9nLmRhdGEucGFzc3dvcmQpLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChsYXN0TG9nLmRhdGEudG9rZW4pLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChsYXN0TG9nLmRhdGEuYXBpS2V5KS50b0JlKCdbUkVEQUNURURdJyk7XG4gICAgICBleHBlY3QobGFzdExvZy5kYXRhLm5vcm1hbERhdGEpLnRvQmUoJ3RoaXMgaXMgZmluZScpO1xuICAgICAgZXhwZWN0KGxhc3RMb2cuc2FuaXRpemVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgYW5kIHNhbml0aXplIHBhdHRlcm4tYmFzZWQgc2Vuc2l0aXZlIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZW5zaXRpdmVTdHJpbmcgPSAnQmVhcmVyIGV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOSc7XG4gICAgICBcbiAgICAgIGxvZ2dlci53YXJuKHNlbnNpdGl2ZVN0cmluZyk7XG4gICAgICBcbiAgICAgIGNvbnN0IGxvZ3MgPSBsb2dnZXIuZ2V0TG9ncygpO1xuICAgICAgY29uc3QgbGFzdExvZyA9IGxvZ3NbbG9ncy5sZW5ndGggLSAxXTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGxhc3RMb2cubWVzc2FnZSkudG9Db250YWluKCdbUkVEQUNURURdJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNhbml0aXplIG5lc3RlZCBvYmplY3RzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmVzdGVkRGF0YSA9IHtcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIG5hbWU6ICdKb2huJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3NlY3JldCcsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIGFwaVRva2VuOiAndG9rZW4xMjMnLFxuICAgICAgICAgICAgdGhlbWU6ICdkYXJrJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ05lc3RlZCBkYXRhIHRlc3QnLCBuZXN0ZWREYXRhKTtcbiAgICAgIFxuICAgICAgY29uc3QgbG9ncyA9IGxvZ2dlci5nZXRMb2dzKCk7XG4gICAgICBjb25zdCBsYXN0TG9nID0gbG9nc1tsb2dzLmxlbmd0aCAtIDFdO1xuICAgICAgXG4gICAgICBleHBlY3QobGFzdExvZy5kYXRhLnVzZXIubmFtZSkudG9CZSgnSm9obicpO1xuICAgICAgZXhwZWN0KGxhc3RMb2cuZGF0YS51c2VyLnBhc3N3b3JkKS50b0JlKCdbUkVEQUNURURdJyk7XG4gICAgICBleHBlY3QobGFzdExvZy5kYXRhLnVzZXIuc2V0dGluZ3MuYXBpVG9rZW4pLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChsYXN0TG9nLmRhdGEudXNlci5zZXR0aW5ncy50aGVtZSkudG9CZSgnZGFyaycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSBhcnJheXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhcnJheURhdGEgPSBbXG4gICAgICAgIHsgaWQ6IDEsIHNlY3JldDogJ2hpZGRlbicgfSxcbiAgICAgICAgeyBpZDogMiwgbmFtZTogJ3Zpc2libGUnIH0sXG4gICAgICBdO1xuXG4gICAgICBsb2dnZXIuaW5mbygnQXJyYXkgZGF0YSB0ZXN0JywgYXJyYXlEYXRhKTtcbiAgICAgIFxuICAgICAgY29uc3QgbG9ncyA9IGxvZ2dlci5nZXRMb2dzKCk7XG4gICAgICBjb25zdCBsYXN0TG9nID0gbG9nc1tsb2dzLmxlbmd0aCAtIDFdO1xuICAgICAgXG4gICAgICBleHBlY3QobGFzdExvZy5kYXRhWzBdLmlkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGxhc3RMb2cuZGF0YVswXS5zZWNyZXQpLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChsYXN0TG9nLmRhdGFbMV0ubmFtZSkudG9CZSgndmlzaWJsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTG9nIExldmVscycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGxvZ2dlciA9IFNlY3VyZUxvZ2dlci5nZXRJbnN0YW5jZSh7XG4gICAgICAgIGxldmVsOiBMb2dMZXZlbC5JTkZPLFxuICAgICAgICBlbmFibGVDb25zb2xlOiB0cnVlLFxuICAgICAgICBlbmFibGVTdG9yYWdlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlc3BlY3QgbG9nIGxldmVsIGZpbHRlcmluZycsICgpID0+IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnZGVidWcgbWVzc2FnZScpOyAvLyBTaG91bGQgYmUgZmlsdGVyZWRcbiAgICAgIGxvZ2dlci5pbmZvKCdpbmZvIG1lc3NhZ2UnKTsgICAvLyBTaG91bGQgcGFzc1xuICAgICAgbG9nZ2VyLndhcm4oJ3dhcm4gbWVzc2FnZScpOyAgIC8vIFNob3VsZCBwYXNzXG4gICAgICBsb2dnZXIuZXJyb3IoJ2Vycm9yIG1lc3NhZ2UnKTsgLy8gU2hvdWxkIHBhc3NcblxuICAgICAgY29uc3QgbG9ncyA9IGxvZ2dlci5nZXRMb2dzKCk7XG4gICAgICBleHBlY3QobG9ncy5sZW5ndGgpLnRvQmUoMyk7IC8vIGRlYnVnIGZpbHRlcmVkIG91dFxuICAgICAgZXhwZWN0KGxvZ3NbMF0ubGV2ZWwpLnRvQmUoTG9nTGV2ZWwuSU5GTyk7XG4gICAgICBleHBlY3QobG9nc1sxXS5sZXZlbCkudG9CZShMb2dMZXZlbC5XQVJOKTtcbiAgICAgIGV4cGVjdChsb2dzWzJdLmxldmVsKS50b0JlKExvZ0xldmVsLkVSUk9SKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9nIHRvIGFwcHJvcHJpYXRlIGNvbnNvbGUgbWV0aG9kcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGRlYnVnU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZGVidWcnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIGNvbnN0IGluZm9TcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdpbmZvJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gICAgICBjb25zdCB3YXJuU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgY29uc3QgZXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBsb2dnZXIuc2V0TGV2ZWwoTG9nTGV2ZWwuREVCVUcpO1xuICAgICAgXG4gICAgICBsb2dnZXIuZGVidWcoJ2RlYnVnJyk7XG4gICAgICBsb2dnZXIuaW5mbygnaW5mbycpO1xuICAgICAgbG9nZ2VyLndhcm4oJ3dhcm4nKTtcbiAgICAgIGxvZ2dlci5lcnJvcignZXJyb3InKTtcbiAgICAgIGxvZ2dlci5mYXRhbCgnZmF0YWwnKTtcblxuICAgICAgZXhwZWN0KGRlYnVnU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoaW5mb1NweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KHdhcm5TcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChlcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpOyAvLyBlcnJvciArIGZhdGFsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdMb2cgU3RvcmFnZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGxvZ2dlciA9IFNlY3VyZUxvZ2dlci5nZXRJbnN0YW5jZSh7XG4gICAgICAgIGxldmVsOiBMb2dMZXZlbC5ERUJVRyxcbiAgICAgICAgZW5hYmxlQ29uc29sZTogZmFsc2UsXG4gICAgICAgIGVuYWJsZVN0b3JhZ2U6IHRydWUsXG4gICAgICAgIG1heFN0b3JhZ2VFbnRyaWVzOiAzLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN0b3JlIGxvZ3Mgd2l0aCBwcm9wZXIgc3RydWN0dXJlJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ3Rlc3QgbWVzc2FnZScsIHsgbmFtZTogJ3ZhbHVlJyB9LCAnVGVzdENvbnRleHQnKTtcbiAgICAgIFxuICAgICAgY29uc3QgbG9ncyA9IGxvZ2dlci5nZXRMb2dzKCk7XG4gICAgICBjb25zdCBsb2cgPSBsb2dzWzBdO1xuICAgICAgXG4gICAgICBleHBlY3QobG9nLnRpbWVzdGFtcCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KGxvZy5sZXZlbCkudG9CZShMb2dMZXZlbC5JTkZPKTtcbiAgICAgIGV4cGVjdChsb2cubWVzc2FnZSkudG9CZSgndGVzdCBtZXNzYWdlJyk7XG4gICAgICBleHBlY3QobG9nLmRhdGEpLnRvRXF1YWwoeyBuYW1lOiAndmFsdWUnIH0pO1xuICAgICAgZXhwZWN0KGxvZy5jb250ZXh0KS50b0JlKCdUZXN0Q29udGV4dCcpO1xuICAgICAgZXhwZWN0KGxvZy5zYW5pdGl6ZWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxpbWl0IHN0b3JlZCBlbnRyaWVzJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMScpO1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMicpO1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMycpO1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgNCcpOyAvLyBTaG91bGQgY2F1c2Ugb2xkZXN0IHRvIGJlIHJlbW92ZWRcbiAgICAgIFxuICAgICAgY29uc3QgbG9ncyA9IGxvZ2dlci5nZXRMb2dzKCk7XG4gICAgICBleHBlY3QobG9ncy5sZW5ndGgpLnRvQmUoMyk7XG4gICAgICBleHBlY3QobG9nc1swXS5tZXNzYWdlKS50b0JlKCdtZXNzYWdlIDInKTtcbiAgICAgIGV4cGVjdChsb2dzWzJdLm1lc3NhZ2UpLnRvQmUoJ21lc3NhZ2UgNCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmaWx0ZXIgbG9ncyBieSBsZXZlbCB3aGVuIHJldHJpZXZpbmcnLCAoKSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoJ2RlYnVnJyk7XG4gICAgICBsb2dnZXIuaW5mbygnaW5mbycpO1xuICAgICAgbG9nZ2VyLndhcm4oJ3dhcm4nKTtcbiAgICAgIGxvZ2dlci5lcnJvcignZXJyb3InKTtcblxuICAgICAgY29uc3QgZXJyb3JMb2dzID0gbG9nZ2VyLmdldExvZ3MoTG9nTGV2ZWwuRVJST1IpO1xuICAgICAgZXhwZWN0KGVycm9yTG9ncy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZXJyb3JMb2dzWzBdLmxldmVsKS50b0JlKExvZ0xldmVsLkVSUk9SKTtcblxuICAgICAgY29uc3Qgd2FybkFuZEFib3ZlID0gbG9nZ2VyLmdldExvZ3MoTG9nTGV2ZWwuV0FSTik7XG4gICAgICBleHBlY3Qod2FybkFuZEFib3ZlLmxlbmd0aCkudG9CZSgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Byb2R1Y3Rpb24gTW9kZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIE1vY2sgcHJvZHVjdGlvbiBlbnZpcm9ubWVudFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb2Nlc3MsICdlbnYnLCB7XG4gICAgICAgIHZhbHVlOiB7IE5PREVfRU5WOiAncHJvZHVjdGlvbicgfSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBDaHJvbWUgZXh0ZW5zaW9uIGVudmlyb25tZW50XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCAnY2hyb21lJywge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIHJ1bnRpbWU6IHtcbiAgICAgICAgICAgIGdldE1hbmlmZXN0OiAoKSA9PiAoeyBuYW1lOiAndGVzdCcgfSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBkZWxldGUgKGdsb2JhbCBhcyBhbnkpLmNocm9tZTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzYWJsZSBjb25zb2xlIGluIHByb2R1Y3Rpb24gYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICAgIGxvZ2dlciA9IFNlY3VyZUxvZ2dlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgXG4gICAgICBsb2dnZXIuaW5mbygncHJvZHVjdGlvbiBtZXNzYWdlJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgXG4gICAgICBjb25zdCBsb2dzID0gbG9nZ2VyLmdldExvZ3MoKTtcbiAgICAgIGV4cGVjdChsb2dzLmxlbmd0aCkudG9CZSgxKTsgLy8gU3RpbGwgc3RvcmVkXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdVdGlsaXR5IE1ldGhvZHMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBsb2dnZXIgPSBTZWN1cmVMb2dnZXIuZ2V0SW5zdGFuY2Uoe1xuICAgICAgICBsZXZlbDogTG9nTGV2ZWwuREVCVUcsXG4gICAgICAgIGVuYWJsZUNvbnNvbGU6IHRydWUsXG4gICAgICAgIGVuYWJsZVN0b3JhZ2U6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2hhbmdlIGxvZyBsZXZlbCBkeW5hbWljYWxseScsICgpID0+IHtcbiAgICAgIGxvZ2dlci5zZXRMZXZlbChMb2dMZXZlbC5XQVJOKTtcbiAgICAgIFxuICAgICAgbG9nZ2VyLmRlYnVnKCdkZWJ1ZycpOyAvLyBTaG91bGQgYmUgZmlsdGVyZWRcbiAgICAgIGxvZ2dlci5pbmZvKCdpbmZvJyk7ICAgLy8gU2hvdWxkIGJlIGZpbHRlcmVkXG4gICAgICBsb2dnZXIud2Fybignd2FybicpOyAgIC8vIFNob3VsZCBwYXNzXG4gICAgICBcbiAgICAgIGNvbnN0IGxvZ3MgPSBsb2dnZXIuZ2V0TG9ncygpO1xuICAgICAgZXhwZWN0KGxvZ3MubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGxvZ3NbMF0ubGV2ZWwpLnRvQmUoTG9nTGV2ZWwuV0FSTik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGVuYWJsZS9kaXNhYmxlIGNvbnNvbGUgZHluYW1pY2FsbHknLCAoKSA9PiB7XG4gICAgICBsb2dnZXIuZW5hYmxlQ29uc29sZShmYWxzZSk7XG4gICAgICBsb2dnZXIuaW5mbygndGVzdCcpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBcbiAgICAgIGxvZ2dlci5lbmFibGVDb25zb2xlKHRydWUpO1xuICAgICAgbG9nZ2VyLmluZm8oJ3Rlc3QyJyk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjbGVhciBsb2dzJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMScpO1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMicpO1xuICAgICAgXG4gICAgICBleHBlY3QobG9nZ2VyLmdldExvZ3MoKS5sZW5ndGgpLnRvQmUoMik7XG4gICAgICBcbiAgICAgIGxvZ2dlci5jbGVhckxvZ3MoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGxvZ2dlci5nZXRMb2dzKCkubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBleHBvcnQgbG9ncyBhcyBKU09OJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ21lc3NhZ2UgMScsIHsgZGF0YTogJ3Rlc3QnIH0pO1xuICAgICAgbG9nZ2VyLndhcm4oJ21lc3NhZ2UgMicpO1xuICAgICAgXG4gICAgICBjb25zdCBleHBvcnRlZCA9IGxvZ2dlci5leHBvcnRMb2dzKCk7XG4gICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGV4cG9ydGVkKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocGFyc2VkKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChwYXJzZWQubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHBhcnNlZFswXS5tZXNzYWdlKS50b0JlKCdtZXNzYWdlIDEnKTtcbiAgICAgIGV4cGVjdChwYXJzZWRbMV0ubWVzc2FnZSkudG9CZSgnbWVzc2FnZSAyJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9