006aa470d4630ef6067c6d4a366c2f56
"use strict";

/* istanbul ignore next */
function cov_2bjowya2fx() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts";
  var hash = "e28a20bbd8b516c53ddba63bd697f47c03d6e51f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 60
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 67
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 43
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "9": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 50
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 27,
          column: 18
        }
      },
      "11": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 30,
          column: 55
        }
      },
      "12": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 35,
          column: 14
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 95
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 51
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "16": {
        start: {
          line: 47,
          column: 31
        },
        end: {
          line: 47,
          column: 76
        }
      },
      "17": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 63
        }
      },
      "18": {
        start: {
          line: 49,
          column: 31
        },
        end: {
          line: 49,
          column: 88
        }
      },
      "19": {
        start: {
          line: 49,
          column: 47
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "20": {
        start: {
          line: 50,
          column: 41
        },
        end: {
          line: 50,
          column: 109
        }
      },
      "21": {
        start: {
          line: 50,
          column: 57
        },
        end: {
          line: 50,
          column: 92
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "23": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 94
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 51
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "26": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 68,
          column: 108
        }
      },
      "27": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 62
        }
      },
      "28": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "29": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 94
        }
      },
      "30": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 52
        }
      },
      "31": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "32": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 55
        }
      },
      "33": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 60
        }
      },
      "34": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 36
        }
      },
      "35": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 91
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 48
        }
      },
      "37": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "38": {
        start: {
          line: 101,
          column: 23
        },
        end: {
          line: 101,
          column: 54
        }
      },
      "39": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "40": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 32
        }
      },
      "41": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "42": {
        start: {
          line: 107,
          column: 43
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "43": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 112,
          column: 53
        }
      },
      "44": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "45": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 87
        }
      },
      "46": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 27
        }
      },
      "47": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 85
        }
      },
      "48": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 51
        }
      },
      "49": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "50": {
        start: {
          line: 133,
          column: 47
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "51": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 48
        }
      },
      "52": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 87
        }
      },
      "53": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 47
        }
      },
      "54": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "55": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 43
        }
      },
      "56": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 60
        }
      },
      "57": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 45
        }
      },
      "58": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 22
        }
      },
      "59": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "60": {
        start: {
          line: 160,
          column: 26
        },
        end: {
          line: 160,
          column: 43
        }
      },
      "61": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 36
        }
      },
      "62": {
        start: {
          line: 163,
          column: 25
        },
        end: {
          line: 163,
          column: 26
        }
      },
      "63": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "64": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 164,
          column: 26
        }
      },
      "65": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 53
        }
      },
      "66": {
        start: {
          line: 167,
          column: 29
        },
        end: {
          line: 167,
          column: 54
        }
      },
      "67": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 169,
          column: 52
        }
      },
      "68": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 27
        }
      },
      "69": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "70": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 26
        }
      },
      "71": {
        start: {
          line: 176,
          column: 26
        },
        end: {
          line: 176,
          column: 43
        }
      },
      "72": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "73": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 25
        }
      },
      "74": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "75": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 54
        }
      },
      "76": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 36
        }
      },
      "77": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 46
        }
      },
      "78": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 191,
          column: 65
        }
      },
      "79": {
        start: {
          line: 192,
          column: 30
        },
        end: {
          line: 192,
          column: 48
        }
      },
      "80": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 29
        }
      },
      "81": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "82": {
        start: {
          line: 198,
          column: 31
        },
        end: {
          line: 198,
          column: 87
        }
      },
      "83": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 91
        }
      },
      "84": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 24
        }
      },
      "85": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "86": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 74
        }
      },
      "87": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 103
        }
      },
      "88": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 23
        }
      },
      "89": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "90": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 28
        }
      },
      "91": {
        start: {
          line: 217,
          column: 29
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "92": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 222,
          column: 17
        }
      },
      "93": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "94": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 48
        }
      },
      "95": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 71
        }
      },
      "96": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 67
        }
      },
      "97": {
        start: {
          line: 226,
          column: 41
        },
        end: {
          line: 226,
          column: 65
        }
      },
      "98": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 34
        }
      },
      "99": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 28
        }
      },
      "100": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 23
        }
      },
      "101": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "102": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 236,
          column: 86
        }
      },
      "103": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 53
        }
      },
      "104": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 24
        }
      },
      "105": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "106": {
        start: {
          line: 245,
          column: 31
        },
        end: {
          line: 245,
          column: 76
        }
      },
      "107": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 87
        }
      },
      "108": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 23
        }
      },
      "109": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 258,
          column: 10
        }
      },
      "110": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "111": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 273,
          column: 10
        }
      },
      "112": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "113": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 288,
          column: 10
        }
      },
      "114": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 297,
          column: 10
        }
      },
      "115": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 53
        }
      },
      "116": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "117": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 35
        }
      },
      "118": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 44
        }
      },
      "119": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 46
        }
      },
      "120": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 89
        }
      },
      "121": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 34
        }
      },
      "122": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "123": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 43
        }
      },
      "124": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 107
        }
      },
      "125": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 47
        }
      },
      "126": {
        start: {
          line: 339,
          column: 24
        },
        end: {
          line: 339,
          column: 53
        }
      },
      "127": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 27
        }
      },
      "128": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 346,
          column: 53
        }
      },
      "129": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 36
        }
      },
      "130": {
        start: {
          line: 350,
          column: 0
        },
        end: {
          line: 350,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 25
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 42
          },
          end: {
            line: 49,
            column: 43
          }
        },
        loc: {
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 71
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 52
          },
          end: {
            line: 50,
            column: 53
          }
        },
        loc: {
          start: {
            line: 50,
            column: 57
          },
          end: {
            line: 50,
            column: 92
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 66
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 29
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 131
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 34
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 148
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 29
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 158
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 159,
            column: 27
          },
          end: {
            line: 159,
            column: 28
          }
        },
        loc: {
          start: {
            line: 159,
            column: 40
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 159
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 173
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 174,
            column: 27
          },
          end: {
            line: 174,
            column: 28
          }
        },
        loc: {
          start: {
            line: 174,
            column: 40
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 174
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 177,
            column: 31
          },
          end: {
            line: 177,
            column: 32
          }
        },
        loc: {
          start: {
            line: 177,
            column: 37
          },
          end: {
            line: 185,
            column: 13
          }
        },
        line: 177
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 26
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 189
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 23
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 196
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 23
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 205
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 23
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 214
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 217,
            column: 53
          },
          end: {
            line: 217,
            column: 54
          }
        },
        loc: {
          start: {
            line: 217,
            column: 63
          },
          end: {
            line: 223,
            column: 13
          }
        },
        line: 217
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 226,
            column: 30
          },
          end: {
            line: 226,
            column: 31
          }
        },
        loc: {
          start: {
            line: 226,
            column: 41
          },
          end: {
            line: 226,
            column: 65
          }
        },
        line: 226
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 23
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 234
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 243
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 31
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 253
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 31
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 260
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 32
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 268
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 28
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 275
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 31
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 281
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 27
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 290
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 54
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 302
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 21
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 319
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 26
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 325
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        loc: {
          start: {
            line: 338,
            column: 24
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 338
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 27
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 345
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 49,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 49,
            column: 83
          }
        }, {
          start: {
            line: 49,
            column: 87
          },
          end: {
            line: 49,
            column: 88
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 50,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 50,
            column: 104
          }
        }, {
          start: {
            line: 50,
            column: 108
          },
          end: {
            line: 50,
            column: 109
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 52,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 39
          },
          end: {
            line: 52,
            column: 86
          }
        }, {
          start: {
            line: 52,
            column: 89
          },
          end: {
            line: 52,
            column: 90
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 26
          },
          end: {
            line: 53,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 53,
            column: 98
          }
        }, {
          start: {
            line: 53,
            column: 101
          },
          end: {
            line: 53,
            column: 102
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 51
          }
        }, {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 78
          }
        }, {
          start: {
            line: 68,
            column: 82
          },
          end: {
            line: 68,
            column: 108
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 27
          },
          end: {
            line: 73,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 27
          },
          end: {
            line: 73,
            column: 47
          }
        }, {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 73,
            column: 52
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 57
          }
        }, {
          start: {
            line: 74,
            column: 61
          },
          end: {
            line: 74,
            column: 70
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 26
          },
          end: {
            line: 88,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 26
          },
          end: {
            line: 88,
            column: 55
          }
        }, {
          start: {
            line: 88,
            column: 59
          },
          end: {
            line: 88,
            column: 60
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 18
          }
        }, {
          start: {
            line: 103,
            column: 22
          },
          end: {
            line: 103,
            column: 59
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 184,
            column: 17
          }
        }],
        line: 179
      },
      "13": {
        loc: {
          start: {
            line: 199,
            column: 19
          },
          end: {
            line: 199,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 199,
            column: 43
          },
          end: {
            line: 199,
            column: 86
          }
        }, {
          start: {
            line: 199,
            column: 89
          },
          end: {
            line: 199,
            column: 90
          }
        }],
        line: 199
      },
      "14": {
        loc: {
          start: {
            line: 208,
            column: 19
          },
          end: {
            line: 208,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 43
          },
          end: {
            line: 208,
            column: 98
          }
        }, {
          start: {
            line: 208,
            column: 101
          },
          end: {
            line: 208,
            column: 102
          }
        }],
        line: 208
      },
      "15": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "16": {
        loc: {
          start: {
            line: 237,
            column: 19
          },
          end: {
            line: 237,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 30
          },
          end: {
            line: 237,
            column: 48
          }
        }, {
          start: {
            line: 237,
            column: 51
          },
          end: {
            line: 237,
            column: 52
          }
        }],
        line: 237
      },
      "17": {
        loc: {
          start: {
            line: 246,
            column: 19
          },
          end: {
            line: 246,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 32
          },
          end: {
            line: 246,
            column: 82
          }
        }, {
          start: {
            line: 246,
            column: 85
          },
          end: {
            line: 246,
            column: 86
          }
        }],
        line: 246
      },
      "18": {
        loc: {
          start: {
            line: 302,
            column: 36
          },
          end: {
            line: 302,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 302,
            column: 43
          },
          end: {
            line: 302,
            column: 52
          }
        }],
        line: 302
      },
      "19": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 306,
            column: 35
          }
        }, {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 308,
            column: 44
          }
        }, {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 310,
            column: 46
          }
        }, {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 89
          }
        }],
        line: 304
      },
      "20": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0, 0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts",
      mappings: "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",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts"],
      sourcesContent: ["import { logger } from '@shared/utils/secureLogger';\n/**\n * RealMetricsService - Service central pour collecte de vraies m\xE9triques\n * Remplace Math.random() par des donn\xE9es de performance r\xE9elles\n */\n\nexport interface PerformanceMetrics {\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  timing: {\n    loadTime: number;\n    domReady: number;\n    firstPaint: number;\n    firstContentfulPaint: number;\n  };\n  network: {\n    latency: number;\n    bandwidth: number;\n    connectionType: string;\n  };\n  cpu: {\n    usage: number;\n    cores: number;\n  };\n  timestamp: number;\n}\n\nexport interface WebVitalsMetrics {\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  fcp: number; // First Contentful Paint\n  ttfb: number; // Time To First Byte\n}\n\nexport interface SystemMetrics {\n  cpu: number;\n  memory: number;\n  latency: number;\n  frameRate: number;\n  timestamp: number;\n}\n\nclass RealMetricsService {\n  private static instance: RealMetricsService;\n  private isProduction: boolean;\n  private metricsCache: Map<string, { value: unknown; timestamp: number }> = new Map();\n  \n  private constructor() {\n    this.isProduction = process.env.NODE_ENV === 'production';\n  }\n\n  static getInstance(): RealMetricsService {\n    if (!RealMetricsService.instance) {\n      RealMetricsService.instance = new RealMetricsService();\n    }\n    return RealMetricsService.instance;\n  }\n\n  /**\n   * Collecte des m\xE9triques m\xE9moire r\xE9elles\n   */\n  async getMemoryMetrics(): Promise<{ used: number; total: number; percentage: number }> {\n    try {\n      // Try Performance Memory API (Chrome)\n      if ('memory' in performance) {\n        const memInfo = (performance as any).memory;\n        return {\n          used: memInfo.usedJSHeapSize,\n          total: memInfo.totalJSHeapSize,\n          percentage: (memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit) * 100\n        };\n      }\n\n      // Fallback: Estimate via DOM elements count\n      const estimate = this.estimateMemoryUsage();\n      return {\n        used: estimate,\n        total: estimate * 2,\n        percentage: 50\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte m\xE9moire, fallback estimation:', error);\n      return this.getFallbackMemoryMetrics();\n    }\n  }\n\n  /**\n   * Collecte des m\xE9triques de timing r\xE9elles\n   */\n  async getTimingMetrics(): Promise<{ loadTime: number; domReady: number; firstPaint: number; firstContentfulPaint: number }> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const paint = performance.getEntriesByType('paint');\n      \n      const firstPaint = paint.find(p => p.name === 'first-paint')?.startTime || 0;\n      const firstContentfulPaint = paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0;\n\n      return {\n        loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n        domReady: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n        firstPaint,\n        firstContentfulPaint\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte timing, fallback estimation:', error);\n      return this.getFallbackTimingMetrics();\n    }\n  }\n\n  /**\n   * Collecte des m\xE9triques r\xE9seau r\xE9elles\n   */\n  async getNetworkMetrics(): Promise<{ latency: number; bandwidth: number; connectionType: string }> {\n    try {\n      const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n      \n      // Mesure latency via HEAD request vers favicon\n      const latency = await this.measureNetworkLatency();\n      \n      return {\n        latency,\n        bandwidth: connection?.downlink || 0,\n        connectionType: connection?.effectiveType || 'unknown'\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte r\xE9seau, fallback estimation:', error);\n      return this.getFallbackNetworkMetrics();\n    }\n  }\n\n  /**\n   * Collecte des m\xE9triques CPU r\xE9elles (estimation)\n   */\n  async getCPUMetrics(): Promise<{ usage: number; cores: number }> {\n    try {\n      const usage = await this.estimateCPUUsage();\n      const cores = navigator.hardwareConcurrency || 4;\n      \n      return { usage, cores };\n    } catch (_error) {\n      logger.warn('Erreur collecte CPU, fallback estimation:', error);\n      return this.getFallbackCPUMetrics();\n    }\n  }\n\n  /**\n   * Interface principale pour les m\xE9triques syst\xE8me (remplace Math.random())\n   */\n  async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.metricsCache.get(cacheKey);\n    \n    // Cache 30 secondes pour \xE9viter overhead\n    if (cached && Date.now() - cached.timestamp < 30000) {\n      return cached.value;\n    }\n\n    try {\n      const [memory, network, cpu] = await Promise.all([\n        this.getMemoryMetrics(),\n        this.getNetworkMetrics(),\n        this.getCPUMetrics()\n      ]);\n\n      const frameRate = this.measureFrameRate();\n\n      const metrics: SystemMetrics = {\n        cpu: cpu.usage,\n        memory: memory.percentage,\n        latency: network.latency,\n        frameRate: await frameRate,\n        timestamp: Date.now()\n      };\n\n      this.metricsCache.set(cacheKey, { value: metrics, timestamp: Date.now() });\n      return metrics;\n    } catch (_error) {\n      logger.error('Erreur collecte m\xE9triques syst\xE8me:', error);\n      return this.getFallbackSystemMetrics();\n    }\n  }\n\n  /**\n   * Collecte Web Vitals pour performance UX\n   */\n  async getWebVitals(): Promise<WebVitalsMetrics> {\n    try {\n      const [lcp, fid, cls, fcp, ttfb] = await Promise.all([\n        this.measureLCP(),\n        this.measureFID(),\n        this.measureCLS(),\n        this.measureFCP(),\n        this.measureTTFB()\n      ]);\n\n      return { lcp, fid, cls, fcp, ttfb };\n    } catch (_error) {\n      logger.warn('Erreur Web Vitals, fallback defaults:', error);\n      return this.getFallbackWebVitals();\n    }\n  }\n\n  // === M\xC9THODES PRIV\xC9ES DE MESURE ===\n\n  private async measureNetworkLatency(): Promise<number> {\n    try {\n      const start = performance.now();\n      await fetch('/favicon.ico', { method: 'HEAD' });\n      return performance.now() - start;\n    } catch {\n      return 50; // Fallback 50ms\n    }\n  }\n\n  private async estimateCPUUsage(): Promise<number> {\n    return new Promise((resolve) => {\n      const start = performance.now();\n      const iterations = 50000;\n      \n      // CPU stress test l\xE9ger\n      let result = 0;\n      for (let i = 0; i < iterations; i++) {\n        result += Math.sqrt(i) * Math.sin(i);\n      }\n      \n      const duration = performance.now() - start;\n      // Normaliser entre 0 et 1 (plus de 20ms = usage \xE9lev\xE9)\n      const usage = Math.min(duration / 20, 1);\n      resolve(usage);\n    });\n  }\n\n  private async measureFrameRate(): Promise<number> {\n    return new Promise((resolve) => {\n      let frames = 0;\n      const start = performance.now();\n      \n      const countFrame = () => {\n        frames++;\n        if (performance.now() - start < 1000) {\n          requestAnimationFrame(countFrame);\n        } else {\n          resolve(frames);\n        }\n      };\n      \n      requestAnimationFrame(countFrame);\n    });\n  }\n\n  private estimateMemoryUsage(): number {\n    // Estimation bas\xE9e sur le nombre d'\xE9l\xE9ments DOM\n    const domElements = document.querySelectorAll('*').length;\n    const estimateBytes = domElements * 1000; // ~1KB par \xE9l\xE9ment\n    return estimateBytes;\n  }\n\n  // Web Vitals measurements\n  private async measureLCP(): Promise<number> {\n    try {\n      const lcpEntries = performance.getEntriesByType('largest-contentful-paint') as any[];\n      return lcpEntries.length > 0 ? lcpEntries[lcpEntries.length - 1].startTime : 0;\n    } catch {\n      return 2500; // Fallback LCP\n    }\n  }\n\n  private async measureFID(): Promise<number> {\n    try {\n      const fidEntries = performance.getEntriesByType('first-input') as any[];\n      return fidEntries.length > 0 ? fidEntries[0].processingStart - fidEntries[0].startTime : 0;\n    } catch {\n      return 100; // Fallback FID\n    }\n  }\n\n  private async measureCLS(): Promise<number> {\n    try {\n      let clsValue = 0;\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (!(entry as any).hadRecentInput) {\n            clsValue += (entry as any).value;\n          }\n        }\n      });\n      observer.observe({ type: 'layout-shift', buffered: true });\n      \n      // Wait 100ms to collect entries\n      await new Promise(resolve => setTimeout(resolve, 100));\n      observer.disconnect();\n      \n      return clsValue;\n    } catch {\n      return 0.1; // Fallback CLS\n    }\n  }\n\n  private async measureFCP(): Promise<number> {\n    try {\n      const fcpEntry = performance.getEntriesByName('first-contentful-paint')[0];\n      return fcpEntry ? fcpEntry.startTime : 0;\n    } catch {\n      return 1500; // Fallback FCP\n    }\n  }\n\n  private async measureTTFB(): Promise<number> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      return navigation ? navigation.responseStart - navigation.requestStart : 0;\n    } catch {\n      return 200; // Fallback TTFB\n    }\n  }\n\n  // === FALLBACKS POUR D\xC9VELOPPEMENT ===\n\n  private getFallbackMemoryMetrics() {\n    return {\n      used: 25 * 1024 * 1024, // 25MB\n      total: 100 * 1024 * 1024, // 100MB\n      percentage: 25\n    };\n  }\n\n  private getFallbackTimingMetrics() {\n    return {\n      loadTime: 1500,\n      domReady: 800,\n      firstPaint: 1200,\n      firstContentfulPaint: 1400\n    };\n  }\n\n  private getFallbackNetworkMetrics() {\n    return {\n      latency: 50,\n      bandwidth: 10,\n      connectionType: '4g'\n    };\n  }\n\n  private getFallbackCPUMetrics() {\n    return {\n      usage: 0.15, // 15%\n      cores: 4\n    };\n  }\n\n  private getFallbackSystemMetrics(): SystemMetrics {\n    return {\n      cpu: 0.15,\n      memory: 25,\n      latency: 50,\n      frameRate: 60,\n      timestamp: Date.now()\n    };\n  }\n\n  private getFallbackWebVitals(): WebVitalsMetrics {\n    return {\n      lcp: 2500,\n      fid: 100,\n      cls: 0.1,\n      fcp: 1500,\n      ttfb: 200\n    };\n  }\n\n  /**\n   * Utilitaire pour remplacer Math.random() par vraies donn\xE9es\n   */\n  async getRandomReplacementValue(type: 'cpu' | 'memory' | 'latency' | 'generic' = 'generic'): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    \n    switch (type) {\n      case 'cpu':\n        return metrics.cpu;\n      case 'memory':\n        return metrics.memory / 100; // Normaliser 0-1\n      case 'latency':\n        return metrics.latency / 1000; // Normaliser en secondes\n      default:\n        // M\xE9lange normalis\xE9 pour usage g\xE9n\xE9rique\n        return (metrics.cpu + metrics.memory / 100 + metrics.latency / 1000) / 3;\n    }\n  }\n\n  /**\n   * Force refresh du cache des m\xE9triques\n   */\n  refreshMetrics(): void {\n    this.metricsCache.clear();\n  }\n\n  /**\n   * Obtient des m\xE9triques en mode d\xE9veloppement avec warnings\n   */\n  async getDevMetrics(): Promise<SystemMetrics> {\n    if (this.isProduction) {\n      return this.getSystemMetrics();\n    }\n\n    logger.warn('\uD83D\uDEA7 MODE D\xC9VELOPPEMENT: Utilisation m\xE9triques simul\xE9es pour les tests');\n    return this.getFallbackSystemMetrics();\n  }\n\n  // =============================================================================\n  // M\xC9THODES AJOUT\xC9ES POUR COMPATIBILIT\xC9 ORGANISMCORE\n  // =============================================================================\n\n  /**\n   * Get CPU usage as a normalized value (0-1)\n   */\n  async getCPUUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.cpu;\n  }\n\n  /**\n   * Get memory usage as a normalized value (0-1)\n   */\n  async getMemoryUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.memory / 100; // Convert percentage to 0-1 range\n  }\n}\n\nexport default RealMetricsService;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e28a20bbd8b516c53ddba63bd697f47c03d6e51f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bjowya2fx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bjowya2fx();
cov_2bjowya2fx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const secureLogger_1 =
/* istanbul ignore next */
(cov_2bjowya2fx().s[1]++, require("@shared/utils/secureLogger"));
class RealMetricsService {
  constructor() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[0]++;
    cov_2bjowya2fx().s[2]++;
    this.metricsCache = new Map();
    /* istanbul ignore next */
    cov_2bjowya2fx().s[3]++;
    this.isProduction = process.env.NODE_ENV === 'production';
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[1]++;
    cov_2bjowya2fx().s[4]++;
    if (!RealMetricsService.instance) {
      /* istanbul ignore next */
      cov_2bjowya2fx().b[0][0]++;
      cov_2bjowya2fx().s[5]++;
      RealMetricsService.instance = new RealMetricsService();
    } else
    /* istanbul ignore next */
    {
      cov_2bjowya2fx().b[0][1]++;
    }
    cov_2bjowya2fx().s[6]++;
    return RealMetricsService.instance;
  }
  /**
   * Collecte des métriques mémoire réelles
   */
  async getMemoryMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[2]++;
    cov_2bjowya2fx().s[7]++;
    try {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[8]++;
      // Try Performance Memory API (Chrome)
      if ('memory' in performance) {
        /* istanbul ignore next */
        cov_2bjowya2fx().b[1][0]++;
        const memInfo =
        /* istanbul ignore next */
        (cov_2bjowya2fx().s[9]++, performance.memory);
        /* istanbul ignore next */
        cov_2bjowya2fx().s[10]++;
        return {
          used: memInfo.usedJSHeapSize,
          total: memInfo.totalJSHeapSize,
          percentage: memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit * 100
        };
      } else
      /* istanbul ignore next */
      {
        cov_2bjowya2fx().b[1][1]++;
      }
      // Fallback: Estimate via DOM elements count
      const estimate =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[11]++, this.estimateMemoryUsage());
      /* istanbul ignore next */
      cov_2bjowya2fx().s[12]++;
      return {
        used: estimate,
        total: estimate * 2,
        percentage: 50
      };
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[13]++;
      secureLogger_1.logger.warn('Erreur collecte mémoire, fallback estimation:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[14]++;
      return this.getFallbackMemoryMetrics();
    }
  }
  /**
   * Collecte des métriques de timing réelles
   */
  async getTimingMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[3]++;
    cov_2bjowya2fx().s[15]++;
    try {
      const navigation =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[16]++, performance.getEntriesByType('navigation')[0]);
      const paint =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[17]++, performance.getEntriesByType('paint'));
      const firstPaint =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[18]++,
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[2][0]++, paint.find(p => {
        /* istanbul ignore next */
        cov_2bjowya2fx().f[4]++;
        cov_2bjowya2fx().s[19]++;
        return p.name === 'first-paint';
      })?.startTime) ||
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[2][1]++, 0));
      const firstContentfulPaint =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[20]++,
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[3][0]++, paint.find(p => {
        /* istanbul ignore next */
        cov_2bjowya2fx().f[5]++;
        cov_2bjowya2fx().s[21]++;
        return p.name === 'first-contentful-paint';
      })?.startTime) ||
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[3][1]++, 0));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[22]++;
      return {
        loadTime: navigation ?
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[4][0]++, navigation.loadEventEnd - navigation.fetchStart) :
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[4][1]++, 0),
        domReady: navigation ?
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[5][0]++, navigation.domContentLoadedEventEnd - navigation.fetchStart) :
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[5][1]++, 0),
        firstPaint,
        firstContentfulPaint
      };
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[23]++;
      secureLogger_1.logger.warn('Erreur collecte timing, fallback estimation:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[24]++;
      return this.getFallbackTimingMetrics();
    }
  }
  /**
   * Collecte des métriques réseau réelles
   */
  async getNetworkMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[6]++;
    cov_2bjowya2fx().s[25]++;
    try {
      const connection =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[26]++,
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[6][0]++, navigator.connection) ||
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[6][1]++, navigator.mozConnection) ||
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[6][2]++, navigator.webkitConnection));
      // Mesure latency via HEAD request vers favicon
      const latency =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[27]++, await this.measureNetworkLatency());
      /* istanbul ignore next */
      cov_2bjowya2fx().s[28]++;
      return {
        latency,
        bandwidth:
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[7][0]++, connection?.downlink) ||
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[7][1]++, 0),
        connectionType:
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[8][0]++, connection?.effectiveType) ||
        /* istanbul ignore next */
        (cov_2bjowya2fx().b[8][1]++, 'unknown')
      };
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[29]++;
      secureLogger_1.logger.warn('Erreur collecte réseau, fallback estimation:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[30]++;
      return this.getFallbackNetworkMetrics();
    }
  }
  /**
   * Collecte des métriques CPU réelles (estimation)
   */
  async getCPUMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[7]++;
    cov_2bjowya2fx().s[31]++;
    try {
      const usage =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[32]++, await this.estimateCPUUsage());
      const cores =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[33]++,
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[9][0]++, navigator.hardwareConcurrency) ||
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[9][1]++, 4));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[34]++;
      return {
        usage,
        cores
      };
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[35]++;
      secureLogger_1.logger.warn('Erreur collecte CPU, fallback estimation:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[36]++;
      return this.getFallbackCPUMetrics();
    }
  }
  /**
   * Interface principale pour les métriques système (remplace Math.random())
   */
  async getSystemMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[8]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[37]++, 'system_metrics');
    const cached =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[38]++, this.metricsCache.get(cacheKey));
    // Cache 30 secondes pour éviter overhead
    /* istanbul ignore next */
    cov_2bjowya2fx().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_2bjowya2fx().b[11][0]++, cached) &&
    /* istanbul ignore next */
    (cov_2bjowya2fx().b[11][1]++, Date.now() - cached.timestamp < 30000)) {
      /* istanbul ignore next */
      cov_2bjowya2fx().b[10][0]++;
      cov_2bjowya2fx().s[40]++;
      return cached.value;
    } else
    /* istanbul ignore next */
    {
      cov_2bjowya2fx().b[10][1]++;
    }
    cov_2bjowya2fx().s[41]++;
    try {
      const [memory, network, cpu] =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[42]++, await Promise.all([this.getMemoryMetrics(), this.getNetworkMetrics(), this.getCPUMetrics()]));
      const frameRate =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[43]++, this.measureFrameRate());
      const metrics =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[44]++, {
        cpu: cpu.usage,
        memory: memory.percentage,
        latency: network.latency,
        frameRate: await frameRate,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_2bjowya2fx().s[45]++;
      this.metricsCache.set(cacheKey, {
        value: metrics,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_2bjowya2fx().s[46]++;
      return metrics;
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[47]++;
      secureLogger_1.logger.error('Erreur collecte métriques système:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[48]++;
      return this.getFallbackSystemMetrics();
    }
  }
  /**
   * Collecte Web Vitals pour performance UX
   */
  async getWebVitals() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[9]++;
    cov_2bjowya2fx().s[49]++;
    try {
      const [lcp, fid, cls, fcp, ttfb] =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[50]++, await Promise.all([this.measureLCP(), this.measureFID(), this.measureCLS(), this.measureFCP(), this.measureTTFB()]));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[51]++;
      return {
        lcp,
        fid,
        cls,
        fcp,
        ttfb
      };
    } catch (_error) {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[52]++;
      secureLogger_1.logger.warn('Erreur Web Vitals, fallback defaults:', error);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[53]++;
      return this.getFallbackWebVitals();
    }
  }
  // === MÉTHODES PRIVÉES DE MESURE ===
  async measureNetworkLatency() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[10]++;
    cov_2bjowya2fx().s[54]++;
    try {
      const start =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[55]++, performance.now());
      /* istanbul ignore next */
      cov_2bjowya2fx().s[56]++;
      await fetch('/favicon.ico', {
        method: 'HEAD'
      });
      /* istanbul ignore next */
      cov_2bjowya2fx().s[57]++;
      return performance.now() - start;
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[58]++;
      return 50; // Fallback 50ms
    }
  }
  async estimateCPUUsage() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[11]++;
    cov_2bjowya2fx().s[59]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_2bjowya2fx().f[12]++;
      const start =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[60]++, performance.now());
      const iterations =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[61]++, 50000);
      // CPU stress test léger
      let result =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[62]++, 0);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[63]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[64]++, 0); i < iterations; i++) {
        /* istanbul ignore next */
        cov_2bjowya2fx().s[65]++;
        result += Math.sqrt(i) * Math.sin(i);
      }
      const duration =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[66]++, performance.now() - start);
      // Normaliser entre 0 et 1 (plus de 20ms = usage élevé)
      const usage =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[67]++, Math.min(duration / 20, 1));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[68]++;
      resolve(usage);
    });
  }
  async measureFrameRate() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[13]++;
    cov_2bjowya2fx().s[69]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_2bjowya2fx().f[14]++;
      let frames =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[70]++, 0);
      const start =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[71]++, performance.now());
      /* istanbul ignore next */
      cov_2bjowya2fx().s[72]++;
      const countFrame = () => {
        /* istanbul ignore next */
        cov_2bjowya2fx().f[15]++;
        cov_2bjowya2fx().s[73]++;
        frames++;
        /* istanbul ignore next */
        cov_2bjowya2fx().s[74]++;
        if (performance.now() - start < 1000) {
          /* istanbul ignore next */
          cov_2bjowya2fx().b[12][0]++;
          cov_2bjowya2fx().s[75]++;
          requestAnimationFrame(countFrame);
        } else {
          /* istanbul ignore next */
          cov_2bjowya2fx().b[12][1]++;
          cov_2bjowya2fx().s[76]++;
          resolve(frames);
        }
      };
      /* istanbul ignore next */
      cov_2bjowya2fx().s[77]++;
      requestAnimationFrame(countFrame);
    });
  }
  estimateMemoryUsage() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[16]++;
    // Estimation basée sur le nombre d'éléments DOM
    const domElements =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[78]++, document.querySelectorAll('*').length);
    const estimateBytes =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[79]++, domElements * 1000); // ~1KB par élément
    /* istanbul ignore next */
    cov_2bjowya2fx().s[80]++;
    return estimateBytes;
  }
  // Web Vitals measurements
  async measureLCP() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[17]++;
    cov_2bjowya2fx().s[81]++;
    try {
      const lcpEntries =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[82]++, performance.getEntriesByType('largest-contentful-paint'));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[83]++;
      return lcpEntries.length > 0 ?
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[13][0]++, lcpEntries[lcpEntries.length - 1].startTime) :
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[13][1]++, 0);
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[84]++;
      return 2500; // Fallback LCP
    }
  }
  async measureFID() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[18]++;
    cov_2bjowya2fx().s[85]++;
    try {
      const fidEntries =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[86]++, performance.getEntriesByType('first-input'));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[87]++;
      return fidEntries.length > 0 ?
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[14][0]++, fidEntries[0].processingStart - fidEntries[0].startTime) :
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[14][1]++, 0);
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[88]++;
      return 100; // Fallback FID
    }
  }
  async measureCLS() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[19]++;
    cov_2bjowya2fx().s[89]++;
    try {
      let clsValue =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[90]++, 0);
      const observer =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[91]++, new PerformanceObserver(list => {
        /* istanbul ignore next */
        cov_2bjowya2fx().f[20]++;
        cov_2bjowya2fx().s[92]++;
        for (const entry of list.getEntries()) {
          /* istanbul ignore next */
          cov_2bjowya2fx().s[93]++;
          if (!entry.hadRecentInput) {
            /* istanbul ignore next */
            cov_2bjowya2fx().b[15][0]++;
            cov_2bjowya2fx().s[94]++;
            clsValue += entry.value;
          } else
          /* istanbul ignore next */
          {
            cov_2bjowya2fx().b[15][1]++;
          }
        }
      }));
      /* istanbul ignore next */
      cov_2bjowya2fx().s[95]++;
      observer.observe({
        type: 'layout-shift',
        buffered: true
      });
      // Wait 100ms to collect entries
      /* istanbul ignore next */
      cov_2bjowya2fx().s[96]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2bjowya2fx().f[21]++;
        cov_2bjowya2fx().s[97]++;
        return setTimeout(resolve, 100);
      });
      /* istanbul ignore next */
      cov_2bjowya2fx().s[98]++;
      observer.disconnect();
      /* istanbul ignore next */
      cov_2bjowya2fx().s[99]++;
      return clsValue;
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[100]++;
      return 0.1; // Fallback CLS
    }
  }
  async measureFCP() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[22]++;
    cov_2bjowya2fx().s[101]++;
    try {
      const fcpEntry =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[102]++, performance.getEntriesByName('first-contentful-paint')[0]);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[103]++;
      return fcpEntry ?
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[16][0]++, fcpEntry.startTime) :
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[16][1]++, 0);
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[104]++;
      return 1500; // Fallback FCP
    }
  }
  async measureTTFB() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[23]++;
    cov_2bjowya2fx().s[105]++;
    try {
      const navigation =
      /* istanbul ignore next */
      (cov_2bjowya2fx().s[106]++, performance.getEntriesByType('navigation')[0]);
      /* istanbul ignore next */
      cov_2bjowya2fx().s[107]++;
      return navigation ?
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[17][0]++, navigation.responseStart - navigation.requestStart) :
      /* istanbul ignore next */
      (cov_2bjowya2fx().b[17][1]++, 0);
    } catch {
      /* istanbul ignore next */
      cov_2bjowya2fx().s[108]++;
      return 200; // Fallback TTFB
    }
  }
  // === FALLBACKS POUR DÉVELOPPEMENT ===
  getFallbackMemoryMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[24]++;
    cov_2bjowya2fx().s[109]++;
    return {
      used: 25 * 1024 * 1024,
      // 25MB
      total: 100 * 1024 * 1024,
      // 100MB
      percentage: 25
    };
  }
  getFallbackTimingMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[25]++;
    cov_2bjowya2fx().s[110]++;
    return {
      loadTime: 1500,
      domReady: 800,
      firstPaint: 1200,
      firstContentfulPaint: 1400
    };
  }
  getFallbackNetworkMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[26]++;
    cov_2bjowya2fx().s[111]++;
    return {
      latency: 50,
      bandwidth: 10,
      connectionType: '4g'
    };
  }
  getFallbackCPUMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[27]++;
    cov_2bjowya2fx().s[112]++;
    return {
      usage: 0.15,
      // 15%
      cores: 4
    };
  }
  getFallbackSystemMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[28]++;
    cov_2bjowya2fx().s[113]++;
    return {
      cpu: 0.15,
      memory: 25,
      latency: 50,
      frameRate: 60,
      timestamp: Date.now()
    };
  }
  getFallbackWebVitals() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[29]++;
    cov_2bjowya2fx().s[114]++;
    return {
      lcp: 2500,
      fid: 100,
      cls: 0.1,
      fcp: 1500,
      ttfb: 200
    };
  }
  /**
   * Utilitaire pour remplacer Math.random() par vraies données
   */
  async getRandomReplacementValue(type =
  /* istanbul ignore next */
  (cov_2bjowya2fx().b[18][0]++, 'generic')) {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[30]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[115]++, await this.getSystemMetrics());
    /* istanbul ignore next */
    cov_2bjowya2fx().s[116]++;
    switch (type) {
      case 'cpu':
        /* istanbul ignore next */
        cov_2bjowya2fx().b[19][0]++;
        cov_2bjowya2fx().s[117]++;
        return metrics.cpu;
      case 'memory':
        /* istanbul ignore next */
        cov_2bjowya2fx().b[19][1]++;
        cov_2bjowya2fx().s[118]++;
        return metrics.memory / 100;
      // Normaliser 0-1
      case 'latency':
        /* istanbul ignore next */
        cov_2bjowya2fx().b[19][2]++;
        cov_2bjowya2fx().s[119]++;
        return metrics.latency / 1000;
      // Normaliser en secondes
      default:
        /* istanbul ignore next */
        cov_2bjowya2fx().b[19][3]++;
        cov_2bjowya2fx().s[120]++;
        // Mélange normalisé pour usage générique
        return (metrics.cpu + metrics.memory / 100 + metrics.latency / 1000) / 3;
    }
  }
  /**
   * Force refresh du cache des métriques
   */
  refreshMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[31]++;
    cov_2bjowya2fx().s[121]++;
    this.metricsCache.clear();
  }
  /**
   * Obtient des métriques en mode développement avec warnings
   */
  async getDevMetrics() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[32]++;
    cov_2bjowya2fx().s[122]++;
    if (this.isProduction) {
      /* istanbul ignore next */
      cov_2bjowya2fx().b[20][0]++;
      cov_2bjowya2fx().s[123]++;
      return this.getSystemMetrics();
    } else
    /* istanbul ignore next */
    {
      cov_2bjowya2fx().b[20][1]++;
    }
    cov_2bjowya2fx().s[124]++;
    secureLogger_1.logger.warn('🚧 MODE DÉVELOPPEMENT: Utilisation métriques simulées pour les tests');
    /* istanbul ignore next */
    cov_2bjowya2fx().s[125]++;
    return this.getFallbackSystemMetrics();
  }
  // =============================================================================
  // MÉTHODES AJOUTÉES POUR COMPATIBILITÉ ORGANISMCORE
  // =============================================================================
  /**
   * Get CPU usage as a normalized value (0-1)
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[33]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[126]++, await this.getSystemMetrics());
    /* istanbul ignore next */
    cov_2bjowya2fx().s[127]++;
    return metrics.cpu;
  }
  /**
   * Get memory usage as a normalized value (0-1)
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_2bjowya2fx().f[34]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2bjowya2fx().s[128]++, await this.getSystemMetrics());
    /* istanbul ignore next */
    cov_2bjowya2fx().s[129]++;
    return metrics.memory / 100; // Convert percentage to 0-1 range
  }
}
/* istanbul ignore next */
cov_2bjowya2fx().s[130]++;
exports.default = RealMetricsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,