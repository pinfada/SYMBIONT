{"version":3,"names":["secureLogger_1","cov_2bjowya2fx","s","require","RealMetricsService","constructor","f","metricsCache","Map","isProduction","process","env","NODE_ENV","getInstance","instance","b","getMemoryMetrics","performance","memInfo","memory","used","usedJSHeapSize","total","totalJSHeapSize","percentage","jsHeapSizeLimit","estimate","estimateMemoryUsage","_error","logger","warn","error","getFallbackMemoryMetrics","getTimingMetrics","navigation","getEntriesByType","paint","firstPaint","find","p","name","startTime","firstContentfulPaint","loadTime","loadEventEnd","fetchStart","domReady","domContentLoadedEventEnd","getFallbackTimingMetrics","getNetworkMetrics","connection","navigator","mozConnection","webkitConnection","latency","measureNetworkLatency","bandwidth","downlink","connectionType","effectiveType","getFallbackNetworkMetrics","getCPUMetrics","usage","estimateCPUUsage","cores","hardwareConcurrency","getFallbackCPUMetrics","getSystemMetrics","cacheKey","cached","get","Date","now","timestamp","value","network","cpu","Promise","all","frameRate","measureFrameRate","metrics","set","getFallbackSystemMetrics","getWebVitals","lcp","fid","cls","fcp","ttfb","measureLCP","measureFID","measureCLS","measureFCP","measureTTFB","getFallbackWebVitals","start","fetch","method","resolve","iterations","result","i","Math","sqrt","sin","duration","min","frames","countFrame","requestAnimationFrame","domElements","document","querySelectorAll","length","estimateBytes","lcpEntries","fidEntries","processingStart","clsValue","observer","PerformanceObserver","list","entry","getEntries","hadRecentInput","observe","type","buffered","setTimeout","disconnect","fcpEntry","getEntriesByName","responseStart","requestStart","getRandomReplacementValue","refreshMetrics","clear","getDevMetrics","getCPUUsage","getMemoryUsage","exports","default"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/services/RealMetricsService.ts"],"sourcesContent":["import { logger } from '@shared/utils/secureLogger';\n/**\n * RealMetricsService - Service central pour collecte de vraies métriques\n * Remplace Math.random() par des données de performance réelles\n */\n\nexport interface PerformanceMetrics {\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  timing: {\n    loadTime: number;\n    domReady: number;\n    firstPaint: number;\n    firstContentfulPaint: number;\n  };\n  network: {\n    latency: number;\n    bandwidth: number;\n    connectionType: string;\n  };\n  cpu: {\n    usage: number;\n    cores: number;\n  };\n  timestamp: number;\n}\n\nexport interface WebVitalsMetrics {\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  fcp: number; // First Contentful Paint\n  ttfb: number; // Time To First Byte\n}\n\nexport interface SystemMetrics {\n  cpu: number;\n  memory: number;\n  latency: number;\n  frameRate: number;\n  timestamp: number;\n}\n\nclass RealMetricsService {\n  private static instance: RealMetricsService;\n  private isProduction: boolean;\n  private metricsCache: Map<string, { value: unknown; timestamp: number }> = new Map();\n  \n  private constructor() {\n    this.isProduction = process.env.NODE_ENV === 'production';\n  }\n\n  static getInstance(): RealMetricsService {\n    if (!RealMetricsService.instance) {\n      RealMetricsService.instance = new RealMetricsService();\n    }\n    return RealMetricsService.instance;\n  }\n\n  /**\n   * Collecte des métriques mémoire réelles\n   */\n  async getMemoryMetrics(): Promise<{ used: number; total: number; percentage: number }> {\n    try {\n      // Try Performance Memory API (Chrome)\n      if ('memory' in performance) {\n        const memInfo = (performance as any).memory;\n        return {\n          used: memInfo.usedJSHeapSize,\n          total: memInfo.totalJSHeapSize,\n          percentage: (memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit) * 100\n        };\n      }\n\n      // Fallback: Estimate via DOM elements count\n      const estimate = this.estimateMemoryUsage();\n      return {\n        used: estimate,\n        total: estimate * 2,\n        percentage: 50\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte mémoire, fallback estimation:', error);\n      return this.getFallbackMemoryMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques de timing réelles\n   */\n  async getTimingMetrics(): Promise<{ loadTime: number; domReady: number; firstPaint: number; firstContentfulPaint: number }> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const paint = performance.getEntriesByType('paint');\n      \n      const firstPaint = paint.find(p => p.name === 'first-paint')?.startTime || 0;\n      const firstContentfulPaint = paint.find(p => p.name === 'first-contentful-paint')?.startTime || 0;\n\n      return {\n        loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n        domReady: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n        firstPaint,\n        firstContentfulPaint\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte timing, fallback estimation:', error);\n      return this.getFallbackTimingMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques réseau réelles\n   */\n  async getNetworkMetrics(): Promise<{ latency: number; bandwidth: number; connectionType: string }> {\n    try {\n      const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n      \n      // Mesure latency via HEAD request vers favicon\n      const latency = await this.measureNetworkLatency();\n      \n      return {\n        latency,\n        bandwidth: connection?.downlink || 0,\n        connectionType: connection?.effectiveType || 'unknown'\n      };\n    } catch (_error) {\n      logger.warn('Erreur collecte réseau, fallback estimation:', error);\n      return this.getFallbackNetworkMetrics();\n    }\n  }\n\n  /**\n   * Collecte des métriques CPU réelles (estimation)\n   */\n  async getCPUMetrics(): Promise<{ usage: number; cores: number }> {\n    try {\n      const usage = await this.estimateCPUUsage();\n      const cores = navigator.hardwareConcurrency || 4;\n      \n      return { usage, cores };\n    } catch (_error) {\n      logger.warn('Erreur collecte CPU, fallback estimation:', error);\n      return this.getFallbackCPUMetrics();\n    }\n  }\n\n  /**\n   * Interface principale pour les métriques système (remplace Math.random())\n   */\n  async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.metricsCache.get(cacheKey);\n    \n    // Cache 30 secondes pour éviter overhead\n    if (cached && Date.now() - cached.timestamp < 30000) {\n      return cached.value;\n    }\n\n    try {\n      const [memory, network, cpu] = await Promise.all([\n        this.getMemoryMetrics(),\n        this.getNetworkMetrics(),\n        this.getCPUMetrics()\n      ]);\n\n      const frameRate = this.measureFrameRate();\n\n      const metrics: SystemMetrics = {\n        cpu: cpu.usage,\n        memory: memory.percentage,\n        latency: network.latency,\n        frameRate: await frameRate,\n        timestamp: Date.now()\n      };\n\n      this.metricsCache.set(cacheKey, { value: metrics, timestamp: Date.now() });\n      return metrics;\n    } catch (_error) {\n      logger.error('Erreur collecte métriques système:', error);\n      return this.getFallbackSystemMetrics();\n    }\n  }\n\n  /**\n   * Collecte Web Vitals pour performance UX\n   */\n  async getWebVitals(): Promise<WebVitalsMetrics> {\n    try {\n      const [lcp, fid, cls, fcp, ttfb] = await Promise.all([\n        this.measureLCP(),\n        this.measureFID(),\n        this.measureCLS(),\n        this.measureFCP(),\n        this.measureTTFB()\n      ]);\n\n      return { lcp, fid, cls, fcp, ttfb };\n    } catch (_error) {\n      logger.warn('Erreur Web Vitals, fallback defaults:', error);\n      return this.getFallbackWebVitals();\n    }\n  }\n\n  // === MÉTHODES PRIVÉES DE MESURE ===\n\n  private async measureNetworkLatency(): Promise<number> {\n    try {\n      const start = performance.now();\n      await fetch('/favicon.ico', { method: 'HEAD' });\n      return performance.now() - start;\n    } catch {\n      return 50; // Fallback 50ms\n    }\n  }\n\n  private async estimateCPUUsage(): Promise<number> {\n    return new Promise((resolve) => {\n      const start = performance.now();\n      const iterations = 50000;\n      \n      // CPU stress test léger\n      let result = 0;\n      for (let i = 0; i < iterations; i++) {\n        result += Math.sqrt(i) * Math.sin(i);\n      }\n      \n      const duration = performance.now() - start;\n      // Normaliser entre 0 et 1 (plus de 20ms = usage élevé)\n      const usage = Math.min(duration / 20, 1);\n      resolve(usage);\n    });\n  }\n\n  private async measureFrameRate(): Promise<number> {\n    return new Promise((resolve) => {\n      let frames = 0;\n      const start = performance.now();\n      \n      const countFrame = () => {\n        frames++;\n        if (performance.now() - start < 1000) {\n          requestAnimationFrame(countFrame);\n        } else {\n          resolve(frames);\n        }\n      };\n      \n      requestAnimationFrame(countFrame);\n    });\n  }\n\n  private estimateMemoryUsage(): number {\n    // Estimation basée sur le nombre d'éléments DOM\n    const domElements = document.querySelectorAll('*').length;\n    const estimateBytes = domElements * 1000; // ~1KB par élément\n    return estimateBytes;\n  }\n\n  // Web Vitals measurements\n  private async measureLCP(): Promise<number> {\n    try {\n      const lcpEntries = performance.getEntriesByType('largest-contentful-paint') as any[];\n      return lcpEntries.length > 0 ? lcpEntries[lcpEntries.length - 1].startTime : 0;\n    } catch {\n      return 2500; // Fallback LCP\n    }\n  }\n\n  private async measureFID(): Promise<number> {\n    try {\n      const fidEntries = performance.getEntriesByType('first-input') as any[];\n      return fidEntries.length > 0 ? fidEntries[0].processingStart - fidEntries[0].startTime : 0;\n    } catch {\n      return 100; // Fallback FID\n    }\n  }\n\n  private async measureCLS(): Promise<number> {\n    try {\n      let clsValue = 0;\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (!(entry as any).hadRecentInput) {\n            clsValue += (entry as any).value;\n          }\n        }\n      });\n      observer.observe({ type: 'layout-shift', buffered: true });\n      \n      // Wait 100ms to collect entries\n      await new Promise(resolve => setTimeout(resolve, 100));\n      observer.disconnect();\n      \n      return clsValue;\n    } catch {\n      return 0.1; // Fallback CLS\n    }\n  }\n\n  private async measureFCP(): Promise<number> {\n    try {\n      const fcpEntry = performance.getEntriesByName('first-contentful-paint')[0];\n      return fcpEntry ? fcpEntry.startTime : 0;\n    } catch {\n      return 1500; // Fallback FCP\n    }\n  }\n\n  private async measureTTFB(): Promise<number> {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      return navigation ? navigation.responseStart - navigation.requestStart : 0;\n    } catch {\n      return 200; // Fallback TTFB\n    }\n  }\n\n  // === FALLBACKS POUR DÉVELOPPEMENT ===\n\n  private getFallbackMemoryMetrics() {\n    return {\n      used: 25 * 1024 * 1024, // 25MB\n      total: 100 * 1024 * 1024, // 100MB\n      percentage: 25\n    };\n  }\n\n  private getFallbackTimingMetrics() {\n    return {\n      loadTime: 1500,\n      domReady: 800,\n      firstPaint: 1200,\n      firstContentfulPaint: 1400\n    };\n  }\n\n  private getFallbackNetworkMetrics() {\n    return {\n      latency: 50,\n      bandwidth: 10,\n      connectionType: '4g'\n    };\n  }\n\n  private getFallbackCPUMetrics() {\n    return {\n      usage: 0.15, // 15%\n      cores: 4\n    };\n  }\n\n  private getFallbackSystemMetrics(): SystemMetrics {\n    return {\n      cpu: 0.15,\n      memory: 25,\n      latency: 50,\n      frameRate: 60,\n      timestamp: Date.now()\n    };\n  }\n\n  private getFallbackWebVitals(): WebVitalsMetrics {\n    return {\n      lcp: 2500,\n      fid: 100,\n      cls: 0.1,\n      fcp: 1500,\n      ttfb: 200\n    };\n  }\n\n  /**\n   * Utilitaire pour remplacer Math.random() par vraies données\n   */\n  async getRandomReplacementValue(type: 'cpu' | 'memory' | 'latency' | 'generic' = 'generic'): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    \n    switch (type) {\n      case 'cpu':\n        return metrics.cpu;\n      case 'memory':\n        return metrics.memory / 100; // Normaliser 0-1\n      case 'latency':\n        return metrics.latency / 1000; // Normaliser en secondes\n      default:\n        // Mélange normalisé pour usage générique\n        return (metrics.cpu + metrics.memory / 100 + metrics.latency / 1000) / 3;\n    }\n  }\n\n  /**\n   * Force refresh du cache des métriques\n   */\n  refreshMetrics(): void {\n    this.metricsCache.clear();\n  }\n\n  /**\n   * Obtient des métriques en mode développement avec warnings\n   */\n  async getDevMetrics(): Promise<SystemMetrics> {\n    if (this.isProduction) {\n      return this.getSystemMetrics();\n    }\n\n    logger.warn('🚧 MODE DÉVELOPPEMENT: Utilisation métriques simulées pour les tests');\n    return this.getFallbackSystemMetrics();\n  }\n\n  // =============================================================================\n  // MÉTHODES AJOUTÉES POUR COMPATIBILITÉ ORGANISMCORE\n  // =============================================================================\n\n  /**\n   * Get CPU usage as a normalized value (0-1)\n   */\n  async getCPUUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.cpu;\n  }\n\n  /**\n   * Get memory usage as a normalized value (0-1)\n   */\n  async getMemoryUsage(): Promise<number> {\n    const metrics = await this.getSystemMetrics();\n    return metrics.memory / 100; // Convert percentage to 0-1 range\n  }\n}\n\nexport default RealMetricsService;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}