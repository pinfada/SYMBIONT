c43fd0108feae85c7f6ea9b1e00cce81
"use strict";
/**
 * Système de logging sécurisé
 * Remplace console.log avec protection des données sensibles et gestion des niveaux
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.secureDebug = exports.secureError = exports.secureWarn = exports.secureLog = exports.logger = exports.SecureLogger = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["TRACE"] = 0] = "TRACE";
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["FATAL"] = 5] = "FATAL";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class SecureLogger {
    constructor(config = {}) {
        this.logEntries = [];
        this.config = {
            level: LogLevel.INFO,
            enableConsole: !this.isProduction(),
            enableStorage: true,
            maxStorageEntries: 1000,
            sensitiveFields: ['password', 'token', 'key', 'secret', 'auth'],
            productionMode: this.isProduction(),
            ...config
        };
    }
    static getInstance(config) {
        if (!SecureLogger.instance) {
            SecureLogger.instance = new SecureLogger(config);
        }
        return SecureLogger.instance;
    }
    isProduction() {
        return process.env.NODE_ENV === 'production' ||
            (typeof chrome !== 'undefined' && typeof chrome.runtime?.getManifest === 'function');
    }
    /**
     * Sanitise les données pour supprimer les informations sensibles
     */
    sanitizeData(data) {
        if (typeof data === 'string') {
            return this.sanitizeString(data);
        }
        if (typeof data === 'object' && data !== null) {
            if (Array.isArray(data)) {
                return data.map(item => this.sanitizeData(item));
            }
            const sanitized = {};
            for (const [key, value] of Object.entries(data)) {
                if (this.isSensitiveField(key)) {
                    sanitized[key] = '[REDACTED]';
                }
                else {
                    sanitized[key] = this.sanitizeData(value);
                }
            }
            return sanitized;
        }
        return data;
    }
    sanitizeString(str) {
        let sanitized = str;
        for (const pattern of SecureLogger.SENSITIVE_PATTERNS) {
            sanitized = sanitized.replace(pattern, '[REDACTED]');
        }
        return sanitized;
    }
    isSensitiveField(fieldName) {
        return this.config.sensitiveFields.some(field => fieldName.toLowerCase().includes(field.toLowerCase()));
    }
    formatMessage(level, message, data, context) {
        const timestamp = new Date().toISOString();
        const levelName = LogLevel[level];
        const contextStr = context ? ` [${context}]` : '';
        const dataStr = data ? ` ${JSON.stringify(data, null, 2)}` : '';
        return `[${timestamp}] ${levelName}${contextStr}: ${message}${dataStr}`;
    }
    shouldLog(level) {
        return level >= this.config.level;
    }
    log(level, message, data, context) {
        if (!this.shouldLog(level)) {
            return;
        }
        const sanitizedData = data ? this.sanitizeData(data) : undefined;
        const sanitizedMessage = this.sanitizeString(message);
        const logEntry = {
            timestamp: Date.now(),
            level,
            message: sanitizedMessage,
            data: sanitizedData,
            context,
            sanitized: true
        };
        // Stockage des logs
        if (this.config.enableStorage) {
            this.logEntries.push(logEntry);
            // Limiter le nombre d'entrées en mémoire
            if (this.logEntries.length > this.config.maxStorageEntries) {
                this.logEntries = this.logEntries.slice(-this.config.maxStorageEntries);
            }
        }
        // Affichage console (seulement en développement par défaut)
        if (this.config.enableConsole) {
            const formattedMessage = this.formatMessage(level, sanitizedMessage, sanitizedData, context);
            switch (level) {
                case LogLevel.TRACE:
                case LogLevel.DEBUG:
                    console.debug(formattedMessage);
                    break;
                case LogLevel.INFO:
                    console.info(formattedMessage);
                    break;
                case LogLevel.WARN:
                    console.warn(formattedMessage);
                    break;
                case LogLevel.ERROR:
                case LogLevel.FATAL:
                    console.error(formattedMessage);
                    break;
            }
        }
    }
    // Méthodes publiques de logging
    trace(message, data, context) {
        this.log(LogLevel.TRACE, message, data, context);
    }
    debug(message, data, context) {
        this.log(LogLevel.DEBUG, message, data, context);
    }
    info(message, data, context) {
        this.log(LogLevel.INFO, message, data, context);
    }
    warn(message, data, context) {
        this.log(LogLevel.WARN, message, data, context);
    }
    error(message, data, context) {
        this.log(LogLevel.ERROR, message, data, context);
    }
    fatal(message, data, context) {
        this.log(LogLevel.FATAL, message, data, context);
    }
    // Méthodes utilitaires
    setLevel(level) {
        this.config.level = level;
    }
    enableConsole(enable) {
        this.config.enableConsole = enable;
    }
    getLogs(level) {
        if (level !== undefined) {
            return this.logEntries.filter(entry => entry.level >= level);
        }
        return [...this.logEntries];
    }
    clearLogs() {
        this.logEntries = [];
    }
    exportLogs() {
        return JSON.stringify(this.logEntries, null, 2);
    }
}
exports.SecureLogger = SecureLogger;
// Patterns pour détecter les données sensibles
SecureLogger.SENSITIVE_PATTERNS = [
    /password/i,
    /token/i,
    /key/i,
    /secret/i,
    /auth/i,
    /credential/i,
    /session/i,
    /cookie/i,
    /jwt/i,
    /bearer/i,
    /api[_-]?key/i,
    /access[_-]?token/i,
    /refresh[_-]?token/i,
    /private[_-]?key/i,
    /\b[A-Za-z0-9+/]{32,}={0,2}\b/, // Base64
    /\b[0-9a-f]{32,}\b/i, // Hex strings
    /\b[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}\b/, // Credit card pattern
    /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/ // Email
];
// Instance globale pour un usage facile
exports.logger = SecureLogger.getInstance();
// Aliases pour migration facile depuis console.log
exports.secureLog = exports.logger.info.bind(exports.logger);
exports.secureWarn = exports.logger.warn.bind(exports.logger);
exports.secureError = exports.logger.error.bind(exports.logger);
exports.secureDebug = exports.logger.debug.bind(exports.logger);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,