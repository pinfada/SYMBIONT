{"version":3,"names":["cov_1p0tt5b731","actualCoverage","s","secureRandom_1","require","NeuralMesh","constructor","f","nodes","Map","connections","activations","learningRate","addNode","id","type","bias","b","node","activation","set","addConnection","fromId","toId","weight","has","Error","get","stimulate","nodeId","value","console","warn","propagate","fromActivation","currentActivation","newActivation","sigmoid","x","Math","exp","getActivation","mutate","rate","values","SecureRandom","random","max","min","getNeuralActivity","totalActivity","nodeCount","abs","getConnectionStrength","totalWeight","connectionCount","toJSON","Array","from","map","entries","Object","fromEntries","initialize","size","setupDefaultNetwork","suspend","clear","log","getCPUUsage","complexity","getMemoryUsage","memorySize","saveState","key","loadState","state","reset","healthCheck","issues","push","connectedNodes","Set","add","keys","orphanedNodes","filter","length","join","healthy","cleanup","processPattern","pattern","inputNodes","forEach","index","outputNodes","learn","data","feedback","getPerformanceMetrics","reduce","sum","neuralActivity","connectionStrength","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/NeuralMesh.ts"],"sourcesContent":["import { INeuralMesh } from './interfaces/INeuralMesh';\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\r\n\r\nexport class NeuralMesh implements INeuralMesh {\r\n  private nodes: Map<string, { type: string; activation: number; bias: number }> = new Map();\r\n  private connections: Map<string, Map<string, number>> = new Map();\r\n  private activations: Map<string, number> = new Map();\r\n  // @ts-expect-error Taux réservé pour usage futur\r\n  private learningRate: number = 0.01;\r\n\r\n  constructor() {\r\n    // Initialize empty network\r\n  }\r\n\r\n  /**\r\n   * Ajoute un nœud au réseau\r\n   */\r\n  addNode(id: string, type: 'input' | 'hidden' | 'output', bias: number = 0): void {\r\n    const node: { type: string; activation: number; bias: number } = {\r\n      type,\r\n      activation: 0,\r\n      bias\r\n    };\r\n\r\n    this.nodes.set(id, node);\r\n    this.activations.set(id, 0);\r\n  }\r\n\r\n  /**\r\n   * Ajoute une connexion entre deux nœuds\r\n   */\r\n  addConnection(fromId: string, toId: string, weight: number): void {\r\n    if (!this.nodes.has(fromId) || !this.nodes.has(toId)) {\r\n      throw new Error(`Cannot connect non-existent nodes: ${fromId} -> ${toId}`);\r\n    }\r\n\r\n    if (!this.connections.has(fromId)) {\r\n      this.connections.set(fromId, new Map());\r\n    }\r\n    this.connections.get(fromId)!.set(toId, weight);\r\n  }\r\n\r\n  /**\r\n   * Stimule un nœud d'entrée\r\n   */\r\n  stimulate(nodeId: string, value: number): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node || node.type !== 'input') {\r\n      console.warn(`Cannot stimulate non-input node: ${nodeId}`);\r\n      return;\r\n    }\r\n    this.activations.set(nodeId, value);\r\n  }\r\n\r\n  /**\r\n   * Propage l'activation à travers le réseau\r\n   */\r\n  propagate(): void {\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of this.nodes) {\r\n      if (node.type !== 'input') {\r\n        this.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of this.connections) {\r\n      const fromActivation = this.activations.get(fromId) || 0;\r\n      \r\n      for (const [toId, weight] of connections) {\r\n        const currentActivation = this.activations.get(toId) || 0;\r\n        const newActivation = currentActivation + (fromActivation * weight);\r\n        this.activations.set(toId, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmoïde\r\n   */\r\n  private sigmoid(x: number): number {\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Récupère l'activation d'un nœud\r\n   */\r\n  getActivation(nodeId: string): number {\r\n    return this.activations.get(nodeId) || 0;\r\n  }\r\n\r\n  /**\r\n   * Applique une mutation aléatoire au réseau\r\n   */\r\n  mutate(rate: number = 0.05): void {\r\n    // Mutate connection weights\r\n    for (const connections of this.connections.values()) {\r\n      for (const [toId, weight] of connections) {\r\n        if (SecureRandom.random() < rate) {\r\n          connections.set(toId, weight + (SecureRandom.random() - 0.5) * 0.2);\r\n          connections.set(toId, Math.max(-2, Math.min(2, connections.get(toId) || 0)));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of this.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mesure l'activité neurale globale\r\n   */\r\n  getNeuralActivity(): number {\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n\r\n    for (const activation of this.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n\r\n    return nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Mesure la force moyenne des connexions\r\n   */\r\n  getConnectionStrength(): number {\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n\r\n    for (const connections of this.connections.values()) {\r\n      for (const weight of connections.values()) {\r\n        totalWeight += Math.abs(weight);\r\n        connectionCount++;\r\n      }\r\n    }\r\n\r\n    return connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n  }\r\n\r\n  /**\r\n   * Export JSON pour debug/sauvegarde\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      nodes: Array.from(this.nodes.values()),\r\n      connections: Array.from(this.connections.values()).map(connections => Array.from(connections.entries())),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialise le réseau neuronal\r\n   */\r\n  async initialize(): Promise<void> {\r\n    // Setup default network if empty\r\n    if (this.nodes.size === 0) {\r\n      this.setupDefaultNetwork();\r\n    }\r\n    \r\n    // Perform initial propagation\r\n    this.propagate();\r\n  }\r\n\r\n  /**\r\n   * Configure un réseau par défaut pour les tests\r\n   */\r\n  private setupDefaultNetwork(): void {\r\n    // Add input nodes\r\n    this.addNode('sensory_input', 'input');\r\n    this.addNode('memory_input', 'input');\r\n    \r\n    // Add hidden nodes\r\n    this.addNode('processing_1', 'hidden', 0.1);\r\n    this.addNode('processing_2', 'hidden', -0.1);\r\n    \r\n    // Add output nodes\r\n    this.addNode('motor_output', 'output');\r\n    this.addNode('emotion_output', 'output');\r\n    \r\n    // Connect the network\r\n    this.addConnection('sensory_input', 'processing_1', 0.8);\r\n    this.addConnection('memory_input', 'processing_2', 0.6);\r\n    this.addConnection('processing_1', 'motor_output', 0.9);\r\n    this.addConnection('processing_2', 'emotion_output', 0.7);\r\n    this.addConnection('processing_1', 'processing_2', 0.3);\r\n  }\r\n\r\n  /**\r\n   * Suspend neural processing\r\n   */\r\n  async suspend(): Promise<void> {\r\n    // Clear activations but keep structure\r\n    this.activations.clear();\r\n    console.log('Neural mesh suspended');\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage estimation\r\n   */\r\n  async getCPUUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual computation time\r\n    const complexity = this.nodes.size * this.connections.size;\r\n    return Math.min(1, complexity / 1000);\r\n  }\r\n\r\n  /**\r\n   * Get memory usage estimation\r\n   */\r\n  async getMemoryUsage(): Promise<number> {\r\n    // Mock implementation - in real scenario, measure actual memory footprint\r\n    const memorySize = (this.nodes.size + this.connections.size) * 64; // bytes approximation\r\n    return Math.min(1, memorySize / (1024 * 1024)); // Convert to MB ratio\r\n  }\r\n\r\n  /**\r\n   * Save current state for persistence\r\n   */\r\n  saveState(): any {\r\n    return {\r\n      nodes: Object.fromEntries(this.nodes),\r\n      connections: Object.fromEntries(\r\n        Array.from(this.connections.entries()).map(([key, map]) => [\r\n          key,\r\n          Object.fromEntries(map)\r\n        ])\r\n      ),\r\n      activations: Object.fromEntries(this.activations)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Load state from saved data\r\n   */\r\n  loadState(state: any): void {\r\n    if (state.nodes) {\r\n      this.nodes.clear();\r\n      for (const [id, node] of Object.entries(state.nodes)) {\r\n        this.nodes.set(id, node as any);\r\n      }\r\n    }\r\n    \r\n    if (state.connections) {\r\n      this.connections.clear();\r\n      for (const [fromId, connections] of Object.entries(state.connections)) {\r\n        this.connections.set(fromId, new Map(Object.entries(connections as any)));\r\n      }\r\n    }\r\n    \r\n    if (state.activations) {\r\n      this.activations.clear();\r\n      for (const [id, activation] of Object.entries(state.activations)) {\r\n        this.activations.set(id, activation as number);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset neural mesh to initial state\r\n   */\r\n  reset(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n    this.setupDefaultNetwork();\r\n  }\r\n\r\n  /**\r\n   * Health check for neural mesh\r\n   */\r\n  healthCheck(): { healthy: boolean; issues: string[] } {\r\n    const issues: string[] = [];\r\n    \r\n    if (this.nodes.size === 0) {\r\n      issues.push('No nodes in neural mesh');\r\n    }\r\n    \r\n    if (this.connections.size === 0) {\r\n      issues.push('No connections in neural mesh');\r\n    }\r\n    \r\n    // Check for orphaned nodes\r\n    const connectedNodes = new Set<string>();\r\n    for (const [fromId, connections] of this.connections) {\r\n      connectedNodes.add(fromId);\r\n      for (const toId of connections.keys()) {\r\n        connectedNodes.add(toId);\r\n      }\r\n    }\r\n    \r\n    const orphanedNodes = Array.from(this.nodes.keys()).filter(\r\n      nodeId => !connectedNodes.has(nodeId)\r\n    );\r\n    \r\n    if (orphanedNodes.length > 0) {\r\n      issues.push(`Orphaned nodes: ${orphanedNodes.join(', ')}`);\r\n    }\r\n    \r\n    return {\r\n      healthy: issues.length === 0,\r\n      issues\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  cleanup(): void {\r\n    this.nodes.clear();\r\n    this.connections.clear();\r\n    this.activations.clear();\r\n  }\r\n\r\n  /**\r\n   * Process a pattern through the neural mesh (optional)\r\n   */\r\n  async processPattern(pattern: any): Promise<any> {\r\n    // Simple pattern processing - stimulate input nodes with pattern data\r\n    if (pattern && typeof pattern === 'object') {\r\n      const inputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'input')\r\n        .map(([id]) => id);\r\n\r\n      // Stimulate input nodes with pattern values\r\n      Object.entries(pattern).forEach(([, value], index) => {\r\n        if (index < inputNodes.length && typeof value === 'number') {\r\n          this.stimulate(inputNodes[index], value);\r\n        }\r\n      });\r\n\r\n      // Propagate and return output activations\r\n      this.propagate();\r\n      \r\n      const outputNodes = Array.from(this.nodes.entries())\r\n        .filter(([, node]) => node.type === 'output');\r\n      \r\n      return Object.fromEntries(\r\n        outputNodes.map(([id]) => [id, this.getActivation(id)])\r\n      );\r\n    }\r\n    \r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Learn from data (optional)\r\n   */\r\n  async learn(data: any): Promise<void> {\r\n    // Simple learning implementation - adjust based on data\r\n    if (data && typeof data === 'object' && data.feedback) {\r\n      // Apply small mutations based on feedback\r\n      const learningRate = Math.abs(data.feedback) * 0.01;\r\n      this.mutate(learningRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics (optional)\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return {\r\n      nodeCount: this.nodes.size,\r\n      connectionCount: Array.from(this.connections.values()).reduce(\r\n        (sum, connections) => sum + connections.size, 0\r\n      ),\r\n      neuralActivity: this.getNeuralActivity(),\r\n      connectionStrength: this.getConnectionStrength()\r\n    };\r\n  }\r\n}"],"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","ignoreList":[]}