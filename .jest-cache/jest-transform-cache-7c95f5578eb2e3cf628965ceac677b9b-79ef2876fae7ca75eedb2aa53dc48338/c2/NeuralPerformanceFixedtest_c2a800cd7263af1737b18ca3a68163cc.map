{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/NeuralPerformanceFixed.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/performance/NeuralPerformanceFixed.test.ts"],"sourcesContent":["/**\n * Tests de performance améliorés pour les réseaux neuronaux\n * Version stabilisée avec mocks corrects\n */\n\nimport { NeuralMeshAsync } from '../../src/core/NeuralMeshAsync';\n\n// Mock Worker avec des réponses synchrones pour éviter les timeouts\nconst createMockWorker = () => {\n  const mockWorker = {\n    postMessage: jest.fn(),\n    terminate: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    onmessage: null,\n    onerror: null\n  };\n  \n  // Réponse immédiate pour éviter les timeouts\n  mockWorker.postMessage.mockImplementation((message) => {\n    setTimeout(() => {\n      if (mockWorker.onmessage) {\n        let response;\n        switch (message.type) {\n          case 'init':\n            response = { type: 'ready' };\n            break;\n          case 'forward':\n            response = { \n              type: 'forward_result', \n              activations: new Map([['output', 0.5]]),\n              processingTime: 10\n            };\n            break;\n          case 'mutate':\n            response = { type: 'mutate_complete', processingTime: 5 };\n            break;\n          case 'getMetrics':\n            response = { \n              type: 'metrics_result', \n              metrics: {\n                averageProcessingTime: 10,\n                totalOperations: 100,\n                memoryUsage: 1024,\n                cpuUsage: 0.25\n              }\n            };\n            break;\n          default:\n            response = { type: 'response', payload: message };\n        }\n        mockWorker.onmessage({ data: response });\n      }\n    }, 1); // Minimal delay\n  });\n  \n  return mockWorker;\n};\n\n// Mock performance.now() pour des temps déterministes\nconst mockPerformanceNow = jest.fn();\nlet mockTime = 1000;\n\nmockPerformanceNow.mockImplementation(() => {\n  mockTime += 10; // Increment by 10ms each call\n  return mockTime;\n});\n\nObject.defineProperty(global, 'performance', {\n  value: {\n    now: mockPerformanceNow\n  },\n  writable: true\n});\n\n// Mock Worker constructor\nObject.defineProperty(global, 'Worker', {\n  value: jest.fn().mockImplementation(() => createMockWorker()),\n  writable: true\n});\n\ndescribe('Neural Performance Tests (Stabilized)', () => {\n  let asyncMesh: NeuralMeshAsync;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    mockTime = 1000; // Reset time\n    mockPerformanceNow.mockClear();\n    \n    asyncMesh = new NeuralMeshAsync();\n    \n    // Wait for worker to be ready\n    await new Promise(resolve => setTimeout(resolve, 50));\n  });\n\n  afterEach(async () => {\n    if (asyncMesh) {\n      await asyncMesh.suspend();\n    }\n  });\n\n  it('should initialize neural network efficiently', async () => {\n    expect(asyncMesh).toBeDefined();\n    expect(asyncMesh.isReady()).toBe(true);\n  });\n\n  it('should track processing time consistently', async () => {\n    const startTime = performance.now();\n    \n    // Simulate some processing\n    await asyncMesh.forwardPass(new Map([['input', 0.5]]));\n    \n    const endTime = performance.now();\n    \n    // With our mock, this should be predictable\n    expect(endTime - startTime).toBeGreaterThan(0);\n    expect(endTime - startTime).toBeLessThan(1000); // Reasonable upper bound\n  });\n\n  it('should handle mutations efficiently', async () => {\n    const startTime = performance.now();\n    \n    await asyncMesh.mutate(0.1);\n    \n    const endTime = performance.now();\n    \n    // Should complete quickly with our mocks\n    expect(endTime - startTime).toBeGreaterThan(0);\n    expect(endTime - startTime).toBeLessThan(1000);\n  });\n\n  it('should report performance metrics', async () => {\n    // Perform some operations to generate metrics\n    await asyncMesh.forwardPass(new Map([['input', 0.7]]));\n    await asyncMesh.mutate(0.05);\n    \n    const metrics = await asyncMesh.getPerformanceMetrics();\n    \n    expect(metrics).toBeDefined();\n    expect(typeof metrics.averageProcessingTime).toBe('number');\n    expect(metrics.averageProcessingTime).toBeGreaterThanOrEqual(0);\n    expect(typeof metrics.totalOperations).toBe('number');\n    expect(metrics.totalOperations).toBeGreaterThanOrEqual(0);\n  });\n\n  it('should report memory usage', async () => {\n    const metrics = await asyncMesh.getPerformanceMetrics();\n    \n    expect(typeof metrics.memoryUsage).toBe('number');\n    expect(metrics.memoryUsage).toBeGreaterThanOrEqual(0);\n  });\n\n  it('should report CPU usage within valid range', async () => {\n    const cpuUsage = await asyncMesh.getCPUUsage();\n    \n    expect(typeof cpuUsage).toBe('number');\n    expect(cpuUsage).toBeGreaterThanOrEqual(0);\n    expect(cpuUsage).toBeLessThanOrEqual(1); // Normalized to 0-1\n  });\n\n  it('should handle large networks within reasonable time', async () => {\n    // Add many nodes to simulate large network\n    for (let i = 0; i < 100; i++) {\n      await asyncMesh.addNode(`node_${i}`, 'hidden');\n    }\n    \n    const startTime = performance.now();\n    await asyncMesh.forwardPass(new Map([['input', 0.5]]));\n    const endTime = performance.now();\n    \n    // Should complete within reasonable time even with large network\n    expect(endTime - startTime).toBeLessThan(1000); // 1 second max with mocks\n  });\n\n  it('should maintain worker readiness status', async () => {\n    expect(asyncMesh.isReady()).toBe(true);\n    \n    // Perform operations\n    await asyncMesh.forwardPass(new Map([['input', 0.3]]));\n    \n    // Should still be ready\n    expect(asyncMesh.isReady()).toBe(true);\n  });\n\n  it('should handle concurrent operations efficiently', async () => {\n    const operations = [\n      asyncMesh.forwardPass(new Map([['input1', 0.1]])),\n      asyncMesh.forwardPass(new Map([['input2', 0.2]])),\n      asyncMesh.forwardPass(new Map([['input3', 0.3]]))\n    ];\n    \n    const startTime = performance.now();\n    await Promise.all(operations);\n    const endTime = performance.now();\n    \n    // Concurrent operations should not take too long\n    expect(endTime - startTime).toBeLessThan(2000);\n  });\n\n  it('should clean up resources properly', async () => {\n    const worker = (asyncMesh as any).worker;\n    expect(worker).toBeDefined();\n    \n    await asyncMesh.suspend();\n    \n    expect(worker.terminate).toHaveBeenCalled();\n    expect(asyncMesh.isReady()).toBe(false);\n  });\n});"],"version":3}