ebb7d9109425aabd8a326d5b78b36c90
"use strict";
/**
 * Tests de performance améliorés pour les réseaux neuronaux
 * Version stabilisée avec mocks corrects
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NeuralMeshAsync_1 = require("../../src/core/NeuralMeshAsync");
// Mock Worker avec des réponses synchrones pour éviter les timeouts
const createMockWorker = () => {
    const mockWorker = {
        postMessage: jest.fn(),
        terminate: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        onmessage: null,
        onerror: null
    };
    // Réponse immédiate pour éviter les timeouts
    mockWorker.postMessage.mockImplementation((message) => {
        setTimeout(() => {
            if (mockWorker.onmessage) {
                let response;
                switch (message.type) {
                    case 'init':
                        response = { type: 'ready' };
                        break;
                    case 'forward':
                        response = {
                            type: 'forward_result',
                            activations: new Map([['output', 0.5]]),
                            processingTime: 10
                        };
                        break;
                    case 'mutate':
                        response = { type: 'mutate_complete', processingTime: 5 };
                        break;
                    case 'getMetrics':
                        response = {
                            type: 'metrics_result',
                            metrics: {
                                averageProcessingTime: 10,
                                totalOperations: 100,
                                memoryUsage: 1024,
                                cpuUsage: 0.25
                            }
                        };
                        break;
                    default:
                        response = { type: 'response', payload: message };
                }
                mockWorker.onmessage({ data: response });
            }
        }, 1); // Minimal delay
    });
    return mockWorker;
};
// Mock performance.now() pour des temps déterministes
const mockPerformanceNow = jest.fn();
let mockTime = 1000;
mockPerformanceNow.mockImplementation(() => {
    mockTime += 10; // Increment by 10ms each call
    return mockTime;
});
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow
    },
    writable: true
});
// Mock Worker constructor
Object.defineProperty(global, 'Worker', {
    value: jest.fn().mockImplementation(() => createMockWorker()),
    writable: true
});
describe('Neural Performance Tests (Stabilized)', () => {
    let asyncMesh;
    beforeEach(async () => {
        jest.clearAllMocks();
        mockTime = 1000; // Reset time
        mockPerformanceNow.mockClear();
        asyncMesh = new NeuralMeshAsync_1.NeuralMeshAsync();
        // Wait for worker to be ready
        await new Promise(resolve => setTimeout(resolve, 50));
    });
    afterEach(async () => {
        if (asyncMesh) {
            await asyncMesh.suspend();
        }
    });
    it('should initialize neural network efficiently', async () => {
        expect(asyncMesh).toBeDefined();
        expect(asyncMesh.isReady()).toBe(true);
    });
    it('should track processing time consistently', async () => {
        const startTime = performance.now();
        // Simulate some processing
        await asyncMesh.forwardPass(new Map([['input', 0.5]]));
        const endTime = performance.now();
        // With our mock, this should be predictable
        expect(endTime - startTime).toBeGreaterThan(0);
        expect(endTime - startTime).toBeLessThan(1000); // Reasonable upper bound
    });
    it('should handle mutations efficiently', async () => {
        const startTime = performance.now();
        await asyncMesh.mutate(0.1);
        const endTime = performance.now();
        // Should complete quickly with our mocks
        expect(endTime - startTime).toBeGreaterThan(0);
        expect(endTime - startTime).toBeLessThan(1000);
    });
    it('should report performance metrics', async () => {
        // Perform some operations to generate metrics
        await asyncMesh.forwardPass(new Map([['input', 0.7]]));
        await asyncMesh.mutate(0.05);
        const metrics = await asyncMesh.getPerformanceMetrics();
        expect(metrics).toBeDefined();
        expect(typeof metrics.averageProcessingTime).toBe('number');
        expect(metrics.averageProcessingTime).toBeGreaterThanOrEqual(0);
        expect(typeof metrics.totalOperations).toBe('number');
        expect(metrics.totalOperations).toBeGreaterThanOrEqual(0);
    });
    it('should report memory usage', async () => {
        const metrics = await asyncMesh.getPerformanceMetrics();
        expect(typeof metrics.memoryUsage).toBe('number');
        expect(metrics.memoryUsage).toBeGreaterThanOrEqual(0);
    });
    it('should report CPU usage within valid range', async () => {
        const cpuUsage = await asyncMesh.getCPUUsage();
        expect(typeof cpuUsage).toBe('number');
        expect(cpuUsage).toBeGreaterThanOrEqual(0);
        expect(cpuUsage).toBeLessThanOrEqual(1); // Normalized to 0-1
    });
    it('should handle large networks within reasonable time', async () => {
        // Add many nodes to simulate large network
        for (let i = 0; i < 100; i++) {
            await asyncMesh.addNode(`node_${i}`, 'hidden');
        }
        const startTime = performance.now();
        await asyncMesh.forwardPass(new Map([['input', 0.5]]));
        const endTime = performance.now();
        // Should complete within reasonable time even with large network
        expect(endTime - startTime).toBeLessThan(1000); // 1 second max with mocks
    });
    it('should maintain worker readiness status', async () => {
        expect(asyncMesh.isReady()).toBe(true);
        // Perform operations
        await asyncMesh.forwardPass(new Map([['input', 0.3]]));
        // Should still be ready
        expect(asyncMesh.isReady()).toBe(true);
    });
    it('should handle concurrent operations efficiently', async () => {
        const operations = [
            asyncMesh.forwardPass(new Map([['input1', 0.1]])),
            asyncMesh.forwardPass(new Map([['input2', 0.2]])),
            asyncMesh.forwardPass(new Map([['input3', 0.3]]))
        ];
        const startTime = performance.now();
        await Promise.all(operations);
        const endTime = performance.now();
        // Concurrent operations should not take too long
        expect(endTime - startTime).toBeLessThan(2000);
    });
    it('should clean up resources properly', async () => {
        const worker = asyncMesh.worker;
        expect(worker).toBeDefined();
        await asyncMesh.suspend();
        expect(worker.terminate).toHaveBeenCalled();
        expect(asyncMesh.isReady()).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,