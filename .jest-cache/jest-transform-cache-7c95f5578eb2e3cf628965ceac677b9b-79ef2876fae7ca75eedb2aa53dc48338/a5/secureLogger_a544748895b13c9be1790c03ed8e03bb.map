{"version":3,"names":["cov_x9hf5l2xm","actualCoverage","s","secureLogger_1","require","LogLevel","f","b","exports","SecureLogger","constructor","config","logEntries","level","INFO","enableConsole","isProduction","enableStorage","maxStorageEntries","sensitiveFields","productionMode","getInstance","instance","process","env","NODE_ENV","chrome","runtime","getManifest","sanitizeData","data","sanitizeString","Array","isArray","map","item","sanitized","key","value","Object","entries","isSensitiveField","str","pattern","SENSITIVE_PATTERNS","replace","fieldName","some","field","toLowerCase","includes","formatMessage","message","context","timestamp","Date","toISOString","levelName","contextStr","dataStr","JSON","stringify","shouldLog","log","sanitizedData","undefined","sanitizedMessage","logEntry","now","push","length","slice","formattedMessage","TRACE","DEBUG","debug","console","info","WARN","warn","ERROR","FATAL","error","trace","fatal","setLevel","enable","getLogs","filter","entry","clearLogs","exportLogs","logger","secureLog","bind","secureWarn","secureError","secureDebug"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/secureLogger.ts"],"sourcesContent":["import { SecureLogger } from '@shared/utils/secureLogger';\n/**\n * Système de logging sécurisé\n * Remplace console.log avec protection des données sensibles et gestion des niveaux\n */\n\nexport enum LogLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  FATAL = 5\n}\n\ninterface LogConfig {\n  level: LogLevel;\n  enableConsole: boolean;\n  enableStorage: boolean;\n  maxStorageEntries: number;\n  sensitiveFields: string[];\n  productionMode: boolean;\n}\n\ninterface LogEntry {\n  timestamp: number;\n  level: LogLevel;\n  message: string;\n  data?: any;\n  context?: string | undefined;\n  sanitized: boolean;\n}\n\nexport class SecureLogger {\n  private static instance: SecureLogger;\n  private config: LogConfig;\n  private logEntries: LogEntry[] = [];\n  \n  // Patterns pour détecter les données sensibles\n  private static readonly SENSITIVE_PATTERNS = [\n    /password/i,\n    /token/i,\n    /key/i,\n    /secret/i,\n    /auth/i,\n    /credential/i,\n    /session/i,\n    /cookie/i,\n    /jwt/i,\n    /bearer/i,\n    /api[_-]?key/i,\n    /access[_-]?token/i,\n    /refresh[_-]?token/i,\n    /private[_-]?key/i,\n    /\\b[A-Za-z0-9+/]{32,}={0,2}\\b/, // Base64\n    /\\b[0-9a-f]{32,}\\b/i, // Hex strings\n    /\\b[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}\\b/, // Credit card pattern\n    /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/ // Email\n  ];\n\n  private constructor(config: Partial<LogConfig> = {}) {\n    this.config = {\n      level: LogLevel.INFO,\n      enableConsole: !this.isProduction(),\n      enableStorage: true,\n      maxStorageEntries: 1000,\n      sensitiveFields: ['password', 'token', 'key', 'secret', 'auth'],\n      productionMode: this.isProduction(),\n      ...config\n    };\n  }\n\n  static getInstance(config?: Partial<LogConfig>): SecureLogger {\n    if (!SecureLogger.instance) {\n      SecureLogger.instance = new SecureLogger(config);\n    }\n    return SecureLogger.instance;\n  }\n\n  private isProduction(): boolean {\n    return process.env.NODE_ENV === 'production' || \n           (typeof chrome !== 'undefined' && typeof chrome.runtime?.getManifest === 'function');\n  }\n\n  /**\n   * Sanitise les données pour supprimer les informations sensibles\n   */\n  private sanitizeData(data: any): any {\n    if (typeof data === 'string') {\n      return this.sanitizeString(data);\n    }\n\n    if (typeof data === 'object' && data !== null) {\n      if (Array.isArray(data)) {\n        return data.map(item => this.sanitizeData(item));\n      }\n\n      const sanitized: any = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (this.isSensitiveField(key)) {\n          sanitized[key] = '[REDACTED]';\n        } else {\n          sanitized[key] = this.sanitizeData(value);\n        }\n      }\n      return sanitized;\n    }\n\n    return data;\n  }\n\n  private sanitizeString(str: string): string {\n    let sanitized = str;\n    \n    for (const pattern of SecureLogger.SENSITIVE_PATTERNS) {\n      sanitized = sanitized.replace(pattern, '[REDACTED]');\n    }\n    \n    return sanitized;\n  }\n\n  private isSensitiveField(fieldName: string): boolean {\n    return this.config.sensitiveFields.some(field => \n      fieldName.toLowerCase().includes(field.toLowerCase())\n    );\n  }\n\n  private formatMessage(level: LogLevel, message: string, data?: any, context?: string): string {\n    const timestamp = new Date().toISOString();\n    const levelName = LogLevel[level];\n    const contextStr = context ? ` [${context}]` : '';\n    const dataStr = data ? ` ${JSON.stringify(data, null, 2)}` : '';\n    \n    return `[${timestamp}] ${levelName}${contextStr}: ${message}${dataStr}`;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.config.level;\n  }\n\n  private log(level: LogLevel, message: string, data?: any, context?: string): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const sanitizedData = data ? this.sanitizeData(data) : undefined;\n    const sanitizedMessage = this.sanitizeString(message);\n\n    const logEntry: LogEntry = {\n      timestamp: Date.now(),\n      level,\n      message: sanitizedMessage,\n      data: sanitizedData,\n      context,\n      sanitized: true\n    };\n\n    // Stockage des logs\n    if (this.config.enableStorage) {\n      this.logEntries.push(logEntry);\n      \n      // Limiter le nombre d'entrées en mémoire\n      if (this.logEntries.length > this.config.maxStorageEntries) {\n        this.logEntries = this.logEntries.slice(-this.config.maxStorageEntries);\n      }\n    }\n\n    // Affichage console (seulement en développement par défaut)\n    if (this.config.enableConsole) {\n      const formattedMessage = this.formatMessage(level, sanitizedMessage, sanitizedData, context);\n      \n      switch (level) {\n        case LogLevel.TRACE:\n        case LogLevel.DEBUG:\n          SecureLogger.debug(formattedMessage);\n          break;\n        case LogLevel.INFO:\n          console.info(formattedMessage);\n          break;\n        case LogLevel.WARN:\n          SecureLogger.warn(formattedMessage);\n          break;\n        case LogLevel.ERROR:\n        case LogLevel.FATAL:\n          SecureLogger.error(formattedMessage);\n          break;\n      }\n    }\n  }\n\n  // Méthodes publiques de logging\n  trace(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.TRACE, message, data, context);\n  }\n\n  debug(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.DEBUG, message, data, context);\n  }\n\n  info(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.INFO, message, data, context);\n  }\n\n  warn(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.WARN, message, data, context);\n  }\n\n  error(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.ERROR, message, data, context);\n  }\n\n  fatal(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.FATAL, message, data, context);\n  }\n\n  // Méthodes utilitaires\n  setLevel(level: LogLevel): void {\n    this.config.level = level;\n  }\n\n  enableConsole(enable: boolean): void {\n    this.config.enableConsole = enable;\n  }\n\n  getLogs(level?: LogLevel): LogEntry[] {\n    if (level !== undefined) {\n      return this.logEntries.filter(entry => entry.level >= level);\n    }\n    return [...this.logEntries];\n  }\n\n  clearLogs(): void {\n    this.logEntries = [];\n  }\n\n  exportLogs(): string {\n    return JSON.stringify(this.logEntries, null, 2);\n  }\n}\n\n// Instance globale pour un usage facile\nexport const logger = SecureLogger.getInstance();\n\n// Aliases pour migration facile depuis console.log\nexport const secureLog = logger.info.bind(logger);\nexport const secureWarn = logger.warn.bind(logger);\nexport const secureError = logger.error.bind(logger);\nexport const secureDebug = logger.debug.bind(logger);"],"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","ignoreList":[]}