dedcf72676e00af6738b5f4b63029e48
"use strict";

/* istanbul ignore next */
function cov_1c887z1vvs() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SynapticRouter.ts";
  var hash = "7d79ea105f379c8f75da17cb8559b03642688cea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SynapticRouter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 37
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 15,
          column: 19
        }
      },
      "5": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 19
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "7": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "8": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 33
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "13": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "14": {
        start: {
          line: 45,
          column: 28
        },
        end: {
          line: 45,
          column: 63
        }
      },
      "15": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "16": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 68
        }
      },
      "18": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 16,
            column: 46
          }
        },
        loc: {
          start: {
            line: 16,
            column: 81
          },
          end: {
            line: 19,
            column: 9
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 36
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 33
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 33
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 19
          }
        }, {
          start: {
            line: 44,
            column: 23
          },
          end: {
            line: 44,
            column: 50
          }
        }, {
          start: {
            line: 44,
            column: 54
          },
          end: {
            line: 44,
            column: 72
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SynapticRouter.ts",
      mappings: ";;;AAEA,MAAa,cAAc;IAIzB;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,WAAW;YAAE,OAAO;QAE7B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE;YACtE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,KAAa,EAAE,OAAuB;QACpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,aAAa,CAAC,OAA+B;QACzD,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;YACjE,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAE,OAAe,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,OAAO,CAAE,OAAe,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;IACH,CAAC;IAED,sDAAsD;IACtD,KAAK,CAAC,KAAK,CAAC,OAAgB,EAAE,MAAoB;QAChD,qBAAqB;QACrB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;CACF;AA7DD,wCA6DC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/SynapticRouter.ts"],
      sourcesContent: ["type MessageHandler = (message: MessageEvent | unknown) => Promise<void>;\r\n\r\nexport class SynapticRouter {\r\n  private connections: Map<string, MessageHandler>;\r\n  private isConnected: boolean;\r\n\r\n  constructor() {\r\n    this.connections = new Map();\r\n    this.isConnected = false;\r\n  }\r\n\r\n  /**\r\n   * \xC9tablit les connexions du routeur\r\n   * @returns {Promise<void>}\r\n   */\r\n  async connect(): Promise<void> {\r\n    if (this.isConnected) return;\r\n    \r\n    chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {\r\n      this.handleMessage(message).then(sendResponse);\r\n      return true;\r\n    });\r\n\r\n    this.isConnected = true;\r\n  }\r\n\r\n  /**\r\n   * D\xE9connecte le routeur\r\n   * @returns {Promise<void>}\r\n   */\r\n  async disconnect(): Promise<void> {\r\n    this.connections.clear();\r\n    this.isConnected = false;\r\n  }\r\n\r\n  /**\r\n   * Enregistre un gestionnaire de messages\r\n   * @param {string} route - Identifiant de la route\r\n   * @param {MessageHandler} handler - Fonction de traitement\r\n   */\r\n  registerHandler(route: string, handler: MessageHandler): void {\r\n    this.connections.set(route, handler);\r\n  }\r\n\r\n  /**\r\n   * G\xE8re un message entrant\r\n   * @param {any} message - Message \xE0 traiter\r\n   * @returns {Promise<void>}\r\n   */\r\n  private async handleMessage(message: MessageEvent | unknown): Promise<void> {\r\n    if (message && typeof message === 'object' && 'route' in message) {\r\n      const handler = this.connections.get((message as any).route);\r\n      if (handler) {\r\n        await handler((message as any).payload);\r\n      }\r\n    }\r\n  }\r\n\r\n  // @ts-expect-error Param\xE8tre r\xE9serv\xE9 pour usage futur\r\n  async route(message: Message, sender?: MessagePort): Promise<unknown> {\r\n    // Simplified routing\r\n    return Promise.resolve({ status: 'routed', data: message });\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7d79ea105f379c8f75da17cb8559b03642688cea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1c887z1vvs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1c887z1vvs();
cov_1c887z1vvs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1c887z1vvs().s[1]++;
exports.SynapticRouter = void 0;
class SynapticRouter {
  constructor() {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[0]++;
    cov_1c887z1vvs().s[2]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_1c887z1vvs().s[3]++;
    this.isConnected = false;
  }
  /**
   * Établit les connexions du routeur
   * @returns {Promise<void>}
   */
  async connect() {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[1]++;
    cov_1c887z1vvs().s[4]++;
    if (this.isConnected) {
      /* istanbul ignore next */
      cov_1c887z1vvs().b[0][0]++;
      cov_1c887z1vvs().s[5]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1c887z1vvs().b[0][1]++;
    }
    cov_1c887z1vvs().s[6]++;
    chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {
      /* istanbul ignore next */
      cov_1c887z1vvs().f[2]++;
      cov_1c887z1vvs().s[7]++;
      this.handleMessage(message).then(sendResponse);
      /* istanbul ignore next */
      cov_1c887z1vvs().s[8]++;
      return true;
    });
    /* istanbul ignore next */
    cov_1c887z1vvs().s[9]++;
    this.isConnected = true;
  }
  /**
   * Déconnecte le routeur
   * @returns {Promise<void>}
   */
  async disconnect() {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[3]++;
    cov_1c887z1vvs().s[10]++;
    this.connections.clear();
    /* istanbul ignore next */
    cov_1c887z1vvs().s[11]++;
    this.isConnected = false;
  }
  /**
   * Enregistre un gestionnaire de messages
   * @param {string} route - Identifiant de la route
   * @param {MessageHandler} handler - Fonction de traitement
   */
  registerHandler(route, handler) {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[4]++;
    cov_1c887z1vvs().s[12]++;
    this.connections.set(route, handler);
  }
  /**
   * Gère un message entrant
   * @param {any} message - Message à traiter
   * @returns {Promise<void>}
   */
  async handleMessage(message) {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[5]++;
    cov_1c887z1vvs().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_1c887z1vvs().b[2][0]++, message) &&
    /* istanbul ignore next */
    (cov_1c887z1vvs().b[2][1]++, typeof message === 'object') &&
    /* istanbul ignore next */
    (cov_1c887z1vvs().b[2][2]++, 'route' in message)) {
      /* istanbul ignore next */
      cov_1c887z1vvs().b[1][0]++;
      const handler =
      /* istanbul ignore next */
      (cov_1c887z1vvs().s[14]++, this.connections.get(message.route));
      /* istanbul ignore next */
      cov_1c887z1vvs().s[15]++;
      if (handler) {
        /* istanbul ignore next */
        cov_1c887z1vvs().b[3][0]++;
        cov_1c887z1vvs().s[16]++;
        await handler(message.payload);
      } else
      /* istanbul ignore next */
      {
        cov_1c887z1vvs().b[3][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1c887z1vvs().b[1][1]++;
    }
  }
  // @ts-expect-error Paramètre réservé pour usage futur
  async route(message, sender) {
    /* istanbul ignore next */
    cov_1c887z1vvs().f[6]++;
    cov_1c887z1vvs().s[17]++;
    // Simplified routing
    return Promise.resolve({
      status: 'routed',
      data: message
    });
  }
}
/* istanbul ignore next */
cov_1c887z1vvs().s[18]++;
exports.SynapticRouter = SynapticRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWM4ODd6MXZ2cyIsImFjdHVhbENvdmVyYWdlIiwicyIsIlN5bmFwdGljUm91dGVyIiwiY29uc3RydWN0b3IiLCJmIiwiY29ubmVjdGlvbnMiLCJNYXAiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3QiLCJiIiwiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibWVzc2FnZSIsIl9zZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJoYW5kbGVNZXNzYWdlIiwidGhlbiIsImRpc2Nvbm5lY3QiLCJjbGVhciIsInJlZ2lzdGVySGFuZGxlciIsInJvdXRlIiwiaGFuZGxlciIsInNldCIsImdldCIsInBheWxvYWQiLCJzZW5kZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInN0YXR1cyIsImRhdGEiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvc3JjL2NvcmUvU3luYXB0aWNSb3V0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZSBNZXNzYWdlSGFuZGxlciA9IChtZXNzYWdlOiBNZXNzYWdlRXZlbnQgfCB1bmtub3duKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG5cclxuZXhwb3J0IGNsYXNzIFN5bmFwdGljUm91dGVyIHtcclxuICBwcml2YXRlIGNvbm5lY3Rpb25zOiBNYXA8c3RyaW5nLCBNZXNzYWdlSGFuZGxlcj47XHJcbiAgcHJpdmF0ZSBpc0Nvbm5lY3RlZDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogw4l0YWJsaXQgbGVzIGNvbm5leGlvbnMgZHUgcm91dGV1clxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIGFzeW5jIGNvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIF9zZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xyXG4gICAgICB0aGlzLmhhbmRsZU1lc3NhZ2UobWVzc2FnZSkudGhlbihzZW5kUmVzcG9uc2UpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRMOpY29ubmVjdGUgbGUgcm91dGV1clxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIGFzeW5jIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zLmNsZWFyKCk7XHJcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbnJlZ2lzdHJlIHVuIGdlc3Rpb25uYWlyZSBkZSBtZXNzYWdlc1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb3V0ZSAtIElkZW50aWZpYW50IGRlIGxhIHJvdXRlXHJcbiAgICogQHBhcmFtIHtNZXNzYWdlSGFuZGxlcn0gaGFuZGxlciAtIEZvbmN0aW9uIGRlIHRyYWl0ZW1lbnRcclxuICAgKi9cclxuICByZWdpc3RlckhhbmRsZXIocm91dGU6IHN0cmluZywgaGFuZGxlcjogTWVzc2FnZUhhbmRsZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuY29ubmVjdGlvbnMuc2V0KHJvdXRlLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEfDqHJlIHVuIG1lc3NhZ2UgZW50cmFudFxyXG4gICAqIEBwYXJhbSB7YW55fSBtZXNzYWdlIC0gTWVzc2FnZSDDoCB0cmFpdGVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVNZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2VFdmVudCB8IHVua25vd24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmIChtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlID09PSAnb2JqZWN0JyAmJiAncm91dGUnIGluIG1lc3NhZ2UpIHtcclxuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KChtZXNzYWdlIGFzIGFueSkucm91dGUpO1xyXG4gICAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgIGF3YWl0IGhhbmRsZXIoKG1lc3NhZ2UgYXMgYW55KS5wYXlsb2FkKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXJhbcOodHJlIHLDqXNlcnbDqSBwb3VyIHVzYWdlIGZ1dHVyXHJcbiAgYXN5bmMgcm91dGUobWVzc2FnZTogTWVzc2FnZSwgc2VuZGVyPzogTWVzc2FnZVBvcnQpOiBQcm9taXNlPHVua25vd24+IHtcclxuICAgIC8vIFNpbXBsaWZpZWQgcm91dGluZ1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHN0YXR1czogJ3JvdXRlZCcsIGRhdGE6IG1lc3NhZ2UgfSk7XHJcbiAgfVxyXG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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