{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/securityMonitor.test.ts","mappings":";;;;;AAAA,4CAAoB;AACpB,gDAAwB;AACxB,uDAA6D;AAE7D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAC3D,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC;YAAE,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,IAAA,2BAAS,EAAC,WAAW,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,YAAE,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAAE,IAAA,2BAAS,EAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,YAAE,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAAE,IAAA,2BAAS,EAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QAChE,IAAA,+BAAa,EAAC,SAAS,CAAC,CAAC;QACzB,wGAAwG;QACxG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/core/securityMonitor.test.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport { logAccess, resetAttempts } from './securityMonitor';\r\n\r\ndescribe('securityMonitor', () => {\r\n  const logPath = path.join(__dirname, '../../security.log');\r\n  beforeEach(() => {\r\n    if (fs.existsSync(logPath)) fs.unlinkSync(logPath);\r\n  });\r\n\r\n  it('logAccess écrit dans le log', () => {\r\n    logAccess('127.0.0.1', '/test', 200);\r\n    const content = fs.readFileSync(logPath, 'utf-8');\r\n    expect(content).toMatch(/127.0.0.1/);\r\n    expect(content).toMatch(/200/);\r\n  });\r\n\r\n  it('détecte le brute force', () => {\r\n    for (let i = 0; i < 6; i++) logAccess('1.2.3.4', '/admin', 403);\r\n    const content = fs.readFileSync(logPath, 'utf-8');\r\n    expect(content).toMatch(/ALERT: Brute force/);\r\n  });\r\n\r\n  it('resetAttempts remet à zéro', () => {\r\n    for (let i = 0; i < 6; i++) logAccess('5.6.7.8', '/admin', 403);\r\n    resetAttempts('5.6.7.8');\r\n    // On ne peut pas tester l'état interne, mais on vérifie que la fonction existe et ne jette pas d'erreur\r\n    expect(true).toBe(true);\r\n  });\r\n}); "],"version":3}