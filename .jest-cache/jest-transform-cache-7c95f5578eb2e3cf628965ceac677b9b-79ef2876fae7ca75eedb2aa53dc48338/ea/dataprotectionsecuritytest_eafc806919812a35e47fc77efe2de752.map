{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/data-protection.security.test.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/security/data-protection.security.test.ts"],"sourcesContent":["/**\n * Tests de protection des données et conformité RGPD\n * Améliore la couverture de sécurité selon audit\n */\nimport { logger } from '@/shared/utils/secureLogger';\n\n// Mock des classes de protection des données\nclass DataProtectionManager {\n  private readonly dataRetentionPeriods = {\n    logs: 7 * 24 * 60 * 60 * 1000, // 7 days\n    sessionData: 30 * 24 * 60 * 60 * 1000, // 30 days\n    userData: 365 * 24 * 60 * 60 * 1000, // 1 year\n    analyticsData: 90 * 24 * 60 * 60 * 1000 // 90 days\n  };\n\n  anonymizePersonalData(data: any): any {\n    if (typeof data !== 'object' || data === null) {\n      return data;\n    }\n\n    const sensitiveFields = ['email', 'userId', 'sessionId', 'ipAddress', 'name'];\n    const anonymized = { ...data };\n\n    for (const [key, value] of Object.entries(anonymized)) {\n      if (sensitiveFields.includes(key.toLowerCase())) {\n        if (typeof value === 'string') {\n          // Replace with anonymized version\n          anonymized[key] = this.anonymizeString(value);\n        }\n      } else if (typeof value === 'object') {\n        // Recursively anonymize nested objects\n        anonymized[key] = this.anonymizePersonalData(value);\n      }\n    }\n\n    return anonymized;\n  }\n\n  private anonymizeString(value: string): string {\n    if (this.isEmail(value)) {\n      return this.anonymizeEmail(value);\n    } else if (this.isUserId(value)) {\n      return this.anonymizeUserId(value);\n    } else if (this.isSessionId(value)) {\n      return this.anonymizeSessionId(value);\n    } else if (this.isIpAddress(value)) {\n      return this.anonymizeIpAddress(value);\n    }\n    \n    // Generic anonymization for other sensitive strings\n    return value.length > 4 \n      ? value.substring(0, 2) + '*'.repeat(value.length - 4) + value.substring(value.length - 2)\n      : '*'.repeat(value.length);\n  }\n\n  private isEmail(value: string): boolean {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n  }\n\n  private isUserId(value: string): boolean {\n    return /^(user|usr|u)-?[a-zA-Z0-9]+$/i.test(value);\n  }\n\n  private isSessionId(value: string): boolean {\n    return /^[a-f0-9]{32,}$/i.test(value);\n  }\n\n  private isIpAddress(value: string): boolean {\n    return /^(\\d{1,3}\\.){3}\\d{1,3}$/.test(value) || \n           /^([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}$/i.test(value);\n  }\n\n  private anonymizeEmail(email: string): string {\n    const [local, domain] = email.split('@');\n    const anonymizedLocal = local.length > 2 \n      ? local[0] + '*'.repeat(local.length - 2) + local[local.length - 1]\n      : '*'.repeat(local.length);\n    return `${anonymizedLocal}@${domain}`;\n  }\n\n  private anonymizeUserId(userId: string): string {\n    return userId.substring(0, 4) + '*'.repeat(Math.max(0, userId.length - 4));\n  }\n\n  private anonymizeSessionId(sessionId: string): string {\n    return sessionId.substring(0, 8) + '*'.repeat(Math.max(0, sessionId.length - 8));\n  }\n\n  private anonymizeIpAddress(ip: string): string {\n    if (ip.includes('.')) {\n      // IPv4\n      const parts = ip.split('.');\n      return `${parts[0]}.${parts[1]}.*.***`;\n    } else if (ip.includes(':')) {\n      // IPv6\n      const parts = ip.split(':');\n      return parts.slice(0, 4).join(':') + ':****:****:****:****';\n    }\n    return '***.***.***.**';\n  }\n\n  validateDataRetention(dataType: string, createdAt: number): boolean {\n    const retentionPeriod = this.dataRetentionPeriods[dataType as keyof typeof this.dataRetentionPeriods];\n    if (!retentionPeriod) {\n      logger.warn('Unknown data type for retention validation', { dataType }, 'data-protection');\n      return false;\n    }\n\n    const now = Date.now();\n    const isWithinRetention = (now - createdAt) <= retentionPeriod;\n    \n    if (!isWithinRetention) {\n      logger.info('Data retention period exceeded', { \n        dataType, \n        age: now - createdAt,\n        retentionPeriod \n      }, 'data-protection');\n    }\n    \n    return isWithinRetention;\n  }\n\n  async exportUserData(userId: string): Promise<UserDataExport> {\n    // Simulate data export for GDPR compliance\n    const userData = {\n      userId,\n      profile: {\n        createdAt: Date.now() - 30 * 24 * 60 * 60 * 1000, // 30 days ago\n        lastLogin: Date.now() - 24 * 60 * 60 * 1000, // 24 hours ago\n        preferences: {\n          theme: 'dark',\n          notifications: true\n        }\n      },\n      organisms: [\n        {\n          id: 'org-1',\n          name: 'Neural Entity Alpha',\n          createdAt: Date.now() - 7 * 24 * 60 * 60 * 1000,\n          traits: ['intelligence', 'adaptation']\n        }\n      ],\n      sessions: [\n        {\n          id: 'session-1',\n          createdAt: Date.now() - 2 * 60 * 60 * 1000, // 2 hours ago\n          duration: 3600000 // 1 hour\n        }\n      ]\n    };\n\n    return {\n      exportedAt: Date.now(),\n      format: 'json',\n      data: userData,\n      hash: await this.calculateDataHash(userData)\n    };\n  }\n\n  async deleteUserData(userId: string, dataTypes?: string[]): Promise<DataDeletionResult> {\n    // Simulate data deletion for GDPR compliance\n    const deletionLog = {\n      userId,\n      requestedAt: Date.now(),\n      dataTypes: dataTypes || ['all'],\n      status: 'completed' as const\n    };\n\n    // In real implementation, this would actually delete the data\n    logger.info('User data deletion completed', { \n      userId: this.anonymizeUserId(userId),\n      dataTypes: deletionLog.dataTypes\n    }, 'data-protection');\n\n    return deletionLog;\n  }\n\n  private async calculateDataHash(data: any): Promise<string> {\n    const encoder = new TextEncoder();\n    const dataString = JSON.stringify(data);\n    const dataBuffer = encoder.encode(dataString);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n}\n\ninterface UserDataExport {\n  exportedAt: number;\n  format: string;\n  data: any;\n  hash: string;\n}\n\ninterface DataDeletionResult {\n  userId: string;\n  requestedAt: number;\n  dataTypes: string[];\n  status: 'pending' | 'completed' | 'failed';\n}\n\ndescribe('Data Protection Security Tests', () => {\n  let dataProtectionManager: DataProtectionManager;\n\n  beforeEach(() => {\n    dataProtectionManager = new DataProtectionManager();\n  });\n\n  describe('Personal Data Anonymization', () => {\n    it('should anonymize email addresses correctly', () => {\n      const testData = {\n        userEmail: 'user@example.com',\n        contactEmail: 'test.user+tag@domain.co.uk',\n        adminEmail: 'admin@company.org'\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      expect(anonymized.userEmail).toMatch(/^u\\*+r@example\\.com$/);\n      expect(anonymized.contactEmail).toMatch(/^t\\*+g@domain\\.co\\.uk$/);\n      expect(anonymized.adminEmail).toMatch(/^a\\*+n@company\\.org$/);\n      \n      // Original emails should not be visible\n      expect(anonymized.userEmail).not.toBe(testData.userEmail);\n      expect(anonymized.contactEmail).not.toBe(testData.contactEmail);\n      expect(anonymized.adminEmail).not.toBe(testData.adminEmail);\n    });\n\n    it('should anonymize user IDs securely', () => {\n      const testData = {\n        userId: 'user-12345678',\n        authorId: 'usr_abcdefgh',\n        sessionUserId: 'u-xyz789'\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      expect(anonymized.userId).toBe('user********');\n      expect(anonymized.authorId).toBe('usr_*******');\n      expect(anonymized.sessionUserId).toBe('u-xy***');\n      \n      // Should not expose original IDs\n      expect(anonymized.userId).not.toContain('12345678');\n      expect(anonymized.authorId).not.toContain('abcdefgh');\n      expect(anonymized.sessionUserId).not.toContain('789');\n    });\n\n    it('should anonymize session IDs properly', () => {\n      const testData = {\n        sessionId: 'a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234',\n        oldSessionId: 'f1e2d3c4b5a6987654321098765432109876543210fedcba0987654321098765'\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      expect(anonymized.sessionId).toMatch(/^a1b2c3d4\\*+$/);\n      expect(anonymized.oldSessionId).toMatch(/^f1e2d3c4\\*+$/);\n      \n      // Should not expose full session IDs\n      expect(anonymized.sessionId.length).toBeLessThan(testData.sessionId.length);\n      expect(anonymized.oldSessionId.length).toBeLessThan(testData.oldSessionId.length);\n    });\n\n    it('should anonymize IP addresses correctly', () => {\n      const testData = {\n        clientIp: '192.168.1.100',\n        serverIp: '10.0.0.50',\n        publicIp: '203.0.113.42',\n        ipv6Address: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      // IPv4 should show first two octets only\n      expect(anonymized.clientIp).toBe('192.168.*.**');\n      expect(anonymized.serverIp).toBe('10.0.*.**');\n      expect(anonymized.publicIp).toBe('203.0.*.**');\n      \n      // IPv6 should show first 4 groups only\n      expect(anonymized.ipv6Address).toBe('2001:0db8:85a3:0000:****:****:****:****');\n    });\n\n    it('should handle nested objects recursively', () => {\n      const testData = {\n        user: {\n          profile: {\n            email: 'nested@example.com',\n            userId: 'user-nested123'\n          },\n          session: {\n            sessionId: 'abcd1234567890123456789012345678',\n            ipAddress: '172.16.0.42'\n          }\n        },\n        metadata: {\n          requestIp: '10.1.1.1',\n          userAgent: 'Mozilla/5.0...'\n        }\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      expect(anonymized.user.profile.email).toMatch(/^n\\*+d@example\\.com$/);\n      expect(anonymized.user.profile.userId).toBe('user*********');\n      expect(anonymized.user.session.sessionId).toBe('abcd1234*************************');\n      expect(anonymized.user.session.ipAddress).toBe('172.16.*.**');\n      expect(anonymized.metadata.requestIp).toBe('10.1.*.**');\n      expect(anonymized.metadata.userAgent).toBe('Mozilla/5.0...');\n    });\n\n    it('should handle edge cases safely', () => {\n      const testData = {\n        emptyString: '',\n        nullValue: null,\n        undefinedValue: undefined,\n        shortUserId: 'u1',\n        shortEmail: 'a@b.c',\n        nonStringId: 12345\n      };\n\n      const anonymized = dataProtectionManager.anonymizePersonalData(testData);\n\n      expect(anonymized.emptyString).toBe('');\n      expect(anonymized.nullValue).toBe(null);\n      expect(anonymized.undefinedValue).toBe(undefined);\n      expect(anonymized.shortUserId).toBe('**');\n      expect(anonymized.shortEmail).toBe('*@b.c');\n      expect(anonymized.nonStringId).toBe(12345); // Numbers should remain unchanged\n    });\n  });\n\n  describe('Data Retention Compliance', () => {\n    it('should validate data retention periods correctly', () => {\n      const now = Date.now();\n      const oneDayAgo = now - 24 * 60 * 60 * 1000;\n      const oneWeekAgo = now - 7 * 24 * 60 * 60 * 1000;\n      const oneMonthAgo = now - 30 * 24 * 60 * 60 * 1000;\n      const oneYearAgo = now - 365 * 24 * 60 * 60 * 1000;\n\n      // Recent logs should be valid\n      expect(dataProtectionManager.validateDataRetention('logs', oneDayAgo)).toBe(true);\n      \n      // Old logs should be invalid\n      expect(dataProtectionManager.validateDataRetention('logs', oneWeekAgo - 1000)).toBe(false);\n      \n      // Recent session data should be valid\n      expect(dataProtectionManager.validateDataRetention('sessionData', oneWeekAgo)).toBe(true);\n      \n      // Old session data should be invalid\n      expect(dataProtectionManager.validateDataRetention('sessionData', oneMonthAgo - 1000)).toBe(false);\n      \n      // Recent user data should be valid\n      expect(dataProtectionManager.validateDataRetention('userData', oneMonthAgo)).toBe(true);\n      \n      // Old user data should be invalid\n      expect(dataProtectionManager.validateDataRetention('userData', oneYearAgo - 1000)).toBe(false);\n    });\n\n    it('should handle unknown data types safely', () => {\n      const now = Date.now();\n      const oneDayAgo = now - 24 * 60 * 60 * 1000;\n\n      const result = dataProtectionManager.validateDataRetention('unknownType', oneDayAgo);\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('GDPR Data Export', () => {\n    it('should export user data in required format', async () => {\n      const userId = 'user-test123';\n      const exportResult = await dataProtectionManager.exportUserData(userId);\n\n      expect(exportResult).toHaveProperty('exportedAt');\n      expect(exportResult).toHaveProperty('format', 'json');\n      expect(exportResult).toHaveProperty('data');\n      expect(exportResult).toHaveProperty('hash');\n      \n      // Export should contain user data\n      expect(exportResult.data).toHaveProperty('userId', userId);\n      expect(exportResult.data).toHaveProperty('profile');\n      expect(exportResult.data).toHaveProperty('organisms');\n      expect(exportResult.data).toHaveProperty('sessions');\n      \n      // Hash should be present and valid\n      expect(exportResult.hash).toMatch(/^[a-f0-9]{64}$/);\n    });\n\n    it('should generate consistent hashes for same data', async () => {\n      const userId = 'user-test123';\n      \n      const export1 = await dataProtectionManager.exportUserData(userId);\n      const export2 = await dataProtectionManager.exportUserData(userId);\n      \n      // Different export times but should have same data hash if data unchanged\n      expect(export1.hash).toBe(export2.hash);\n    });\n  });\n\n  describe('GDPR Data Deletion', () => {\n    it('should delete all user data by default', async () => {\n      const userId = 'user-delete123';\n      \n      const deletionResult = await dataProtectionManager.deleteUserData(userId);\n      \n      expect(deletionResult).toHaveProperty('userId', userId);\n      expect(deletionResult).toHaveProperty('status', 'completed');\n      expect(deletionResult).toHaveProperty('dataTypes', ['all']);\n      expect(deletionResult).toHaveProperty('requestedAt');\n      \n      // Should have been requested recently\n      expect(Date.now() - deletionResult.requestedAt).toBeLessThan(1000);\n    });\n\n    it('should delete specific data types when requested', async () => {\n      const userId = 'user-partial-delete';\n      const dataTypes = ['sessions', 'logs'];\n      \n      const deletionResult = await dataProtectionManager.deleteUserData(userId, dataTypes);\n      \n      expect(deletionResult.dataTypes).toEqual(dataTypes);\n      expect(deletionResult.status).toBe('completed');\n    });\n\n    it('should log deletion without exposing sensitive data', async () => {\n      const logSpy = jest.spyOn(logger, 'info');\n      \n      const userId = 'user-sensitive123';\n      await dataProtectionManager.deleteUserData(userId);\n      \n      // Verify logging occurred\n      expect(logSpy).toHaveBeenCalled();\n      \n      // Check that sensitive data was anonymized in logs\n      const logCall = logSpy.mock.calls.find(call => \n        call[0].includes('User data deletion completed')\n      );\n      \n      if (logCall && logCall[1]) {\n        const logData = JSON.stringify(logCall[1]);\n        expect(logData).not.toContain(userId); // Full userId should not be in logs\n        expect(logData).toContain('user*'); // Should contain anonymized version\n      }\n      \n      logSpy.mockRestore();\n    });\n  });\n\n  describe('Data Protection Error Handling', () => {\n    it('should handle malformed data gracefully', () => {\n      const malformedData = [\n        null,\n        undefined,\n        'string instead of object',\n        123,\n        [],\n        new Date(),\n        Symbol('test'),\n        () => {}\n      ];\n\n      malformedData.forEach(data => {\n        const result = dataProtectionManager.anonymizePersonalData(data);\n        expect(result).toBeDefined();\n        // Should not throw and should return the input for non-objects\n        if (typeof data !== 'object' || data === null) {\n          expect(result).toBe(data);\n        }\n      });\n    });\n\n    it('should handle circular references safely', () => {\n      const circularData: any = { name: 'test' };\n      circularData.self = circularData;\n\n      // This should not cause infinite recursion\n      expect(() => {\n        dataProtectionManager.anonymizePersonalData(circularData);\n      }).not.toThrow();\n    });\n  });\n\n  describe('Data Integrity Protection', () => {\n    it('should detect data tampering through hashing', async () => {\n      const userData = {\n        userId: 'user-integrity-test',\n        profile: { email: 'test@example.com' }\n      };\n\n      const export1 = await dataProtectionManager.exportUserData('user-integrity-test');\n      \n      // Simulate data modification\n      const modifiedData = { ...userData, profile: { ...userData.profile, email: 'modified@example.com' } };\n      \n      // Calculate hash manually to simulate tampering detection\n      const encoder = new TextEncoder();\n      const originalDataString = JSON.stringify(export1.data);\n      const modifiedDataString = JSON.stringify(modifiedData);\n      \n      const originalHash = await crypto.subtle.digest('SHA-256', encoder.encode(originalDataString));\n      const modifiedHash = await crypto.subtle.digest('SHA-256', encoder.encode(modifiedDataString));\n      \n      // Hashes should be different\n      expect(new Uint8Array(originalHash)).not.toEqual(new Uint8Array(modifiedHash));\n    });\n  });\n});"],"version":3}