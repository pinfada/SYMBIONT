{"version":3,"names":["cov_2c31ar482u","actualCoverage","s","secureRandom_1","require","secureLogger_1","CollectiveIntelligence","constructor","onCollectiveMutation","f","proposals","Map","votes","peerId","SecureRandom","random","toString","substr","b","proposeMutation","mutation","proposerId","has","id","set","Set","get","push","vote","SecureLogger","info","mutationId","voterId","add","aggregateVotes","size","triggerCollectiveMutation","totalPeers","consensus","Math","max","floor","exports"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/collective-intelligence.ts"],"sourcesContent":["// social/collective-intelligence.ts\r\n// Intelligence collective émergente (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\nimport { SecureLogger } from '@shared/utils/secureLogger';\n\r\nexport class CollectiveIntelligence {\r\n  private proposals: Map<string, any[]> = new Map()\r\n  private votes: Map<string, Set<string>> = new Map()\r\n  // @ts-expect-error Peer ID réservé pour usage futur\r\n  private peerId: string\r\n  private onCollectiveMutation: ((mutationId: string) => void) | null = null\r\n\r\n  constructor(onCollectiveMutation?: (mutationId: string) => void) {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    if (onCollectiveMutation) this.onCollectiveMutation = onCollectiveMutation\r\n  }\r\n\r\n  proposeMutation(mutation: any, proposerId: string) {\r\n    if (!this.proposals.has(mutation.id)) {\r\n      this.proposals.set(mutation.id, [])\r\n      this.votes.set(mutation.id, new Set())\r\n    }\r\n    this.proposals.get(mutation.id)!.push({ mutation, proposerId })\r\n    // Vote automatiquement pour sa propre proposition\r\n    this.vote(mutation.id, proposerId)\r\n    SecureLogger.info(`[Collective] Mutation proposée par ${proposerId}`)\r\n  }\r\n\r\n  vote(mutationId: string, voterId: string) {\r\n    if (!this.votes.has(mutationId)) this.votes.set(mutationId, new Set())\r\n    this.votes.get(mutationId)!.add(voterId)\r\n    SecureLogger.info(`[Collective] Vote de ${voterId} pour mutation ${mutationId}`)\r\n  }\r\n\r\n  aggregateVotes(mutationId: string): number {\r\n    return this.votes.get(mutationId)?.size || 0\r\n  }\r\n\r\n  triggerCollectiveMutation(mutationId: string, totalPeers: number): boolean {\r\n    const votes = this.aggregateVotes(mutationId)\r\n    const consensus = votes > Math.max(1, Math.floor(totalPeers / 2))\r\n    if (consensus) {\r\n      SecureLogger.info(`[Collective] Mutation collective déclenchée : ${mutationId}`)\r\n      if (this.onCollectiveMutation) this.onCollectiveMutation(mutationId)\r\n      return true\r\n    } else {\r\n      SecureLogger.info(`[Collective] Consensus non atteint pour ${mutationId} (${votes}/${totalPeers})`)\r\n      return false\r\n    }\r\n  }\r\n} "],"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","ignoreList":[]}