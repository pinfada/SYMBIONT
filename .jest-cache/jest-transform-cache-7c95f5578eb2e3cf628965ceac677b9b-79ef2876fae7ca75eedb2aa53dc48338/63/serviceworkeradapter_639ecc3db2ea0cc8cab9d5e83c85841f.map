{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/service-worker-adapter.ts","mappings":"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","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/background/service-worker-adapter.ts"],"sourcesContent":["// background/service-worker-adapter.ts\r\n// Adaptation du background script SYMBIONT pour Service Worker\r\n\r\n// 1. Remplacement de window.localStorage par chrome.storage\r\nclass ServiceWorkerStorage {\r\n  private static instance: ServiceWorkerStorage;\r\n  \r\n  static getInstance(): ServiceWorkerStorage {\r\n    if (!this.instance) {\r\n      this.instance = new ServiceWorkerStorage();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  async setItem(key: string, value: string): Promise<void> {\r\n    try {\r\n      await chrome.storage.local.set({ [key]: value });\r\n    } catch (error) {\r\n      console.error('Storage error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getItem(key: string): Promise<string | null> {\r\n    try {\r\n      const result = await chrome.storage.local.get([key]);\r\n      return result[key] || null;\r\n    } catch (error) {\r\n      console.error('Storage retrieval error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async removeItem(key: string): Promise<void> {\r\n    try {\r\n      await chrome.storage.local.remove([key]);\r\n    } catch (error) {\r\n      console.error('Storage removal error:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// 2. Remplacement de BroadcastChannel par chrome.runtime messaging\r\nclass ServiceWorkerMessageChannel {\r\n  private handlers: Map<string, Function[]> = new Map();\r\n  private channelName: string;\r\n\r\n  constructor(channelName: string) {\r\n    this.channelName = channelName;\r\n    this.setupMessageListener();\r\n  }\r\n\r\n  private setupMessageListener(): void {\r\n    // Écouter les messages du runtime (depuis content scripts)\r\n    // @ts-expect-error Paramètres sender et sendResponse réservés pour usage futur\r\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n      if (message.type === 'CRYPTO_OPERATION') {\r\n        // Traitement spécial pour les opérations crypto\r\n        return true;\r\n      }\r\n      \r\n      if (message.channel === this.channelName) {\r\n        this.handleMessage(message.data);\r\n        return true;\r\n      }\r\n      \r\n      return false; // Ajout du return pour tous les chemins\r\n    });\r\n  }\r\n\r\n  // Fonction pour nettoyer les messages avant sérialisation\r\n  private serializeMessageData(data: any): any {\r\n    try {\r\n      return JSON.parse(JSON.stringify(data));\r\n    } catch (error) {\r\n      console.warn('Message serialization issue, cleaning object:', error);\r\n      return this.cleanObjectForSerialization(data);\r\n    }\r\n  }\r\n\r\n  private cleanObjectForSerialization(obj: any, seen = new WeakSet()): any {\r\n    if (obj === null || obj === undefined) return obj;\r\n    if (typeof obj === 'function') return '[Function]';\r\n    if (obj instanceof Date) return obj.toISOString();\r\n    if (obj instanceof Error) return { name: obj.name, message: obj.message, stack: obj.stack };\r\n    \r\n    // Objets WebGL, DOM, React non-sérialisables\r\n    if (obj instanceof WebGLRenderingContext || \r\n        obj instanceof WebGL2RenderingContext ||\r\n        obj instanceof HTMLElement ||\r\n        obj instanceof WebGLProgram ||\r\n        obj instanceof WebGLBuffer ||\r\n        obj instanceof WebGLTexture ||\r\n        (obj && obj.$$typeof) || // React elements\r\n        (obj && obj.__reactFiber) || // React fiber\r\n        (obj && obj._owner) // React internal\r\n    ) {\r\n      return '[Non-serializable Object]';\r\n    }\r\n    \r\n    if (typeof obj !== 'object') return obj;\r\n    \r\n    // Vérification des références circulaires\r\n    if (seen.has(obj)) {\r\n      return '[Circular Reference]';\r\n    }\r\n    seen.add(obj);\r\n    \r\n    if (Array.isArray(obj)) return obj.map(item => this.cleanObjectForSerialization(item, seen));\r\n    \r\n    const cleaned: any = {};\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        try {\r\n          cleaned[key] = this.cleanObjectForSerialization(obj[key], seen);\r\n        } catch (error) {\r\n          // Supprime les logs verbeux\r\n          cleaned[key] = '[Non-serializable]';\r\n        }\r\n      }\r\n    }\r\n    return cleaned;\r\n  }\r\n\r\n  postMessage(data: any): void {\r\n    // Nettoyer les données avant envoi\r\n    const cleanData = this.serializeMessageData(data);\r\n    \r\n    // Envoyer à tous les onglets\r\n    chrome.tabs.query({}, (tabs) => {\r\n      tabs.forEach(tab => {\r\n        if (tab.id) {\r\n          chrome.tabs.sendMessage(tab.id, {\r\n            channel: this.channelName,\r\n            data: cleanData\r\n          }).catch(() => {\r\n            // Ignorer les erreurs pour les onglets non accessibles\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // Envoyer aux autres service workers via storage\r\n    this.broadcastViaStorage(cleanData);\r\n  }\r\n\r\n  private async broadcastViaStorage(data: any): Promise<void> {\r\n    const storage = ServiceWorkerStorage.getInstance();\r\n    const timestamp = Date.now();\r\n    const messageKey = `broadcast_${this.channelName}_${timestamp}`;\r\n    \r\n    await storage.setItem(messageKey, JSON.stringify({\r\n      data,\r\n      timestamp,\r\n      channel: this.channelName\r\n    }));\r\n\r\n    // Auto-nettoyage après 30 secondes\r\n    setTimeout(async () => {\r\n      await storage.removeItem(messageKey);\r\n    }, 30000);\r\n  }\r\n\r\n  private handleMessage(data: any): void {\r\n    const handlers = this.handlers.get('message') || [];\r\n    handlers.forEach(handler => {\r\n      try {\r\n        handler({ data });\r\n      } catch (error) {\r\n        console.error('Message handler error:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  set onmessage(handler: (event: { data: any }) => void) {\r\n    if (!this.handlers.has('message')) {\r\n      this.handlers.set('message', []);\r\n    }\r\n    this.handlers.get('message')!.push(handler);\r\n  }\r\n}\r\n\r\n// 3. Adaptation des APIs crypto pour Service Worker\r\nclass ServiceWorkerCrypto {\r\n  private encryptionKey = \"symbiont-key-demo\";\r\n\r\n  async encryptSensitiveData(data: any): Promise<string> {\r\n    try {\r\n      // Utiliser les Crypto APIs natives du Service Worker\r\n      const encoder = new TextEncoder();\r\n      const keyMaterial = encoder.encode(this.encryptionKey.padEnd(32, '0').slice(0, 32));\r\n      \r\n      const key = await crypto.subtle.importKey(\r\n        'raw',\r\n        keyMaterial,\r\n        { name: 'AES-GCM' },\r\n        false,\r\n        ['encrypt']\r\n      );\r\n\r\n      const iv = crypto.getRandomValues(new Uint8Array(12));\r\n      const encodedData = encoder.encode(JSON.stringify(data));\r\n      \r\n      const encryptedData = await crypto.subtle.encrypt(\r\n        { name: 'AES-GCM', iv },\r\n        key,\r\n        encodedData\r\n      );\r\n\r\n      const combined = new Uint8Array(iv.length + encryptedData.byteLength);\r\n      combined.set(iv, 0);\r\n      combined.set(new Uint8Array(encryptedData), iv.length);\r\n      \r\n      return btoa(String.fromCharCode(...combined));\r\n    } catch (error) {\r\n      console.error('Encryption failed, using fallback:', error);\r\n      // Fallback simple pour les cas d'urgence\r\n      const jsonString = JSON.stringify(data);\r\n      return btoa(unescape(encodeURIComponent(jsonString)));\r\n    }\r\n  }\r\n\r\n  async decryptSensitiveData(encryptedData: string): Promise<any> {\r\n    try {\r\n      const combined = Uint8Array.from(atob(encryptedData), c => c.charCodeAt(0));\r\n      const iv = combined.slice(0, 12);\r\n      const encrypted = combined.slice(12);\r\n\r\n      const encoder = new TextEncoder();\r\n      const keyMaterial = encoder.encode(this.encryptionKey.padEnd(32, '0').slice(0, 32));\r\n      \r\n      const key = await crypto.subtle.importKey(\r\n        'raw',\r\n        keyMaterial,\r\n        { name: 'AES-GCM' },\r\n        false,\r\n        ['decrypt']\r\n      );\r\n\r\n      const decryptedData = await crypto.subtle.decrypt(\r\n        { name: 'AES-GCM', iv },\r\n        key,\r\n        encrypted\r\n      );\r\n\r\n      const decoder = new TextDecoder();\r\n      return JSON.parse(decoder.decode(decryptedData));\r\n    } catch (error) {\r\n      console.error('Decryption failed, trying fallback:', error);\r\n      // Fallback pour les données non chiffrées\r\n      try {\r\n        const jsonString = decodeURIComponent(escape(atob(encryptedData)));\r\n        return JSON.parse(jsonString);\r\n      } catch (fallbackError) {\r\n        console.error('All decryption methods failed:', fallbackError);\r\n        throw new Error('Unable to decrypt data');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 4. IndexedDB adapter pour Service Worker\r\nclass ServiceWorkerIndexedDB {\r\n  private db: IDBDatabase | null = null;\r\n  private readonly DB_NAME = \"symbiont-db\";\r\n  private readonly DB_VERSION = 2;\r\n\r\n  async initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        resolve();\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        \r\n        // Créer les object stores nécessaires\r\n        if (!db.objectStoreNames.contains('organism')) {\r\n          db.createObjectStore('organism', { keyPath: 'id' });\r\n        }\r\n        \r\n        if (!db.objectStoreNames.contains('behaviors')) {\r\n          const behaviorStore = db.createObjectStore('behaviors', { keyPath: 'url' });\r\n          behaviorStore.createIndex('visitCount', 'visitCount', { unique: false });\r\n          behaviorStore.createIndex('lastVisit', 'lastVisit', { unique: false });\r\n        }\r\n        \r\n        if (!db.objectStoreNames.contains('mutations')) {\r\n          const mutationStore = db.createObjectStore('mutations', { autoIncrement: true });\r\n          mutationStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          mutationStore.createIndex('type', 'type', { unique: false });\r\n        }\r\n        \r\n        if (!db.objectStoreNames.contains('settings')) {\r\n          db.createObjectStore('settings', { keyPath: 'key' });\r\n        }\r\n        \r\n        if (!db.objectStoreNames.contains('invitations')) {\r\n          db.createObjectStore('invitations', { keyPath: 'code' });\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  // Méthodes de base pour organism, behaviors, etc.\r\n  async getOrganism(): Promise<any> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['organism'], 'readonly');\r\n      const store = transaction.objectStore('organism');\r\n      const request = store.get('current');\r\n      \r\n      request.onsuccess = () => resolve(request.result || null);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  async saveOrganism(organism: any): Promise<void> {\r\n    if (!this.db) throw new Error('Database not initialized');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction(['organism'], 'readwrite');\r\n      const store = transaction.objectStore('organism');\r\n      const request = store.put({ ...organism, id: 'current' });\r\n      \r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n}\r\n\r\n// 5. Gestionnaire global pour remplacer les APIs manquantes\r\nclass ServiceWorkerGlobals {\r\n  private static storage = ServiceWorkerStorage.getInstance();\r\n  private static swCrypto = new ServiceWorkerCrypto();\r\n  \r\n  // Wrapper localStorage\r\n  static get swLocalStorage() {\r\n    return {\r\n      getItem: (key: string) => this.storage.getItem(key),\r\n      setItem: (key: string, value: string) => this.storage.setItem(key, value),\r\n      removeItem: (key: string) => this.storage.removeItem(key)\r\n    };\r\n  }\r\n  \r\n  // Wrapper indexedDB (déjà disponible en Service Worker)\r\n  static get swIndexedDB() {\r\n    return globalThis.indexedDB;\r\n  }\r\n  \r\n  // Wrapper BroadcastChannel\r\n  static swBroadcastChannel = ServiceWorkerMessageChannel;\r\n  \r\n  // Crypto APIs améliorées\r\n  static get swCryptoAPI() {\r\n    return {\r\n      ...globalThis.crypto,\r\n      encryptSensitiveData: this.swCrypto.encryptSensitiveData.bind(this.swCrypto),\r\n      decryptSensitiveData: this.swCrypto.decryptSensitiveData.bind(this.swCrypto)\r\n    };\r\n  }\r\n}\r\n\r\n// Utilisation recommandée : importer ces wrappers dans le code du service worker\r\nexport const swLocalStorage = ServiceWorkerGlobals.swLocalStorage;\r\nexport const swBroadcastChannel = ServiceWorkerGlobals.swBroadcastChannel;\r\nexport const swCryptoAPI = ServiceWorkerGlobals.swCryptoAPI;\r\nexport const swIndexedDB = ServiceWorkerGlobals.swIndexedDB;\r\n\r\n// Export pour utilisation avancée\r\nexport {\r\n  ServiceWorkerStorage,\r\n  ServiceWorkerMessageChannel,\r\n  ServiceWorkerCrypto,\r\n  ServiceWorkerIndexedDB,\r\n  ServiceWorkerGlobals\r\n}; "],"version":3}