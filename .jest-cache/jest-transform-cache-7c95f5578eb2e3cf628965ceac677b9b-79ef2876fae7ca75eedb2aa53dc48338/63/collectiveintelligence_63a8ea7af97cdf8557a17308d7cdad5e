95766aac5cb1d4f86be6eb66cb78938a
"use strict";

/* istanbul ignore next */
function cov_2c31ar482u() {
  var path = "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/collective-intelligence.ts";
  var hash = "2e5161d60ddebfb824d1ab3a1ad1fc22a78e814d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/collective-intelligence.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "3": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 35
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 95
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "9": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "11": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 48
        }
      },
      "12": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "14": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 93
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 29,
          column: 50
        }
      },
      "17": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 50
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "19": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 104
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "21": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 37,
          column: 53
        }
      },
      "22": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "24": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 108
        }
      },
      "25": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "26": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "27": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 127
        }
      },
      "29": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "30": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 38
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 42
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 54
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 36
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 15,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 29,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 29,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 47
          }
        }, {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 52
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: 45,
            column: 13
          },
          end: {
            line: 48,
            column: 9
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 42,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 42,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/collective-intelligence.ts",
      mappings: ";;;AAAA,oCAAoC;AACpC,8CAA8C;AAC9C,+DAA4D;AAC5D,6DAA0D;AAE1D,MAAa,sBAAsB;IAOjC,YAAY,oBAAmD;QANvD,cAAS,GAAuB,IAAI,GAAG,EAAE,CAAA;QACzC,UAAK,GAA6B,IAAI,GAAG,EAAE,CAAA;QAG3C,yBAAoB,GAA0C,IAAI,CAAA;QAGxE,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,2BAAY,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACvE,IAAI,oBAAoB;YAAE,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAA;IAC5E,CAAC;IAED,eAAe,CAAC,QAAa,EAAE,UAAkB;QAC/C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YACnC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACxC,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAE,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;QAC/D,kDAAkD;QAClD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;QAClC,2BAAY,CAAC,IAAI,CAAC,sCAAsC,UAAU,EAAE,CAAC,CAAA;IACvE,CAAC;IAED,IAAI,CAAC,UAAkB,EAAE,OAAe;QACtC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC;YAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACtE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACxC,2BAAY,CAAC,IAAI,CAAC,wBAAwB,OAAO,kBAAkB,UAAU,EAAE,CAAC,CAAA;IAClF,CAAC;IAED,cAAc,CAAC,UAAkB;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,CAAA;IAC9C,CAAC;IAED,yBAAyB,CAAC,UAAkB,EAAE,UAAkB;QAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAC7C,MAAM,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAA;QACjE,IAAI,SAAS,EAAE,CAAC;YACd,2BAAY,CAAC,IAAI,CAAC,iDAAiD,UAAU,EAAE,CAAC,CAAA;YAChF,IAAI,IAAI,CAAC,oBAAoB;gBAAE,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAA;YACpE,OAAO,IAAI,CAAA;QACb,CAAC;aAAM,CAAC;YACN,2BAAY,CAAC,IAAI,CAAC,2CAA2C,UAAU,KAAK,KAAK,IAAI,UAAU,GAAG,CAAC,CAAA;YACnG,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;CACF;AA7CD,wDA6CC",
      names: [],
      sources: ["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/social/collective-intelligence.ts"],
      sourcesContent: ["// social/collective-intelligence.ts\r\n// Intelligence collective \xE9mergente (Phase 3)\r\nimport { SecureRandom } from '../shared/utils/secureRandom';\nimport { SecureLogger } from '@shared/utils/secureLogger';\n\r\nexport class CollectiveIntelligence {\r\n  private proposals: Map<string, any[]> = new Map()\r\n  private votes: Map<string, Set<string>> = new Map()\r\n  // @ts-expect-error Peer ID r\xE9serv\xE9 pour usage futur\r\n  private peerId: string\r\n  private onCollectiveMutation: ((mutationId: string) => void) | null = null\r\n\r\n  constructor(onCollectiveMutation?: (mutationId: string) => void) {\r\n    this.peerId = 'peer_' + SecureRandom.random().toString(36).substr(2, 8)\r\n    if (onCollectiveMutation) this.onCollectiveMutation = onCollectiveMutation\r\n  }\r\n\r\n  proposeMutation(mutation: any, proposerId: string) {\r\n    if (!this.proposals.has(mutation.id)) {\r\n      this.proposals.set(mutation.id, [])\r\n      this.votes.set(mutation.id, new Set())\r\n    }\r\n    this.proposals.get(mutation.id)!.push({ mutation, proposerId })\r\n    // Vote automatiquement pour sa propre proposition\r\n    this.vote(mutation.id, proposerId)\r\n    SecureLogger.info(`[Collective] Mutation propos\xE9e par ${proposerId}`)\r\n  }\r\n\r\n  vote(mutationId: string, voterId: string) {\r\n    if (!this.votes.has(mutationId)) this.votes.set(mutationId, new Set())\r\n    this.votes.get(mutationId)!.add(voterId)\r\n    SecureLogger.info(`[Collective] Vote de ${voterId} pour mutation ${mutationId}`)\r\n  }\r\n\r\n  aggregateVotes(mutationId: string): number {\r\n    return this.votes.get(mutationId)?.size || 0\r\n  }\r\n\r\n  triggerCollectiveMutation(mutationId: string, totalPeers: number): boolean {\r\n    const votes = this.aggregateVotes(mutationId)\r\n    const consensus = votes > Math.max(1, Math.floor(totalPeers / 2))\r\n    if (consensus) {\r\n      SecureLogger.info(`[Collective] Mutation collective d\xE9clench\xE9e : ${mutationId}`)\r\n      if (this.onCollectiveMutation) this.onCollectiveMutation(mutationId)\r\n      return true\r\n    } else {\r\n      SecureLogger.info(`[Collective] Consensus non atteint pour ${mutationId} (${votes}/${totalPeers})`)\r\n      return false\r\n    }\r\n  }\r\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2e5161d60ddebfb824d1ab3a1ad1fc22a78e814d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2c31ar482u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c31ar482u();
cov_2c31ar482u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2c31ar482u().s[1]++;
exports.CollectiveIntelligence = void 0;
// social/collective-intelligence.ts
// Intelligence collective émergente (Phase 3)
const secureRandom_1 =
/* istanbul ignore next */
(cov_2c31ar482u().s[2]++, require("../shared/utils/secureRandom"));
const secureLogger_1 =
/* istanbul ignore next */
(cov_2c31ar482u().s[3]++, require("@shared/utils/secureLogger"));
class CollectiveIntelligence {
  constructor(onCollectiveMutation) {
    /* istanbul ignore next */
    cov_2c31ar482u().f[0]++;
    cov_2c31ar482u().s[4]++;
    this.proposals = new Map();
    /* istanbul ignore next */
    cov_2c31ar482u().s[5]++;
    this.votes = new Map();
    /* istanbul ignore next */
    cov_2c31ar482u().s[6]++;
    this.onCollectiveMutation = null;
    /* istanbul ignore next */
    cov_2c31ar482u().s[7]++;
    this.peerId = 'peer_' + secureRandom_1.SecureRandom.random().toString(36).substr(2, 8);
    /* istanbul ignore next */
    cov_2c31ar482u().s[8]++;
    if (onCollectiveMutation) {
      /* istanbul ignore next */
      cov_2c31ar482u().b[0][0]++;
      cov_2c31ar482u().s[9]++;
      this.onCollectiveMutation = onCollectiveMutation;
    } else
    /* istanbul ignore next */
    {
      cov_2c31ar482u().b[0][1]++;
    }
  }
  proposeMutation(mutation, proposerId) {
    /* istanbul ignore next */
    cov_2c31ar482u().f[1]++;
    cov_2c31ar482u().s[10]++;
    if (!this.proposals.has(mutation.id)) {
      /* istanbul ignore next */
      cov_2c31ar482u().b[1][0]++;
      cov_2c31ar482u().s[11]++;
      this.proposals.set(mutation.id, []);
      /* istanbul ignore next */
      cov_2c31ar482u().s[12]++;
      this.votes.set(mutation.id, new Set());
    } else
    /* istanbul ignore next */
    {
      cov_2c31ar482u().b[1][1]++;
    }
    cov_2c31ar482u().s[13]++;
    this.proposals.get(mutation.id).push({
      mutation,
      proposerId
    });
    // Vote automatiquement pour sa propre proposition
    /* istanbul ignore next */
    cov_2c31ar482u().s[14]++;
    this.vote(mutation.id, proposerId);
    /* istanbul ignore next */
    cov_2c31ar482u().s[15]++;
    secureLogger_1.SecureLogger.info(`[Collective] Mutation proposée par ${proposerId}`);
  }
  vote(mutationId, voterId) {
    /* istanbul ignore next */
    cov_2c31ar482u().f[2]++;
    cov_2c31ar482u().s[16]++;
    if (!this.votes.has(mutationId)) {
      /* istanbul ignore next */
      cov_2c31ar482u().b[2][0]++;
      cov_2c31ar482u().s[17]++;
      this.votes.set(mutationId, new Set());
    } else
    /* istanbul ignore next */
    {
      cov_2c31ar482u().b[2][1]++;
    }
    cov_2c31ar482u().s[18]++;
    this.votes.get(mutationId).add(voterId);
    /* istanbul ignore next */
    cov_2c31ar482u().s[19]++;
    secureLogger_1.SecureLogger.info(`[Collective] Vote de ${voterId} pour mutation ${mutationId}`);
  }
  aggregateVotes(mutationId) {
    /* istanbul ignore next */
    cov_2c31ar482u().f[3]++;
    cov_2c31ar482u().s[20]++;
    return /* istanbul ignore next */(cov_2c31ar482u().b[3][0]++, this.votes.get(mutationId)?.size) ||
    /* istanbul ignore next */
    (cov_2c31ar482u().b[3][1]++, 0);
  }
  triggerCollectiveMutation(mutationId, totalPeers) {
    /* istanbul ignore next */
    cov_2c31ar482u().f[4]++;
    const votes =
    /* istanbul ignore next */
    (cov_2c31ar482u().s[21]++, this.aggregateVotes(mutationId));
    const consensus =
    /* istanbul ignore next */
    (cov_2c31ar482u().s[22]++, votes > Math.max(1, Math.floor(totalPeers / 2)));
    /* istanbul ignore next */
    cov_2c31ar482u().s[23]++;
    if (consensus) {
      /* istanbul ignore next */
      cov_2c31ar482u().b[4][0]++;
      cov_2c31ar482u().s[24]++;
      secureLogger_1.SecureLogger.info(`[Collective] Mutation collective déclenchée : ${mutationId}`);
      /* istanbul ignore next */
      cov_2c31ar482u().s[25]++;
      if (this.onCollectiveMutation) {
        /* istanbul ignore next */
        cov_2c31ar482u().b[5][0]++;
        cov_2c31ar482u().s[26]++;
        this.onCollectiveMutation(mutationId);
      } else
      /* istanbul ignore next */
      {
        cov_2c31ar482u().b[5][1]++;
      }
      cov_2c31ar482u().s[27]++;
      return true;
    } else {
      /* istanbul ignore next */
      cov_2c31ar482u().b[4][1]++;
      cov_2c31ar482u().s[28]++;
      secureLogger_1.SecureLogger.info(`[Collective] Consensus non atteint pour ${mutationId} (${votes}/${totalPeers})`);
      /* istanbul ignore next */
      cov_2c31ar482u().s[29]++;
      return false;
    }
  }
}
/* istanbul ignore next */
cov_2c31ar482u().s[30]++;
exports.CollectiveIntelligence = CollectiveIntelligence;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,