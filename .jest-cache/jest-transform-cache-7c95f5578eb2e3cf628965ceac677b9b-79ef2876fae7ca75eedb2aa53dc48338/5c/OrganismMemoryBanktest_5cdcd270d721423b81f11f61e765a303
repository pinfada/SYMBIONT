119f6ca5d4d9148e0051c72b766601de
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const OrganismMemoryBank_1 = require("../src/background/OrganismMemoryBank");
const SecurityManager_1 = require("../src/background/SecurityManager");
// Mock chrome.storage.local
const storage = {};
const chrome = {
    storage: {
        local: {
            set: (obj, cb) => {
                Object.assign(storage, obj);
                cb();
            },
            get: (keys, cb) => {
                const result = {};
                keys.forEach(k => { if (storage[k])
                    result[k] = storage[k]; });
                cb(result);
            }
        }
    },
    runtime: { lastError: null }
};
global.chrome = chrome;
describe('OrganismMemoryBank', () => {
    const security = new SecurityManager_1.SecurityManager();
    const memory = new OrganismMemoryBank_1.OrganismMemoryBank(security);
    const org = {
        id: 'test', generation: 1, dna: 'abc', traits: { curiosity: 0.5, focus: 0.7, rhythm: 0.6, empathy: 0.8, creativity: 0.9 }, birthTime: 123, lastMutation: null, mutations: [], socialConnections: [], memoryFragments: []
    };
    it('sauvegarde et charge un organisme (chiffrÃ©)', async () => {
        await memory.saveOrganismState('test', org);
        const history = await memory.loadOrganismHistory('test');
        expect(history.states[0]).toMatchObject(org);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL09yZ2FuaXNtTWVtb3J5QmFuay50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkVBQXlFO0FBRXpFLHVFQUFtRTtBQUVuRSw0QkFBNEI7QUFDNUIsTUFBTSxPQUFPLEdBQXdCLEVBQUUsQ0FBQTtBQUN2QyxNQUFNLE1BQU0sR0FBUTtJQUNsQixPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsQ0FBQyxHQUFRLEVBQUUsRUFBYyxFQUFFLEVBQUU7Z0JBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUMzQixFQUFFLEVBQUUsQ0FBQTtZQUNOLENBQUM7WUFDRCxHQUFHLEVBQUUsQ0FBQyxJQUFjLEVBQUUsRUFBeUIsRUFBRSxFQUFFO2dCQUNqRCxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUE7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUM3RCxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDWixDQUFDO1NBQ0Y7S0FDRjtJQUNELE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7Q0FDN0IsQ0FDQTtBQUFDLE1BQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBRWhDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUE7SUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQyxNQUFNLEdBQUcsR0FBa0I7UUFDekIsRUFBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFO0tBQ3pOLENBQUE7SUFFRCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0QsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzlDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL21udC9jL1VzZXJzL21fb2xpL1Byb2pldHMvU1lNQklPTlQvX190ZXN0c19fL09yZ2FuaXNtTWVtb3J5QmFuay50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yZ2FuaXNtTWVtb3J5QmFuayB9IGZyb20gJy4uL3NyYy9iYWNrZ3JvdW5kL09yZ2FuaXNtTWVtb3J5QmFuaydcclxuaW1wb3J0IHsgT3JnYW5pc21TdGF0ZSB9IGZyb20gJy4uL3NyYy9zaGFyZWQvdHlwZXMvb3JnYW5pc20nXHJcbmltcG9ydCB7IFNlY3VyaXR5TWFuYWdlciB9IGZyb20gJy4uL3NyYy9iYWNrZ3JvdW5kL1NlY3VyaXR5TWFuYWdlcidcclxuXHJcbi8vIE1vY2sgY2hyb21lLnN0b3JhZ2UubG9jYWxcclxuY29uc3Qgc3RvcmFnZTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9XHJcbmNvbnN0IGNocm9tZTogYW55ID0ge1xyXG4gIHN0b3JhZ2U6IHtcclxuICAgIGxvY2FsOiB7XHJcbiAgICAgIHNldDogKG9iajogYW55LCBjYjogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oc3RvcmFnZSwgb2JqKVxyXG4gICAgICAgIGNiKClcclxuICAgICAgfSxcclxuICAgICAgZ2V0OiAoa2V5czogc3RyaW5nW10sIGNiOiAocmVzdWx0OiBhbnkpID0+IHZvaWQpID0+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGsgPT4geyBpZiAoc3RvcmFnZVtrXSkgcmVzdWx0W2tdID0gc3RvcmFnZVtrXSB9KVxyXG4gICAgICAgIGNiKHJlc3VsdClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgcnVudGltZTogeyBsYXN0RXJyb3I6IG51bGwgfVxyXG59XHJcbjsoZ2xvYmFsIGFzIGFueSkuY2hyb21lID0gY2hyb21lXHJcblxyXG5kZXNjcmliZSgnT3JnYW5pc21NZW1vcnlCYW5rJywgKCkgPT4ge1xyXG4gIGNvbnN0IHNlY3VyaXR5ID0gbmV3IFNlY3VyaXR5TWFuYWdlcigpXHJcbiAgY29uc3QgbWVtb3J5ID0gbmV3IE9yZ2FuaXNtTWVtb3J5QmFuayhzZWN1cml0eSlcclxuICBjb25zdCBvcmc6IE9yZ2FuaXNtU3RhdGUgPSB7XHJcbiAgICBpZDogJ3Rlc3QnLCBnZW5lcmF0aW9uOiAxLCBkbmE6ICdhYmMnLCB0cmFpdHM6IHsgY3VyaW9zaXR5OiAwLjUsIGZvY3VzOiAwLjcsIHJoeXRobTogMC42LCBlbXBhdGh5OiAwLjgsIGNyZWF0aXZpdHk6IDAuOSB9LCBiaXJ0aFRpbWU6IDEyMywgbGFzdE11dGF0aW9uOiBudWxsLCBtdXRhdGlvbnM6IFtdLCBzb2NpYWxDb25uZWN0aW9uczogW10sIG1lbW9yeUZyYWdtZW50czogW11cclxuICB9XHJcblxyXG4gIGl0KCdzYXV2ZWdhcmRlIGV0IGNoYXJnZSB1biBvcmdhbmlzbWUgKGNoaWZmcsOpKScsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IG1lbW9yeS5zYXZlT3JnYW5pc21TdGF0ZSgndGVzdCcsIG9yZylcclxuICAgIGNvbnN0IGhpc3RvcnkgPSBhd2FpdCBtZW1vcnkubG9hZE9yZ2FuaXNtSGlzdG9yeSgndGVzdCcpXHJcbiAgICBleHBlY3QoaGlzdG9yeS5zdGF0ZXNbMF0pLnRvTWF0Y2hPYmplY3Qob3JnKVxyXG4gIH0pXHJcbn0pICJdLCJ2ZXJzaW9uIjozfQ==