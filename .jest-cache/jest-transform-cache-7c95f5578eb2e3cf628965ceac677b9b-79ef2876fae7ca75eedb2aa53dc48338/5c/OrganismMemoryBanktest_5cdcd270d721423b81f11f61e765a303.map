{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismMemoryBank.test.ts","mappings":";;AAAA,6EAAyE;AAEzE,uEAAmE;AAEnE,4BAA4B;AAC5B,MAAM,OAAO,GAAwB,EAAE,CAAA;AACvC,MAAM,MAAM,GAAQ;IAClB,OAAO,EAAE;QACP,KAAK,EAAE;YACL,GAAG,EAAE,CAAC,GAAQ,EAAE,EAAc,EAAE,EAAE;gBAChC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;gBAC3B,EAAE,EAAE,CAAA;YACN,CAAC;YACD,GAAG,EAAE,CAAC,IAAc,EAAE,EAAyB,EAAE,EAAE;gBACjD,MAAM,MAAM,GAAQ,EAAE,CAAA;gBACtB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC;oBAAE,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA;gBAC7D,EAAE,CAAC,MAAM,CAAC,CAAA;YACZ,CAAC;SACF;KACF;IACD,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;CAC7B,CACA;AAAC,MAAc,CAAC,MAAM,GAAG,MAAM,CAAA;AAEhC,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,MAAM,QAAQ,GAAG,IAAI,iCAAe,EAAE,CAAA;IACtC,MAAM,MAAM,GAAG,IAAI,uCAAkB,CAAC,QAAQ,CAAC,CAAA;IAC/C,MAAM,GAAG,GAAkB;QACzB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,iBAAiB,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE;KACzN,CAAA;IAED,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAC3C,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;QACxD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;IAC9C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/__tests__/OrganismMemoryBank.test.ts"],"sourcesContent":["import { OrganismMemoryBank } from '../src/background/OrganismMemoryBank'\r\nimport { OrganismState } from '../src/shared/types/organism'\r\nimport { SecurityManager } from '../src/background/SecurityManager'\r\n\r\n// Mock chrome.storage.local\r\nconst storage: Record<string, any> = {}\r\nconst chrome: any = {\r\n  storage: {\r\n    local: {\r\n      set: (obj: any, cb: () => void) => {\r\n        Object.assign(storage, obj)\r\n        cb()\r\n      },\r\n      get: (keys: string[], cb: (result: any) => void) => {\r\n        const result: any = {}\r\n        keys.forEach(k => { if (storage[k]) result[k] = storage[k] })\r\n        cb(result)\r\n      }\r\n    }\r\n  },\r\n  runtime: { lastError: null }\r\n}\r\n;(global as any).chrome = chrome\r\n\r\ndescribe('OrganismMemoryBank', () => {\r\n  const security = new SecurityManager()\r\n  const memory = new OrganismMemoryBank(security)\r\n  const org: OrganismState = {\r\n    id: 'test', generation: 1, dna: 'abc', traits: { curiosity: 0.5, focus: 0.7, rhythm: 0.6, empathy: 0.8, creativity: 0.9 }, birthTime: 123, lastMutation: null, mutations: [], socialConnections: [], memoryFragments: []\r\n  }\r\n\r\n  it('sauvegarde et charge un organisme (chiffrÃ©)', async () => {\r\n    await memory.saveOrganismState('test', org)\r\n    const history = await memory.loadOrganismHistory('test')\r\n    expect(history.states[0]).toMatchObject(org)\r\n  })\r\n}) "],"version":3}