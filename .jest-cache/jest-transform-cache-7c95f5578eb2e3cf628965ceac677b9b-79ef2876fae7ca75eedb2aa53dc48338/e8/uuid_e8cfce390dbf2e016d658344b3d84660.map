{"version":3,"names":["cov_14aqfnksqn","actualCoverage","s","exports","generateUUID","isCryptoUUIDAvailable","generateSecureUUID","f","b","crypto","randomUUID","error","console","warn","replace","c","r","Math","random","v","toString","getRandomValues","array","Uint8Array","hex","Array","from","byte","padStart","join","slice"],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/utils/uuid.ts"],"sourcesContent":["/**\r\n * Génère un UUID v4 avec fallback pour les environnements sans crypto.randomUUID\r\n */\r\nexport function generateUUID(): string {\r\n  // Essayer d'abord crypto.randomUUID si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n    try {\r\n      return crypto.randomUUID();\r\n    } catch (error) {\r\n      console.warn('crypto.randomUUID failed, using fallback:', error);\r\n    }\r\n  }\r\n\r\n  // Fallback pour les environnements qui ne supportent pas crypto.randomUUID\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n/**\r\n * Vérifie si crypto.randomUUID est disponible dans l'environnement actuel\r\n */\r\nexport function isCryptoUUIDAvailable(): boolean {\r\n  return typeof crypto !== 'undefined' && \r\n         typeof crypto.randomUUID === 'function';\r\n}\r\n\r\n/**\r\n * Génère un UUID v4 cryptographiquement sécurisé si possible\r\n * Sinon utilise Math.random() comme fallback\r\n */\r\nexport function generateSecureUUID(): string {\r\n  if (isCryptoUUIDAvailable()) {\r\n    return crypto.randomUUID();\r\n  }\r\n\r\n  // Fallback sécurisé utilisant crypto.getRandomValues si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n    const array = new Uint8Array(16);\r\n    crypto.getRandomValues(array);\r\n    \r\n    // Version 4 UUID format\r\n    array[6] = (array[6] & 0x0f) | 0x40; // version\r\n    array[8] = (array[8] & 0x3f) | 0x80; // variant\r\n    \r\n    const hex = Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n    return [\r\n      hex.slice(0, 8),\r\n      hex.slice(8, 12),\r\n      hex.slice(12, 16),\r\n      hex.slice(16, 20),\r\n      hex.slice(20, 32)\r\n    ].join('-');\r\n  }\r\n\r\n  // Dernier recours : Math.random()\r\n  console.warn('Using Math.random() for UUID generation - not cryptographically secure');\r\n  return generateUUID();\r\n} "],"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","ignoreList":[]}