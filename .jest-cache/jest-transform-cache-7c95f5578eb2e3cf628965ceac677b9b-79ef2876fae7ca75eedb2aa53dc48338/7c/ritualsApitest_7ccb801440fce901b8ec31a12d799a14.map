{"file":"/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/ritualsApi.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAAoC;AAEpC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;AAEzB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,UAAU,CAAC,GAAG,EAAE;QACb,KAAmB,CAAC,SAAS,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QACzC,KAAmB,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;QACvG,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,UAAU,EAAE,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACvC,KAAmB,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC9D,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QACzC,KAAmB,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC5C,KAAmB,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QACvF,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/mnt/c/Users/m_oli/Projets/SYMBIONT/src/shared/ritualsApi.test.ts"],"sourcesContent":["import * as api from './ritualsApi';\r\n\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('ritualsApi', () => {\r\n  beforeEach(() => {\r\n    (fetch as jest.Mock).mockReset();\r\n  });\r\n\r\n  it('getRituals fetches rituals', async () => {\r\n    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => [{ _id: '1', type: 'fusion' }] });\r\n    const rituals = await api.getRituals();\r\n    expect(rituals[0]._id).toBe('1');\r\n  });\r\n\r\n  it('addRitual posts a ritual', async () => {\r\n    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => ({ ok: true }) });\r\n    const res = await api.addRitual({ _id: '2', type: 'fusion' });\r\n    expect(res.ok).toBe(true);\r\n  });\r\n\r\n  it('updateRitual puts a ritual', async () => {\r\n    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => ({ ok: true }) });\r\n    const res = await api.updateRitual('2', { type: 'fusion' });\r\n    expect(res.ok).toBe(true);\r\n  });\r\n\r\n  it('deleteRitual deletes a ritual', async () => {\r\n    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => ({ ok: true }) });\r\n    const res = await api.deleteRitual('2');\r\n    expect(res.ok).toBe(true);\r\n  });\r\n}); "],"version":3}