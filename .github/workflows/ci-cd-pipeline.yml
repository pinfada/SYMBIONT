name: SYMBIONT CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: '**/package-lock.json'

jobs:
  # Phase 1: Lint & Style Check
  lint:
    name: 🔍 Lint & Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: ESLint check
        run: npm run lint
        
      - name: TypeScript check
        run: npx tsc --noEmit
        
      - name: Check manifest validity
        run: npm run check-manifest

  # Phase 2: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build:all
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: |
            dist/
            manifest.json
          retention-days: 30

  # Phase 3: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [unit, integration, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm test -- --coverage --testPathPattern="__tests__/((?!integration|e2e).)*\.test\.(ts|js)$"
        
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm test -- --testPathPattern="__tests__/integration/"
        
      - name: Run security tests
        if: matrix.test-type == 'security'
        run: npm test -- --testPathPattern="__tests__/security/"
        
      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  # Phase 4: E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build
          path: dist/
          
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Phase 5: Security Audit
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run security validation
        run: node scripts/validate-security.js
        
      - name: Run final security audit
        run: node scripts/final-security-audit.js
        
      - name: Generate audit reports
        run: |
          node scripts/generate-audit-pdf.js
          node scripts/generate-coverage-report.js
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            final-security-audit-report.json
            final-security-audit-report.html
            coverage/
          retention-days: 90

  # Phase 6: Package & Deploy
  package:
    name: 📦 Package Extension
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-audit]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build
          path: dist/
          
      - name: Create extension package
        run: |
          zip -r symbiont-extension-${{ github.sha }}.zip dist/ manifest.json
          
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: symbiont-extension-*.zip
          retention-days: 365

  # Phase 7: Performance Monitoring
  performance:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance benchmarks
        run: node scripts/performance-benchmark.js
        
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: performance-benchmark-report.json
          retention-days: 90

  # Phase 8: Notification & Status
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [package, performance]
    if: always()
    steps:
      - name: Set pipeline status
        run: |
          if [[ "${{ needs.package.result }}" == "success" && "${{ needs.performance.result }}" == "success" ]]; then
            echo "PIPELINE_STATUS=✅ SUCCESS" >> $GITHUB_ENV
            echo "PIPELINE_MESSAGE=Extension prête pour publication" >> $GITHUB_ENV
          else
            echo "PIPELINE_STATUS=❌ FAILED" >> $GITHUB_ENV
            echo "PIPELINE_MESSAGE=Problèmes détectés - Vérifiez les rapports" >> $GITHUB_ENV
          fi
          
      - name: Summary
        run: |
          echo "## 🚀 SYMBIONT CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ env.PIPELINE_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ env.PIPELINE_MESSAGE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Étapes du Pipeline:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Lint: ${{ needs.lint.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Tests: ${{ needs.test.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 E2E: ${{ needs.e2e-tests.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Security: ${{ needs.security-audit.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Package: ${{ needs.package.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Performance: ${{ needs.performance.result || 'N/A' }}" >> $GITHUB_STEP_SUMMARY