{"version":3,"file":"content/index.js","mappings":"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","sources":["webpack://symbiont/./src/content/observers/ScrollTracker.ts","webpack://symbiont/./src/shared/messaging/MessageBus.ts","webpack://symbiont/./src/content/monitors/AttentionMonitor.ts","webpack://symbiont/./src/shared/observers/NavigationObserver.ts","webpack://symbiont/./src/core/messaging/MessageBus.ts","webpack://symbiont/./src/content/collectors/InteractionCollector.ts","webpack://symbiont/./src/content/observers/DOMAnalyzer.ts","webpack://symbiont/webpack/bootstrap","webpack://symbiont/./src/content/index.ts"],"sourcesContent":["\"use strict\";\n// Tracker de scroll\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScrollTracker = void 0;\nclass ScrollTracker {\n    on(event, handler) { }\n    detectPattern() { return 'unknown'; }\n    stop() { }\n}\nexports.ScrollTracker = ScrollTracker;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageBus = exports.MessageType = void 0;\n// Centralisation des types de messages et de l'interface Message\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"PAGE_VISIT\"] = \"PAGE_VISIT\";\n    MessageType[\"SCROLL_EVENT\"] = \"SCROLL_EVENT\";\n    MessageType[\"ORGANISM_UPDATE\"] = \"ORGANISM_UPDATE\";\n    MessageType[\"ORGANISM_MUTATE\"] = \"ORGANISM_MUTATE\";\n    MessageType[\"ORGANISM_STATE_CHANGE\"] = \"ORGANISM_STATE_CHANGE\";\n    MessageType[\"WEBGL_INIT\"] = \"WEBGL_INIT\";\n    MessageType[\"WEBGL_ERROR\"] = \"WEBGL_ERROR\";\n    MessageType[\"WEBGL_INITIALIZED\"] = \"WEBGL_INITIALIZED\";\n    MessageType[\"PERFORMANCE_UPDATE\"] = \"PERFORMANCE_UPDATE\";\n    MessageType[\"GENERATE_INVITATION\"] = \"GENERATE_INVITATION\";\n    MessageType[\"INVITATION_GENERATED\"] = \"INVITATION_GENERATED\";\n    MessageType[\"CONSUME_INVITATION\"] = \"CONSUME_INVITATION\";\n    MessageType[\"INVITATION_CONSUMED\"] = \"INVITATION_CONSUMED\";\n    MessageType[\"CHECK_INVITATION\"] = \"CHECK_INVITATION\";\n    MessageType[\"INVITATION_CHECKED\"] = \"INVITATION_CHECKED\";\n    MessageType[\"MURMUR\"] = \"MURMUR\";\n    MessageType[\"GET_INVITER\"] = \"GET_INVITER\";\n    MessageType[\"INVITER_RESULT\"] = \"INVITER_RESULT\";\n    MessageType[\"GET_INVITEES\"] = \"GET_INVITEES\";\n    MessageType[\"INVITEES_RESULT\"] = \"INVITEES_RESULT\";\n    MessageType[\"GET_INVITATION_HISTORY\"] = \"GET_INVITATION_HISTORY\";\n    MessageType[\"INVITATION_HISTORY_RESULT\"] = \"INVITATION_HISTORY_RESULT\";\n    MessageType[\"INTERACTION_DETECTED\"] = \"INTERACTION_DETECTED\";\n    // --- Rituels collaboratifs ---\n    MessageType[\"REQUEST_SHARED_MUTATION\"] = \"REQUEST_SHARED_MUTATION\";\n    MessageType[\"SHARED_MUTATION_CODE\"] = \"SHARED_MUTATION_CODE\";\n    MessageType[\"ACCEPT_SHARED_MUTATION\"] = \"ACCEPT_SHARED_MUTATION\";\n    MessageType[\"SHARED_MUTATION_RESULT\"] = \"SHARED_MUTATION_RESULT\";\n    MessageType[\"COLLECTIVE_WAKE_REQUEST\"] = \"COLLECTIVE_WAKE_REQUEST\";\n    MessageType[\"COLLECTIVE_WAKE_RESULT\"] = \"COLLECTIVE_WAKE_RESULT\";\n    MessageType[\"CONTEXTUAL_INVITATION\"] = \"CONTEXTUAL_INVITATION\";\n    MessageType[\"SECRET_RITUAL_TRIGGERED\"] = \"SECRET_RITUAL_TRIGGERED\";\n    MessageType[\"SECRET_CODE_ENTERED\"] = \"SECRET_CODE_ENTERED\";\n})(MessageType || (exports.MessageType = MessageType = {}));\nclass MessageBus {\n    constructor(channel) { }\n    on(type, handler) { }\n    send(message) { }\n    subscribe(type, handler) {\n        this.on(type, handler);\n    }\n}\nexports.MessageBus = MessageBus;\nexports.default = MessageBus;\n","\"use strict\";\n// Monitoring attention utilisateur\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttentionMonitor = void 0;\nclass AttentionMonitor {\n    on(event, handler) { }\n    resume() { }\n    pause() { }\n    stop() { }\n    getSessionSummary() { return { focusPeriods: [] }; }\n}\nexports.AttentionMonitor = AttentionMonitor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NavigationObserver = void 0;\n// Squelette minimal pour lever les erreurs d'import\nclass NavigationObserver {\n    constructor(messageBus) { }\n}\nexports.NavigationObserver = NavigationObserver;\nexports.default = NavigationObserver;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageBus = void 0;\nconst MessageBus_1 = require(\"../../shared/messaging/MessageBus\");\nfunction isOrganismState(obj) {\n    return obj && typeof obj.id === 'string' && typeof obj.generation === 'number';\n}\nfunction isOrganismMutation(obj) {\n    return obj && typeof obj.type === 'string' && typeof obj.trigger === 'string';\n}\nfunction isBehaviorData(obj) {\n    return obj && typeof obj.url === 'string' && typeof obj.visitCount === 'number';\n}\nfunction isMurmur(obj) {\n    return obj && typeof obj.text === 'string' && typeof obj.timestamp === 'number';\n}\nfunction isInvitationPayload(obj) {\n    return obj && typeof obj.code === 'string';\n}\nfunction isInvitationResult(obj) {\n    return obj && typeof obj.code === 'string' && typeof obj.status === 'string';\n}\nfunction validatePayload(type, payload) {\n    switch (type) {\n        case MessageBus_1.MessageType.ORGANISM_UPDATE:\n            return isOrganismState(payload);\n        case MessageBus_1.MessageType.ORGANISM_MUTATE:\n            return isOrganismMutation(payload);\n        case MessageBus_1.MessageType.PAGE_VISIT:\n        case MessageBus_1.MessageType.SCROLL_EVENT:\n            return isBehaviorData(payload);\n        case MessageBus_1.MessageType.MURMUR:\n            return isMurmur(payload);\n        case MessageBus_1.MessageType.GENERATE_INVITATION:\n        case MessageBus_1.MessageType.CONSUME_INVITATION:\n        case MessageBus_1.MessageType.CHECK_INVITATION:\n            return isInvitationPayload(payload);\n        case MessageBus_1.MessageType.INVITATION_GENERATED:\n        case MessageBus_1.MessageType.INVITATION_CONSUMED:\n        case MessageBus_1.MessageType.INVITATION_CHECKED:\n            return isInvitationResult(payload);\n        // Ajouter d'autres cas selon les besoins\n        default:\n            return true; // Par défaut, on accepte (à affiner selon les besoins)\n    }\n}\nclass MessageBus {\n    constructor(source) {\n        this.source = source;\n        this.handlers = new Map();\n        this.globalHandlers = new Set();\n        this.filters = [];\n        this.messageQueue = [];\n        this.processing = false;\n        this.setupListeners();\n    }\n    setupListeners() {\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            if (this.shouldProcessMessage(message)) {\n                this.enqueueMessage(message);\n                sendResponse({ received: true });\n            }\n            return false;\n        });\n    }\n    shouldProcessMessage(message) {\n        return this.filters.every(filter => filter(message));\n    }\n    async enqueueMessage(message) {\n        this.messageQueue.push(message);\n        if (!this.processing) {\n            this.processing = true;\n            await this.processQueue();\n            this.processing = false;\n        }\n    }\n    async processQueue() {\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            await this.processMessage(message);\n        }\n    }\n    async processMessage(message) {\n        // --- Validation stricte du payload ---\n        if (!validatePayload(message.type, message.payload)) {\n            console.warn(`[MessageBus] Payload non valide pour le type ${message.type}`, message.payload);\n            return;\n        }\n        // Global handlers\n        for (const handler of this.globalHandlers) {\n            try {\n                await handler(message);\n            }\n            catch (error) {\n                console.error(`Error in global handler:`, error);\n            }\n        }\n        // Type-specific handlers\n        const handlers = this.handlers.get(message.type);\n        if (handlers) {\n            for (const handler of handlers) {\n                try {\n                    await handler(message);\n                }\n                catch (error) {\n                    console.error(`Error in handler for ${message.type}:`, error);\n                }\n            }\n        }\n    }\n    on(type, handler) {\n        if (!this.handlers.has(type)) {\n            this.handlers.set(type, new Set());\n        }\n        this.handlers.get(type).add(handler);\n    }\n    off(type, handler) {\n        const handlers = this.handlers.get(type);\n        if (handlers) {\n            handlers.delete(handler);\n        }\n    }\n    onAny(handler) {\n        this.globalHandlers.add(handler);\n    }\n    offAny(handler) {\n        this.globalHandlers.delete(handler);\n    }\n    addFilter(filter) {\n        this.filters.push(filter);\n    }\n    async send(message) {\n        const fullMessage = {\n            ...message,\n            source: this.source,\n            timestamp: Date.now(),\n            id: crypto.randomUUID(),\n        };\n        try {\n            if (this.source === 'content') {\n                await chrome.runtime.sendMessage(fullMessage);\n            }\n            else {\n                // Send to all tabs for content scripts\n                const tabs = await chrome.tabs.query({});\n                for (const tab of tabs) {\n                    if (tab.id) {\n                        chrome.tabs.sendMessage(tab.id, fullMessage).catch(() => {\n                            // Ignore errors for inactive tabs\n                        });\n                    }\n                }\n                // Also send to runtime for popup/background\n                chrome.runtime.sendMessage(fullMessage).catch(() => { });\n            }\n        }\n        catch (error) {\n            console.error('Error sending message:', error);\n        }\n    }\n    // Ajout pour compatibilité content script\n    sendToBackground(message) {\n        this.send(message);\n    }\n    emit(type, payload) {\n        // Appel direct des handlers si besoin (mock minimal)\n        const handlers = this.handlers.get(type);\n        if (handlers) {\n            handlers.forEach(handler => handler({ type, payload }));\n        }\n    }\n}\nexports.MessageBus = MessageBus;\nexports.default = MessageBus;\n","\"use strict\";\n// Collecteur d'interactions\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InteractionCollector = void 0;\nclass InteractionCollector {\n    on(event, handler) { }\n    start(options) { }\n    stop() { }\n}\nexports.InteractionCollector = InteractionCollector;\n","\"use strict\";\n// Analyseur DOM\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DOMAnalyzer = void 0;\nclass DOMAnalyzer {\n    analyze() {\n        // Retourne un objet factice pour lever les erreurs\n        return {\n            wordCount: 1000,\n            imageCount: 10,\n            videoCount: 2,\n            linkCount: 20,\n            estimatedReadingTime: 5\n        };\n    }\n    extractMainContent() {\n        return {};\n    }\n    categorizeContent() {\n        return 'article';\n    }\n}\nexports.DOMAnalyzer = DOMAnalyzer;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// src/content/index.ts\n// Point d'entrée Content Script\n// src/content/index.ts\nconst MessageBus_1 = require(\"../core/messaging/MessageBus\");\nconst NavigationObserver_1 = require(\"../shared/observers/NavigationObserver\");\nconst InteractionCollector_1 = require(\"./collectors/InteractionCollector\");\nconst DOMAnalyzer_1 = require(\"./observers/DOMAnalyzer\");\nconst ScrollTracker_1 = require(\"./observers/ScrollTracker\");\nconst AttentionMonitor_1 = require(\"./monitors/AttentionMonitor\");\n/**\n * ContentScript - Système sensoriel de SYMBIONT\n * Collecte les données comportementales dans la page web\n */\nclass ContentScript {\n    constructor() {\n        // État local\n        this.pageData = {\n            startTime: Date.now(),\n            url: window.location.href,\n            title: document.title,\n            interactions: [],\n            scrollData: {\n                maxDepth: 0,\n                totalDistance: 0,\n                pattern: 'unknown'\n            },\n            attention: {\n                totalActiveTime: 0,\n                distractions: 0\n            }\n        };\n        console.log('🔍 SYMBIONT Content Script initializing...');\n        this.messageBus = new MessageBus_1.MessageBus('content');\n        this.navigationObserver = new NavigationObserver_1.NavigationObserver();\n        this.interactionCollector = new InteractionCollector_1.InteractionCollector();\n        this.domAnalyzer = new DOMAnalyzer_1.DOMAnalyzer();\n        this.scrollTracker = new ScrollTracker_1.ScrollTracker();\n        this.attentionMonitor = new AttentionMonitor_1.AttentionMonitor();\n        this.initialize();\n    }\n    static getInstance() {\n        if (!ContentScript.instance) {\n            ContentScript.instance = new ContentScript();\n        }\n        return ContentScript.instance;\n    }\n    initialize() {\n        // Initialisation des observateurs\n        this.setupObservers();\n        this.setupEventListeners();\n        this.performInitialAnalysis();\n        // Nettoyage à la fermeture\n        window.addEventListener('beforeunload', this.cleanup.bind(this));\n        console.log('✅ SYMBIONT Content Script ready');\n    }\n    setupObservers() {\n        // Observation de la navigation SPA\n        this.navigationObserver.observe((change) => {\n            this.handleNavigationChange(change);\n        });\n        // Collection des interactions\n        this.interactionCollector.start({\n            clicks: true,\n            keypresses: true,\n            forms: true,\n            media: true\n        });\n        this.interactionCollector.on('interaction', (interaction) => {\n            this.handleInteraction(interaction);\n        });\n        // Tracking du scroll\n        this.scrollTracker.on('scroll', (data) => {\n            this.updateScrollData(data);\n        });\n        // Monitoring de l'attention\n        this.attentionMonitor.on('attentionChange', (state) => {\n            this.handleAttentionChange(state);\n        });\n    }\n    setupEventListeners() {\n        // Visibilité de la page\n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange();\n        });\n        // Focus/Blur de la fenêtre\n        window.addEventListener('focus', () => this.handleWindowFocus(true));\n        window.addEventListener('blur', () => this.handleWindowFocus(false));\n        // Événements de performance\n        if ('PerformanceObserver' in window) {\n            this.setupPerformanceObserver();\n        }\n        // Communication avec background\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            this.messageBus.emit(message.type, {\n                message,\n                sender,\n                sendResponse\n            });\n            return true; // keep channel open for async\n        });\n    }\n    setupPerformanceObserver() {\n        const observer = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n                if (entry.entryType === 'largest-contentful-paint') {\n                    this.handleLCP(entry);\n                }\n            }\n        });\n        observer.observe({ entryTypes: ['largest-contentful-paint'] });\n    }\n    async performInitialAnalysis() {\n        // Analyse DOM initiale\n        const domAnalysis = await this.domAnalyzer.analyze();\n        // Extraction du contenu principal\n        const mainContent = this.domAnalyzer.extractMainContent();\n        // Catégorisation de la page\n        const pageCategory = this.domAnalyzer.categorizeContent();\n        // Envoi de l'analyse initiale\n        this.messageBus.sendToBackground({\n            type: 'PAGE_ANALYSIS_COMPLETE',\n            payload: {\n                url: this.pageData.url,\n                title: this.pageData.title,\n                category: pageCategory,\n                contentMetrics: {\n                    wordCount: domAnalysis.wordCount,\n                    imageCount: domAnalysis.imageCount,\n                    videoCount: domAnalysis.videoCount,\n                    linkCount: domAnalysis.linkCount,\n                    readingTime: domAnalysis.estimatedReadingTime\n                },\n                performance: {\n                    loadTime: performance.now(),\n                    resourceCount: performance.getEntriesByType('resource').length\n                }\n            }\n        });\n    }\n    handleInteraction(interaction) {\n        // Enrichissement avec le contexte\n        const enrichedInteraction = {\n            ...interaction,\n            pageContext: {\n                url: this.pageData.url,\n                title: this.pageData.title,\n                timeOnPage: Date.now() - this.pageData.startTime\n            }\n        };\n        this.pageData.interactions.push(enrichedInteraction);\n        // Envoi temps réel pour les interactions importantes\n        if (this.isSignificantInteraction(interaction)) {\n            this.messageBus.sendToBackground({\n                type: 'INTERACTION_DETECTED',\n                payload: enrichedInteraction\n            });\n        }\n    }\n    isSignificantInteraction(interaction) {\n        // Définir ce qui constitue une interaction significative\n        return (interaction.type === 'form_submit' ||\n            interaction.type === 'video_play' ||\n            (interaction.type === 'click' && interaction.data.isNavigation) ||\n            (interaction.type === 'keypress' && interaction.data.isShortcut));\n    }\n    updateScrollData(data) {\n        this.pageData.scrollData.maxDepth = Math.max(this.pageData.scrollData.maxDepth, data.depth);\n        this.pageData.scrollData.totalDistance += Math.abs(data.delta);\n        // Détection du pattern de scroll\n        this.pageData.scrollData.pattern = this.scrollTracker.detectPattern();\n    }\n    handleAttentionChange(state) {\n        // Mise à jour des métriques d'attention\n        if (state.isActive) {\n            this.pageData.attention.totalActiveTime += state.duration || 0;\n        }\n        else {\n            this.pageData.attention.distractions++;\n        }\n        // Notification au background\n        this.messageBus.sendToBackground({\n            type: 'ATTENTION_UPDATE',\n            payload: {\n                url: this.pageData.url,\n                state,\n                duration: Date.now() - this.pageData.startTime\n            }\n        });\n    }\n    handleNavigationChange(change) {\n        // Sauvegarde des données de la page précédente\n        this.finalizePage();\n        // Réinitialisation pour la nouvelle page\n        this.pageData = {\n            startTime: Date.now(),\n            url: change.url,\n            title: document.title,\n            interactions: [],\n            scrollData: {\n                maxDepth: 0,\n                totalDistance: 0,\n                pattern: 'unknown'\n            },\n            attention: {\n                totalActiveTime: 0,\n                distractions: 0\n            }\n        };\n        // Nouvelle analyse\n        this.performInitialAnalysis();\n    }\n    handleVisibilityChange() {\n        const isVisible = document.visibilityState === 'visible';\n        this.messageBus.sendToBackground({\n            type: 'VISIBILITY_CHANGE',\n            payload: {\n                url: this.pageData.url,\n                isVisible,\n                timestamp: Date.now()\n            }\n        });\n        // Pause/Resume du monitoring d'attention\n        if (isVisible) {\n            this.attentionMonitor.resume();\n        }\n        else {\n            this.attentionMonitor.pause();\n        }\n    }\n    handleWindowFocus(hasFocus) {\n        this.messageBus.sendToBackground({\n            type: 'FOCUS_CHANGE',\n            payload: {\n                url: this.pageData.url,\n                hasFocus,\n                timestamp: Date.now()\n            }\n        });\n    }\n    finalizePage() {\n        const duration = Date.now() - this.pageData.startTime;\n        // Ne pas finaliser si durée très courte (prob navigation rapide)\n        if (duration < 1000)\n            return;\n        // Compilation des données finales\n        const pageSession = {\n            url: this.pageData.url,\n            title: this.pageData.title,\n            startTime: this.pageData.startTime,\n            duration,\n            interactions: this.pageData.interactions,\n            scrollData: this.pageData.scrollData,\n            attention: {\n                totalActiveTime: this.pageData.attention.totalActiveTime,\n                distractionCount: this.pageData.attention.distractions,\n                focusPeriods: this.attentionMonitor.getSessionSummary().focusPeriods\n            },\n            performance: this.collectPerformanceMetrics()\n        };\n        // Envoi au background\n        this.messageBus.sendToBackground({\n            type: 'PAGE_SESSION_COMPLETE',\n            payload: pageSession\n        });\n    }\n    collectPerformanceMetrics() {\n        const entries = performance.getEntriesByType('navigation');\n        const navigation = entries.length > 0 ? entries[0] : null;\n        return {\n            loadTime: navigation ? navigation.loadEventEnd - navigation.startTime : 0,\n            domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.startTime : 0,\n            firstPaint: this.getFirstPaint(),\n            firstContentfulPaint: this.getFirstContentfulPaint(),\n            largestContentfulPaint: this.getLargestContentfulPaint(),\n            resourceCount: performance.getEntriesByType('resource').length\n        };\n    }\n    getFirstPaint() {\n        const paintEntries = performance.getEntriesByType('paint');\n        const firstPaint = paintEntries.find(entry => entry.name === 'first-paint');\n        return firstPaint ? firstPaint.startTime : 0;\n    }\n    getFirstContentfulPaint() {\n        const paintEntries = performance.getEntriesByType('paint');\n        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');\n        return fcp ? fcp.startTime : 0;\n    }\n    getLargestContentfulPaint() {\n        const entries = performance.getEntriesByType('largest-contentful-paint');\n        if (entries.length > 0) {\n            const lcp = entries[entries.length - 1];\n            return lcp.startTime;\n        }\n        return 0;\n    }\n    handleLCP(entry) {\n        // Notification optionnelle sur LCP\n        if (entry.startTime > 2500) { // Seuil critique LCP > 2.5s\n            console.debug('Slow LCP detected:', entry.startTime);\n        }\n    }\n    cleanup() {\n        // Finalisation de la session\n        this.finalizePage();\n        // Nettoyage des observateurs\n        this.navigationObserver.disconnect();\n        this.interactionCollector.stop();\n        this.scrollTracker.stop();\n        this.attentionMonitor.stop();\n        console.log('🧹 SYMBIONT Content Script cleaned up');\n    }\n}\n// Point d'entrée avec protection contre les injections multiples\nif (!window.__SYMBIONT_CONTENT_SCRIPT_LOADED__) {\n    window.__SYMBIONT_CONTENT_SCRIPT_LOADED__ = true;\n    ContentScript.getInstance();\n}\n"],"names":["Object","defineProperty","exports","value","ScrollTracker","on","event","handler","detectPattern","stop","MessageType","MessageBus","constructor","channel","type","send","message","subscribe","this","AttentionMonitor","resume","pause","getSessionSummary","focusPeriods","NavigationObserver","messageBus","MessageBus_1","source","handlers","Map","globalHandlers","Set","filters","messageQueue","processing","setupListeners","chrome","runtime","onMessage","addListener","sender","sendResponse","shouldProcessMessage","enqueueMessage","received","every","filter","push","processQueue","length","shift","processMessage","payload","ORGANISM_UPDATE","obj","id","generation","ORGANISM_MUTATE","trigger","isOrganismMutation","PAGE_VISIT","SCROLL_EVENT","url","visitCount","isBehaviorData","MURMUR","text","timestamp","isMurmur","GENERATE_INVITATION","CONSUME_INVITATION","CHECK_INVITATION","code","isInvitationPayload","INVITATION_GENERATED","INVITATION_CONSUMED","INVITATION_CHECKED","status","isInvitationResult","validatePayload","console","warn","error","get","has","set","add","off","delete","onAny","offAny","addFilter","fullMessage","Date","now","crypto","randomUUID","sendMessage","tabs","query","tab","catch","sendToBackground","emit","forEach","InteractionCollector","start","options","DOMAnalyzer","analyze","wordCount","imageCount","videoCount","linkCount","estimatedReadingTime","extractMainContent","categorizeContent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","NavigationObserver_1","InteractionCollector_1","DOMAnalyzer_1","ScrollTracker_1","AttentionMonitor_1","ContentScript","pageData","startTime","window","location","href","title","document","interactions","scrollData","maxDepth","totalDistance","pattern","attention","totalActiveTime","distractions","log","navigationObserver","interactionCollector","domAnalyzer","scrollTracker","attentionMonitor","initialize","getInstance","instance","setupObservers","setupEventListeners","performInitialAnalysis","addEventListener","cleanup","bind","observe","change","handleNavigationChange","clicks","keypresses","forms","media","interaction","handleInteraction","data","updateScrollData","state","handleAttentionChange","handleVisibilityChange","handleWindowFocus","setupPerformanceObserver","PerformanceObserver","list","entry","getEntries","entryType","handleLCP","entryTypes","domAnalysis","pageCategory","category","contentMetrics","readingTime","performance","loadTime","resourceCount","getEntriesByType","enrichedInteraction","pageContext","timeOnPage","isSignificantInteraction","isNavigation","isShortcut","Math","max","depth","abs","delta","isActive","duration","finalizePage","isVisible","visibilityState","hasFocus","pageSession","distractionCount","collectPerformanceMetrics","entries","navigation","loadEventEnd","domContentLoaded","domContentLoadedEventEnd","firstPaint","getFirstPaint","firstContentfulPaint","getFirstContentfulPaint","largestContentfulPaint","getLargestContentfulPaint","find","name","fcp","debug","disconnect","__SYMBIONT_CONTENT_SCRIPT_LOADED__"],"sourceRoot":""}