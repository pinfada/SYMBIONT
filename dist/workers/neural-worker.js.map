{"version":3,"file":"neural-worker.js","mappings":"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","sources":["webpack://symbiont/webpack/bootstrap","webpack://symbiont/./src/shared/utils/secureLogger.ts","webpack://symbiont/webpack/runtime/define property getters","webpack://symbiont/webpack/runtime/hasOwnProperty shorthand","webpack://symbiont/webpack/runtime/make namespace object","webpack://symbiont/./src/shared/utils/secureRandom.ts","webpack://symbiont/./src/workers/NeuralWorker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * Système de logging sécurisé\n * Remplace console.log avec protection des données sensibles et gestion des niveaux\n */\n\nexport enum LogLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  FATAL = 5\n}\n\ninterface LogConfig {\n  level: LogLevel;\n  enableConsole: boolean;\n  enableStorage: boolean;\n  maxStorageEntries: number;\n  sensitiveFields: string[];\n  productionMode: boolean;\n}\n\ninterface LogEntry {\n  timestamp: number;\n  level: LogLevel;\n  message: string;\n  data?: unknown;\n  context?: string | undefined;\n  sanitized: boolean;\n}\n\nexport class SecureLogger {\n  private static instance: SecureLogger;\n  private config: LogConfig;\n  private logEntries: LogEntry[] = [];\n  \n  // Patterns pour détecter les données sensibles\n  private static readonly SENSITIVE_PATTERNS = [\n    /password/i,\n    /token/i,\n    /key/i,\n    /secret/i,\n    /auth/i,\n    /credential/i,\n    /session/i,\n    /cookie/i,\n    /jwt/i,\n    /bearer/i,\n    /api[_-]?key/i,\n    /access[_-]?token/i,\n    /refresh[_-]?token/i,\n    /private[_-]?key/i,\n    /\\b[A-Za-z0-9+/]{32,}={0,2}\\b/, // Base64\n    /\\b[0-9a-f]{32,}\\b/i, // Hex strings\n    /\\b[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}[_-]?[0-9]{4}\\b/, // Credit card pattern\n    /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/ // Email\n  ];\n\n  private constructor(config: Partial<LogConfig> = {}) {\n    this.config = {\n      level: LogLevel.INFO,\n      enableConsole: !this.isProduction(),\n      enableStorage: true,\n      maxStorageEntries: 1000,\n      sensitiveFields: ['password', 'token', 'key', 'secret', 'auth'],\n      productionMode: this.isProduction(),\n      ...config\n    };\n  }\n\n  static getInstance(config?: Partial<LogConfig>): SecureLogger {\n    if (!SecureLogger.instance) {\n      SecureLogger.instance = new SecureLogger(config);\n    }\n    return SecureLogger.instance;\n  }\n\n  private isProduction(): boolean {\n    return process.env.NODE_ENV === 'production' || \n           (typeof chrome !== 'undefined' && typeof chrome.runtime?.getManifest === 'function');\n  }\n\n  /**\n   * Sanitise les données pour supprimer les informations sensibles\n   */\n  private sanitizeData(data: unknown): any {\n    if (typeof data === 'string') {\n      return this.sanitizeString(data);\n    }\n\n    if (typeof data === 'object' && data !== null) {\n      if (Array.isArray(data)) {\n        return data.map(item => this.sanitizeData(item));\n      }\n\n      const sanitized: unknown = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (this.isSensitiveField(key)) {\n          sanitized[key] = '[REDACTED]';\n        } else {\n          sanitized[key] = this.sanitizeData(value);\n        }\n      }\n      return sanitized;\n    }\n\n    return data;\n  }\n\n  private sanitizeString(str: string): string {\n    let sanitized = str;\n    \n    for (const pattern of SecureLogger.SENSITIVE_PATTERNS) {\n      sanitized = sanitized.replace(pattern, '[REDACTED]');\n    }\n    \n    return sanitized;\n  }\n\n  private isSensitiveField(fieldName: string): boolean {\n    return this.config.sensitiveFields.some(field => \n      fieldName.toLowerCase().includes(field.toLowerCase())\n    );\n  }\n\n  private formatMessage(level: LogLevel, message: string, data?: any, context?: string): string {\n    const timestamp = new Date().toISOString();\n    const levelName = LogLevel[level];\n    const contextStr = context ? ` [${context}]` : '';\n    const dataStr = data ? ` ${JSON.stringify(data, null, 2)}` : '';\n    \n    return `[${timestamp}] ${levelName}${contextStr}: ${message}${dataStr}`;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.config.level;\n  }\n\n  private log(level: LogLevel, message: string, data?: any, context?: string): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const sanitizedData = data ? this.sanitizeData(data) : undefined;\n    const sanitizedMessage = this.sanitizeString(message);\n\n    const logEntry: LogEntry = {\n      timestamp: Date.now(),\n      level,\n      message: sanitizedMessage,\n      data: sanitizedData,\n      context,\n      sanitized: true\n    };\n\n    // Stockage des logs\n    if (this.config.enableStorage) {\n      this.logEntries.push(logEntry);\n      \n      // Limiter le nombre d'entrées en mémoire\n      if (this.logEntries.length > this.config.maxStorageEntries) {\n        this.logEntries = this.logEntries.slice(-this.config.maxStorageEntries);\n      }\n    }\n\n    // Affichage console (seulement en développement par défaut)\n    if (this.config.enableConsole) {\n      const formattedMessage = this.formatMessage(level, sanitizedMessage, sanitizedData, context);\n      \n      switch (level) {\n        case LogLevel.TRACE:\n        case LogLevel.DEBUG:\n          console.debug(formattedMessage);\n          break;\n        case LogLevel.INFO:\n          console.info(formattedMessage);\n          break;\n        case LogLevel.WARN:\n          console.warn(formattedMessage);\n          break;\n        case LogLevel.ERROR:\n        case LogLevel.FATAL:\n          console.error(formattedMessage);\n          break;\n      }\n    }\n  }\n\n  // Méthodes publiques de logging\n  trace(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.TRACE, message, data, context);\n  }\n\n  debug(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.DEBUG, message, data, context);\n  }\n\n  info(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.INFO, message, data, context);\n  }\n\n  warn(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.WARN, message, data, context);\n  }\n\n  error(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.ERROR, message, data, context);\n  }\n\n  fatal(message: string, data?: any, context?: string): void {\n    this.log(LogLevel.FATAL, message, data, context);\n  }\n\n  // Méthodes utilitaires\n  setLevel(level: LogLevel): void {\n    this.config.level = level;\n  }\n\n  enableConsole(enable: boolean): void {\n    this.config.enableConsole = enable;\n  }\n\n  getLogs(level?: LogLevel): LogEntry[] {\n    if (level !== undefined) {\n      return this.logEntries.filter(entry => entry.level >= level);\n    }\n    return [...this.logEntries];\n  }\n\n  clearLogs(): void {\n    this.logEntries = [];\n  }\n\n  exportLogs(): string {\n    return JSON.stringify(this.logEntries, null, 2);\n  }\n}\n\n// Instance globale pour un usage facile\nexport const logger = SecureLogger.getInstance();\n\n// Aliases pour migration facile depuis console.log\nexport const secureLog = logger.info.bind(logger);\nexport const secureWarn = logger.warn.bind(logger);\nexport const secureError = logger.error.bind(logger);\nexport const secureDebug = logger.debug.bind(logger);","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { logger } from '@shared/utils/secureLogger';\n/**\n * Utilitaires de génération de nombres aléatoires sécurisés\n * Remplace Math.random() par crypto.getRandomValues() pour la sécurité cryptographique\n */\n\nexport class SecureRandom {\n  private static readonly MAX_UINT32 = 0xFFFFFFFF;\n\n  /**\n   * Génère un nombre aléatoire sécurisé entre 0 et 1 (équivalent Math.random())\n   */\n  static random(): number {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint32Array(1);\n      crypto.getRandomValues(array);\n      return array[0] / (this.MAX_UINT32 + 1);\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, fallback non-sécurisé utilisé');\n    // Utilisation temporaire pour développement uniquement\n    const insecureValue = globalThis.Math?.random?.() || 0.5;\n    return insecureValue;\n  }\n\n  /**\n   * Génère un entier aléatoire sécurisé dans une plage\n   */\n  static randomInt(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    const range = max - min;\n    return Math.floor(this.random() * range) + min;\n  }\n\n  /**\n   * Génère un nombre flottant aléatoire sécurisé dans une plage\n   */\n  static randomFloat(min: number, max: number): number {\n    if (min >= max) {\n      throw new Error('SecureRandom: min doit être inférieur à max');\n    }\n    \n    return this.random() * (max - min) + min;\n  }\n\n  /**\n   * Génère des bytes aléatoires sécurisés\n   */\n  static randomBytes(length: number): Uint8Array {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      return array;\n    }\n    \n    // Fallback pour les environnements sans crypto (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, génération fallback non-sécurisée');\n    const array = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      array[i] = Math.floor(insecureValue * 256);\n    }\n    return array;\n  }\n\n  /**\n   * Sélectionne un élément aléatoire d'un tableau\n   */\n  static choice<T>(array: T[]): T {\n    if (array.length === 0) {\n      throw new Error('SecureRandom: Le tableau ne peut pas être vide');\n    }\n    \n    const index = this.randomInt(0, array.length);\n    return array[index];\n  }\n\n  /**\n   * Génère un UUID v4 sécurisé\n   */\n  static uuid(): string {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const bytes = new Uint8Array(16);\n      crypto.getRandomValues(bytes);\n      \n      // Version 4 UUID format\n      bytes[6] = (bytes[6] & 0x0f) | 0x40; // Version 4\n      bytes[8] = (bytes[8] & 0x3f) | 0x80; // Variant 10\n\n      const hex = Array.from(bytes, b => b.toString(16).padStart(2, '0')).join('');\n      return [\n        hex.slice(0, 8),\n        hex.slice(8, 12),\n        hex.slice(12, 16),\n        hex.slice(16, 20),\n        hex.slice(20, 32)\n      ].join('-');\n    }\n    \n    // Fallback UUID generation (NON RECOMMANDÉ EN PRODUCTION)\n    logger.warn('SecureRandom: crypto.getRandomValues non disponible, UUID fallback non-sécurisé');\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const insecureValue = globalThis.Math?.random?.() || 0.5;\n      const r = insecureValue * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Génère une chaîne aléatoire sécurisée\n   */\n  static randomString(length: number, charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'): string {\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += charset.charAt(this.randomInt(0, charset.length));\n    }\n    return result;\n  }\n\n  /**\n   * Génère un ID court sécurisé pour les identifiants\n   */\n  static randomId(prefix = '', length = 8): string {\n    const id = this.randomString(length, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    return prefix ? `${prefix}_${id}` : id;\n  }\n}\n\n// Alias pour une migration facile depuis Math.random()\nexport const secureRandom = SecureRandom.random;\nexport const secureRandomInt = SecureRandom.randomInt;\nexport const secureRandomFloat = SecureRandom.randomFloat;","// Web Worker pour les calculs neuraux intensifs\r\n// Évite de bloquer le thread principal du navigateur\r\n\r\nimport { NeuralNode, NeuralConnection } from '../core/interfaces/INeuralMesh';\r\nimport { SecureRandom } from '@shared/utils/secureRandom';\n\r\nexport interface WorkerMessage {\r\n  type: 'NEURAL_PROPAGATE' | 'NEURAL_MUTATE' | 'NEURAL_ACTIVITY' | 'NEURAL_INIT';\r\n  id: string;\r\n  payload: unknown;\r\n}\r\n\r\nexport interface WorkerResponse {\r\n  type: 'NEURAL_RESULT' | 'NEURAL_ERROR';\r\n  id: string;\r\n  payload: unknown;\r\n  processingTime: number;\r\n}\r\n\r\nexport interface NeuralNetworkState {\r\n  nodes: Map<string, NeuralNode>;\r\n  connections: Map<string, NeuralConnection[]>;\r\n  activations: Map<string, number>;\r\n}\r\n\r\nclass NeuralWorkerEngine {\r\n  private networks: Map<string, NeuralNetworkState> = new Map();\r\n\r\n  /**\r\n   * Initialise un réseau neuronal dans le worker\r\n   */\r\n  initializeNetwork(networkId: string, nodes: NeuralNode[], connections: NeuralConnection[]): void {\r\n    const nodeMap = new Map<string, NeuralNode>();\r\n    const connectionMap = new Map<string, NeuralConnection[]>();\r\n    const activationMap = new Map<string, number>();\r\n\r\n    // Setup nodes\r\n    nodes.forEach(node => {\r\n      nodeMap.set(node.id, { ...node });\r\n      activationMap.set(node.id, 0);\r\n    });\r\n\r\n    // Setup connections\r\n    connections.forEach(conn => {\r\n      if (!connectionMap.has(conn.from)) {\r\n        connectionMap.set(conn.from, []);\r\n      }\r\n      connectionMap.get(conn.from)!.push({ ...conn });\r\n    });\r\n\r\n    this.networks.set(networkId, {\r\n      nodes: nodeMap,\r\n      connections: connectionMap,\r\n      activations: activationMap\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Propage les activations dans le réseau (opération intensive)\r\n   */\r\n  propagateNetwork(networkId: string, inputs: Record<string, number>): Record<string, number> {\r\n    const network = this.networks.get(networkId);\r\n    if (!network) {\r\n      throw new Error(`Network ${networkId} not found`);\r\n    }\r\n\r\n    // Set input activations\r\n    Object.entries(inputs).forEach(([nodeId, value]) => {\r\n      if (network.nodes.has(nodeId)) {\r\n        network.activations.set(nodeId, value);\r\n      }\r\n    });\r\n\r\n    // Reset non-input activations\r\n    for (const [nodeId, node] of network.nodes) {\r\n      if (node.type !== 'input') {\r\n        network.activations.set(nodeId, node.bias);\r\n      }\r\n    }\r\n\r\n    // Propagate through connections\r\n    for (const [fromId, connections] of network.connections) {\r\n      const fromActivation = network.activations.get(fromId) || 0;\r\n      \r\n      for (const connection of connections) {\r\n        if (!connection.active) continue;\r\n        \r\n        const currentActivation = network.activations.get(connection.to) || 0;\r\n        const newActivation = currentActivation + (fromActivation * connection.weight);\r\n        network.activations.set(connection.to, this.sigmoid(newActivation));\r\n      }\r\n    }\r\n\r\n    // Return all activations\r\n    return Object.fromEntries(network.activations);\r\n  }\r\n\r\n  /**\r\n   * Applique des mutations au réseau\r\n   */\r\n  mutateNetwork(networkId: string, rate: number): boolean {\r\n    const network = this.networks.get(networkId);\r\n    if (!network) {\r\n      throw new Error(`Network ${networkId} not found`);\r\n    }\r\n\r\n    let mutationApplied = false;\r\n\r\n    // Mutate connection weights\r\n    for (const connections of network.connections.values()) {\r\n      for (const connection of connections) {\r\n        if (SecureRandom.random() < rate) {\r\n          connection.weight += (SecureRandom.random() - 0.5) * 0.2;\r\n          connection.weight = Math.max(-2, Math.min(2, connection.weight));\r\n          mutationApplied = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Mutate node biases\r\n    for (const node of network.nodes.values()) {\r\n      if (SecureRandom.random() < rate) {\r\n        node.bias += (SecureRandom.random() - 0.5) * 0.1;\r\n        node.bias = Math.max(-1, Math.min(1, node.bias));\r\n        mutationApplied = true;\r\n      }\r\n    }\r\n\r\n    return mutationApplied;\r\n  }\r\n\r\n  /**\r\n   * Calcule les métriques d'activité neurale\r\n   */\r\n  calculateNeuralActivity(networkId: string): {\r\n    activity: number;\r\n    connectionStrength: number;\r\n    nodeCount: number;\r\n    connectionCount: number;\r\n  } {\r\n    const network = this.networks.get(networkId);\r\n    if (!network) {\r\n      throw new Error(`Network ${networkId} not found`);\r\n    }\r\n\r\n    // Neural activity\r\n    let totalActivity = 0;\r\n    let nodeCount = 0;\r\n    for (const activation of network.activations.values()) {\r\n      totalActivity += Math.abs(activation);\r\n      nodeCount++;\r\n    }\r\n    const activity = nodeCount > 0 ? totalActivity / nodeCount : 0;\r\n\r\n    // Connection strength\r\n    let totalWeight = 0;\r\n    let connectionCount = 0;\r\n    for (const connections of network.connections.values()) {\r\n      for (const connection of connections) {\r\n        if (connection.active) {\r\n          totalWeight += Math.abs(connection.weight);\r\n          connectionCount++;\r\n        }\r\n      }\r\n    }\r\n    const connectionStrength = connectionCount > 0 ? totalWeight / connectionCount : 0;\r\n\r\n    return {\r\n      activity,\r\n      connectionStrength,\r\n      nodeCount,\r\n      connectionCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fonction d'activation sigmoïde optimisée\r\n   */\r\n  private sigmoid(x: number): number {\r\n    // Optimisation : clamp extreme values pour éviter overflow\r\n    if (x > 10) return 1;\r\n    if (x < -10) return 0;\r\n    return 1 / (1 + Math.exp(-x));\r\n  }\r\n\r\n  /**\r\n   * Nettoie un réseau de la mémoire\r\n   */\r\n  cleanupNetwork(networkId: string): boolean {\r\n    return this.networks.delete(networkId);\r\n  }\r\n\r\n  /**\r\n   * Retourne les stats du worker\r\n   */\r\n  getWorkerStats(): {\r\n    networkCount: number;\r\n    memoryUsage: number;\r\n  } {\r\n    let totalNodes = 0;\r\n    let totalConnections = 0;\r\n\r\n    this.networks.forEach(network => {\r\n      totalNodes += network.nodes.size;\r\n      totalConnections += Array.from(network.connections.values())\r\n        .reduce((sum, conns) => sum + conns.length, 0);\r\n    });\r\n\r\n    return {\r\n      networkCount: this.networks.size,\r\n      memoryUsage: (totalNodes + totalConnections) * 64 // bytes estimation\r\n    };\r\n  }\r\n}\r\n\r\n// Instance du moteur neural pour ce worker\r\nconst neuralEngine = new NeuralWorkerEngine();\r\n\r\n// Gestionnaire de messages du worker\r\nself.onmessage = (event: MessageEvent<WorkerMessage>) => {\r\n  const startTime = performance.now();\r\n  const { type, id, payload } = event.data;\r\n  \r\n  try {\r\n    let result: unknown;\r\n\r\n    switch (type) {\r\n      case 'NEURAL_INIT':\r\n        neuralEngine.initializeNetwork(\r\n          payload.networkId,\r\n          payload.nodes,\r\n          payload.connections\r\n        );\r\n        result = { success: true };\r\n        break;\r\n\r\n      case 'NEURAL_PROPAGATE':\r\n        result = neuralEngine.propagateNetwork(\r\n          payload.networkId,\r\n          payload.inputs\r\n        );\r\n        break;\r\n\r\n      case 'NEURAL_MUTATE':\r\n        result = neuralEngine.mutateNetwork(\r\n          payload.networkId,\r\n          payload.rate\r\n        );\r\n        break;\r\n\r\n      case 'NEURAL_ACTIVITY':\r\n        result = neuralEngine.calculateNeuralActivity(payload.networkId);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Unknown message type: ${type}`);\r\n    }\r\n\r\n    const processingTime = performance.now() - startTime;\r\n\r\n    const response: WorkerResponse = {\r\n      type: 'NEURAL_RESULT',\r\n      id,\r\n      payload: result,\r\n      processingTime\r\n    };\r\n\r\n    self.postMessage(response);\r\n\r\n  } catch (_error) {\r\n    const processingTime = performance.now() - startTime;\r\n    \r\n    const errorResponse: WorkerResponse = {\r\n      type: 'NEURAL_ERROR',\r\n      id,\r\n      payload: {\r\n        message: error instanceof Error ? error.message : String(error),\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      },\r\n      processingTime\r\n    };\r\n\r\n    self.postMessage(errorResponse);\r\n  }\r\n};\r\n\r\n// Export pour TypeScript (ne sera pas utilisé dans le contexte worker)\r\nexport default neuralEngine; "],"names":["LogLevel","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","SecureLogger","config","logEntries","this","level","INFO","enableConsole","isProduction","enableStorage","maxStorageEntries","sensitiveFields","productionMode","getInstance","instance","sanitizeData","data","sanitizeString","Array","isArray","map","item","sanitized","entries","isSensitiveField","str","pattern","SENSITIVE_PATTERNS","replace","fieldName","some","field","toLowerCase","includes","formatMessage","message","context","Date","toISOString","JSON","stringify","shouldLog","log","sanitizedData","undefined","sanitizedMessage","logEntry","timestamp","now","push","length","slice","formattedMessage","TRACE","DEBUG","console","debug","info","WARN","warn","ERROR","FATAL","error","trace","fatal","setLevel","enable","getLogs","filter","entry","clearLogs","exportLogs","logger","bind","SecureRandom","random","crypto","getRandomValues","array","Uint32Array","MAX_UINT32","globalThis","Math","randomInt","min","max","Error","range","floor","randomFloat","randomBytes","Uint8Array","i","insecureValue","choice","uuid","bytes","hex","from","b","toString","padStart","join","c","r","randomString","charset","result","charAt","randomId","prefix","id","neuralEngine","networks","Map","initializeNetwork","networkId","nodes","connections","nodeMap","connectionMap","activationMap","forEach","node","set","conn","has","activations","propagateNetwork","inputs","network","nodeId","type","bias","fromId","fromActivation","connection","active","newActivation","to","weight","sigmoid","fromEntries","mutateNetwork","rate","mutationApplied","values","calculateNeuralActivity","totalActivity","nodeCount","activation","abs","activity","totalWeight","connectionCount","connectionStrength","x","exp","cleanupNetwork","delete","getWorkerStats","totalNodes","totalConnections","size","reduce","sum","conns","networkCount","memoryUsage","self","onmessage","event","startTime","performance","payload","success","response","processingTime","postMessage","_error","errorResponse","String","stack"],"sourceRoot":""}