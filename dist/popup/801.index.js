"use strict";(self.webpackChunksymbiont=self.webpackChunksymbiont||[]).push([[801],{801:(t,e,r)=>{r.d(e,{SymbiontEncryption:()=>n});class n{static async deriveKey(t){const e=[navigator.userAgent,navigator.language,screen.width,screen.height,(new Date).getTimezoneOffset()].join("|"),r=new TextEncoder,n=await crypto.subtle.importKey("raw",r.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:1e5,hash:"SHA-256"},n,{name:this.ALGORITHM,length:this.KEY_LENGTH},!1,["encrypt","decrypt"])}static async encrypt(t){try{const e=(new TextEncoder).encode(t),r=crypto.getRandomValues(new Uint8Array(32)),n=crypto.getRandomValues(new Uint8Array(this.IV_LENGTH)),a=await this.deriveKey(r),i=await crypto.subtle.encrypt({name:this.ALGORITHM,iv:n,tagLength:this.TAG_LENGTH},a,e),s=new Uint8Array(r.length+n.length+i.byteLength);return s.set(r,0),s.set(n,r.length),s.set(new Uint8Array(i),r.length+n.length),btoa(String.fromCharCode(...s))}catch(t){throw console.error("Encryption failed:",t),new Error("Failed to encrypt data")}}static async decrypt(t){try{const e=new Uint8Array(atob(t).split("").map((t=>t.charCodeAt(0)))),r=e.slice(0,32),n=e.slice(32,32+this.IV_LENGTH),a=e.slice(32+this.IV_LENGTH),i=await this.deriveKey(r),s=await crypto.subtle.decrypt({name:this.ALGORITHM,iv:n,tagLength:this.TAG_LENGTH},i,a);return(new TextDecoder).decode(s)}catch(t){throw console.error("Decryption failed:",t),new Error("Failed to decrypt data - data may be corrupted")}}static async encryptObject(t){const e=JSON.stringify(t);return this.encrypt(e)}static async decryptObject(t){const e=await this.decrypt(t);return JSON.parse(e)}static async hash(t){const e=(new TextEncoder).encode(t),r=await crypto.subtle.digest("SHA-256",e),n=new Uint8Array(r);return btoa(String.fromCharCode(...n))}static generateSessionToken(){const t=new Uint8Array(32);return crypto.getRandomValues(t),btoa(String.fromCharCode(...t))}static async validateIntegrity(t,e){try{return await this.hash(t)===e}catch{return!1}}}n.ALGORITHM="AES-GCM",n.KEY_LENGTH=256,n.IV_LENGTH=12,n.TAG_LENGTH=128}}]);