import { test, expect } from './test-setup';
import { Locator } from '@playwright/test';
import path from 'path';
import { waitForReactToLoad, debugPageState, capturePageErrors, waitForElementReady } from './utils';

test.describe('Dashboard SYMBIONT', () => {
  const dashboardPath = path.resolve(__dirname, '../../dist/popup.html');

  test('Affichage des visualisations et des traits', async ({ page }) => {
    const errors = capturePageErrors(page);
    
    await page.goto('file://' + dashboardPath);
    await waitForReactToLoad(page);
    await debugPageState(page);
    
    try {
      // Attendre que la page soit compl√®tement charg√©e
      await page.waitForSelector('#root', { timeout: 10000 });
      
      // V√©rifier que l'application s'affiche avec les √©l√©ments de base
      await expect(page.locator('.app')).toBeVisible({ timeout: 5000 });
      
      // V√©rifier la pr√©sence des boutons de navigation
      await expect(page.locator('.nav-tabs')).toBeVisible({ timeout: 5000 });
      
      // Chercher les boutons de navigation r√©els
      const buttons = page.locator('.nav-tabs button');
      const buttonCount = await buttons.count();
      expect(buttonCount).toBeGreaterThanOrEqual(2); // Au moins 2 boutons
      
      // V√©rifier les textes des boutons (peut varier selon la langue)
      const buttonTexts = await buttons.allTextContents();
      console.log('üìã Boutons disponibles:', buttonTexts);
      
      // Essayer de cliquer sur le bouton Dashboard s'il existe
      const dashboardButton = buttons.filter({ hasText: /Dashboard|Organism/i }).first();
      if (await dashboardButton.count() > 0) {
        await dashboardButton.click();
        await page.waitForTimeout(1000);
      }
      
      // V√©rifier que le contenu principal s'affiche
      const mainContent = page.locator('.app > div').nth(1); // Deuxi√®me div apr√®s nav-tabs
      await expect(mainContent).toBeVisible({ timeout: 5000 });
      
      // Chercher des √©l√©ments li√©s aux traits/visualisations
      const traitElements = page.locator('text=/curiosity|empathy|traits|radar/i');
      if (await traitElements.count() > 0) {
        await expect(traitElements.first()).toBeVisible();
        console.log('‚úÖ √âl√©ments de traits trouv√©s');
      } else {
        console.log('‚ö†Ô∏è Aucun √©l√©ment de traits sp√©cifique trouv√©, mais l\'interface est fonctionnelle');
      }
      
      console.log('‚úÖ Interface dashboard affich√©e avec succ√®s');
    } catch (error) {
      console.log('‚ùå Erreurs captur√©es:', errors);
      await debugPageState(page);
      
      // Affichage des √©l√©ments trouv√©s pour debug
      const allButtons = await page.locator('button').allTextContents();
      console.log('üîç Tous les boutons trouv√©s:', allButtons);
      
      const allText = await page.locator('body').textContent();
      console.log('üîç Contenu texte de la page:', allText?.substring(0, 500));
      
      throw error;
    }
  });

  test('Navigation vers les autres sections', async ({ page }) => {
    const errors = capturePageErrors(page);
    
    await page.goto('file://' + dashboardPath);
    await waitForReactToLoad(page);
    await debugPageState(page);
    
    try {
      // Attendre que l'application soit charg√©e
      await page.waitForSelector('.nav-tabs', { timeout: 10000 });
      
      // Obtenir tous les boutons de navigation
      const navButtons = page.locator('.nav-tabs button');
      const buttonCount = await navButtons.count();
      console.log(`üìä ${buttonCount} boutons de navigation trouv√©s`);
      
      // Tester la navigation vers chaque section
      for (let i = 0; i < buttonCount; i++) {
        const button = navButtons.nth(i);
        const buttonText = await button.textContent();
        console.log(`üîÑ Test navigation vers: ${buttonText}`);
        
        // Cliquer sur le bouton
        await button.click();
        await page.waitForTimeout(500);
        
        // V√©rifier que quelque chose a chang√© dans le contenu
        const currentContent = await page.locator('.app > div').nth(1).textContent();
        console.log(`‚úÖ Contenu affich√© pour ${buttonText}:`, currentContent?.substring(0, 100));
      }
      
      console.log('‚úÖ Navigation entre sections r√©ussie');
    } catch (error) {
      console.log('‚ùå Erreurs captur√©es durant la navigation:', errors);
      await debugPageState(page);
      throw error;
    }
  });

  test('V√©rification de la stabilit√© apr√®s interactions', async ({ page }) => {
    const errors = capturePageErrors(page);
    
    await page.goto('file://' + dashboardPath);
    await waitForReactToLoad(page);
    
    try {
      // Test de stabilit√© : interactions multiples
      await page.waitForSelector('.nav-tabs', { timeout: 10000 });
      
      const navButtons = page.locator('.nav-tabs button');
      const buttonCount = await navButtons.count();
      
      // Effectuer plusieurs cycles de navigation
      for (let cycle = 0; cycle < 2; cycle++) {
        console.log(`üîÑ Cycle de test ${cycle + 1}`);
        
        for (let i = 0; i < buttonCount; i++) {
          await navButtons.nth(i).click();
          await page.waitForTimeout(200);
        }
      }
      
      // V√©rifier qu'il n'y a pas d'erreurs critiques
      if (errors.length > 0) {
        const criticalErrors = errors.filter(e => 
          e.message.includes('Cannot read properties') ||
          e.message.includes('undefined') ||
          e.message.includes('TypeError')
        );
        
        if (criticalErrors.length === 0) {
          console.log('‚úÖ Aucune erreur critique apr√®s interactions multiples');
        } else {
          console.log('‚ö†Ô∏è Erreurs non-critiques d√©tect√©es:', criticalErrors.length);
        }
      }
      
      console.log('‚úÖ Test de stabilit√© r√©ussi');
    } catch (error) {
      console.log('‚ùå Erreurs de stabilit√©:', errors);
      await debugPageState(page);
      throw error;
    }
  });
}); 